{"version":3,"sources":["meteor://ðŸ’»app/packages/babrahams_editable-text-wysiwyg/lib/bootstrap_wysiwyg.js","meteor://ðŸ’»app/packages/babrahams_editable-text-wysiwyg/lib/wysiwyg.js"],"names":[],"mappingstfile":"/packages/babrahams_editable-text-wysiwyg.js","sourcesContent":["///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/bootstrap-wysiwyg/lib/jquery.hotkeys.js                                                                  //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n/*                                                                                                                   // 1\n * jQuery Hotkeys Plugin                                                                                             // 2\n * Copyright 2010, John Resig                                                                                        // 3\n * Dual licensed under the MIT or GPL Version 2 licenses.                                                            // 4\n *                                                                                                                   // 5\n * Based upon the plugin by Tzury Bar Yochay:                                                                        // 6\n * http://github.com/tzuryby/hotkeys                                                                                 // 7\n *                                                                                                                   // 8\n * Original idea by:                                                                                                 // 9\n * Binny V A, http://www.openjs.com/scripts/events/keyboard_shortcuts/                                               // 10\n*/                                                                                                                   // 11\n                                                                                                                     // 12\n(function(jQuery){                                                                                                   // 13\n                                                                                                                        // 14\n    jQuery.hotkeys = {                                                                                                  // 15\n        version: \"0.8\",                                                                                                    // 16\n                                                                                                                     // 17\n        specialKeys: {                                                                                                     // 18\n            8: \"backspace\", 9: \"tab\", 13: \"return\", 16: \"shift\", 17: \"ctrl\", 18: \"alt\", 19: \"pause\",                          // 19\n            20: \"capslock\", 27: \"esc\", 32: \"space\", 33: \"pageup\", 34: \"pagedown\", 35: \"end\", 36: \"home\",                      // 20\n            37: \"left\", 38: \"up\", 39: \"right\", 40: \"down\", 45: \"insert\", 46: \"del\",                                           // 21\n            96: \"0\", 97: \"1\", 98: \"2\", 99: \"3\", 100: \"4\", 101: \"5\", 102: \"6\", 103: \"7\",                                       // 22\n            104: \"8\", 105: \"9\", 106: \"*\", 107: \"+\", 109: \"-\", 110: \".\", 111 : \"/\",                                            // 23\n            112: \"f1\", 113: \"f2\", 114: \"f3\", 115: \"f4\", 116: \"f5\", 117: \"f6\", 118: \"f7\", 119: \"f8\",                           // 24\n            120: \"f9\", 121: \"f10\", 122: \"f11\", 123: \"f12\", 144: \"numlock\", 145: \"scroll\", 191: \"/\", 224: \"meta\"               // 25\n        },                                                                                                                 // 26\n                                                                                                                        // 27\n        shiftNums: {                                                                                                       // 28\n            \"`\": \"~\", \"1\": \"!\", \"2\": \"@\", \"3\": \"#\", \"4\": \"$\", \"5\": \"%\", \"6\": \"^\", \"7\": \"&\",                                   // 29\n            \"8\": \"*\", \"9\": \"(\", \"0\": \")\", \"-\": \"_\", \"=\": \"+\", \";\": \": \", \"'\": \"\\\"\", \",\": \"<\",                                 // 30\n            \".\": \">\",  \"/\": \"?\",  \"\\\\\": \"|\"                                                                                   // 31\n        }                                                                                                                  // 32\n    };                                                                                                                  // 33\n                                                                                                                     // 34\n    function keyHandler( handleObj ) {                                                                                  // 35\n        // Only care when a possible input has been specified                                                              // 36\n        if ( typeof handleObj.data !== \"string\" ) {                                                                        // 37\n            return;                                                                                                           // 38\n        }                                                                                                                  // 39\n                                                                                                                           // 40\n        var origHandler = handleObj.handler,                                                                               // 41\n            keys = handleObj.data.toLowerCase().split(\" \"),                                                                   // 42\n            textAcceptingInputTypes = [\"text\", \"password\", \"number\", \"email\", \"url\", \"range\", \"date\", \"month\", \"week\", \"time\", \"datetime\", \"datetime-local\", \"search\", \"color\"];\n                                                                                                                        // 44\n        handleObj.handler = function( event ) {                                                                            // 45\n            // Don't fire in text-accepting inputs that we didn't directly bind to                                            // 46\n            if ( this !== event.target && (/textarea|select/i.test( event.target.nodeName ) ||                                // 47\n                jQuery.inArray(event.target.type, textAcceptingInputTypes) > -1 ) ) {                                            // 48\n                return;                                                                                                          // 49\n            }                                                                                                                 // 50\n                                                                                                                              // 51\n            // Keypress represents characters, not special keys                                                               // 52\n            var special = event.type !== \"keypress\" && jQuery.hotkeys.specialKeys[ event.which ],                             // 53\n                character = String.fromCharCode( event.which ).toLowerCase(),                                                    // 54\n                key, modif = \"\", possible = {};                                                                                  // 55\n                                                                                                                     // 56\n            // check combinations (alt|ctrl|shift+anything)                                                                   // 57\n            if ( event.altKey && special !== \"alt\" ) {                                                                        // 58\n                modif += \"alt+\";                                                                                                 // 59\n            }                                                                                                                 // 60\n                                                                                                                     // 61\n            if ( event.ctrlKey && special !== \"ctrl\" ) {                                                                      // 62\n                modif += \"ctrl+\";                                                                                                // 63\n            }                                                                                                                 // 64\n                                                                                                                              // 65\n            // TODO: Need to make sure this works consistently across platforms                                               // 66\n            if ( event.metaKey && !event.ctrlKey && special !== \"meta\" ) {                                                    // 67\n                modif += \"meta+\";                                                                                                // 68\n            }                                                                                                                 // 69\n                                                                                                                     // 70\n            if ( event.shiftKey && special !== \"shift\" ) {                                                                    // 71\n                modif += \"shift+\";                                                                                               // 72\n            }                                                                                                                 // 73\n                                                                                                                     // 74\n            if ( special ) {                                                                                                  // 75\n                possible[ modif + special ] = true;                                                                              // 76\n                                                                                                                     // 77\n            } else {                                                                                                          // 78\n                possible[ modif + character ] = true;                                                                            // 79\n                possible[ modif + jQuery.hotkeys.shiftNums[ character ] ] = true;                                                // 80\n                                                                                                                     // 81\n                // \"$\" can be triggered as \"Shift+4\" or \"Shift+$\" or just \"$\"                                                    // 82\n                if ( modif === \"shift+\" ) {                                                                                      // 83\n                    possible[ jQuery.hotkeys.shiftNums[ character ] ] = true;                                                       // 84\n                }                                                                                                                // 85\n            }                                                                                                                 // 86\n                                                                                                                     // 87\n            for ( var i = 0, l = keys.length; i < l; i++ ) {                                                                  // 88\n                if ( possible[ keys[i] ] ) {                                                                                     // 89\n                    return origHandler.apply( this, arguments );                                                                    // 90\n                }                                                                                                                // 91\n            }                                                                                                                 // 92\n        };                                                                                                                 // 93\n    }                                                                                                                   // 94\n                                                                                                                     // 95\n    jQuery.each([ \"keydown\", \"keyup\", \"keypress\" ], function() {                                                        // 96\n        jQuery.event.special[ this ] = { add: keyHandler };                                                                // 97\n    });                                                                                                                 // 98\n                                                                                                                     // 99\n})( jQuery );                                                                                                        // 100\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n\n\n\n\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/bootstrap-wysiwyg/lib/bootstrap-wysiwyg.js                                                               //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n/* http://github.com/mindmup/bootstrap-wysiwyg */                                                                    // 1\n/*global jQuery, $, FileReader*/                                                                                     // 2\n/*jslint browser:true*/                                                                                              // 3\n(function ($) {                                                                                                      // 4\n    'use strict';                                                                                                       // 5\n    var readFileInto = function (fileInfo,type) {                                                                     // 6\n        var loader = $.Deferred(),                                                                                         // 7\n            fReader = new FileReader();                                                                                       // 8\n        fReader.onload = function (e) {                                                                                    // 9\n            loader.resolve(e.target.result);                                                                                  // 10\n        };                                                                                                                 // 11\n        fReader.onerror = loader.reject;                                                                                   // 12\n        fReader.onprogress = loader.notify;\n        switch (type) {\n             case 'dataURL' :                                                                           // 13\n                fReader.readAsDataURL(fileInfo);\n                break;\n            case 'text' :\n                fReader.readAsText(fileInfo);  \n                break;\n        }\n        return loader.promise();                                                                                           // 15\n    };                                                                                                                  // 16\n    $.fn.cleanHtml = function () {                                                                                      // 17\n        var html = $(this).html();                                                                                         // 18\n        return html && html.replace(/(<br>|\\s|<div><br><\\/div>|&nbsp;)*$/, '');                                            // 19\n    };                                                                                                                  // 20\n    $.fn.wysiwyg = function (userOptions) {                                                                            // 21\n        var editor = this,                                                                                                 // 22\n            selectedRange,                                                                                                    // 23\n            options,                                                                                                          // 24\n            updateToolbar = function () {                                                                                     // 25\n                if (options.activeToolbarClass) {                                                                                // 26\n                    $(options.toolbarSelector).find('.btn[data-' + options.commandRole + ']').each(function () {                    // 27\n                        var command = $(this).data(options.commandRole);                                                               // 28\n                        if (document.queryCommandEnabled(command) && document.queryCommandState(command)) {                                                                     // 29\n                            $(this).addClass(options.activeToolbarClass);                                                                 // 30\n                        } else {                                                                                                       // 31\n                            $(this).removeClass(options.activeToolbarClass);                                                              // 32\n                        }                                                                                                              // 33\n                    });                                                                                                             // 34\n                }                                                                                                                // 35\n            },                                                                                                                // 36\n            execCommand = function (commandWithArgs, valueArg) {                                                              // 37\n                var commandArr = commandWithArgs.split(' '),                                                                     // 38\n                    command = commandArr.shift(),                                                                                   // 39\n                    args = commandArr.join(' ') + (valueArg || '');                                                                 // 40\n                document.execCommand(command, 0, args);                                                                          // 41\n                updateToolbar();                                                                                                 // 42\n            },                                                                                                                // 43\n            bindHotkeys = function (hotKeys) {                                                                                // 44\n                $.each(hotKeys, function (hotkey, command) {                                                                     // 45\n                    editor.keydown(hotkey, function (e) {                                                                           // 46\n                        if (editor.attr('contenteditable') && editor.is(':visible')) {                                                 // 47\n                            e.preventDefault();                                                                                           // 48\n                            e.stopPropagation();                                                                                          // 49\n                            execCommand(command);                                                                                         // 50\n                        }                                                                                                              // 51\n                    }).keyup(hotkey, function (e) {                                                                                 // 52\n                        if (editor.attr('contenteditable') && editor.is(':visible')) {                                                 // 53\n                            e.preventDefault();                                                                                           // 54\n                            e.stopPropagation();                                                                                          // 55\n                        }                                                                                                              // 56\n                    });                                                                                                             // 57\n                });                                                                                                              // 58\n            },                                                                                                                // 59\n            getCurrentRange = function () {                                                                                   // 60\n                var sel = window.getSelection();                                                                                 // 61\n                if (sel.getRangeAt && sel.rangeCount) {                                                                          // 62\n                    return sel.getRangeAt(0);                                                                                       // 63\n                }                                                                                                                // 64\n            },                                                                                                                // 65\n            saveSelection = function () {                                                                                     // 66\n                selectedRange = getCurrentRange();                                                                               // 67\n            },                                                                                                                // 68\n            restoreSelection = function () {                                                                                  // 69\n                var selection = window.getSelection();                                                                           // 70\n                if (selectedRange) {                                                                                             // 71\n                    try {                                                                                                           // 72\n                        selection.removeAllRanges();                                                                                   // 73\n                    } catch (ex) {                                                                                                  // 74\n                        document.body.createTextRange().select();                                                                      // 75\n                        document.selection.empty();                                                                                    // 76\n                    }                                                                                                               // 77\n                                                                                                                     // 78\n                    selection.addRange(selectedRange);                                                                              // 79\n                }                                                                                                                // 80\n            },                                                                                                                // 81\n            insertFiles = function (files) {                                                                                  // 82\n                editor.focus();                                                                                                  // 83\n                $.each(files, function (idx, fileInfo) {\n                    if (EditableText.maximumImageSize && /^image\\//.test(fileInfo.type)) {   \n                        if (fileInfo.size > EditableText.maximumImageSize) {\n                          options.fileUploadError(\"File too large\", \"This file is: \" + Math.floor(fileInfo.size/1000) + \"k. The maximum file size allowed is 200k.\");\n                          return;\n                        }                                                                      \n                        $.when(readFileInto(fileInfo,'dataURL')).done(function (dataUrl) {                                                // 86\n                            execCommand('insertimage', dataUrl);                                                                          // 87\n                        }).fail(function (e) {                                                                                         // 88\n                            options.fileUploadError(\"file-reader\", e);                                                                    // 89\n                        }); \n                        return;  \n                    }\n                    var fileName = fileInfo && fileInfo.name;\n                    var parts = fileName && fileName.split('.');\n                    var extension = parts && parts.length && parts[parts.length - 1];\n                    if (extension) {\n                      switch (extension) {\n                        case 'gdoc':\n                        case 'gsheet':\n                        case 'gslides':\n                          $.when(readFileInto(fileInfo,'text')).done(function (text) {                                                // 86\n                            var fileContents = JSON.parse(text);\n                            if (fileContents && fileContents.url) {\n                              document.execCommand('insertHTML', false, '<br /><a href=\"' + fileContents.url + '\" class=\"wysiwyg-' + extension + '\" target=\"_blank\"><i class=\"fa\">&#xf15b;</i>&nbsp;' + fileInfo.name + '</a>');\n                            }  // 87\n                          }).fail(function (e) {                                                                                         // 88\n                              options.fileUploadError(\"file-reader\", e);                                                                    // 89\n                          });\n                          return;  \n                      }\n                    }\n                    options.fileUploadError(\"Unsupported file type\", \"You tried to upload a file of type: \" + fileInfo.type + \". Only Google docs and small images can be dragged into the editor.\");                        \n                });                                                                                                              // 94\n            },                                                                                                                // 95\n            markSelection = function (input, color) {                                                                         // 96\n                restoreSelection();                                                                                              // 97\n                document.execCommand('hiliteColor', 0, color || 'transparent');                                                  // 98\n                saveSelection();                                                                                                 // 99\n                input.data(options.selectionMarker, color);                                                                      // 100\n            },                                                                                                                // 101\n            bindToolbar = function (toolbar, options) {                                                                       // 102\n                toolbar.find('a[data-' + options.commandRole + ']').click(function () {                                          // 103\n                    restoreSelection();                                                                                             // 104\n                    editor.focus();                                                                                                 // 105\n                    execCommand($(this).data(options.commandRole));                                                                 // 106\n                    saveSelection();                                                                                                // 107\n                });                                                                                                              // 108\n                toolbar.find('[data-toggle=dropdown]').click(restoreSelection);                                                  // 109\n                                                                                                                     // 110\n                toolbar.find('input[type=text][data-' + options.commandRole + ']').on('webkitspeechchange change', function () { // 111\n                    var newValue = this.value; /* ugly but prevents fake double-calls due to selection restoration */               // 112\n                    this.value = '';                                                                                                // 113\n                    restoreSelection();                                                                                             // 114\n                    if (newValue) {                                                                                                 // 115\n                        editor.focus();                                                                                                // 116\n                        execCommand($(this).data(options.commandRole), newValue);                                                      // 117\n                    }                                                                                                               // 118\n                    saveSelection();                                                                                                // 119\n                }).on('focus', function () {                                                                                     // 120\n                    var input = $(this);                                                                                            // 121\n                    if (!input.data(options.selectionMarker)) {                                                                     // 122\n                        markSelection(input, options.selectionColor);                                                                  // 123\n                        input.focus();                                                                                                 // 124\n                    }                                                                                                               // 125\n                }).on('blur', function () {                                                                                      // 126\n                    var input = $(this);                                                                                            // 127\n                    if (input.data(options.selectionMarker)) {                                                                      // 128\n                        markSelection(input, false);                                                                                   // 129\n                    }                                                                                                               // 130\n                });                                                                                                              // 131\n                toolbar.find('input[type=file][data-' + options.commandRole + ']').change(function () {                          // 132\n                    restoreSelection();                                                                                             // 133\n                    if (this.type === 'file' && this.files && this.files.length > 0) {                                              // 134\n                        insertFiles(this.files);                                                                                       // 135\n                    }                                                                                                               // 136\n                    saveSelection();                                                                                                // 137\n                    this.value = '';                                                                                                // 138\n                });                                                                                                              // 139\n            },                                                                                                                // 140\n            initFileDrops = function () {                                                                                     // 141\n                editor.on('dragenter dragover', false)                                                                           // 142\n                    .on('drop', function (e) {                                                                              // 143\n                        var dataTransfer = e.originalEvent.dataTransfer;                                                               // 144\n                        e.stopPropagation();                                                                                           // 145\n                        e.preventDefault();                                                                                            // 146\n                        if (dataTransfer && dataTransfer.files && dataTransfer.files.length > 0) {                                     // 147\n                            insertFiles(dataTransfer.files);                                                                              // 148\n                        }                                                                                                              // 149\n                    });                                                                                                             // 150\n            };                                                                                                                // 151\n        options = $.extend({}, $.fn.wysiwyg.defaults, userOptions);                                                        // 152\n        bindHotkeys(options.hotKeys);                                                                                      // 153\n        initFileDrops();                                                                                                   // 154\n        bindToolbar($(options.toolbarSelector), options);                                                                  // 155\n        editor.attr('contenteditable', true)                                                                               // 156\n            .on('mouseup keyup mouseout', function () {                                                                       // 157\n                saveSelection();                                                                                                 // 158\n                updateToolbar();                                                                                                 // 159\n            });                                                                                                               // 160\n        $(window).bind('touchend', function (e) {                                                                          // 161\n            var isInside = (editor.is(e.target) || editor.has(e.target).length > 0),                                          // 162\n                currentRange = getCurrentRange(),                                                                                // 163\n                clear = currentRange && (currentRange.startContainer === currentRange.endContainer && currentRange.startOffset === currentRange.endOffset);\n            if (!clear || isInside) {                                                                                         // 165\n                saveSelection();                                                                                                 // 166\n                updateToolbar();                                                                                                 // 167\n            }                                                                                                                 // 168\n        });                                                                                                                // 169\n        return this;                                                                                                       // 170\n    };                                                                                                                  // 171\n    $.fn.wysiwyg.defaults = {                                                                                           // 172\n        hotKeys: {                                                                                                         // 173\n            'ctrl+b meta+b': 'bold',                                                                                          // 174\n            'ctrl+i meta+i': 'italic',                                                                                        // 175\n            'ctrl+u meta+u': 'underline',                                                                                     // 176\n            'ctrl+z meta+z': 'undo',                                                                                          // 177\n            'ctrl+y meta+y meta+shift+z': 'redo',\n            'ctrl+l meta+l': 'justifyleft',\n            'ctrl+r meta+r': 'justifyright',\n            'ctrl+e meta+e': 'justifycenter',\n            'ctrl+j meta+j': 'justifyfull',\n            'shift+tab': 'outdent',\n            'tab': 'indent'\n        },\n        toolbarSelector: '[data-role=editor-toolbar]',\n        commandRole: 'edit',\n        activeToolbarClass: 'btn-info',\n        selectionMarker: 'edit-focus-marker',\n        selectionColor: 'darkgrey',\n        fileUploadError: function (reason, detail) { alert(\"File upload error\\n\\n\" + reason + \"\\n\\n\" + detail); }\n    };\n}(window.jQuery));","// Every wysiwyg implementation needs to include the following in a client-side js file:\n// EditableText.wysiwyg = true;\n// This means that the editableText widget will not fall back to a textarea\n\nEditableText._blockFocusoutForWYSIWYG = false;\n\n// Utility functions\n\n$.fn.focusEnd = function() {\n    $(this).focus();\n    var tmp = $('<span />').appendTo($(this)),\n        node = tmp.get(0),\n        range = null,\n        sel = null;\n\n    if (document.selection) {\n        range = document.body.createTextRange();\n        range.moveToElementText(node);\n        range.select();\n    } else if (window.getSelection) {\n        range = document.createRange();\n        range.selectNode(node);\n        sel = window.getSelection();\n        sel.removeAllRanges();\n        sel.addRange(range);\n    }\n    tmp.remove();\n    return this;\n}\n\nEditableText._allowedHtmlPasteCleaner = function() {\n  var allowed = EditableText._allowedHtml();\n  return _.reduce(allowed.allowedTags,function(memo,tag) { memo[tag] = allowed.allowedAttributes[tag] || []; return memo;}, {});\n}\n\nEditableText._cleanHTML = function(element, allow) {\n  \n  // fromList is a utility function used by EditableText._cleanHTML. This is really just `Array.prototype.slice()`\n  // except that the ECMAScript standard doesn't guarantee we're allowed to call that on\n  // a host object like a DOM NodeList, boo.\n  var fromList = function(list) {\n      var array= new Array(list.length);\n      for (var i= 0, n= list.length; i<n; i++)\n          array[i]= list[i];\n      return array;\n  };\n  \n  // Recurse into child elements\n  fromList(element.childNodes).forEach(function(child) {\n      if (child.nodeType===1) {\n        EditableText._cleanHTML(child, allow);\n        var tag= child.tagName.toLowerCase();\n        if (tag in allow) {\n          // Remove unwanted attributes\n          //\n          fromList(child.attributes).forEach(function(attr) {\n              if (allow[tag].indexOf(attr.name.toLowerCase())===-1) {\n                 child.removeAttribute(attr);\n              }\n          });\n        }\n        else {\n          // Replace unwanted elements with their contents\n          //\n          while (child.firstChild)\n              element.insertBefore(child.firstChild, child);\n          element.removeChild(child);\n        }\n      }\n      else if (child.nodeType===3) {\n        child.textContent = child.textContent.replace(/<!--[\\s\\S]*?-->/g,\" \");\n      }\n  });\n}\n\n\nEditableText._sanitizeHTML = function(html) {\n  // Find all instances of href=\" and if the first four letters aren't \"http\", put in \"http://\"\n  var currentIndex = 0,newIndex;\n  do {\n    newIndex = html.substr(currentIndex).indexOf('href=\"');\n    if (newIndex !== -1) {\n      // Check whether the next four characters are http\n      currentIndex += newIndex;\n      if (html.substr(currentIndex+6,4) !== 'http') {\n        currentIndex += 6;\n        html = [html.slice(0,currentIndex), 'http://', html.slice(currentIndex)].join('');\n      }\n      else {\n        currentIndex += 4;  \n      }\n    }\n  }\n  while (newIndex !== -1);\n  return html;\n}\n\n// Template events -- requires babrahams:editable-text\n\nTemplate.editable_text_widget.events({\n  'mousedown .wysiwyg-content .editable-text a' : function(evt) {\n    if (confirm(\"Click 'OK' to follow this link.\\n\\nClick 'Cancel' to edit.\")) {\n      evt.stopPropagation();\n      window.open($(evt.target).attr('href'),'_blank');    \n    }\n  },\n  'mousedown .wysiwyg-container' : function(evt) {\n    EditableText._blockFocusoutForWYSIWYG = true;\n    // This is a filthy hack to allow time for checking the document blur event\n    // to prevent save on focusout if the whole document is losing focus\n    // Important if we want to be able to drag files in to the editor\n    Meteor.setTimeout(function() {\n      EditableText._blockFocusoutForWYSIWYG = false;\n    },100);\n  },\n  'keydown .wysiwyg-container' : function(evt,tmpl) {\n    if (evt.which === 27) {\n      evt.stopImmediatePropagation();\n      tmpl.selected.set(false);\n\t  EditableText._callback.call(this,'onStopEditing',tmpl.data.context);\n    }\n  },\n  'paste .wysiwyg' : function(evt) {\n    // To remove all html on paste, use this:\n    // document.execCommand('insertText', false, evt.clipboardData.getData('text/plain'));\n    // evt.preventDefault();\n    // To remove all but selected elements and attributes, use this:\n    Meteor.defer(function() {\n      var text = $(evt.target).closest('.wysiwyg').html();\n      if (EditableText.maximumImageSize && text && (text.length > EditableText.maximumImageSize)) {\n        document.execCommand('undo');\n        alert('You\\'ve tried to paste too much information into the editor. If you\\'re pasting an image, try reducing it to less than ' + EditableText.maximumImageSize + 'k.');\n        return;  \n      }\n      EditableText._cleanHTML($(evt.target).closest('.wysiwyg')[0],EditableText._allowedHtmlPasteCleaner());\n    });\n    // To accept all, do nothing\n  },\n  'click .wysiwyg-container .wysiwyg-save-button, focusout .wysiwyg-container .wysiwyg' : function(evt,tmpl) {\n    evt.stopPropagation();\n    evt.stopImmediatePropagation();\n    var self = this;\n    Meteor.defer(function() {\n      // We need to defer to give time for the document to lose focus if the user has clicked away from the document\n      if (!document.hasFocus() || (evt.type === 'focusout' && (EditableText._blockFocusoutForWYSIWYG || !(typeof self.saveOnFocusout !== 'undefined' && self.saveOnFocusout || EditableText.saveOnFocusout)))) {\n        // Need to stop clicks on the toolbar from firing the autosave due to loss of focus\n        return;    \n      }\n      var value = $.trim(tmpl.$('.wysiwyg').cleanHtml()).replace(/\\n/g,\"\");\n      var sanitizedValue = _.isFunction(EditableText._sanitizeHTML) && EditableText._sanitizeHTML(value) || value;\n      EditableText.okCancelEvents.ok.call(self,sanitizedValue,evt,tmpl);\n      if (evt.type === 'click') {\n        tmpl.selected.set(false);\n      }\n    });\n  }\n});\n\nTemplate.editable_text_widget.rendered = function() {\n  // When we start editing, get the wysiwyg and attach its toolbar\n  var self = this;\n  this.autorun(function() {\n    if (self.selected.get() && self.data.wysiwyg) {\n      Meteor.defer(function() {\n          var wysiwyg = self.$('.wysiwyg');\n          if (wysiwyg.length) { // Might have disappeared from the DOM in some rare circumstances\n            wysiwyg.wysiwyg({toolbarSelector:\".wysiwyg-toolbar\"});\n            wysiwyg.focusEnd();\n          }\n      });\n    }\n  });\n}"]}