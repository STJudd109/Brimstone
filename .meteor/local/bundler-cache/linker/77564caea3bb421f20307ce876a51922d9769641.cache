[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar LocalCollection = Package.minimongo.LocalCollection;\nvar Minimongo = Package.minimongo.Minimongo;\nvar Template = Package.templating.Template;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar Spacebars = Package.spacebars.Spacebars;\nvar Random = Package.random.Random;\nvar _ = Package.underscore._;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar Mongo = Package.mongo.Mongo;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\nvar HTML = Package.htmljs.HTML;\n\n/* Package-scope variables */\nvar EditableText, sanitizeHtml, callbackMutatedDoc;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/babrahams_editable-text/lib/template.editable_text.js                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n                                                                                                                      // 1\nTemplate.__checkName(\"editableText\");                                                                                 // 2\nTemplate[\"editableText\"] = new Template(\"Template.editableText\", (function() {                                        // 3\n  var view = this;                                                                                                    // 4\n  return Blaze._TemplateWith(function() {                                                                             // 5\n    return {                                                                                                          // 6\n      context: Spacebars.call(view.lookup(\"context\")),                                                                // 7\n      collection: Spacebars.call(view.lookup(\"collection\")),                                                          // 8\n      field: Spacebars.call(view.lookup(\"field\")),                                                                    // 9\n      value: Spacebars.call(view.lookup(\"value\")),                                                                    // 10\n      editingValue: Spacebars.call(view.lookup(\"editingValue\")),                                                      // 11\n      textarea: Spacebars.call(view.lookup(\"textarea\")),                                                              // 12\n      wysiwyg: Spacebars.call(view.lookup(\"wysiwyg\")),                                                                // 13\n      acceptEmpty: Spacebars.call(view.lookup(\"acceptEmpty\")),                                                        // 14\n      removeEmpty: Spacebars.call(view.lookup(\"removeEmpty\")),                                                        // 15\n      eventType: Spacebars.call(view.lookup(\"eventType\")),                                                            // 16\n      type: Spacebars.call(view.lookup(\"type\")),                                                                      // 17\n      objectTypeText: Spacebars.call(view.lookup(\"objectTypeText\")),                                                  // 18\n      \"class\": Spacebars.call(view.lookup(\"class\")),                                                                  // 19\n      inputClass: Spacebars.call(view.lookup(\"inputClass\")),                                                          // 20\n      autoInsert: Spacebars.call(view.lookup(\"autoInsert\")),                                                          // 21\n      beforeInsert: Spacebars.call(view.lookup(\"beforeInsert\")),                                                      // 22\n      afterInsert: Spacebars.call(view.lookup(\"afterInsert\")),                                                        // 23\n      wysiwygStyle: Spacebars.call(view.lookup(\"wysiwygStyle\")),                                                      // 24\n      style: Spacebars.call(view.lookup(\"style\")),                                                                    // 25\n      inputStyle: Spacebars.call(view.lookup(\"inputStyle\")),                                                          // 26\n      substitute: Spacebars.call(view.lookup(\"substitute\")),                                                          // 27\n      title: Spacebars.call(view.lookup(\"title\")),                                                                    // 28\n      userCanEdit: Spacebars.call(view.lookup(\"userCanEdit\")),                                                        // 29\n      useTransaction: Spacebars.call(view.lookup(\"useTransaction\")),                                                  // 30\n      beforeUpdate: Spacebars.call(view.lookup(\"beforeUpdate\")),                                                      // 31\n      afterUpdate: Spacebars.call(view.lookup(\"afterUpdate\")),                                                        // 32\n      beforeRemove: Spacebars.call(view.lookup(\"beforeRemove\")),                                                      // 33\n      afterRemove: Spacebars.call(view.lookup(\"afterRemove\")),                                                        // 34\n      onStartEditing: Spacebars.call(view.lookup(\"onStartEditing\")),                                                  // 35\n      onStopEditing: Spacebars.call(view.lookup(\"onStopEditing\")),                                                    // 36\n      onShowToolbar: Spacebars.call(view.lookup(\"onShowToolbar\")),                                                    // 37\n      onHideToolbar: Spacebars.call(view.lookup(\"onHideToolbar\")),                                                    // 38\n      placeholder: Spacebars.call(view.lookup(\"placeholder\")),                                                        // 39\n      saveOnFocusout: Spacebars.call(view.lookup(\"saveOnFocusout\")),                                                  // 40\n      noSaveOnReturn: Spacebars.call(view.lookup(\"noSaveOnReturn\")),                                                  // 41\n      dontSelectAll: Spacebars.call(view.lookup(\"dontSelectAll\")),                                                    // 42\n      showSaveButton: Spacebars.call(view.lookup(\"showSaveButton\")),                                                  // 43\n      trustHtml: Spacebars.call(view.lookup(\"trustHtml\")),                                                            // 44\n      useMethod: Spacebars.call(view.lookup(\"useMethod\")),                                                            // 45\n      toolbarPosition: Spacebars.call(view.lookup(\"toolbarPosition\")),                                                // 46\n      options: Spacebars.call(view.lookup(\"options\")),                                                                // 47\n      autoResize: Spacebars.call(view.lookup(\"autoResize\")),                                                          // 48\n      emptyText: Spacebars.call(view.lookup(\"emptyText\")),                                                            // 49\n      showToolbar: Spacebars.call(view.lookup(\"showToolbar\")),                                                        // 50\n      derivedOptions: Spacebars.call(view.lookup(\"derivedOptions\")),                                                  // 51\n      template: Spacebars.call(view.lookup(\"template\")),                                                              // 52\n      stopPropagation: Spacebars.call(view.lookup(\"stopPropagation\")),                                                // 53\n      editor: Spacebars.call(view.lookup(\"editor\")),                                                                  // 54\n      editorOptions: Spacebars.call(view.lookup(\"editorOptions\"))                                                     // 55\n    };                                                                                                                // 56\n  }, function() {                                                                                                     // 57\n    return Spacebars.include(view.lookupTemplate(\"editable_text_widget\"));                                            // 58\n  });                                                                                                                 // 59\n}));                                                                                                                  // 60\n                                                                                                                      // 61\nTemplate.__checkName(\"editable_text_widget\");                                                                         // 62\nTemplate[\"editable_text_widget\"] = new Template(\"Template.editable_text_widget\", (function() {                        // 63\n  var view = this;                                                                                                    // 64\n  return Spacebars.With(function() {                                                                                  // 65\n    return Spacebars.call(view.lookup(\"initOptions\"));                                                                // 66\n  }, function() {                                                                                                     // 67\n    return Blaze.If(function() {                                                                                      // 68\n      return Spacebars.call(view.lookup(\"controlTemplate\"));                                                          // 69\n    }, function() {                                                                                                   // 70\n      return Blaze._TemplateWith(function() {                                                                         // 71\n        return {                                                                                                      // 72\n          template: Spacebars.call(view.lookup(\"controlTemplate\")),                                                   // 73\n          data: Spacebars.call(view.lookup(\"controlData\"))                                                            // 74\n        };                                                                                                            // 75\n      }, function() {                                                                                                 // 76\n        return Spacebars.include(function() {                                                                         // 77\n          return Spacebars.call(Template.__dynamic);                                                                  // 78\n        });                                                                                                           // 79\n      });                                                                                                             // 80\n    }, function() {                                                                                                   // 81\n      return Blaze.If(function() {                                                                                    // 82\n        return Spacebars.call(view.lookup(\"editing\"));                                                                // 83\n      }, function() {                                                                                                 // 84\n        return Blaze.If(function() {                                                                                  // 85\n          return Spacebars.call(view.lookup(\"textarea\"));                                                             // 86\n        }, function() {                                                                                               // 87\n          return [ Blaze.If(function() {                                                                              // 88\n            return Spacebars.call(view.lookup(\"showSaveButton\"));                                                     // 89\n          }, function() {                                                                                             // 90\n            return HTML.BUTTON({                                                                                      // 91\n              \"class\": \"editable-text-save-button\"                                                                    // 92\n            }, \"Save\");                                                                                               // 93\n          }), HTML.TEXTAREA({                                                                                         // 94\n            \"class\": function() {                                                                                     // 95\n              return [ \"text-area-edit \", Spacebars.mustache(view.lookup(\"inputClass\")) ];                            // 96\n            },                                                                                                        // 97\n            placeholder: function() {                                                                                 // 98\n              return Spacebars.mustache(view.lookup(\"placeholder\"));                                                  // 99\n            },                                                                                                        // 100\n            title: function() {                                                                                       // 101\n              return Blaze.If(function() {                                                                            // 102\n                return Spacebars.call(view.lookup(\"trustHtml\"));                                                      // 103\n              }, function() {                                                                                         // 104\n                return \"Hold SHIFT and press ENTER for a new line\";                                                   // 105\n              });                                                                                                     // 106\n            },                                                                                                        // 107\n            style: function() {                                                                                       // 108\n              return Spacebars.mustache(view.lookup(\"inputStyle\"));                                                   // 109\n            },                                                                                                        // 110\n            value: function() {                                                                                       // 111\n              return Spacebars.mustache(view.lookup(\"value\"));                                                        // 112\n            }                                                                                                         // 113\n          }) ];                                                                                                       // 114\n        }, function() {                                                                                               // 115\n          return Blaze.If(function() {                                                                                // 116\n            return Spacebars.call(view.lookup(\"isWysiwyg\"));                                                          // 117\n          }, function() {                                                                                             // 118\n            return HTML.DIV({                                                                                         // 119\n              \"class\": \"wysiwyg-container\"                                                                            // 120\n            }, Blaze.If(function() {                                                                                  // 121\n              return Spacebars.dataMustache(view.lookup(\"toolsPosition\"), \"top\");                                     // 122\n            }, function() {                                                                                           // 123\n              return Spacebars.include(view.lookupTemplate(\"wysiwyg\"));                                               // 124\n            }), HTML.DIV({                                                                                            // 125\n              \"class\": function() {                                                                                   // 126\n                return [ \"wysiwyg \", Spacebars.mustache(view.lookup(\"inputClass\")) ];                                 // 127\n              },                                                                                                      // 128\n              style: function() {                                                                                     // 129\n                return Spacebars.mustache(view.lookup(\"inputStyle\"));                                                 // 130\n              }                                                                                                       // 131\n            }, Blaze.View(\"lookup:wysiwygContent\", function() {                                                       // 132\n              return Spacebars.mustache(view.lookup(\"wysiwygContent\"));                                               // 133\n            })), Blaze.Unless(function() {                                                                            // 134\n              return Spacebars.dataMustache(view.lookup(\"toolsPosition\"), \"top\");                                     // 135\n            }, function() {                                                                                           // 136\n              return Spacebars.include(view.lookupTemplate(\"wysiwyg\"));                                               // 137\n            }));                                                                                                      // 138\n          }, function() {                                                                                             // 139\n            return HTML.INPUT({                                                                                       // 140\n              \"class\": function() {                                                                                   // 141\n                return [ \"wide-text-edit \", Spacebars.mustache(view.lookup(\"inputClass\")) ];                          // 142\n              },                                                                                                      // 143\n              type: \"text\",                                                                                           // 144\n              value: function() {                                                                                     // 145\n                return Spacebars.mustache(view.lookup(\"inputValue\"));                                                 // 146\n              },                                                                                                      // 147\n              placeholder: function() {                                                                               // 148\n                return Spacebars.mustache(view.lookup(\"placeholder\"));                                                // 149\n              },                                                                                                      // 150\n              style: function() {                                                                                     // 151\n                return Spacebars.mustache(view.lookup(\"inputStyle\"));                                                 // 152\n              }                                                                                                       // 153\n            });                                                                                                       // 154\n          });                                                                                                         // 155\n        });                                                                                                           // 156\n      }, function() {                                                                                                 // 157\n        return Blaze.If(function() {                                                                                  // 158\n          return Spacebars.call(view.lookup(\"canEditText\"));                                                          // 159\n        }, function() {                                                                                               // 160\n          return Blaze.If(function() {                                                                                // 161\n            return Spacebars.call(view.lookup(\"substitute\"));                                                         // 162\n          }, function() {                                                                                             // 163\n            return HTML.SPAN({                                                                                        // 164\n              title: function() {                                                                                     // 165\n                return Spacebars.mustache(view.lookup(\"title\"));                                                      // 166\n              },                                                                                                      // 167\n              \"class\": function() {                                                                                   // 168\n                return [ \"editable-text \", Spacebars.mustache(view.lookup(\"class\")), \" et-\", Spacebars.mustache(Spacebars.dot(view.lookup(\"context\"), \"_id\")) ];\n              }                                                                                                       // 170\n            }, Blaze.View(\"lookup:substitute\", function() {                                                           // 171\n              return Spacebars.mustache(view.lookup(\"substitute\"));                                                   // 172\n            }));                                                                                                      // 173\n          }, function() {                                                                                             // 174\n            return Blaze.If(function() {                                                                              // 175\n              return Spacebars.call(view.lookup(\"isWysiwyg\"));                                                        // 176\n            }, function() {                                                                                           // 177\n              return HTML.DIV({                                                                                       // 178\n                \"class\": \"wysiwyg-content\"                                                                            // 179\n              }, HTML.DIV({                                                                                           // 180\n                \"class\": function() {                                                                                 // 181\n                  return [ \"editable-text \", Spacebars.mustache(view.lookup(\"class\")), \" et-\", Spacebars.mustache(Spacebars.dot(view.lookup(\"context\"), \"_id\")) ];\n                },                                                                                                    // 183\n                title: function() {                                                                                   // 184\n                  return Spacebars.mustache(view.lookup(\"title\"));                                                    // 185\n                },                                                                                                    // 186\n                style: function() {                                                                                   // 187\n                  return Spacebars.mustache(view.lookup(\"style\"));                                                    // 188\n                }                                                                                                     // 189\n              }, Blaze.View(\"lookup:wysiwygContent\", function() {                                                     // 190\n                return Spacebars.mustache(view.lookup(\"wysiwygContent\"));                                             // 191\n              })));                                                                                                   // 192\n            }, function() {                                                                                           // 193\n              return HTML.SPAN({                                                                                      // 194\n                \"class\": function() {                                                                                 // 195\n                  return [ \"editable-text \", Spacebars.mustache(view.lookup(\"class\")), \" et-\", Spacebars.mustache(Spacebars.dot(view.lookup(\"context\"), \"_id\")) ];\n                },                                                                                                    // 197\n                title: function() {                                                                                   // 198\n                  return Spacebars.mustache(view.lookup(\"title\"));                                                    // 199\n                }                                                                                                     // 200\n              }, Blaze.View(\"lookup:content\", function() {                                                            // 201\n                return Spacebars.mustache(view.lookup(\"content\"));                                                    // 202\n              }));                                                                                                    // 203\n            });                                                                                                       // 204\n          });                                                                                                         // 205\n        }, function() {                                                                                               // 206\n          return Spacebars.With(function() {                                                                          // 207\n            return Spacebars.dataMustache(view.lookup(\"substitute\"), true);                                           // 208\n          }, function() {                                                                                             // 209\n            return Blaze.View(\"lookup:.\", function() {                                                                // 210\n              return Spacebars.mustache(view.lookup(\".\"));                                                            // 211\n            });                                                                                                       // 212\n          }, function() {                                                                                             // 213\n            return Blaze.If(function() {                                                                              // 214\n              return Spacebars.call(view.lookup(\"isWysiwyg\"));                                                        // 215\n            }, function() {                                                                                           // 216\n              return Blaze.View(\"lookup:wysiwygContent\", function() {                                                 // 217\n                return Spacebars.mustache(view.lookup(\"wysiwygContent\"));                                             // 218\n              });                                                                                                     // 219\n            }, function() {                                                                                           // 220\n              return Blaze.View(\"lookup:content\", function() {                                                        // 221\n                return Spacebars.mustache(view.lookup(\"content\"));                                                    // 222\n              });                                                                                                     // 223\n            });                                                                                                       // 224\n          });                                                                                                         // 225\n        });                                                                                                           // 226\n      });                                                                                                             // 227\n    });                                                                                                               // 228\n  });                                                                                                                 // 229\n}));                                                                                                                  // 230\n                                                                                                                      // 231\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/babrahams_editable-text/lib/editable_text.js                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nEditableText = {};                                                                                                    // 1\n                                                                                                                      // 2\n// *******************************                                                                                    // 3\n// CONFIG that only affects CLIENT                                                                                    // 4\n// *******************************                                                                                    // 5\n                                                                                                                      // 6\nEditableText.saveOnFocusout = true;                                                                                   // 7\nEditableText.trustHtml = false;                                                                                       // 8\nEditableText.useMethods = true; // only set this to false if you really know what you're doing and have taken appropriate measures to thwart XSS attacks\nEditableText.editors = {}; // where other packages register different editors that can supplant the UI functionality of this package, while using the mutator methods it makes available\nEditableText.isTouchDevice = ('ontouchstart' in document.documentElement);                                            // 11\n                                                                                                                      // 12\n// The `EditableText.insert`, `EditableText.update`, `EditableText.remove` functions can be optionally overwritten if necessary\n// Not recommended, though. It's a lot of work to get the same functionality that the package provides by default     // 14\n                                                                                                                      // 15\nEditableText.insert = function (Collection, doc) {                                                                    // 16\n  var self = _.clone(this); // Don't want to update the original                                                      // 17\n  if (EditableText.useMethods && this.useMethod !== false || this.useMethod) {                                        // 18\n    var objId = Random.id();                                                                                          // 19\n    self.context = _.clone(self.context); // need to clone this field again because this.context is an object and _.clone isn't a deep clone\n    self.context._id = objId;                                                                                         // 21\n    Meteor.call('_editableTextWrite', 'insert', self, null, EditableText._useTransaction(this), function (err, res) {\n      if (err) {                                                                                                      // 23\n        console.log(err);                                                                                             // 24\n        return;                                                                                                       // 25\n      }                                                                                                               // 26\n      // Just in case it didn't get into the DOM in time                                                              // 27\n      /*Tracker.flush();                                                                                              // 28\n      var elem = $('.et-' + objId);                                                                                   // 29\n      if (elem.length) {                                                                                              // 30\n        elem.eq(0).trigger((EditableText.wysiwyg && self.wysiwyg) ? 'mousedown' : 'click');                           // 31\n      }*/                                                                                                             // 32\n    });                                                                                                               // 33\n    // TODO -- this new object needs to get `selected` set in its template instance (and the corresponding element needs to gain focus) wherever it lands in the DOM\n    // However, we have no easy way of getting its template instance, other than iterating over                       // 35\n    // all template instances, looking for the one where the context._id matches the object_id value                  // 36\n    // Unfortunately, I have no idea where the template instances are stored                                          // 37\n    // So using a filthy hack instead ...                                                                             // 38\n    // Getting the element(s) in the DOM with the right class and firing click event on the first one                 // 39\n    // Too bad if this wasn't the element we really wanted to be editing                                              // 40\n    // Note: we can't fire events on them all as, if there are (even temporarily) duplicates in the DOM and removeEmpty=true, this could cause unwanted side effects (e.g. instant deletion after creation)\n    // This means that in cases when the newly inserted document field is available in multiple places on the screen, the wrong one might be selected for editing (i.e. one that wasn't where the user clicked)\n    // This is probably rare enough that we'll ignore it until it becomes a serious problem, at which time we'll come up with another hack\n    Tracker.flush(); // Put this here rather than in the callback to maintain latency compensation                    // 44\n    var elem = $('.et-' + objId);                                                                                     // 45\n    if (elem.length) {                                                                                                // 46\n      elem.eq(0).trigger((EditableText.wysiwyg && self.wysiwyg) ? 'mousedown' : 'click');                             // 47\n    }                                                                                                                 // 48\n    return;                                                                                                           // 49\n  }                                                                                                                   // 50\n  if (EditableText._useTransaction(this)) {                                                                           // 51\n    if (this.transactionInsertText || this.objectTypeText) {                                                          // 52\n      tx.start(this.transactionInsertText || 'add ' + this.objectTypeText);                                           // 53\n    }                                                                                                                 // 54\n    EditableText._callback.call(self, 'beforeInsert', self.context);                                                  // 55\n    var new_id = tx.insert(Collection, doc, {instant: true});                                                         // 56\n    EditableText._callback.call(self, 'afterInsert', Collection.findOne({_id: new_id}));                              // 57\n    if (this.transactionInsertText || this.objectTypeText) {                                                          // 58\n      tx.commit();                                                                                                    // 59\n    }                                                                                                                 // 60\n  }                                                                                                                   // 61\n  else {                                                                                                              // 62\n    doc = EditableText._callback.call(self, 'beforeInsert', self.context);                                            // 63\n    var new_id = Collection.insert(doc);                                                                              // 64\n    EditableText._callback.call(self, 'afterInsert', Collection.findOne({_id: new_id}));                              // 65\n  }                                                                                                                   // 66\n  // see above                                                                                                        // 67\n  Tracker.flush();                                                                                                    // 68\n  $('.et-' + new_id).eq(0).trigger((EditableText.wysiwyg && this.wysiwyg) ? 'mousedown' : 'click');                   // 69\n  return new_id;                                                                                                      // 70\n}                                                                                                                     // 71\n                                                                                                                      // 72\nEditableText.update = function(Collection, doc, modifier) {                                                           // 73\n  var self = this;                                                                                                    // 74\n  if (EditableText.useMethods && this.useMethod !== false || this.useMethod) {                                        // 75\n    Meteor.call('_editableTextWrite', 'update', this, modifier, EditableText._useTransaction(this), function (err, res) {\n      if (err) {                                                                                                      // 77\n        console.log(err);                                                                                             // 78\n      }                                                                                                               // 79\n    });                                                                                                               // 80\n    return;                                                                                                           // 81\n  }                                                                                                                   // 82\n  if (EditableText._useTransaction(this)) {                                                                           // 83\n    if (this.objectTypeText || this.transactionUpdateText) {                                                          // 84\n      tx.start(this.transactionUpdateText || 'update ' + this.objectTypeText);                                        // 85\n    }                                                                                                                 // 86\n    EditableText._callback.call(self, 'beforeUpdate', doc);                                                           // 87\n    // Important to send the id only, not the whole document (\"self\"),                                                // 88\n    // as this update is fired from all sorts of contexts, some of which are incomplete --                            // 89\n    // this will force the transaction script to find the relevant document with its full context from the database   // 90\n    tx.update(Collection, doc._id, modifier, {instant: true});                                                        // 91\n    EditableText._callback.call(self, 'afterUpdate', Collection.findOne({_id: doc._id}));                             // 92\n    if (this.objectTypeText || this.transactionUpdateText) {                                                          // 93\n      tx.commit();                                                                                                    // 94\n    }                                                                                                                 // 95\n  }                                                                                                                   // 96\n  else {                                                                                                              // 97\n    EditableText._callback.call(self, 'beforeUpdate', doc);                                                           // 98\n    Collection.update({_id: doc._id}, modifier);                                                                      // 99\n    EditableText._callback.call(self, 'afterUpdate', Collection.findOne({_id: doc._id}));                             // 100\n  }                                                                                                                   // 101\n}                                                                                                                     // 102\n                                                                                                                      // 103\nEditableText.remove = function(Collection, doc) {                                                                     // 104\n  var self = this;                                                                                                    // 105\n  if (EditableText.useMethods && this.useMethod !== false || this.useMethod) {                                        // 106\n    Meteor.call('_editableTextWrite', 'remove', this, null, EditableText._useTransaction(this), function (err, res) {\n      if (err) {                                                                                                      // 108\n        console.log(err);                                                                                             // 109\n      }                                                                                                               // 110\n    });                                                                                                               // 111\n    return;                                                                                                           // 112\n  }                                                                                                                   // 113\n  if (EditableText._useTransaction(this)) {                                                                           // 114\n    if (this.objectTypeText || this.transactionRemoveText) {                                                          // 115\n      tx.start(this.transactionRemoveText || 'remove ' + this.objectTypeText);                                        // 116\n    }                                                                                                                 // 117\n    EditableText._callback.call(self,'beforeRemove',doc);                                                             // 118\n    tx.remove(Collection,doc._id,{instant:true});                                                                     // 119\n    EditableText._callback.call(self,'afterRemove',Collection.findOne({_id:doc._id}));                                // 120\n    if (this.objectTypeText || this.transactionRemoveText) {                                                          // 121\n      tx.commit();                                                                                                    // 122\n    }                                                                                                                 // 123\n  }                                                                                                                   // 124\n  else {                                                                                                              // 125\n    EditableText._callback.call(self,'beforeRemove',doc);                                                             // 126\n    Collection.remove({_id:doc._id});                                                                                 // 127\n    EditableText._callback.call(self,'afterRemove',Collection.findOne({_id:doc._id}));                                // 128\n  }                                                                                                                   // 129\n}                                                                                                                     // 130\n                                                                                                                      // 131\n                                                                                                                      // 132\n// *********************************                                                                                  // 133\n// INTERNAL PROPERTIES AND FUNCTIONS                                                                                  // 134\n// *********************************                                                                                  // 135\n                                                                                                                      // 136\nEditableText._removeEntities = function (html) {                                                                      // 137\n  return $.trim(html.replace(/&quot;/g, '\"').replace(/&gt;/g, '>').replace(/&lt;/g, '<').replace(/&nbsp;/g, ' '));    // 138\n}                                                                                                                     // 139\n                                                                                                                      // 140\n/*EditableText._linkify = function (text) {                                                                           // 141\n  return autolinker.link(text);                                                                                       // 142\n}*/                                                                                                                   // 143\n                                                                                                                      // 144\nEditableText._useTransaction = function (data) {                                                                      // 145\n  return !!(typeof tx !== 'undefined' && ((EditableText.useTransactions && data.useTransaction !== false) || data.useTransaction));    \n}                                                                                                                     // 147\n                                                                                                                      // 148\nEditableText.__blockOkayEvent = false;                                                                                // 149\nEditableText.__blockEditEvent = false;                                                                                // 150\n                                                                                                                      // 151\nTemplate.editableText.helpers({                                                                                       // 152\n  context : function () {                                                                                             // 153\n    return this.context || this.document || this.doc || this.object || this.obj || this.data || this.dataContext || Blaze._parentData(1);\n  }                                                                                                                   // 155\n});                                                                                                                   // 156\n                                                                                                                      // 157\n// Returns an event map that handles the \"escape\" and \"return\" keys and                                               // 158\n// \"blur\" events on a text input (given by selector) and interprets them                                              // 159\n// as \"ok\" or \"cancel\".                                                                                               // 160\n                                                                                                                      // 161\nEditableText._okCancelEvents = function (selector, callbacks, acceptEmpty) {                                          // 162\n  var ok = callbacks.ok || function () {};                                                                            // 163\n  var cancel = callbacks.cancel || function () {};                                                                    // 164\n  var events = {};                                                                                                    // 165\n  events['keydown '+selector+', focusout '+selector] =                                                                // 166\n    function (evt, tmpl) {                                                                                            // 167\n      evt.stopImmediatePropagation();                                                                                 // 168\n      var charCode = evt.which || evt.keyCode;                                                                        // 169\n      var value = $.trim(String($(evt.target).val() || \"\"));                                                          // 170\n      if (evt.type === \"keydown\") {                                                                                   // 171\n        switch (charCode) {                                                                                           // 172\n          case 27 : // escape = cancel                                                                                // 173\n            cancel.call(this, value, evt, tmpl);                                                                      // 174\n            break;                                                                                                    // 175\n        }                                                                                                             // 176\n      }                                                                                                               // 177\n      if (evt.type === \"keydown\" && (charCode === 13 && !(evt.shiftKey || (typeof this.noSaveOnReturn !== 'undefined' && this.noSaveOnReturn))) || (evt.type === \"focusout\" && ((typeof this.saveOnFocusout !== 'undefined' && this.saveOnFocusout) || (typeof this.saveOnFocusout === 'undefined' && EditableText.saveOnFocusout)))) {\n        evt.preventDefault();                                                                                         // 179\n        // blur/return/enter = ok/submit if non-empty                                                                 // 180\n        if ((value || (this.type === 'number' && parseInt(value) === 0)) || this.removeEmpty || (this.acceptEmpty || acceptEmpty)) {\n          if (!EditableText._blockOkayEvent) {                                                                        // 182\n            EditableText._blockOkayEvent = true;                                                                      // 183\n            ok.call(this, value, evt, tmpl); // EditableText._linkify(value)                                          // 184\n            Meteor.defer(function () {                                                                                // 185\n              EditableText._blockOkayEvent = false;                                                                   // 186\n            });                                                                                                       // 187\n          }                                                                                                           // 188\n          else { // In case this value is set to true for some strange reason                                         // 189\n            EditableText._blockOkayEvent = false;                                                                     // 190\n          }                                                                                                           // 191\n        }                                                                                                             // 192\n        else {                                                                                                        // 193\n          cancel.call(this, value, evt, tmpl);                                                                        // 194\n        }                                                                                                             // 195\n      }                                                                                                               // 196\n    };                                                                                                                // 197\n  return events;                                                                                                      // 198\n};                                                                                                                    // 199\n                                                                                                                      // 200\nEditableText._activateInput = function (input, dontSelect) {                                                          // 201\n  if (input !== null) {                                                                                               // 202\n    input.focus();                                                                                                    // 203\n    if (typeof dontSelect !== 'undefined' && dontSelect) {                                                            // 204\n      return;                                                                                                         // 205\n    }                                                                                                                 // 206\n    input.select();                                                                                                   // 207\n  }                                                                                                                   // 208\n  else {                                                                                                              // 209\n    console.log('Input was null');                                                                                    // 210\n  }                                                                                                                   // 211\n};                                                                                                                    // 212\n                                                                                                                      // 213\nEditableText._extractNumber = function (raw) {                                                                        // 214\n  if (typeof raw !== 'undefined') {                                                                                   // 215\n    var numbers = raw.match(/[0-9]+/);                                                                                // 216\n    if (numbers) {                                                                                                    // 217\n      return parseInt(numbers[0], 10);                                                                                // 218\n    }                                                                                                                 // 219\n  }                                                                                                                   // 220\n  return 0;                                                                                                           // 221\n}                                                                                                                     // 222\n                                                                                                                      // 223\nEditableText._makeUpdate = function (value, isEscape, evtType) {                                                      // 224\n  // value has already been trimmed with $.trim()                                                                     // 225\n  var currentValue = (this.editingValue || this.value) || EditableText._drillDown(this.context, this.field);          // 226\n  var type = this.type || 'string';                                                                                   // 227\n  var keepZero = false;                                                                                               // 228\n  switch (type) {                                                                                                     // 229\n    case 'number' :                                                                                                   // 230\n\t  if (value !== '') {                                                                                                // 231\n        var rawNewValue = EditableText._extractNumber(value);                                                         // 232\n        var newValue = rawNewValue && parseInt(rawNewValue) || 0;                                                     // 233\n\t\tkeepZero = true;                                                                                                    // 234\n\t  }                                                                                                                  // 235\n\t  else {                                                                                                             // 236\n\t\tvar newValue = 0;                                                                                                   // 237\n\t  }                                                                                                                  // 238\n\t  if (currentValue !== undefined) {                                                                                  // 239\n        currentValue = currentValue && parseInt(currentValue) || 0;                                                   // 240\n\t  }                                                                                                                  // 241\n      break;                                                                                                          // 242\n    default :                                                                                                         // 243\n      var newValue = value.replace(/mml:/g, \"\"); // For cleaning up mathml pasted from msword                         // 244\n      currentValue = _.isString(currentValue) && currentValue.replace(/<br \\/>/g, \"<br>\") || '';                      // 245\n\t  currentValue = EditableText._removeEntities(currentValue);                                                         // 246\n\t  newValue = EditableText._removeEntities(newValue);                                                                 // 247\n      break;                                                                                                          // 248\n  }                                                                                                                   // 249\n  var updatedValue = {};                                                                                              // 250\n  updatedValue[this.field] = newValue; // console.log(\"newValue:\",newValue); console.log(\"currentValue:\",currentValue);\n  // Sometimes we don't want the actual field's value, we want whatever was passed in to the template as the 'value' keyword to be used to compare against\n  if (newValue !== currentValue || (!(newValue || (this.type === 'number' && newValue === 0 && keepZero)) && this.removeEmpty && !(this.acceptEmpty && evtType === 'focusout'))) {\n    if (!(newValue || (this.type === 'number' && newValue === 0 && keepZero)) && this.removeEmpty && !(this.acceptEmpty && evtType === 'focusout')) {\n      if ((isEscape || evtType === 'focusout') && (this.acceptEmpty || currentValue)) { // isEscape is an alternative for (isEscape || evtType === 'focusout') if we want to allow focusout to remove an item\n        return;                                                                                                       // 256\n      }                                                                                                               // 257\n      EditableText.remove.call(this,Mongo.Collection.get(this.collection),this.context);                              // 258\n    }                                                                                                                 // 259\n    else if (!isEscape && (newValue !== currentValue) && ((newValue || (this.type === 'number' && newValue === 0)) || this.acceptEmpty || (this.wysiwyg && this.acceptEmpty !== false))) { // wysiwyg accepts empty by default unless explicitly told not to\n      // Make the update                                                                                              // 261\n      EditableText.update.call(this, Mongo.Collection.get(this.collection), this.context, {$set: updatedValue});      // 262\n    }                                                                                                                 // 263\n  }                                                                                                                   // 264\n}                                                                                                                     // 265\n                                                                                                                      // 266\n// *******                                                                                                            // 267\n// HELPERS                                                                                                            // 268\n// *******                                                                                                            // 269\n                                                                                                                      // 270\nTemplate.editable_text_widget.helpers({                                                                               // 271\n                                                                                                                      // 272\n  value : function() {                                                                                                // 273\n\tvar value = (this.editingValue !== 'undefined') ? this.editingValue : this.value;                                    // 274\n    return (this.type === 'number' && value === 0) ? 0 : value || EditableText._drillDown(this.context,this.field);   // 275\n  },                                                                                                                  // 276\n                                                                                                                      // 277\n  editing : function() {                                                                                              // 278\n    return Blaze._templateInstance().selected.get();                                                                  // 279\n  },                                                                                                                  // 280\n                                                                                                                      // 281\n  textarea : function() {                                                                                             // 282\n    return (this.textarea && !this.wysiwyg) || (this.wysiwyg && !EditableText.wysiwyg);                               // 283\n  },                                                                                                                  // 284\n                                                                                                                      // 285\n  isWysiwyg : function() {                                                                                            // 286\n    return EditableText.wysiwyg && this.wysiwyg;                                                                      // 287\n  },                                                                                                                  // 288\n                                                                                                                      // 289\n  wysiwygContent : function() {                                                                                       // 290\n    var value = this.value || EditableText._drillDown(this.context,this.field);                                       // 291\n    return value && new Spacebars.SafeString(value.replace(/\\n/g,'<br>')) || \"\";                                      // 292\n  },                                                                                                                  // 293\n                                                                                                                      // 294\n  inputValue : function() {                                                                                           // 295\n\tvar val = (this.editingValue !== undefined) ? this.editingValue : this.value;                                        // 296\n    var value = (this.type === 'number' && val === 0) ? 0 : val || EditableText._drillDown(this.context,this.field);  // 297\n    return (this.type === 'number' && value === 0) ? 0 : value && value.toString() || \"\";                             // 298\n  },                                                                                                                  // 299\n                                                                                                                      // 300\n  substitute : function(userCanNotEdit) {                                                                             // 301\n    var substitute = !(this.value || EditableText._drillDown(this.context,this.field)) && ((userCanNotEdit) ? (this.emptyText && Spacebars.SafeString(this.emptyText.toString())) : (this.substitute && Spacebars.SafeString(this.substitute.toString())));\n\treturn substitute;                                                                                                   // 303\n  },                                                                                                                  // 304\n                                                                                                                      // 305\n  title : function() {                                                                                                // 306\n    return this.title || ((this.eventType === 'dblclick') ? 'double click' : 'click') + ' to edit';                   // 307\n  },                                                                                                                  // 308\n                                                                                                                      // 309\n  canEditText : function() {                                                                                          // 310\n    var userCanEdit = EditableText.userCanEdit.call(this,this.context,Mongo.Collection.get(this.collection));         // 311\n    return (typeof this.userCanEdit !== 'undefined') ? (this.userCanEdit && userCanEdit) : userCanEdit;               // 312\n  },                                                                                                                  // 313\n                                                                                                                      // 314\n  content : function() {                                                                                              // 315\n    var value = (typeof this.value !== 'undefined') ? this.value : EditableText._drillDown(this.context,this.field);  // 316\n    var val = (_.isString(value)) ? (((typeof this.trustHtml !== 'undefined' && this.trustHtml || EditableText.trustHtml) || (this.wysiwyg && !EditableText.wysiwyg)) && new Spacebars.SafeString(value.replace(/\\n/g,'<br>')) || value) : ((value || value === 0) ? value.toString() : \"\");\n    return val;                                                                                                       // 318\n  },                                                                                                                  // 319\n                                                                                                                      // 320\n  trustHtml : function() {                                                                                            // 321\n    return typeof this.trustHtml !== 'undefined' && this.trustHtml || EditableText.trustHtml;                         // 322\n  },                                                                                                                  // 323\n                                                                                                                      // 324\n  toolsPosition : function(pos) {                                                                                     // 325\n    return this.toolbarPosition === pos;                                                                              // 326\n  },                                                                                                                  // 327\n                                                                                                                      // 328\n  initOptions : function() {                                                                                          // 329\n    var data = this;                                                                                                  // 330\n\tvar derivedOptions = (data.derivedOptions) ? EditableText._callback.call(data,'derivedOptions',data) : {};           // 331\n\tvar opts = _.extend(data.options || {}, _.isObject(derivedOptions) && derivedOptions || {});                         // 332\n    if (opts) {                                                                                                       // 333\n      _.each(opts, function (value, key) {                                                                            // 334\n        if (data[key] === undefined) {                                                                                // 335\n          data[key] = value;                                                                                          // 336\n        }                                                                                                             // 337\n      });                                                                                                             // 338\n\t  var context = opts.context || opts.doc || opts.document || opts.obj || opts.object || opts.data || opts.dataContext;\n      if (context !== undefined) {                                                                                    // 340\n        data.context = context;                                                                                       // 341\n      }                                                                                                               // 342\n    }                                                                                                                 // 343\n\treturn data;                                                                                                         // 344\n  },                                                                                                                  // 345\n                                                                                                                      // 346\n  controlTemplate : function () {                                                                                     // 347\n\treturn this.editor && EditableText.editors[this.editor] && EditableText.editors[this.editor].template;               // 348\n  },                                                                                                                  // 349\n                                                                                                                      // 350\n  controlData : function () {                                                                                         // 351\n\treturn this;                                                                                                         // 352\n  }                                                                                                                   // 353\n                                                                                                                      // 354\n});                                                                                                                   // 355\n                                                                                                                      // 356\n                                                                                                                      // 357\n// ******                                                                                                             // 358\n// EVENTS                                                                                                             // 359\n// ******                                                                                                             // 360\n                                                                                                                      // 361\nTemplate.body.events({                                                                                                // 362\n  'click .editable-text-trigger, mousedown .editable-text-trigger, dblclick .editable-text-trigger' : function(evt) {\n\tif (!EditableText.__blockEditEvent) {                                                                                // 364\n      $(evt.currentTarget).find('.editable-text').trigger(evt.type);                                                  // 365\n\t}                                                                                                                    // 366\n\telse {                                                                                                               // 367\n\t  EditableText.__blockEditEvent = false;\t                                                                            // 368\n\t}                                                                                                                    // 369\n  }                                                                                                                   // 370\n});                                                                                                                   // 371\n                                                                                                                      // 372\nEditableText.okCancelEvents = {};                                                                                     // 373\n                                                                                                                      // 374\nEditableText.okCancelEvents.ok = function (value, evt, tmpl) {                                                        // 375\n  evt.stopImmediatePropagation();                                                                                     // 376\n  evt.stopPropagation();                                                                                              // 377\n  var isEscape = false;                                                                                               // 378\n  EditableText._makeUpdate.call(this, value, isEscape, evt.type);                                                     // 379\n  tmpl.selected.set(false);                                                                                           // 380\n  EditableText._callback.call(this, 'onStopEditing', tmpl.data.context);                                              // 381\n}                                                                                                                     // 382\n                                                                                                                      // 383\nEditableText.okCancelEvents.cancel = function (value, evt, tmpl) {                                                    // 384\n  evt.stopImmediatePropagation();                                                                                     // 385\n  // Check for removeEmpty update, in case a document has been auto inserted and user clicks escape                   // 386\n  // But set the flag isEscape so regular updates are not made                                                        // 387\n  var isEscape = true;                                                                                                // 388\n  EditableText._makeUpdate.call(this, value, isEscape);                                                               // 389\n  tmpl.selected.set(false);                                                                                           // 390\n  EditableText._callback.call(this, 'onStopEditing', tmpl.data.context);                                              // 391\n}                                                                                                                     // 392\n                                                                                                                      // 393\nEditableText.editing_key_press = function(elem, inputClass) {                                                         // 394\n  if (EditableText.editing_key_press.fakeEl === undefined) {                                                          // 395\n    EditableText.editing_key_press.fakeEl = $('<span class=\"' + (inputClass || '') + '\">').hide().appendTo(document.body);\n  }                                                                                                                   // 397\n  var el = $(elem);                                                                                                   // 398\n  EditableText.editing_key_press.fakeEl.text(el.val());                                                               // 399\n  var width = EditableText.editing_key_press.fakeEl.width() + 20;                                                     // 400\n  el.width(width);                                                                                                    // 401\n  el.css('min-width', width);                                                                                         // 402\n}                                                                                                                     // 403\n                                                                                                                      // 404\nTemplate.editable_text_widget.events(EditableText._okCancelEvents('.wide-text-edit', EditableText.okCancelEvents));   // 405\nTemplate.editable_text_widget.events({                                                                                // 406\n  'keyup .wide-text-edit' : function (evt) {                                                                          // 407\n\tif (this.editor) {                                                                                                   // 408\n\t  return;\t                                                                                                           // 409\n\t}                                                                                                                    // 410\n\tif (this.autoResize) {                                                                                               // 411\n\t  EditableText.editing_key_press(evt.target, this.inputClass);\t                                                      // 412\n\t}                                                                                                                    // 413\n  }                                                                                                                   // 414\n});                                                                                                                   // 415\nTemplate.editable_text_widget.events(EditableText._okCancelEvents('.text-area-edit', EditableText.okCancelEvents));   // 416\nTemplate.editable_text_widget.events({                                                                                // 417\n  'mousedown .editable-text, click .editable-text, dblclick .editable-text' : function (evt, tmpl) {                  // 418\n\tif (this.editor) {                                                                                                   // 419\n\t  return;\t                                                                                                           // 420\n\t}                                                                                                                    // 421\n\tif (this.stopPropagation) {                                                                                          // 422\n      evt.stopImmediatePropagation();                                                                                 // 423\n      evt.stopPropagation();                                                                                          // 424\n\t}                                                                                                                    // 425\n\tEditableText.__blockEditEvent = true;                                                                                // 426\n    // This is the click event that opens the field for editing                                                       // 427\n    var eventType = this.eventType || ((EditableText.wysiwyg && this.wysiwyg) ? 'mousedown' : 'click');               // 428\n    if (eventType !== evt.type) {                                                                                     // 429\n      return;                                                                                                         // 430\n    }                                                                                                                 // 431\n    var textarea = (this.textarea && !this.wysiwyg) || (this.wysiwyg && !EditableText.wysiwyg);                       // 432\n    var wysiwyg = EditableText.wysiwyg && this.wysiwyg;                                                               // 433\n    var obj = this.context;                                                                                           // 434\n    var Collection = Mongo.Collection.get(this.collection);                                                           // 435\n    if (this.autoInsert && obj && !obj._id && _.isObject(obj) && EditableText.userCanEdit.call(this, obj, Collection)) { // This is quite involved -- you need an object with all context info, but no _id field for auto-creation to occur\n      if (typeof this.value !== 'undefined' && this.value !== obj[this.field]) {                                      // 437\n        obj[this.field] = this.value;                                                                                 // 438\n      }                                                                                                               // 439\n      // Create an object                                                                                             // 440\n      EditableText.insert.call(this, Collection, obj);                                                                // 441\n\t  EditableText.__blockEditEvent = false;                                                                             // 442\n      evt.stopImmediatePropagation();                                                                                 // 443\n      evt.stopPropagation();                                                                                          // 444\n      return;                                                                                                         // 445\n    }                                                                                                                 // 446\n    if (obj && !tmpl.selected.get()) {                                                                                // 447\n      if (EditableText.userCanEdit.call(this, obj, Collection)) {                                                     // 448\n        // document.activeElement.blur(); // Make sure the focusout event fires first when switching editable text objects, so that the first one gets saved properly\n        tmpl.selected.set(true);                                                                                      // 450\n        Tracker.flush();                                                                                              // 451\n        if (!wysiwyg) {                                                                                               // 452\n          EditableText._activateInput(tmpl.$((textarea) ? 'textarea' :  'input'), this.dontSelectAll || false); // textarea\n\t\t  if (this.autoResize && !textarea) {                                                                               // 454\n\t\t\tEditableText.editing_key_press(tmpl.$('.wide-text-edit'), this.inputClass);                                        // 455\n\t\t  }                                                                                                                 // 456\n        }                                                                                                             // 457\n\t\tEditableText._callback.call(this, 'onStartEditing', tmpl.data.context);                                             // 458\n      }                                                                                                               // 459\n    }                                                                                                                 // 460\n\tEditableText.__blockEditEvent = false;                                                                               // 461\n  }                                                                                                                   // 462\n});                                                                                                                   // 463\n                                                                                                                      // 464\nTemplate.editable_text_widget.created = function () {                                                                 // 465\n  this.selected = new ReactiveVar();                                                                                  // 466\n}                                                                                                                     // 467\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/babrahams_editable-text/lib/editable_text_common.js                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nif (typeof EditableText === 'undefined') {                                                                            // 1\n  EditableText = {};                                                                                                  // 2\n}                                                                                                                     // 3\n                                                                                                                      // 4\n                                                                                                                      // 5\n// ******************************************                                                                         // 6\n// CONFIG that affects BOTH CLIENT AND SERVER                                                                         // 7\n// ******************************************                                                                         // 8\n                                                                                                                      // 9\nEditableText.userCanEdit = function(doc,Collection) {                                                                 // 10\n  // e.g. return doc.user_id = Meteor.userId();                                                                       // 11\n  return true;                                                                                                        // 12\n}                                                                                                                     // 13\n                                                                                                                      // 14\nEditableText.useTransactions = (typeof tx !== 'undefined' && _.isObject(tx.Transactions)) ? true : false;             // 15\nEditableText.clientControlsTransactions = false;                                                                      // 16\n                                                                                                                      // 17\nEditableText.maximumImageSize = 0; // Can't put image data in the editor by default                                   // 18\n                                                                                                                      // 19\n// This is the set of defaults for sanitizeHtml on the server (as set by the library itself)                          // 20\n// Required on the client for consistency of filtering on the paste event                                             // 21\nif (Meteor.isClient) {                                                                                                // 22\n  sanitizeHtml = {};                                                                                                  // 23\n  sanitizeHtml.defaults = {                                                                                           // 24\n    allowedTags: [ 'h3', 'h4', 'h5', 'h6', 'blockquote', 'p', 'a', 'ul', 'ol', 'nl', 'li', 'b', 'i', 'strong', 'em', 'strike', 'code', 'hr', 'br', 'div', 'table', 'thead', 'caption', 'tbody', 'tr', 'th', 'td', 'pre' ],\n    allowedAttributes: { a: [ 'href', 'name', 'target' ] },                                                           // 26\n    selfClosing: [ 'img', 'br', 'hr', 'area', 'base', 'basefont', 'input', 'link', 'meta' ],                          // 27\n    allowedSchemes: [ 'http', 'https', 'ftp', 'mailto' ]                                                              // 28\n  };                                                                                                                  // 29\n}                                                                                                                     // 30\n                                                                                                                      // 31\nMeteor.startup(function () {                                                                                          // 32\n  // The startup block is to allow apps to overwrite the sanitizeHtml defaults                                        // 33\n  EditableText.allowedHtml = {                                                                                        // 34\n\tallowedTags: sanitizeHtml.defaults.allowedTags.concat(['sub', 'sup', 'font', 'u', 's', 'span']),                     // 35\n\tallowedAttributes: _.extend(sanitizeHtml.defaults.allowedAttributes, {                                               // 36\n\t  font : ['size', 'face'],                                                                                           // 37\n\t  div : ['align', 'style', 'class'],                                                                                 // 38\n\t  span: ['style', 'class'],                                                                                          // 39\n\t  table: ['style', 'class'],                                                                                         // 40\n\t  td : ['rowspan', 'colspan', 'style', 'class'],                                                                     // 41\n\t  a: ['href', 'target', 'class'],                                                                                    // 42\n\t  i: ['class']                                                                                                       // 43\n\t}),                                                                                                                  // 44\n\tallowedSchemes:['http', 'https', 'ftp', 'mailto']                                                                    // 45\n  }                                                                                                                   // 46\n});;                                                                                                                  // 47\n                                                                                                                      // 48\n                                                                                                                      // 49\n// ******************************************                                                                         // 50\n// Functions that are intended for use in app                                                                         // 51\n// ******************************************                                                                         // 52\n                                                                                                                      // 53\n// Function for setting multiple config variable via a hash                                                           // 54\n                                                                                                                      // 55\nEditableText.config = function(config) {                                                                              // 56\n  if (_.isObject(config)) {                                                                                           // 57\n     _.each(config,function(val,key) {                                                                                // 58\n       if (_.contains(['userCanEdit','insert','update','remove'],key)) {                                              // 59\n         if (_.isFunction(val)) {                                                                                     // 60\n           EditableText[key] = val;                                                                                   // 61\n         }                                                                                                            // 62\n         else {                                                                                                       // 63\n           throw new Meteor.Error(key + ' must be a function');                                                       // 64\n         }                                                                                                            // 65\n       }                                                                                                              // 66\n       if (_.contains(['useTransactions','clientControlsTransactions','saveOnFocusout','trustHtml','useMethods'],key)) {\n         if (_.isBoolean(val)) {                                                                                      // 68\n           EditableText[key] = val;                                                                                   // 69\n         }                                                                                                            // 70\n         else {                                                                                                       // 71\n           throw new Meteor.Error(key + ' must be a boolean');                                                        // 72\n         }                                                                                                            // 73\n       }                                                                                                              // 74\n       if (_.contains(['collection2Options'], key)) {                                                                 // 75\n         if (_.isObject(val)) {                                                                                       // 76\n            EditableText[key] = val;                                                                                  // 77\n         }                                                                                                            // 78\n       }                                                                                                              // 79\n     });                                                                                                              // 80\n  }                                                                                                                   // 81\n  else {                                                                                                              // 82\n    throw new Meteor.Error('Editable text config object must be a hash of key value pairs. Config not changed.');     // 83\n  }                                                                                                                   // 84\n}                                                                                                                     // 85\n                                                                                                                      // 86\n// Function for registering callbacks                                                                                 // 87\n                                                                                                                      // 88\nEditableText.registerCallbacks = function(obj) {                                                                      // 89\n  if (_.isObject(obj)) {                                                                                              // 90\n    _.each(obj,function(val,key) {                                                                                    // 91\n      if (_.isFunction(val)) {                                                                                        // 92\n        EditableText._callbacks[key] = val;                                                                           // 93\n      }                                                                                                               // 94\n      else {                                                                                                          // 95\n        throw new Meteor.Error('Callbacks need to be functions. You passed a ' + typeof(val) + '.');                  // 96\n      }                                                                                                               // 97\n    });                                                                                                               // 98\n  }                                                                                                                   // 99\n  else {                                                                                                              // 100\n    throw new Meteor.Error('You must pass an object to register callbacks');                                          // 101\n  }                                                                                                                   // 102\n}                                                                                                                     // 103\n                                                                                                                      // 104\n                                                                                                                      // 105\n// *********************************                                                                                  // 106\n// INTERNAL PROPERTIES AND FUNCTIONS                                                                                  // 107\n// *********************************                                                                                  // 108\n                                                                                                                      // 109\nEditableText._callbacks = {};                                                                                         // 110\n                                                                                                                      // 111\nEditableText._mutatedDocIsObject = function (mutatedDoc) {                                                            // 112\n  return _.isObject(mutatedDoc) && !_.isArray(mutatedDoc) && !_.isDate(mutatedDoc) && !_.isFunction(mutatedDoc); // Just want real key-value pair type objects\n}                                                                                                                     // 114\n                                                                                                                      // 115\nEditableText._callback = function(callback, doc, originalValue) {                                                     // 116\n  // Note: 'beforeUpdate' and 'beforeInsertMultiple' callbacks are special-cased to use return values of any type, not just objects\n  // originalValue is only set on beforeUpdate and beforeInsertMultiple callbacks. It is of the form { value: <actual original value> }\n  // otherwise originalValue should be undefined                                                                      // 119\n  callback = String(callback);                                                                                        // 120\n  var self = this;                                                                                                    // 121\n  var callbackRan = false;                                                                                            // 122\n  if (self[callback] && _.isString(self[callback])) {                                                                 // 123\n    var mutatedDoc = EditableText._executeCallback(self[callback], self, doc, originalValue);                         // 124\n\tcallbackRan = true;                                                                                                  // 125\n\tvar mutatedDocIsObject = EditableText._mutatedDocIsObject(mutatedDoc);                                               // 126\n\tif (!originalValue && !mutatedDocIsObject) {                                                                         // 127\n\t  throw new Meteor.Error('Wrong type returned', 'Your callback function \"' + callback + '\" returned a ' + typeof mutatedDoc + '. An object was expected.');\t\n\t}                                                                                                                    // 129\n    doc = (originalValue) ? mutatedDoc : mutatedDocIsObject && mutatedDoc || doc;                                     // 130\n  }                                                                                                                   // 131\n  if (originalValue) {                                                                                                // 132\n\t// if the callback hasn't run, then the                                                                              // 133\n\t// doc is still the whole document,                                                                                  // 134\n\t// not the new value for the field                                                                                   // 135\n\tif (!callbackRan) {                                                                                                  // 136\n\t  doc = originalValue.value;\t                                                                                        // 137\n\t}                                                                                                                    // 138\n\tif (callbackRan && mutatedDocIsObject && (_.has(doc, '$set') || _.has(doc, '$addToSet') || _.has(doc, '$push'))) {   // 139\n\t  return {modifier: doc};                                                                                            // 140\n\t}                                                                                                                    // 141\n\telse {                                                                                                               // 142\n\t  return {value: doc};                                                                                               // 143\n\t}                                                                                                                    // 144\n  }                                                                                                                   // 145\n  return doc;                                                                                                         // 146\n}                                                                                                                     // 147\n                                                                                                                      // 148\nEditableText._executeCallback = function(callbackFunctionName, self, doc, originalValue) { // originalValue.value is the default to return if no updates have been made\n  var mutatedDoc = (originalValue && {value: originalValue.value}) || doc;                                            // 150\n  var callbackFunction = EditableText._callbacks[callbackFunctionName];                                               // 151\n  if (callbackFunction && _.isFunction(callbackFunction)) {                                                           // 152\n    callbackMutatedDoc = callbackFunction.call(self, doc, Mongo.Collection.get(self.collection), originalValue && originalValue.value || undefined, originalValue && originalValue.modifier || undefined);\n\tif (!_.isUndefined(callbackMutatedDoc)) {                                                                            // 154\n\t  mutatedDoc = callbackMutatedDoc;                                                                                   // 155\n\t}                                                                                                                    // 156\n  }                                                                                                                   // 157\n  else {                                                                                                              // 158\n    throw new Meteor.Error('Callback not a function', 'Could not execute callback. Reason: ' + ((callbackFunction) ? '\"' + callbackFunctionName + '\" is not a function, it\\'s a ' + typeof(callbackFunction) + '.' : 'no callback function called \"' + callbackFunctionName + '\" has been registered via EditableText.registerCallbacks.'));    \n  }                                                                                                                   // 160\n  return mutatedDoc;                                                                                                  // 161\n}                                                                                                                     // 162\n                                                                                                                      // 163\nEditableText._drillDown = function(obj,key) {                                                                         // 164\n  return Meteor._get.apply(null,[obj].concat(key.split('.')));                                                        // 165\n}                                                                                                                     // 166\n                                                                                                                      // 167\nEditableText._allowedHtml = function() {                                                                              // 168\n  var allowed = EditableText.allowedHtml;                                                                             // 169\n  if (EditableText.maximumImageSize && _.isNumber(EditableText.maximumImageSize) && allowed) {                        // 170\n    allowed.allowedTags.push('img');                                                                                  // 171\n    allowed.allowedAttributes.img = ['src'];                                                                          // 172\n    allowed.allowedSchemes.push('data');                                                                              // 173\n  }                                                                                                                   // 174\n  return allowed;                                                                                                     // 175\n}                                                                                                                     // 176\n                                                                                                                      // 177\n                                                                                                                      // 178\n// *************                                                                                                      // 179\n// UPDATE METHOD                                                                                                      // 180\n// *************                                                                                                      // 181\n                                                                                                                      // 182\nMeteor.methods({                                                                                                      // 183\n  _editableTextWrite : function (action, data, modifier, transaction) {                                               // 184\n    check(action, String);                                                                                            // 185\n    check(data, Object);                                                                                              // 186\n    check(data.collection, String);                                                                                   // 187\n    check(data.context, (typeof FS !== \"undefined\" && FS.File) ? Match.OneOf(Object, FS.File) : Object);              // 188\n    check(modifier, (action === 'update') ? Object : null);                                                           // 189\n    check(transaction, Boolean);                                                                                      // 190\n    check(data.objectTypeText, Match.OneOf(String, undefined));                                                       // 191\n    var hasPackageCollection2 = !!Package['aldeed:collection2'];                                                      // 192\n    var hasPackageSimpleSchema = !!Package['aldeed:simple-schema'];                                                   // 193\n    var Collection = Mongo.Collection.get(data.collection);                                                           // 194\n    var c2optionsHashRequired = hasPackageCollection2 && hasPackageSimpleSchema && _.isFunction(Collection.simpleSchema) && Collection._c2;\n    if (Collection && EditableText.userCanEdit.call(data, data.context, Collection)) {                                // 196\n\t  if (Meteor.isServer) {                                                                                             // 197\n        if (_.isBoolean(EditableText.useTransactions) && !EditableText.clientControlsTransactions) {                  // 198\n          transaction = EditableText.useTransactions;                                                                 // 199\n        }                                                                                                             // 200\n      }                                                                                                               // 201\n      if (typeof tx === 'undefined') {                                                                                // 202\n        transaction = false;                                                                                          // 203\n      }                                                                                                               // 204\n      var setStatus = function (err, res) {                                                                           // 205\n        data.status = {error: err, result: res};                                                                      // 206\n      }                                                                                                               // 207\n\t  var options = (transaction) ? {instant: true} : {};                                                                // 208\n      if (c2optionsHashRequired) {                                                                                    // 209\n        options = _.extend(options, EditableText.collection2options || {});                                           // 210\n      }                                                                                                               // 211\n      switch (action) {                                                                                               // 212\n        case 'insert' :                                                                                               // 213\n          if (Meteor.isServer) {                                                                                      // 214\n            // run all string fields through sanitizeHtml                                                             // 215\n            data.context = EditableText.sanitizeObject(data.context);                                                 // 216\n          }                                                                                                           // 217\n          if (transaction) {                                                                                          // 218\n            if (data.objectTypeText || data.transactionInsertText) {                                                  // 219\n              tx.start(data.transactionInsertText || 'add ' + data.objectTypeText);                                   // 220\n            }                                                                                                         // 221\n            data.context = EditableText._callback.call(data, 'beforeInsert', data.context) || data.context;           // 222\n            var new_id = tx.insert(Collection, data.context, options, setStatus);                                     // 223\n            EditableText._callback.call(data, 'afterInsert', Collection.findOne({_id: new_id}));                      // 224\n            if (data.objectTypeText || data.transactionInsertText) {                                                  // 225\n              tx.commit();                                                                                            // 226\n            }                                                                                                         // 227\n          }                                                                                                           // 228\n          else {                                                                                                      // 229\n            data.context = EditableText._callback.call(data,'beforeInsert',data.context) || data.context;             // 230\n            var new_id = (c2optionsHashRequired) ? Collection.insert(data.context,options,setStatus) : Collection.insert(data.context, setStatus);\n            EditableText._callback.call(data, 'afterInsert', Collection.findOne({_id: new_id}));                      // 232\n          }                                                                                                           // 233\n          return new_id;                                                                                              // 234\n          break;                                                                                                      // 235\n        case 'update' :                                                                                               // 236\n          if (Meteor.isServer) {                                                                                      // 237\n            var newValue, sanitized = false;                                                                          // 238\n            if (modifier[\"$set\"] && _.isString(modifier[\"$set\"][data.field])) {                                       // 239\n            // run through sanitizeHtml                                                                               // 240\n              newValue = modifier[\"$set\"][data.field] = EditableText.sanitizeString(modifier[\"$set\"][data.field], data.wysiwyg || !!data.editor);\n              sanitized = true;                                                                                       // 242\n            }                                                                                                         // 243\n            if (modifier[\"$set\"] && _.isArray(modifier[\"$set\"][data.field])) {                                        // 244\n              newValue = modifier[\"$set\"][data.field] = _.map(modifier[\"$set\"][data.field],function (str) {return EditableText.sanitizeString(str, data.wysiwyg || !!data.editor);});\n              sanitized = true;                                                                                       // 246\n            }                                                                                                         // 247\n            if (modifier[\"$set\"] && _.isNumber(modifier[\"$set\"][data.field])) {                                       // 248\n              newValue = modifier[\"$set\"][data.field];                                                                // 249\n              sanitized = true;                                                                                       // 250\n            }                                                                                                         // 251\n            if (modifier[\"$addToSet\"] && _.isString(modifier[\"$addToSet\"][data.field])) {                             // 252\n              newValue = modifier[\"$addToSet\"][data.field] = EditableText.sanitizeString(modifier[\"$addToSet\"][data.field], data.wysiwyg || !!data.editor);\n              sanitized = true;                                                                                       // 254\n            }                                                                                                         // 255\n            if (modifier[\"$push\"] && _.isString(modifier[\"$push\"][data.field])) {                                     // 256\n              newValue = modifier[\"$push\"][data.field] = EditableText.sanitizeString(modifier[\"$push\"][data.field], data.wysiwyg || !!data.editor);\n              sanitized = true;                                                                                       // 258\n            }                                                                                                         // 259\n            if (!sanitized) {                                                                                         // 260\n              throw new Meteor.Error('Wrong data type sent for update');                                              // 261\n\t\t\t  return;                                                                                                          // 262\n            }                                                                                                         // 263\n          }                                                                                                           // 264\n          else {                                                                                                      // 265\n            newValue = (modifier[\"$set\"] && (modifier[\"$set\"][data.field] || (data.type !== 'number' && modifier[\"$set\"][data.field] === '') || (data.type === 'number' && modifier[\"$set\"][data.field] === 0))) || (modifier[\"$addToSet\"] && modifier[\"$addToSet\"][data.field]) || (modifier[\"$push\"] && modifier[\"$push\"][data.field]);\n          }                                                                                                           // 267\n          data.newValue = newValue;                                                                                   // 268\n          data.oldValue = EditableText._drillDown(data.context, data.field);                                          // 269\n\t\t  var callbackModifier = function (modifier, key, val) {                                                            // 270\n\t\t\t/*if (val === undefined) {                                                                                         // 271\n\t\t\t  return modifier;                                                                                                 // 272\n\t\t\t}*/                                                                                                                // 273\n\t\t\tvar modifierTypes = [\"$set\", \"$addToSet\", \"$push\"];                                                                // 274\n\t\t\tvar modType = _.find(modifierTypes, function (mt) {                                                                // 275\n\t\t\t  return _.has(modifier, mt);                                                                                      // 276\n\t\t\t});                                                                                                                // 277\n\t\t\tif (modType) {                                                                                                     // 278\n\t\t\t  modifier[modType][key] = val;                                                                                    // 279\n\t\t\t}                                                                                                                  // 280\n\t\t\treturn modifier;                                                                                                   // 281\n\t\t  }                                                                                                                 // 282\n          if (transaction) {                                                                                          // 283\n            if (data.transactionUpdateText || data.objectTypeText) {                                                  // 284\n              tx.start(data.transactionUpdateText || 'update ' + data.objectTypeText);                                // 285\n            }                                                                                                         // 286\n            var newVal = EditableText._callback.call(data,'beforeUpdate',data.context, {value: data.newValue, modifier: modifier}); // By setting the fourth parameter, we are expecting a value, not the whole doc, to be returned from the callback\n\t\t\tmodifier = callbackModifier(newVal.modifier || modifier, data.field, newVal.value);                                // 288\n            tx.update(Collection,data.context._id, modifier, options, setStatus);                                     // 289\n            EditableText._callback.call(data, 'afterUpdate', Collection.findOne({_id: data.context._id}));            // 290\n            if (data.transactionUpdateText || data.objectTypeText) {                                                  // 291\n              tx.commit();                                                                                            // 292\n            }                                                                                                         // 293\n          }                                                                                                           // 294\n          else {                                                                                                      // 295\n            var newVal = EditableText._callback.call(data, 'beforeUpdate', data.context, {value: data.newValue, modifier: modifier});\n\t\t\tmodifier = callbackModifier(newVal.modifier || modifier, data.field, newVal.value);                                // 297\n            if (c2optionsHashRequired) {                                                                              // 298\n              Collection.update({_id: data.context._id}, modifier, options, setStatus);                               // 299\n            }                                                                                                         // 300\n            else {                                                                                                    // 301\n              Collection.update({_id: data.context._id}, modifier, setStatus);                                        // 302\n            }                                                                                                         // 303\n            EditableText._callback.call(data, 'afterUpdate', Collection.findOne({_id: data.context._id}));            // 304\n          }                                                                                                           // 305\n          break;                                                                                                      // 306\n        case 'remove' :                                                                                               // 307\n          if (transaction) {                                                                                          // 308\n            if (data.transactionRemoveText || data.objectTypeText) {                                                  // 309\n              tx.start(data.transactionRemoveText || 'remove ' + data.objectTypeText);                                // 310\n            }                                                                                                         // 311\n            data.context = EditableText._callback.call(data, 'beforeRemove', data.context) || data.context;           // 312\n            tx.remove(Collection, data.context._id, {instant: true}, setStatus);                                      // 313\n            EditableText._callback.call(data, 'afterRemove', data.context);                                           // 314\n            if (data.transactionRemoveText || data.objectTypeText) {                                                  // 315\n              tx.commit();                                                                                            // 316\n            }                                                                                                         // 317\n          }                                                                                                           // 318\n          else {                                                                                                      // 319\n            data.context = EditableText._callback.call(data, 'beforeRemove', data.context) || data.context;           // 320\n            Collection.remove({_id: data.context._id}, setStatus);                                                    // 321\n            EditableText._callback.call(data, 'afterRemove', data.context);                                           // 322\n          }                                                                                                           // 323\n          break;                                                                                                      // 324\n      }                                                                                                               // 325\n    }                                                                                                                 // 326\n  }                                                                                                                   // 327\n});                                                                                                                   // 328\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['babrahams:editable-text'] = {}, {\n  EditableText: EditableText,\n  sanitizeHtml: sanitizeHtml\n});\n\n})();\n","servePath":"/packages/babrahams_editable-text.js","sourceMap":{"version":3,"sources":["/packages/babrahams_editable-text/lib/template.editable_text.js","/packages/babrahams_editable-text/lib/editable_text.js","/packages/babrahams_editable-text/lib/editable_text_common.js"],"names":[],"mappingstldfile":"/packages/babrahams_editable-text.js","sourcesContent":["\nTemplate.__checkName(\"editableText\");\nTemplate[\"editableText\"] = new Template(\"Template.editableText\", (function() {\n  var view = this;\n  return Blaze._TemplateWith(function() {\n    return {\n      context: Spacebars.call(view.lookup(\"context\")),\n      collection: Spacebars.call(view.lookup(\"collection\")),\n      field: Spacebars.call(view.lookup(\"field\")),\n      value: Spacebars.call(view.lookup(\"value\")),\n      editingValue: Spacebars.call(view.lookup(\"editingValue\")),\n      textarea: Spacebars.call(view.lookup(\"textarea\")),\n      wysiwyg: Spacebars.call(view.lookup(\"wysiwyg\")),\n      acceptEmpty: Spacebars.call(view.lookup(\"acceptEmpty\")),\n      removeEmpty: Spacebars.call(view.lookup(\"removeEmpty\")),\n      eventType: Spacebars.call(view.lookup(\"eventType\")),\n      type: Spacebars.call(view.lookup(\"type\")),\n      objectTypeText: Spacebars.call(view.lookup(\"objectTypeText\")),\n      \"class\": Spacebars.call(view.lookup(\"class\")),\n      inputClass: Spacebars.call(view.lookup(\"inputClass\")),\n      autoInsert: Spacebars.call(view.lookup(\"autoInsert\")),\n      beforeInsert: Spacebars.call(view.lookup(\"beforeInsert\")),\n      afterInsert: Spacebars.call(view.lookup(\"afterInsert\")),\n      wysiwygStyle: Spacebars.call(view.lookup(\"wysiwygStyle\")),\n      style: Spacebars.call(view.lookup(\"style\")),\n      inputStyle: Spacebars.call(view.lookup(\"inputStyle\")),\n      substitute: Spacebars.call(view.lookup(\"substitute\")),\n      title: Spacebars.call(view.lookup(\"title\")),\n      userCanEdit: Spacebars.call(view.lookup(\"userCanEdit\")),\n      useTransaction: Spacebars.call(view.lookup(\"useTransaction\")),\n      beforeUpdate: Spacebars.call(view.lookup(\"beforeUpdate\")),\n      afterUpdate: Spacebars.call(view.lookup(\"afterUpdate\")),\n      beforeRemove: Spacebars.call(view.lookup(\"beforeRemove\")),\n      afterRemove: Spacebars.call(view.lookup(\"afterRemove\")),\n      onStartEditing: Spacebars.call(view.lookup(\"onStartEditing\")),\n      onStopEditing: Spacebars.call(view.lookup(\"onStopEditing\")),\n      onShowToolbar: Spacebars.call(view.lookup(\"onShowToolbar\")),\n      onHideToolbar: Spacebars.call(view.lookup(\"onHideToolbar\")),\n      placeholder: Spacebars.call(view.lookup(\"placeholder\")),\n      saveOnFocusout: Spacebars.call(view.lookup(\"saveOnFocusout\")),\n      noSaveOnReturn: Spacebars.call(view.lookup(\"noSaveOnReturn\")),\n      dontSelectAll: Spacebars.call(view.lookup(\"dontSelectAll\")),\n      showSaveButton: Spacebars.call(view.lookup(\"showSaveButton\")),\n      trustHtml: Spacebars.call(view.lookup(\"trustHtml\")),\n      useMethod: Spacebars.call(view.lookup(\"useMethod\")),\n      toolbarPosition: Spacebars.call(view.lookup(\"toolbarPosition\")),\n      options: Spacebars.call(view.lookup(\"options\")),\n      autoResize: Spacebars.call(view.lookup(\"autoResize\")),\n      emptyText: Spacebars.call(view.lookup(\"emptyText\")),\n      showToolbar: Spacebars.call(view.lookup(\"showToolbar\")),\n      derivedOptions: Spacebars.call(view.lookup(\"derivedOptions\")),\n      template: Spacebars.call(view.lookup(\"template\")),\n      stopPropagation: Spacebars.call(view.lookup(\"stopPropagation\")),\n      editor: Spacebars.call(view.lookup(\"editor\")),\n      editorOptions: Spacebars.call(view.lookup(\"editorOptions\"))\n    };\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"editable_text_widget\"));\n  });\n}));\n\nTemplate.__checkName(\"editable_text_widget\");\nTemplate[\"editable_text_widget\"] = new Template(\"Template.editable_text_widget\", (function() {\n  var view = this;\n  return Spacebars.With(function() {\n    return Spacebars.call(view.lookup(\"initOptions\"));\n  }, function() {\n    return Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"controlTemplate\"));\n    }, function() {\n      return Blaze._TemplateWith(function() {\n        return {\n          template: Spacebars.call(view.lookup(\"controlTemplate\")),\n          data: Spacebars.call(view.lookup(\"controlData\"))\n        };\n      }, function() {\n        return Spacebars.include(function() {\n          return Spacebars.call(Template.__dynamic);\n        });\n      });\n    }, function() {\n      return Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"editing\"));\n      }, function() {\n        return Blaze.If(function() {\n          return Spacebars.call(view.lookup(\"textarea\"));\n        }, function() {\n          return [ Blaze.If(function() {\n            return Spacebars.call(view.lookup(\"showSaveButton\"));\n          }, function() {\n            return HTML.BUTTON({\n              \"class\": \"editable-text-save-button\"\n            }, \"Save\");\n          }), HTML.TEXTAREA({\n            \"class\": function() {\n              return [ \"text-area-edit \", Spacebars.mustache(view.lookup(\"inputClass\")) ];\n            },\n            placeholder: function() {\n              return Spacebars.mustache(view.lookup(\"placeholder\"));\n            },\n            title: function() {\n              return Blaze.If(function() {\n                return Spacebars.call(view.lookup(\"trustHtml\"));\n              }, function() {\n                return \"Hold SHIFT and press ENTER for a new line\";\n              });\n            },\n            style: function() {\n              return Spacebars.mustache(view.lookup(\"inputStyle\"));\n            },\n            value: function() {\n              return Spacebars.mustache(view.lookup(\"value\"));\n            }\n          }) ];\n        }, function() {\n          return Blaze.If(function() {\n            return Spacebars.call(view.lookup(\"isWysiwyg\"));\n          }, function() {\n            return HTML.DIV({\n              \"class\": \"wysiwyg-container\"\n            }, Blaze.If(function() {\n              return Spacebars.dataMustache(view.lookup(\"toolsPosition\"), \"top\");\n            }, function() {\n              return Spacebars.include(view.lookupTemplate(\"wysiwyg\"));\n            }), HTML.DIV({\n              \"class\": function() {\n                return [ \"wysiwyg \", Spacebars.mustache(view.lookup(\"inputClass\")) ];\n              },\n              style: function() {\n                return Spacebars.mustache(view.lookup(\"inputStyle\"));\n              }\n            }, Blaze.View(\"lookup:wysiwygContent\", function() {\n              return Spacebars.mustache(view.lookup(\"wysiwygContent\"));\n            })), Blaze.Unless(function() {\n              return Spacebars.dataMustache(view.lookup(\"toolsPosition\"), \"top\");\n            }, function() {\n              return Spacebars.include(view.lookupTemplate(\"wysiwyg\"));\n            }));\n          }, function() {\n            return HTML.INPUT({\n              \"class\": function() {\n                return [ \"wide-text-edit \", Spacebars.mustache(view.lookup(\"inputClass\")) ];\n              },\n              type: \"text\",\n              value: function() {\n                return Spacebars.mustache(view.lookup(\"inputValue\"));\n              },\n              placeholder: function() {\n                return Spacebars.mustache(view.lookup(\"placeholder\"));\n              },\n              style: function() {\n                return Spacebars.mustache(view.lookup(\"inputStyle\"));\n              }\n            });\n          });\n        });\n      }, function() {\n        return Blaze.If(function() {\n          return Spacebars.call(view.lookup(\"canEditText\"));\n        }, function() {\n          return Blaze.If(function() {\n            return Spacebars.call(view.lookup(\"substitute\"));\n          }, function() {\n            return HTML.SPAN({\n              title: function() {\n                return Spacebars.mustache(view.lookup(\"title\"));\n              },\n              \"class\": function() {\n                return [ \"editable-text \", Spacebars.mustache(view.lookup(\"class\")), \" et-\", Spacebars.mustache(Spacebars.dot(view.lookup(\"context\"), \"_id\")) ];\n              }\n            }, Blaze.View(\"lookup:substitute\", function() {\n              return Spacebars.mustache(view.lookup(\"substitute\"));\n            }));\n          }, function() {\n            return Blaze.If(function() {\n              return Spacebars.call(view.lookup(\"isWysiwyg\"));\n            }, function() {\n              return HTML.DIV({\n                \"class\": \"wysiwyg-content\"\n              }, HTML.DIV({\n                \"class\": function() {\n                  return [ \"editable-text \", Spacebars.mustache(view.lookup(\"class\")), \" et-\", Spacebars.mustache(Spacebars.dot(view.lookup(\"context\"), \"_id\")) ];\n                },\n                title: function() {\n                  return Spacebars.mustache(view.lookup(\"title\"));\n                },\n                style: function() {\n                  return Spacebars.mustache(view.lookup(\"style\"));\n                }\n              }, Blaze.View(\"lookup:wysiwygContent\", function() {\n                return Spacebars.mustache(view.lookup(\"wysiwygContent\"));\n              })));\n            }, function() {\n              return HTML.SPAN({\n                \"class\": function() {\n                  return [ \"editable-text \", Spacebars.mustache(view.lookup(\"class\")), \" et-\", Spacebars.mustache(Spacebars.dot(view.lookup(\"context\"), \"_id\")) ];\n                },\n                title: function() {\n                  return Spacebars.mustache(view.lookup(\"title\"));\n                }\n              }, Blaze.View(\"lookup:content\", function() {\n                return Spacebars.mustache(view.lookup(\"content\"));\n              }));\n            });\n          });\n        }, function() {\n          return Spacebars.With(function() {\n            return Spacebars.dataMustache(view.lookup(\"substitute\"), true);\n          }, function() {\n            return Blaze.View(\"lookup:.\", function() {\n              return Spacebars.mustache(view.lookup(\".\"));\n            });\n          }, function() {\n            return Blaze.If(function() {\n              return Spacebars.call(view.lookup(\"isWysiwyg\"));\n            }, function() {\n              return Blaze.View(\"lookup:wysiwygContent\", function() {\n                return Spacebars.mustache(view.lookup(\"wysiwygContent\"));\n              });\n            }, function() {\n              return Blaze.View(\"lookup:content\", function() {\n                return Spacebars.mustache(view.lookup(\"content\"));\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n}));\n","EditableText = {};\n\n// *******************************\n// CONFIG that only affects CLIENT\n// *******************************\n\nEditableText.saveOnFocusout = true;\nEditableText.trustHtml = false;\nEditableText.useMethods = true; // only set this to false if you really know what you're doing and have taken appropriate measures to thwart XSS attacks\nEditableText.editors = {}; // where other packages register different editors that can supplant the UI functionality of this package, while using the mutator methods it makes available\nEditableText.isTouchDevice = ('ontouchstart' in document.documentElement);\n\n// The `EditableText.insert`, `EditableText.update`, `EditableText.remove` functions can be optionally overwritten if necessary\n// Not recommended, though. It's a lot of work to get the same functionality that the package provides by default\n\nEditableText.insert = function (Collection, doc) {\n  var self = _.clone(this); // Don't want to update the original\n  if (EditableText.useMethods && this.useMethod !== false || this.useMethod) {\n    var objId = Random.id();\n    self.context = _.clone(self.context); // need to clone this field again because this.context is an object and _.clone isn't a deep clone\n    self.context._id = objId;\n    Meteor.call('_editableTextWrite', 'insert', self, null, EditableText._useTransaction(this), function (err, res) {\n      if (err) {\n        console.log(err);\n        return;  \n      }\n      // Just in case it didn't get into the DOM in time\n      /*Tracker.flush();\n      var elem = $('.et-' + objId);\n      if (elem.length) {\n        elem.eq(0).trigger((EditableText.wysiwyg && self.wysiwyg) ? 'mousedown' : 'click');\n      }*/\n    });\n    // TODO -- this new object needs to get `selected` set in its template instance (and the corresponding element needs to gain focus) wherever it lands in the DOM\n    // However, we have no easy way of getting its template instance, other than iterating over\n    // all template instances, looking for the one where the context._id matches the object_id value\n    // Unfortunately, I have no idea where the template instances are stored\n    // So using a filthy hack instead ...\n    // Getting the element(s) in the DOM with the right class and firing click event on the first one\n    // Too bad if this wasn't the element we really wanted to be editing\n    // Note: we can't fire events on them all as, if there are (even temporarily) duplicates in the DOM and removeEmpty=true, this could cause unwanted side effects (e.g. instant deletion after creation)\n    // This means that in cases when the newly inserted document field is available in multiple places on the screen, the wrong one might be selected for editing (i.e. one that wasn't where the user clicked)\n    // This is probably rare enough that we'll ignore it until it becomes a serious problem, at which time we'll come up with another hack\n    Tracker.flush(); // Put this here rather than in the callback to maintain latency compensation\n    var elem = $('.et-' + objId);\n    if (elem.length) {\n      elem.eq(0).trigger((EditableText.wysiwyg && self.wysiwyg) ? 'mousedown' : 'click');\n    }\n    return;\n  }\n  if (EditableText._useTransaction(this)) {\n    if (this.transactionInsertText || this.objectTypeText) {\n      tx.start(this.transactionInsertText || 'add ' + this.objectTypeText);  \n    }\n    EditableText._callback.call(self, 'beforeInsert', self.context);\n    var new_id = tx.insert(Collection, doc, {instant: true});\n    EditableText._callback.call(self, 'afterInsert', Collection.findOne({_id: new_id}));\n    if (this.transactionInsertText || this.objectTypeText) {\n      tx.commit();  \n    }\n  }\n  else {\n    doc = EditableText._callback.call(self, 'beforeInsert', self.context);\n    var new_id = Collection.insert(doc);\n    EditableText._callback.call(self, 'afterInsert', Collection.findOne({_id: new_id}));\n  }\n  // see above\n  Tracker.flush();\n  $('.et-' + new_id).eq(0).trigger((EditableText.wysiwyg && this.wysiwyg) ? 'mousedown' : 'click');\n  return new_id;\n}\n\nEditableText.update = function(Collection, doc, modifier) {\n  var self = this;\n  if (EditableText.useMethods && this.useMethod !== false || this.useMethod) {\n    Meteor.call('_editableTextWrite', 'update', this, modifier, EditableText._useTransaction(this), function (err, res) {\n      if (err) {\n        console.log(err);\n      }\n    });\n    return;\n  }\n  if (EditableText._useTransaction(this)) {\n    if (this.objectTypeText || this.transactionUpdateText) {\n      tx.start(this.transactionUpdateText || 'update ' + this.objectTypeText);  \n    }\n    EditableText._callback.call(self, 'beforeUpdate', doc);\n    // Important to send the id only, not the whole document (\"self\"),\n    // as this update is fired from all sorts of contexts, some of which are incomplete -- \n    // this will force the transaction script to find the relevant document with its full context from the database\n    tx.update(Collection, doc._id, modifier, {instant: true});\n    EditableText._callback.call(self, 'afterUpdate', Collection.findOne({_id: doc._id}));\n    if (this.objectTypeText || this.transactionUpdateText) {\n      tx.commit();  \n    }\n  }\n  else {\n    EditableText._callback.call(self, 'beforeUpdate', doc);\n    Collection.update({_id: doc._id}, modifier);\n    EditableText._callback.call(self, 'afterUpdate', Collection.findOne({_id: doc._id}));\n  }\n}\n\nEditableText.remove = function(Collection, doc) {\n  var self = this;\n  if (EditableText.useMethods && this.useMethod !== false || this.useMethod) {\n    Meteor.call('_editableTextWrite', 'remove', this, null, EditableText._useTransaction(this), function (err, res) {\n      if (err) {\n        console.log(err);\n      }\n    });\n    return;\n  }\n  if (EditableText._useTransaction(this)) {\n    if (this.objectTypeText || this.transactionRemoveText) {\n      tx.start(this.transactionRemoveText || 'remove ' + this.objectTypeText);  \n    }\n    EditableText._callback.call(self,'beforeRemove',doc);\n    tx.remove(Collection,doc._id,{instant:true});\n    EditableText._callback.call(self,'afterRemove',Collection.findOne({_id:doc._id}));\n    if (this.objectTypeText || this.transactionRemoveText) {\n      tx.commit();  \n    }\n  }\n  else {\n    EditableText._callback.call(self,'beforeRemove',doc);\n    Collection.remove({_id:doc._id});\n    EditableText._callback.call(self,'afterRemove',Collection.findOne({_id:doc._id}));\n  }\n}\n\n\n// *********************************\n// INTERNAL PROPERTIES AND FUNCTIONS\n// *********************************\n\nEditableText._removeEntities = function (html) {\n  return $.trim(html.replace(/&quot;/g, '\"').replace(/&gt;/g, '>').replace(/&lt;/g, '<').replace(/&nbsp;/g, ' '));\n}\n\n/*EditableText._linkify = function (text) {\n  return autolinker.link(text);\n}*/\n\nEditableText._useTransaction = function (data) {\n  return !!(typeof tx !== 'undefined' && ((EditableText.useTransactions && data.useTransaction !== false) || data.useTransaction));    \n}\n\nEditableText.__blockOkayEvent = false;\nEditableText.__blockEditEvent = false;\n\nTemplate.editableText.helpers({\n  context : function () {\n    return this.context || this.document || this.doc || this.object || this.obj || this.data || this.dataContext || Blaze._parentData(1);\n  }\n});\n\n// Returns an event map that handles the \"escape\" and \"return\" keys and\n// \"blur\" events on a text input (given by selector) and interprets them\n// as \"ok\" or \"cancel\".\n\nEditableText._okCancelEvents = function (selector, callbacks, acceptEmpty) {\n  var ok = callbacks.ok || function () {};\n  var cancel = callbacks.cancel || function () {};\n  var events = {};\n  events['keydown '+selector+', focusout '+selector] =\n    function (evt, tmpl) {\n      evt.stopImmediatePropagation();\n      var charCode = evt.which || evt.keyCode;\n      var value = $.trim(String($(evt.target).val() || \"\"));\n      if (evt.type === \"keydown\") {\n        switch (charCode) {\n          case 27 : // escape = cancel\n            cancel.call(this, value, evt, tmpl);\n            break;\n        }\n      }\n      if (evt.type === \"keydown\" && (charCode === 13 && !(evt.shiftKey || (typeof this.noSaveOnReturn !== 'undefined' && this.noSaveOnReturn))) || (evt.type === \"focusout\" && ((typeof this.saveOnFocusout !== 'undefined' && this.saveOnFocusout) || (typeof this.saveOnFocusout === 'undefined' && EditableText.saveOnFocusout)))) {\n        evt.preventDefault();\n        // blur/return/enter = ok/submit if non-empty\n        if ((value || (this.type === 'number' && parseInt(value) === 0)) || this.removeEmpty || (this.acceptEmpty || acceptEmpty)) {\n          if (!EditableText._blockOkayEvent) { \n            EditableText._blockOkayEvent = true;  \n            ok.call(this, value, evt, tmpl); // EditableText._linkify(value)\n            Meteor.defer(function () {\n              EditableText._blockOkayEvent = false;\n            });\n          }\n          else { // In case this value is set to true for some strange reason\n            EditableText._blockOkayEvent = false;    \n          }\n        }\n        else {\n          cancel.call(this, value, evt, tmpl);\n        }\n      }\n    };\n  return events;\n};\n\nEditableText._activateInput = function (input, dontSelect) {\n  if (input !== null) {\n    input.focus();\n    if (typeof dontSelect !== 'undefined' && dontSelect) {\n      return;\n    }\n    input.select();\n  }\n  else {\n    console.log('Input was null');  \n  }\n};\n\nEditableText._extractNumber = function (raw) {\n  if (typeof raw !== 'undefined') {\n    var numbers = raw.match(/[0-9]+/);\n    if (numbers) {\n      return parseInt(numbers[0], 10);\n    }\n  }\n  return 0;\n}\n\nEditableText._makeUpdate = function (value, isEscape, evtType) {\n  // value has already been trimmed with $.trim()\n  var currentValue = (this.editingValue || this.value) || EditableText._drillDown(this.context, this.field);\n  var type = this.type || 'string';\n  var keepZero = false;\n  switch (type) {\n    case 'number' :\n\t  if (value !== '') {\n        var rawNewValue = EditableText._extractNumber(value);\n        var newValue = rawNewValue && parseInt(rawNewValue) || 0;\n\t\tkeepZero = true;\n\t  }\n\t  else {\n\t\tvar newValue = 0;\n\t  }\n\t  if (currentValue !== undefined) {\n        currentValue = currentValue && parseInt(currentValue) || 0;\n\t  }\n      break;\n    default :\n      var newValue = value.replace(/mml:/g, \"\"); // For cleaning up mathml pasted from msword\n      currentValue = _.isString(currentValue) && currentValue.replace(/<br \\/>/g, \"<br>\") || '';\n\t  currentValue = EditableText._removeEntities(currentValue);\n\t  newValue = EditableText._removeEntities(newValue);\n      break;\n  }\n  var updatedValue = {};\n  updatedValue[this.field] = newValue; // console.log(\"newValue:\",newValue); console.log(\"currentValue:\",currentValue);\n  // Sometimes we don't want the actual field's value, we want whatever was passed in to the template as the 'value' keyword to be used to compare against\n  if (newValue !== currentValue || (!(newValue || (this.type === 'number' && newValue === 0 && keepZero)) && this.removeEmpty && !(this.acceptEmpty && evtType === 'focusout'))) {\n    if (!(newValue || (this.type === 'number' && newValue === 0 && keepZero)) && this.removeEmpty && !(this.acceptEmpty && evtType === 'focusout')) {\n      if ((isEscape || evtType === 'focusout') && (this.acceptEmpty || currentValue)) { // isEscape is an alternative for (isEscape || evtType === 'focusout') if we want to allow focusout to remove an item\n        return;  \n      }\n      EditableText.remove.call(this,Mongo.Collection.get(this.collection),this.context);\n    }\n    else if (!isEscape && (newValue !== currentValue) && ((newValue || (this.type === 'number' && newValue === 0)) || this.acceptEmpty || (this.wysiwyg && this.acceptEmpty !== false))) { // wysiwyg accepts empty by default unless explicitly told not to\n      // Make the update\n      EditableText.update.call(this, Mongo.Collection.get(this.collection), this.context, {$set: updatedValue});\n    }\n  }\n}\n\n// *******\n// HELPERS\n// *******\n\nTemplate.editable_text_widget.helpers({\n    \n  value : function() {\n\tvar value = (this.editingValue !== 'undefined') ? this.editingValue : this.value;\n    return (this.type === 'number' && value === 0) ? 0 : value || EditableText._drillDown(this.context,this.field); \n  },\n  \n  editing : function() {\n    return Blaze._templateInstance().selected.get(); \n  },\n  \n  textarea : function() {\n    return (this.textarea && !this.wysiwyg) || (this.wysiwyg && !EditableText.wysiwyg);  \n  },\n  \n  isWysiwyg : function() {\n    return EditableText.wysiwyg && this.wysiwyg;\n  },\n  \n  wysiwygContent : function() {\n    var value = this.value || EditableText._drillDown(this.context,this.field);\n    return value && new Spacebars.SafeString(value.replace(/\\n/g,'<br>')) || \"\";  \n  },\n  \n  inputValue : function() {\n\tvar val = (this.editingValue !== undefined) ? this.editingValue : this.value;\n    var value = (this.type === 'number' && val === 0) ? 0 : val || EditableText._drillDown(this.context,this.field);\n    return (this.type === 'number' && value === 0) ? 0 : value && value.toString() || \"\";\n  },\n  \n  substitute : function(userCanNotEdit) {\n    var substitute = !(this.value || EditableText._drillDown(this.context,this.field)) && ((userCanNotEdit) ? (this.emptyText && Spacebars.SafeString(this.emptyText.toString())) : (this.substitute && Spacebars.SafeString(this.substitute.toString())));\n\treturn substitute;\n  },\n  \n  title : function() {\n    return this.title || ((this.eventType === 'dblclick') ? 'double click' : 'click') + ' to edit'; \n  },\n  \n  canEditText : function() {\n    var userCanEdit = EditableText.userCanEdit.call(this,this.context,Mongo.Collection.get(this.collection));\n    return (typeof this.userCanEdit !== 'undefined') ? (this.userCanEdit && userCanEdit) : userCanEdit;\n  },\n  \n  content : function() {\n    var value = (typeof this.value !== 'undefined') ? this.value : EditableText._drillDown(this.context,this.field);\n    var val = (_.isString(value)) ? (((typeof this.trustHtml !== 'undefined' && this.trustHtml || EditableText.trustHtml) || (this.wysiwyg && !EditableText.wysiwyg)) && new Spacebars.SafeString(value.replace(/\\n/g,'<br>')) || value) : ((value || value === 0) ? value.toString() : \"\");\n    return val; \n  },\n  \n  trustHtml : function() {\n    return typeof this.trustHtml !== 'undefined' && this.trustHtml || EditableText.trustHtml;\n  },\n  \n  toolsPosition : function(pos) {\n    return this.toolbarPosition === pos;\n  },\n  \n  initOptions : function() {\n    var data = this;\n\tvar derivedOptions = (data.derivedOptions) ? EditableText._callback.call(data,'derivedOptions',data) : {};\n\tvar opts = _.extend(data.options || {}, _.isObject(derivedOptions) && derivedOptions || {});\n    if (opts) {\n      _.each(opts, function (value, key) {\n        if (data[key] === undefined) {\n          data[key] = value;\n        }\n      });\n\t  var context = opts.context || opts.doc || opts.document || opts.obj || opts.object || opts.data || opts.dataContext;\n      if (context !== undefined) {\n        data.context = context;\n      }\n    }\n\treturn data; \n  },\n  \n  controlTemplate : function () {\n\treturn this.editor && EditableText.editors[this.editor] && EditableText.editors[this.editor].template;\n  },\n  \n  controlData : function () {\n\treturn this;  \n  }\n  \n});\n\n\n// ******\n// EVENTS\n// ******\n\nTemplate.body.events({\n  'click .editable-text-trigger, mousedown .editable-text-trigger, dblclick .editable-text-trigger' : function(evt) {\n\tif (!EditableText.__blockEditEvent) {\n      $(evt.currentTarget).find('.editable-text').trigger(evt.type);\n\t}\n\telse {\n\t  EditableText.__blockEditEvent = false;\t\n\t}\n  }\n});\n\nEditableText.okCancelEvents = {};\n\nEditableText.okCancelEvents.ok = function (value, evt, tmpl) {\n  evt.stopImmediatePropagation();\n  evt.stopPropagation();\n  var isEscape = false;\n  EditableText._makeUpdate.call(this, value, isEscape, evt.type);\n  tmpl.selected.set(false);\n  EditableText._callback.call(this, 'onStopEditing', tmpl.data.context);\n}\n\nEditableText.okCancelEvents.cancel = function (value, evt, tmpl) {\n  evt.stopImmediatePropagation();\n  // Check for removeEmpty update, in case a document has been auto inserted and user clicks escape\n  // But set the flag isEscape so regular updates are not made\n  var isEscape = true;\n  EditableText._makeUpdate.call(this, value, isEscape);\n  tmpl.selected.set(false);\n  EditableText._callback.call(this, 'onStopEditing', tmpl.data.context);\n}\n  \nEditableText.editing_key_press = function(elem, inputClass) {\n  if (EditableText.editing_key_press.fakeEl === undefined) {\n    EditableText.editing_key_press.fakeEl = $('<span class=\"' + (inputClass || '') + '\">').hide().appendTo(document.body);\n  }\n  var el = $(elem);\n  EditableText.editing_key_press.fakeEl.text(el.val());\n  var width = EditableText.editing_key_press.fakeEl.width() + 20;\n  el.width(width);\n  el.css('min-width', width);\n}\n\nTemplate.editable_text_widget.events(EditableText._okCancelEvents('.wide-text-edit', EditableText.okCancelEvents));\nTemplate.editable_text_widget.events({\n  'keyup .wide-text-edit' : function (evt) {\n\tif (this.editor) {\n\t  return;\t\n\t}\n\tif (this.autoResize) {\n\t  EditableText.editing_key_press(evt.target, this.inputClass);\t\n\t}\n  }\n});\nTemplate.editable_text_widget.events(EditableText._okCancelEvents('.text-area-edit', EditableText.okCancelEvents));\nTemplate.editable_text_widget.events({\n  'mousedown .editable-text, click .editable-text, dblclick .editable-text' : function (evt, tmpl) {\n\tif (this.editor) {\n\t  return;\t\n\t}\n\tif (this.stopPropagation) {\n      evt.stopImmediatePropagation();\n      evt.stopPropagation();\n\t}\n\tEditableText.__blockEditEvent = true;\n    // This is the click event that opens the field for editing\n    var eventType = this.eventType || ((EditableText.wysiwyg && this.wysiwyg) ? 'mousedown' : 'click');\n    if (eventType !== evt.type) {\n      return;    \n    }\n    var textarea = (this.textarea && !this.wysiwyg) || (this.wysiwyg && !EditableText.wysiwyg);\n    var wysiwyg = EditableText.wysiwyg && this.wysiwyg;\n    var obj = this.context;\n    var Collection = Mongo.Collection.get(this.collection);\n    if (this.autoInsert && obj && !obj._id && _.isObject(obj) && EditableText.userCanEdit.call(this, obj, Collection)) { // This is quite involved -- you need an object with all context info, but no _id field for auto-creation to occur\n      if (typeof this.value !== 'undefined' && this.value !== obj[this.field]) {\n        obj[this.field] = this.value;  \n      }\n      // Create an object\n      EditableText.insert.call(this, Collection, obj);\n\t  EditableText.__blockEditEvent = false;\n      evt.stopImmediatePropagation();\n      evt.stopPropagation();\n      return;\n    }\n    if (obj && !tmpl.selected.get()) {\n      if (EditableText.userCanEdit.call(this, obj, Collection)) {\n        // document.activeElement.blur(); // Make sure the focusout event fires first when switching editable text objects, so that the first one gets saved properly\n        tmpl.selected.set(true);\n        Tracker.flush();\n        if (!wysiwyg) {\n          EditableText._activateInput(tmpl.$((textarea) ? 'textarea' :  'input'), this.dontSelectAll || false); // textarea\n\t\t  if (this.autoResize && !textarea) {\n\t\t\tEditableText.editing_key_press(tmpl.$('.wide-text-edit'), this.inputClass);\n\t\t  }\n        }\n\t\tEditableText._callback.call(this, 'onStartEditing', tmpl.data.context);\n      }\n    }\n\tEditableText.__blockEditEvent = false;\n  }\n});\n\nTemplate.editable_text_widget.created = function () {\n  this.selected = new ReactiveVar();\n}","if (typeof EditableText === 'undefined') {\n  EditableText = {};\n}\n\n\n// ******************************************\n// CONFIG that affects BOTH CLIENT AND SERVER\n// ******************************************\n\nEditableText.userCanEdit = function(doc,Collection) {\n  // e.g. return doc.user_id = Meteor.userId();\n  return true;    \n}\n\nEditableText.useTransactions = (typeof tx !== 'undefined' && _.isObject(tx.Transactions)) ? true : false;\nEditableText.clientControlsTransactions = false;\n\nEditableText.maximumImageSize = 0; // Can't put image data in the editor by default\n\n// This is the set of defaults for sanitizeHtml on the server (as set by the library itself)\n// Required on the client for consistency of filtering on the paste event\nif (Meteor.isClient) {\n  sanitizeHtml = {};\n  sanitizeHtml.defaults = {\n    allowedTags: [ 'h3', 'h4', 'h5', 'h6', 'blockquote', 'p', 'a', 'ul', 'ol', 'nl', 'li', 'b', 'i', 'strong', 'em', 'strike', 'code', 'hr', 'br', 'div', 'table', 'thead', 'caption', 'tbody', 'tr', 'th', 'td', 'pre' ],\n    allowedAttributes: { a: [ 'href', 'name', 'target' ] },\n    selfClosing: [ 'img', 'br', 'hr', 'area', 'base', 'basefont', 'input', 'link', 'meta' ],\n    allowedSchemes: [ 'http', 'https', 'ftp', 'mailto' ]  \n  };    \n}\n\nMeteor.startup(function () {\n  // The startup block is to allow apps to overwrite the sanitizeHtml defaults\n  EditableText.allowedHtml = {\n\tallowedTags: sanitizeHtml.defaults.allowedTags.concat(['sub', 'sup', 'font', 'u', 's', 'span']),\n\tallowedAttributes: _.extend(sanitizeHtml.defaults.allowedAttributes, {\n\t  font : ['size', 'face'],\n\t  div : ['align', 'style', 'class'],\n\t  span: ['style', 'class'],\n\t  table: ['style', 'class'],\n\t  td : ['rowspan', 'colspan', 'style', 'class'],\n\t  a: ['href', 'target', 'class'],\n\t  i: ['class']\n\t}),\n\tallowedSchemes:['http', 'https', 'ftp', 'mailto']\n  }\n});;\n\n\n// ******************************************\n// Functions that are intended for use in app\n// ******************************************\n\n// Function for setting multiple config variable via a hash\n\nEditableText.config = function(config) {\n  if (_.isObject(config)) {\n     _.each(config,function(val,key) {\n       if (_.contains(['userCanEdit','insert','update','remove'],key)) {\n         if (_.isFunction(val)) {\n           EditableText[key] = val;\n         }\n         else {\n           throw new Meteor.Error(key + ' must be a function');\n         }\n       }\n       if (_.contains(['useTransactions','clientControlsTransactions','saveOnFocusout','trustHtml','useMethods'],key)) {\n         if (_.isBoolean(val)) {\n           EditableText[key] = val;\n         }\n         else {\n           throw new Meteor.Error(key + ' must be a boolean');\n         }\n       }\n       if (_.contains(['collection2Options'], key)) {\n         if (_.isObject(val)) {\n            EditableText[key] = val;\n         }\n       }\n     });\n  }\n  else {\n    throw new Meteor.Error('Editable text config object must be a hash of key value pairs. Config not changed.');  \n  }\n}\n\n// Function for registering callbacks\n\nEditableText.registerCallbacks = function(obj) {\n  if (_.isObject(obj)) {\n    _.each(obj,function(val,key) {\n      if (_.isFunction(val)) {\n        EditableText._callbacks[key] = val;\n      }\n      else {\n        throw new Meteor.Error('Callbacks need to be functions. You passed a ' + typeof(val) + '.');    \n      }\n    });\n  }\n  else {\n    throw new Meteor.Error('You must pass an object to register callbacks');  \n  }\n}\n\n\n// *********************************\n// INTERNAL PROPERTIES AND FUNCTIONS\n// *********************************\n\nEditableText._callbacks = {};\n\nEditableText._mutatedDocIsObject = function (mutatedDoc) {\n  return _.isObject(mutatedDoc) && !_.isArray(mutatedDoc) && !_.isDate(mutatedDoc) && !_.isFunction(mutatedDoc); // Just want real key-value pair type objects\n}\n\nEditableText._callback = function(callback, doc, originalValue) {\n  // Note: 'beforeUpdate' and 'beforeInsertMultiple' callbacks are special-cased to use return values of any type, not just objects\n  // originalValue is only set on beforeUpdate and beforeInsertMultiple callbacks. It is of the form { value: <actual original value> }\n  // otherwise originalValue should be undefined\n  callback = String(callback);\n  var self = this;\n  var callbackRan = false;\n  if (self[callback] && _.isString(self[callback])) {\n    var mutatedDoc = EditableText._executeCallback(self[callback], self, doc, originalValue);\n\tcallbackRan = true;\n\tvar mutatedDocIsObject = EditableText._mutatedDocIsObject(mutatedDoc);\n\tif (!originalValue && !mutatedDocIsObject) {\n\t  throw new Meteor.Error('Wrong type returned', 'Your callback function \"' + callback + '\" returned a ' + typeof mutatedDoc + '. An object was expected.');\t\n\t}\n    doc = (originalValue) ? mutatedDoc : mutatedDocIsObject && mutatedDoc || doc;\n  }\n  if (originalValue) {\n\t// if the callback hasn't run, then the\n\t// doc is still the whole document,\n\t// not the new value for the field\n\tif (!callbackRan) {\n\t  doc = originalValue.value;\t\n\t}\n\tif (callbackRan && mutatedDocIsObject && (_.has(doc, '$set') || _.has(doc, '$addToSet') || _.has(doc, '$push'))) {\n\t  return {modifier: doc};\n\t}\n\telse {\n\t  return {value: doc};  \n\t}\n  }\n  return doc;\n}\n\nEditableText._executeCallback = function(callbackFunctionName, self, doc, originalValue) { // originalValue.value is the default to return if no updates have been made\n  var mutatedDoc = (originalValue && {value: originalValue.value}) || doc;\n  var callbackFunction = EditableText._callbacks[callbackFunctionName];\n  if (callbackFunction && _.isFunction(callbackFunction)) {\n    callbackMutatedDoc = callbackFunction.call(self, doc, Mongo.Collection.get(self.collection), originalValue && originalValue.value || undefined, originalValue && originalValue.modifier || undefined);\n\tif (!_.isUndefined(callbackMutatedDoc)) {\n\t  mutatedDoc = callbackMutatedDoc;\n\t}\n  }\n  else {\n    throw new Meteor.Error('Callback not a function', 'Could not execute callback. Reason: ' + ((callbackFunction) ? '\"' + callbackFunctionName + '\" is not a function, it\\'s a ' + typeof(callbackFunction) + '.' : 'no callback function called \"' + callbackFunctionName + '\" has been registered via EditableText.registerCallbacks.'));    \n  }\n  return mutatedDoc;\n}\n\nEditableText._drillDown = function(obj,key) {\n  return Meteor._get.apply(null,[obj].concat(key.split('.')));\n}\n\nEditableText._allowedHtml = function() {\n  var allowed = EditableText.allowedHtml;\n  if (EditableText.maximumImageSize && _.isNumber(EditableText.maximumImageSize) && allowed) {\n    allowed.allowedTags.push('img');\n    allowed.allowedAttributes.img = ['src'];\n    allowed.allowedSchemes.push('data'); \n  }\n  return allowed;\n}\n\n\n// *************\n// UPDATE METHOD\n// *************\n\nMeteor.methods({\n  _editableTextWrite : function (action, data, modifier, transaction) {\n    check(action, String);\n    check(data, Object);\n    check(data.collection, String);\n    check(data.context, (typeof FS !== \"undefined\" && FS.File) ? Match.OneOf(Object, FS.File) : Object);\n    check(modifier, (action === 'update') ? Object : null);\n    check(transaction, Boolean);\n    check(data.objectTypeText, Match.OneOf(String, undefined));\n    var hasPackageCollection2 = !!Package['aldeed:collection2'];\n    var hasPackageSimpleSchema = !!Package['aldeed:simple-schema'];\n    var Collection = Mongo.Collection.get(data.collection);\n    var c2optionsHashRequired = hasPackageCollection2 && hasPackageSimpleSchema && _.isFunction(Collection.simpleSchema) && Collection._c2;\n    if (Collection && EditableText.userCanEdit.call(data, data.context, Collection)) {\n\t  if (Meteor.isServer) {\n        if (_.isBoolean(EditableText.useTransactions) && !EditableText.clientControlsTransactions) {\n          transaction = EditableText.useTransactions;\n        }\n      }\n      if (typeof tx === 'undefined') {\n        transaction = false;    \n      }\n      var setStatus = function (err, res) {\n        data.status = {error: err, result: res};    \n      }\n\t  var options = (transaction) ? {instant: true} : {};\n      if (c2optionsHashRequired) {\n        options = _.extend(options, EditableText.collection2options || {});    \n      }\n      switch (action) {\n        case 'insert' :\n          if (Meteor.isServer) {\n            // run all string fields through sanitizeHtml\n            data.context = EditableText.sanitizeObject(data.context);\n          }\n          if (transaction) {\n            if (data.objectTypeText || data.transactionInsertText) {\n              tx.start(data.transactionInsertText || 'add ' + data.objectTypeText);\n            }\n            data.context = EditableText._callback.call(data, 'beforeInsert', data.context) || data.context;\n            var new_id = tx.insert(Collection, data.context, options, setStatus);\n            EditableText._callback.call(data, 'afterInsert', Collection.findOne({_id: new_id}));\n            if (data.objectTypeText || data.transactionInsertText) {\n              tx.commit();\n            }\n          }\n          else {\n            data.context = EditableText._callback.call(data,'beforeInsert',data.context) || data.context;\n            var new_id = (c2optionsHashRequired) ? Collection.insert(data.context,options,setStatus) : Collection.insert(data.context, setStatus);\n            EditableText._callback.call(data, 'afterInsert', Collection.findOne({_id: new_id}));\n          }\n          return new_id;\n          break;\n        case 'update' :\n          if (Meteor.isServer) {\n            var newValue, sanitized = false;\n            if (modifier[\"$set\"] && _.isString(modifier[\"$set\"][data.field])) {\n            // run through sanitizeHtml\n              newValue = modifier[\"$set\"][data.field] = EditableText.sanitizeString(modifier[\"$set\"][data.field], data.wysiwyg || !!data.editor);\n              sanitized = true;\n            }\n            if (modifier[\"$set\"] && _.isArray(modifier[\"$set\"][data.field])) {\n              newValue = modifier[\"$set\"][data.field] = _.map(modifier[\"$set\"][data.field],function (str) {return EditableText.sanitizeString(str, data.wysiwyg || !!data.editor);});\n              sanitized = true;\n            }\n            if (modifier[\"$set\"] && _.isNumber(modifier[\"$set\"][data.field])) {\n              newValue = modifier[\"$set\"][data.field];\n              sanitized = true;    \n            }\n            if (modifier[\"$addToSet\"] && _.isString(modifier[\"$addToSet\"][data.field])) {\n              newValue = modifier[\"$addToSet\"][data.field] = EditableText.sanitizeString(modifier[\"$addToSet\"][data.field], data.wysiwyg || !!data.editor);\n              sanitized = true;    \n            }\n            if (modifier[\"$push\"] && _.isString(modifier[\"$push\"][data.field])) {\n              newValue = modifier[\"$push\"][data.field] = EditableText.sanitizeString(modifier[\"$push\"][data.field], data.wysiwyg || !!data.editor);\n              sanitized = true;    \n            }\n            if (!sanitized) {\n              throw new Meteor.Error('Wrong data type sent for update');\n\t\t\t  return; \n            }\n          }\n          else {\n            newValue = (modifier[\"$set\"] && (modifier[\"$set\"][data.field] || (data.type !== 'number' && modifier[\"$set\"][data.field] === '') || (data.type === 'number' && modifier[\"$set\"][data.field] === 0))) || (modifier[\"$addToSet\"] && modifier[\"$addToSet\"][data.field]) || (modifier[\"$push\"] && modifier[\"$push\"][data.field]);\n          }\n          data.newValue = newValue;\n          data.oldValue = EditableText._drillDown(data.context, data.field);\n\t\t  var callbackModifier = function (modifier, key, val) {\n\t\t\t/*if (val === undefined) {\n\t\t\t  return modifier;\n\t\t\t}*/\n\t\t\tvar modifierTypes = [\"$set\", \"$addToSet\", \"$push\"];\n\t\t\tvar modType = _.find(modifierTypes, function (mt) {\n\t\t\t  return _.has(modifier, mt);\n\t\t\t});\n\t\t\tif (modType) {\n\t\t\t  modifier[modType][key] = val;\n\t\t\t}\n\t\t\treturn modifier;\n\t\t  }\n          if (transaction) {\n            if (data.transactionUpdateText || data.objectTypeText) {\n              tx.start(data.transactionUpdateText || 'update ' + data.objectTypeText);\n            }\n            var newVal = EditableText._callback.call(data,'beforeUpdate',data.context, {value: data.newValue, modifier: modifier}); // By setting the fourth parameter, we are expecting a value, not the whole doc, to be returned from the callback\n\t\t\tmodifier = callbackModifier(newVal.modifier || modifier, data.field, newVal.value);\n            tx.update(Collection,data.context._id, modifier, options, setStatus);\n            EditableText._callback.call(data, 'afterUpdate', Collection.findOne({_id: data.context._id}));\n            if (data.transactionUpdateText || data.objectTypeText) {\n              tx.commit();\n            }\n          }\n          else {\n            var newVal = EditableText._callback.call(data, 'beforeUpdate', data.context, {value: data.newValue, modifier: modifier});\n\t\t\tmodifier = callbackModifier(newVal.modifier || modifier, data.field, newVal.value);\n            if (c2optionsHashRequired) {\n              Collection.update({_id: data.context._id}, modifier, options, setStatus);\n            }\n            else {\n              Collection.update({_id: data.context._id}, modifier, setStatus);\n            }\n            EditableText._callback.call(data, 'afterUpdate', Collection.findOne({_id: data.context._id}));\n          }\n          break;\n        case 'remove' :\n          if (transaction) {\n            if (data.transactionRemoveText || data.objectTypeText) {\n              tx.start(data.transactionRemoveText || 'remove ' + data.objectTypeText);\n            }\n            data.context = EditableText._callback.call(data, 'beforeRemove', data.context) || data.context;\n            tx.remove(Collection, data.context._id, {instant: true}, setStatus);\n            EditableText._callback.call(data, 'afterRemove', data.context);\n            if (data.transactionRemoveText || data.objectTypeText) {\n              tx.commit();\n            } \n          }\n          else {\n            data.context = EditableText._callback.call(data, 'beforeRemove', data.context) || data.context;\n            Collection.remove({_id: data.context._id}, setStatus);\n            EditableText._callback.call(data, 'afterRemove', data.context);\n          }\n          break;  \n      }\n    }\n  }\n});"]}}]