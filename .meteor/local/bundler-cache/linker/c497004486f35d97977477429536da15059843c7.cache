[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\n\n/* Package-scope variables */\nvar wysihtml5, newChild, caretPlaceholder;\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/natestrauser_x-editable-bootstrap/lib/bootstrap-editable/js/bootstrap-editable.js                          //\n// This file is in bare mode and is not in its own closure.                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*! X-editable - v1.5.1                                                                                                // 1\n* In-place editing with Twitter Bootstrap, jQuery UI or pure jQuery                                                    // 2\n* http://github.com/vitalets/x-editable                                                                                // 3\n* Copyright (c) 2013 Vitaliy Potapov; Licensed MIT */                                                                  // 4\n/**                                                                                                                    // 5\nForm with single input element, two buttons and two states: normal/loading.                                            // 6\nApplied as jQuery method to DIV tag (not to form tag!). This is because form can be in loading state when spinner shown.\nEditableform is linked with one of input types, e.g. 'text', 'select' etc.                                             // 8\n                                                                                                                       // 9\n@class editableform                                                                                                    // 10\n@uses text                                                                                                             // 11\n@uses textarea                                                                                                         // 12\n**/                                                                                                                    // 13\n(function ($) {                                                                                                        // 14\n    \"use strict\";                                                                                                      // 15\n                                                                                                                       // 16\n    var EditableForm = function (div, options) {                                                                       // 17\n        this.options = $.extend({}, $.fn.editableform.defaults, options);                                              // 18\n        this.$div = $(div); //div, containing form. Not form tag. Not editable-element.                                // 19\n        if(!this.options.scope) {                                                                                      // 20\n            this.options.scope = this;                                                                                 // 21\n        }                                                                                                              // 22\n        //nothing shown after init                                                                                     // 23\n    };                                                                                                                 // 24\n                                                                                                                       // 25\n    EditableForm.prototype = {                                                                                         // 26\n        constructor: EditableForm,                                                                                     // 27\n        initInput: function() {  //called once                                                                         // 28\n            //take input from options (as it is created in editable-element)                                           // 29\n            this.input = this.options.input;                                                                           // 30\n                                                                                                                       // 31\n            //set initial value                                                                                        // 32\n            //todo: may be add check: typeof str === 'string' ?                                                        // 33\n            this.value = this.input.str2value(this.options.value);                                                     // 34\n                                                                                                                       // 35\n            //prerender: get input.$input                                                                              // 36\n            this.input.prerender();                                                                                    // 37\n        },                                                                                                             // 38\n        initTemplate: function() {                                                                                     // 39\n            this.$form = $($.fn.editableform.template);                                                                // 40\n        },                                                                                                             // 41\n        initButtons: function() {                                                                                      // 42\n            var $btn = this.$form.find('.editable-buttons');                                                           // 43\n            $btn.append($.fn.editableform.buttons);                                                                    // 44\n            if(this.options.showbuttons === 'bottom') {                                                                // 45\n                $btn.addClass('editable-buttons-bottom');                                                              // 46\n            }                                                                                                          // 47\n        },                                                                                                             // 48\n        /**                                                                                                            // 49\n        Renders editableform                                                                                           // 50\n                                                                                                                       // 51\n        @method render                                                                                                 // 52\n        **/                                                                                                            // 53\n        render: function() {                                                                                           // 54\n            //init loader                                                                                              // 55\n            this.$loading = $($.fn.editableform.loading);                                                              // 56\n            this.$div.empty().append(this.$loading);                                                                   // 57\n                                                                                                                       // 58\n            //init form template and buttons                                                                           // 59\n            this.initTemplate();                                                                                       // 60\n            if(this.options.showbuttons) {                                                                             // 61\n                this.initButtons();                                                                                    // 62\n            } else {                                                                                                   // 63\n                this.$form.find('.editable-buttons').remove();                                                         // 64\n            }                                                                                                          // 65\n                                                                                                                       // 66\n            //show loading state                                                                                       // 67\n            this.showLoading();                                                                                        // 68\n                                                                                                                       // 69\n            //flag showing is form now saving value to server.                                                         // 70\n            //It is needed to wait when closing form.                                                                  // 71\n            this.isSaving = false;                                                                                     // 72\n                                                                                                                       // 73\n            /**                                                                                                        // 74\n            Fired when rendering starts                                                                                // 75\n            @event rendering                                                                                           // 76\n            @param {Object} event event object                                                                         // 77\n            **/                                                                                                        // 78\n            this.$div.triggerHandler('rendering');                                                                     // 79\n                                                                                                                       // 80\n            //init input                                                                                               // 81\n            this.initInput();                                                                                          // 82\n                                                                                                                       // 83\n            //append input to form                                                                                     // 84\n            this.$form.find('div.editable-input').append(this.input.$tpl);                                             // 85\n                                                                                                                       // 86\n            //append form to container                                                                                 // 87\n            this.$div.append(this.$form);                                                                              // 88\n                                                                                                                       // 89\n            //render input                                                                                             // 90\n            $.when(this.input.render())                                                                                // 91\n            .then($.proxy(function () {                                                                                // 92\n                //setup input to submit automatically when no buttons shown                                            // 93\n                if(!this.options.showbuttons) {                                                                        // 94\n                    this.input.autosubmit();                                                                           // 95\n                }                                                                                                      // 96\n                                                                                                                       // 97\n                //attach 'cancel' handler                                                                              // 98\n                this.$form.find('.editable-cancel').click($.proxy(this.cancel, this));                                 // 99\n                                                                                                                       // 100\n                if(this.input.error) {                                                                                 // 101\n                    this.error(this.input.error);                                                                      // 102\n                    this.$form.find('.editable-submit').attr('disabled', true);                                        // 103\n                    this.input.$input.attr('disabled', true);                                                          // 104\n                    //prevent form from submitting                                                                     // 105\n                    this.$form.submit(function(e){ e.preventDefault(); });                                             // 106\n                } else {                                                                                               // 107\n                    this.error(false);                                                                                 // 108\n                    this.input.$input.removeAttr('disabled');                                                          // 109\n                    this.$form.find('.editable-submit').removeAttr('disabled');                                        // 110\n                    var value = (this.value === null || this.value === undefined || this.value === '') ? this.options.defaultValue : this.value;\n                    this.input.value2input(value);                                                                     // 112\n                    //attach submit handler                                                                            // 113\n                    this.$form.submit($.proxy(this.submit, this));                                                     // 114\n                }                                                                                                      // 115\n                                                                                                                       // 116\n                /**                                                                                                    // 117\n                Fired when form is rendered                                                                            // 118\n                @event rendered                                                                                        // 119\n                @param {Object} event event object                                                                     // 120\n                **/                                                                                                    // 121\n                this.$div.triggerHandler('rendered');                                                                  // 122\n                                                                                                                       // 123\n                this.showForm();                                                                                       // 124\n                                                                                                                       // 125\n                //call postrender method to perform actions required visibility of form                                // 126\n                if(this.input.postrender) {                                                                            // 127\n                    this.input.postrender();                                                                           // 128\n                }                                                                                                      // 129\n            }, this));                                                                                                 // 130\n        },                                                                                                             // 131\n        cancel: function() {                                                                                           // 132\n            /**                                                                                                        // 133\n            Fired when form was cancelled by user                                                                      // 134\n            @event cancel                                                                                              // 135\n            @param {Object} event event object                                                                         // 136\n            **/                                                                                                        // 137\n            this.$div.triggerHandler('cancel');                                                                        // 138\n        },                                                                                                             // 139\n        showLoading: function() {                                                                                      // 140\n            var w, h;                                                                                                  // 141\n            if(this.$form) {                                                                                           // 142\n                //set loading size equal to form                                                                       // 143\n                w = this.$form.outerWidth();                                                                           // 144\n                h = this.$form.outerHeight();                                                                          // 145\n                if(w) {                                                                                                // 146\n                    this.$loading.width(w);                                                                            // 147\n                }                                                                                                      // 148\n                if(h) {                                                                                                // 149\n                    this.$loading.height(h);                                                                           // 150\n                }                                                                                                      // 151\n                this.$form.hide();                                                                                     // 152\n            } else {                                                                                                   // 153\n                //stretch loading to fill container width                                                              // 154\n                w = this.$loading.parent().width();                                                                    // 155\n                if(w) {                                                                                                // 156\n                    this.$loading.width(w);                                                                            // 157\n                }                                                                                                      // 158\n            }                                                                                                          // 159\n            this.$loading.show();                                                                                      // 160\n        },                                                                                                             // 161\n                                                                                                                       // 162\n        showForm: function(activate) {                                                                                 // 163\n            this.$loading.hide();                                                                                      // 164\n            this.$form.show();                                                                                         // 165\n            if(activate !== false) {                                                                                   // 166\n                this.input.activate();                                                                                 // 167\n            }                                                                                                          // 168\n            /**                                                                                                        // 169\n            Fired when form is shown                                                                                   // 170\n            @event show                                                                                                // 171\n            @param {Object} event event object                                                                         // 172\n            **/                                                                                                        // 173\n            this.$div.triggerHandler('show');                                                                          // 174\n        },                                                                                                             // 175\n                                                                                                                       // 176\n        error: function(msg) {                                                                                         // 177\n            var $group = this.$form.find('.control-group'),                                                            // 178\n                $block = this.$form.find('.editable-error-block'),                                                     // 179\n                lines;                                                                                                 // 180\n                                                                                                                       // 181\n            if(msg === false) {                                                                                        // 182\n                $group.removeClass($.fn.editableform.errorGroupClass);                                                 // 183\n                $block.removeClass($.fn.editableform.errorBlockClass).empty().hide();                                  // 184\n            } else {                                                                                                   // 185\n                //convert newline to <br> for more pretty error display                                                // 186\n                if(msg) {                                                                                              // 187\n                    lines = (''+msg).split('\\n');                                                                      // 188\n                    for (var i = 0; i < lines.length; i++) {                                                           // 189\n                        lines[i] = $('<div>').text(lines[i]).html();                                                   // 190\n                    }                                                                                                  // 191\n                    msg = lines.join('<br>');                                                                          // 192\n                }                                                                                                      // 193\n                $group.addClass($.fn.editableform.errorGroupClass);                                                    // 194\n                $block.addClass($.fn.editableform.errorBlockClass).html(msg).show();                                   // 195\n            }                                                                                                          // 196\n        },                                                                                                             // 197\n                                                                                                                       // 198\n        submit: function(e) {                                                                                          // 199\n            e.stopPropagation();                                                                                       // 200\n            e.preventDefault();                                                                                        // 201\n                                                                                                                       // 202\n            //get new value from input                                                                                 // 203\n            var newValue = this.input.input2value();                                                                   // 204\n                                                                                                                       // 205\n            //validation: if validate returns string or truthy value - means error                                     // 206\n            //if returns object like {newValue: '...'} => submitted value is reassigned to it                          // 207\n            var error = this.validate(newValue);                                                                       // 208\n            if ($.type(error) === 'object' && error.newValue !== undefined) {                                          // 209\n                newValue = error.newValue;                                                                             // 210\n                this.input.value2input(newValue);                                                                      // 211\n                if(typeof error.msg === 'string') {                                                                    // 212\n                    this.error(error.msg);                                                                             // 213\n                    this.showForm();                                                                                   // 214\n                    return;                                                                                            // 215\n                }                                                                                                      // 216\n            } else if (error) {                                                                                        // 217\n                this.error(error);                                                                                     // 218\n                this.showForm();                                                                                       // 219\n                return;                                                                                                // 220\n            }                                                                                                          // 221\n                                                                                                                       // 222\n            //if value not changed --> trigger 'nochange' event and return                                             // 223\n            /*jslint eqeq: true*/                                                                                      // 224\n            if (!this.options.savenochange && this.input.value2str(newValue) == this.input.value2str(this.value)) {    // 225\n            /*jslint eqeq: false*/                                                                                     // 226\n                /**                                                                                                    // 227\n                Fired when value not changed but form is submitted. Requires savenochange = false.                     // 228\n                @event nochange                                                                                        // 229\n                @param {Object} event event object                                                                     // 230\n                **/                                                                                                    // 231\n                this.$div.triggerHandler('nochange');                                                                  // 232\n                return;                                                                                                // 233\n            }                                                                                                          // 234\n                                                                                                                       // 235\n            //convert value for submitting to server                                                                   // 236\n            var submitValue = this.input.value2submit(newValue);                                                       // 237\n                                                                                                                       // 238\n            this.isSaving = true;                                                                                      // 239\n                                                                                                                       // 240\n            //sending data to server                                                                                   // 241\n            $.when(this.save(submitValue))                                                                             // 242\n            .done($.proxy(function(response) {                                                                         // 243\n                this.isSaving = false;                                                                                 // 244\n                                                                                                                       // 245\n                //run success callback                                                                                 // 246\n                var res = typeof this.options.success === 'function' ? this.options.success.call(this.options.scope, response, newValue) : null;\n                                                                                                                       // 248\n                //if success callback returns false --> keep form open and do not activate input                       // 249\n                if(res === false) {                                                                                    // 250\n                    this.error(false);                                                                                 // 251\n                    this.showForm(false);                                                                              // 252\n                    return;                                                                                            // 253\n                }                                                                                                      // 254\n                                                                                                                       // 255\n                //if success callback returns string -->  keep form open, show error and activate input               \n                if(typeof res === 'string') {                                                                          // 257\n                    this.error(res);                                                                                   // 258\n                    this.showForm();                                                                                   // 259\n                    return;                                                                                            // 260\n                }                                                                                                      // 261\n                                                                                                                       // 262\n                //if success callback returns object like {newValue: <something>} --> use that value instead of submitted\n                //it is usefull if you want to chnage value in url-function                                            // 264\n                if(res && typeof res === 'object' && res.hasOwnProperty('newValue')) {                                 // 265\n                    newValue = res.newValue;                                                                           // 266\n                }                                                                                                      // 267\n                                                                                                                       // 268\n                //clear error message                                                                                  // 269\n                this.error(false);                                                                                     // 270\n                this.value = newValue;                                                                                 // 271\n                /**                                                                                                    // 272\n                Fired when form is submitted                                                                           // 273\n                @event save                                                                                            // 274\n                @param {Object} event event object                                                                     // 275\n                @param {Object} params additional params                                                               // 276\n                @param {mixed} params.newValue raw new value                                                           // 277\n                @param {mixed} params.submitValue submitted value as string                                            // 278\n                @param {Object} params.response ajax response                                                          // 279\n                                                                                                                       // 280\n                @example                                                                                               // 281\n                $('#form-div').on('save'), function(e, params){                                                        // 282\n                    if(params.newValue === 'username') {...}                                                           // 283\n                });                                                                                                    // 284\n                **/                                                                                                    // 285\n                this.$div.triggerHandler('save', {newValue: newValue, submitValue: submitValue, response: response});  // 286\n            }, this))                                                                                                  // 287\n            .fail($.proxy(function(xhr) {                                                                              // 288\n                this.isSaving = false;                                                                                 // 289\n                                                                                                                       // 290\n                var msg;                                                                                               // 291\n                if(typeof this.options.error === 'function') {                                                         // 292\n                    msg = this.options.error.call(this.options.scope, xhr, newValue);                                  // 293\n                } else {                                                                                               // 294\n                    msg = typeof xhr === 'string' ? xhr : xhr.responseText || xhr.statusText || 'Unknown error!';      // 295\n                }                                                                                                      // 296\n                                                                                                                       // 297\n                this.error(msg);                                                                                       // 298\n                this.showForm();                                                                                       // 299\n            }, this));                                                                                                 // 300\n        },                                                                                                             // 301\n                                                                                                                       // 302\n        save: function(submitValue) {                                                                                  // 303\n            //try parse composite pk defined as json string in data-pk                                                 // 304\n            this.options.pk = $.fn.editableutils.tryParseJson(this.options.pk, true);                                  // 305\n                                                                                                                       // 306\n            var pk = (typeof this.options.pk === 'function') ? this.options.pk.call(this.options.scope) : this.options.pk,\n            /*                                                                                                         // 308\n              send on server in following cases:                                                                       // 309\n              1. url is function                                                                                       // 310\n              2. url is string AND (pk defined OR send option = always)                                                // 311\n            */                                                                                                         // 312\n            send = !!(typeof this.options.url === 'function' || (this.options.url && ((this.options.send === 'always') || (this.options.send === 'auto' && pk !== null && pk !== undefined)))),\n            params;                                                                                                    // 314\n                                                                                                                       // 315\n            if (send) { //send to server                                                                               // 316\n                this.showLoading();                                                                                    // 317\n                                                                                                                       // 318\n                //standard params                                                                                      // 319\n                params = {                                                                                             // 320\n                    name: this.options.name || '',                                                                     // 321\n                    value: submitValue,                                                                                // 322\n                    pk: pk                                                                                             // 323\n                };                                                                                                     // 324\n                                                                                                                       // 325\n                //additional params                                                                                    // 326\n                if(typeof this.options.params === 'function') {                                                        // 327\n                    params = this.options.params.call(this.options.scope, params);                                     // 328\n                } else {                                                                                               // 329\n                    //try parse json in single quotes (from data-params attribute)                                     // 330\n                    this.options.params = $.fn.editableutils.tryParseJson(this.options.params, true);                  // 331\n                    $.extend(params, this.options.params);                                                             // 332\n                }                                                                                                      // 333\n                                                                                                                       // 334\n                if(typeof this.options.url === 'function') { //user's function                                         // 335\n                    return this.options.url.call(this.options.scope, params);                                          // 336\n                } else {                                                                                               // 337\n                    //send ajax to server and return deferred object                                                   // 338\n                    return $.ajax($.extend({                                                                           // 339\n                        url     : this.options.url,                                                                    // 340\n                        data    : params,                                                                              // 341\n                        type    : 'POST'                                                                               // 342\n                    }, this.options.ajaxOptions));                                                                     // 343\n                }                                                                                                      // 344\n            }                                                                                                          // 345\n        },                                                                                                             // 346\n                                                                                                                       // 347\n        validate: function (value) {                                                                                   // 348\n            if (value === undefined) {                                                                                 // 349\n                value = this.value;                                                                                    // 350\n            }                                                                                                          // 351\n            if (typeof this.options.validate === 'function') {                                                         // 352\n                return this.options.validate.call(this.options.scope, value);                                          // 353\n            }                                                                                                          // 354\n        },                                                                                                             // 355\n                                                                                                                       // 356\n        option: function(key, value) {                                                                                 // 357\n            if(key in this.options) {                                                                                  // 358\n                this.options[key] = value;                                                                             // 359\n            }                                                                                                          // 360\n                                                                                                                       // 361\n            if(key === 'value') {                                                                                      // 362\n                this.setValue(value);                                                                                  // 363\n            }                                                                                                          // 364\n                                                                                                                       // 365\n            //do not pass option to input as it is passed in editable-element                                          // 366\n        },                                                                                                             // 367\n                                                                                                                       // 368\n        setValue: function(value, convertStr) {                                                                        // 369\n            if(convertStr) {                                                                                           // 370\n                this.value = this.input.str2value(value);                                                              // 371\n            } else {                                                                                                   // 372\n                this.value = value;                                                                                    // 373\n            }                                                                                                          // 374\n                                                                                                                       // 375\n            //if form is visible, update input                                                                         // 376\n            if(this.$form && this.$form.is(':visible')) {                                                              // 377\n                this.input.value2input(this.value);                                                                    // 378\n            }                                                                                                          // 379\n        }                                                                                                              // 380\n    };                                                                                                                 // 381\n                                                                                                                       // 382\n    /*                                                                                                                 // 383\n    Initialize editableform. Applied to jQuery object.                                                                 // 384\n                                                                                                                       // 385\n    @method $().editableform(options)                                                                                  // 386\n    @params {Object} options                                                                                           // 387\n    @example                                                                                                           // 388\n    var $form = $('&lt;div&gt;').editableform({                                                                        // 389\n        type: 'text',                                                                                                  // 390\n        name: 'username',                                                                                              // 391\n        url: '/post',                                                                                                  // 392\n        value: 'vitaliy'                                                                                               // 393\n    });                                                                                                                // 394\n                                                                                                                       // 395\n    //to display form you should call 'render' method                                                                  // 396\n    $form.editableform('render');                                                                                      // 397\n    */                                                                                                                 // 398\n    $.fn.editableform = function (option) {                                                                            // 399\n        var args = arguments;                                                                                          // 400\n        return this.each(function () {                                                                                 // 401\n            var $this = $(this),                                                                                       // 402\n            data = $this.data('editableform'),                                                                         // 403\n            options = typeof option === 'object' && option;                                                            // 404\n            if (!data) {                                                                                               // 405\n                $this.data('editableform', (data = new EditableForm(this, options)));                                  // 406\n            }                                                                                                          // 407\n                                                                                                                       // 408\n            if (typeof option === 'string') { //call method                                                            // 409\n                data[option].apply(data, Array.prototype.slice.call(args, 1));                                         // 410\n            }                                                                                                          // 411\n        });                                                                                                            // 412\n    };                                                                                                                 // 413\n                                                                                                                       // 414\n    //keep link to constructor to allow inheritance                                                                    // 415\n    $.fn.editableform.Constructor = EditableForm;                                                                      // 416\n                                                                                                                       // 417\n    //defaults                                                                                                         // 418\n    $.fn.editableform.defaults = {                                                                                     // 419\n        /* see also defaults for input */                                                                              // 420\n                                                                                                                       // 421\n        /**                                                                                                            // 422\n        Type of input. Can be <code>text|textarea|select|date|checklist</code>                                         // 423\n                                                                                                                       // 424\n        @property type                                                                                                 // 425\n        @type string                                                                                                   // 426\n        @default 'text'                                                                                                // 427\n        **/                                                                                                            // 428\n        type: 'text',                                                                                                  // 429\n        /**                                                                                                            // 430\n        Url for submit, e.g. <code>'/post'</code>                                                                      // 431\n        If function - it will be called instead of ajax. Function should return deferred object to run fail/done callbacks.\n                                                                                                                       // 433\n        @property url                                                                                                  // 434\n        @type string|function                                                                                          // 435\n        @default null                                                                                                  // 436\n        @example                                                                                                       // 437\n        url: function(params) {                                                                                        // 438\n            var d = new $.Deferred;                                                                                    // 439\n            if(params.value === 'abc') {                                                                               // 440\n                return d.reject('error message'); //returning error via deferred object                                // 441\n            } else {                                                                                                   // 442\n                //async saving data in js model                                                                        // 443\n                someModel.asyncSaveMethod({                                                                            // 444\n                   ...,                                                                                                // 445\n                   success: function(){                                                                                // 446\n                      d.resolve();                                                                                     // 447\n                   }                                                                                                   // 448\n                });                                                                                                    // 449\n                return d.promise();                                                                                    // 450\n            }                                                                                                          // 451\n        }                                                                                                              // 452\n        **/                                                                                                            // 453\n        url:null,                                                                                                      // 454\n        /**                                                                                                            // 455\n        Additional params for submit. If defined as <code>object</code> - it is **appended** to original ajax data (pk, name and value).  \n        If defined as <code>function</code> - returned object **overwrites** original ajax data.                       // 457\n        @example                                                                                                       // 458\n        params: function(params) {                                                                                     // 459\n            //originally params contain pk, name and value                                                             // 460\n            params.a = 1;                                                                                              // 461\n            return params;                                                                                             // 462\n        }                                                                                                              // 463\n                                                                                                                       // 464\n        @property params                                                                                               // 465\n        @type object|function                                                                                          // 466\n        @default null                                                                                                  // 467\n        **/                                                                                                            // 468\n        params:null,                                                                                                   // 469\n        /**                                                                                                            // 470\n        Name of field. Will be submitted on server. Can be taken from <code>id</code> attribute                        // 471\n                                                                                                                       // 472\n        @property name                                                                                                 // 473\n        @type string                                                                                                   // 474\n        @default null                                                                                                  // 475\n        **/                                                                                                            // 476\n        name: null,                                                                                                    // 477\n        /**                                                                                                            // 478\n        Primary key of editable object (e.g. record id in database). For composite keys use object, e.g. <code>{id: 1, lang: 'en'}</code>.\n        Can be calculated dynamically via function.                                                                    // 480\n                                                                                                                       // 481\n        @property pk                                                                                                   // 482\n        @type string|object|function                                                                                   // 483\n        @default null                                                                                                  // 484\n        **/                                                                                                            // 485\n        pk: null,                                                                                                      // 486\n        /**                                                                                                            // 487\n        Initial value. If not defined - will be taken from element's content.                                          // 488\n        For __select__ type should be defined (as it is ID of shown text).                                             // 489\n                                                                                                                       // 490\n        @property value                                                                                                // 491\n        @type string|object                                                                                            // 492\n        @default null                                                                                                  // 493\n        **/                                                                                                            // 494\n        value: null,                                                                                                   // 495\n        /**                                                                                                            // 496\n        Value that will be displayed in input if original field value is empty (`null|undefined|''`).                  // 497\n                                                                                                                       // 498\n        @property defaultValue                                                                                         // 499\n        @type string|object                                                                                            // 500\n        @default null                                                                                                  // 501\n        @since 1.4.6                                                                                                   // 502\n        **/                                                                                                            // 503\n        defaultValue: null,                                                                                            // 504\n        /**                                                                                                            // 505\n        Strategy for sending data on server. Can be `auto|always|never`.                                               // 506\n        When 'auto' data will be sent on server **only if pk and url defined**, otherwise new value will be stored locally.\n                                                                                                                       // 508\n        @property send                                                                                                 // 509\n        @type string                                                                                                   // 510\n        @default 'auto'                                                                                                // 511\n        **/                                                                                                            // 512\n        send: 'auto',                                                                                                  // 513\n        /**                                                                                                            // 514\n        Function for client-side validation. If returns string - means validation not passed and string showed as error.\n        Since 1.5.1 you can modify submitted value by returning object from `validate`:                                // 516\n        `{newValue: '...'}` or `{newValue: '...', msg: '...'}`                                                         // 517\n                                                                                                                       // 518\n        @property validate                                                                                             // 519\n        @type function                                                                                                 // 520\n        @default null                                                                                                  // 521\n        @example                                                                                                       // 522\n        validate: function(value) {                                                                                    // 523\n            if($.trim(value) == '') {                                                                                  // 524\n                return 'This field is required';                                                                       // 525\n            }                                                                                                          // 526\n        }                                                                                                              // 527\n        **/                                                                                                            // 528\n        validate: null,                                                                                                // 529\n        /**                                                                                                            // 530\n        Success callback. Called when value successfully sent on server and **response status = 200**.                 // 531\n        Usefull to work with json response. For example, if your backend response can be <code>{success: true}</code>  // 532\n        or <code>{success: false, msg: \"server error\"}</code> you can check it inside this callback.                   // 533\n        If it returns **string** - means error occured and string is shown as error message.                           // 534\n        If it returns **object like** <code>{newValue: &lt;something&gt;}</code> - it overwrites value, submitted by user.  \n        Otherwise newValue simply rendered into element.                                                               // 536\n                                                                                                                       // 537\n        @property success                                                                                              // 538\n        @type function                                                                                                 // 539\n        @default null                                                                                                  // 540\n        @example                                                                                                       // 541\n        success: function(response, newValue) {                                                                        // 542\n            if(!response.success) return response.msg;                                                                 // 543\n        }                                                                                                              // 544\n        **/                                                                                                            // 545\n        success: null,                                                                                                 // 546\n        /**                                                                                                            // 547\n        Error callback. Called when request failed (response status != 200).                                           // 548\n        Usefull when you want to parse error response and display a custom message.                                    // 549\n        Must return **string** - the message to be displayed in the error block.                                       // 550\n                                                                                                                       // 551\n        @property error                                                                                                // 552\n        @type function                                                                                                 // 553\n        @default null                                                                                                  // 554\n        @since 1.4.4                                                                                                   // 555\n        @example                                                                                                       // 556\n        error: function(response, newValue) {                                                                          // 557\n            if(response.status === 500) {                                                                              // 558\n                return 'Service unavailable. Please try later.';                                                       // 559\n            } else {                                                                                                   // 560\n                return response.responseText;                                                                          // 561\n            }                                                                                                          // 562\n        }                                                                                                              // 563\n        **/                                                                                                            // 564\n        error: null,                                                                                                   // 565\n        /**                                                                                                            // 566\n        Additional options for submit ajax request.                                                                    // 567\n        List of values: http://api.jquery.com/jQuery.ajax                                                              // 568\n                                                                                                                       // 569\n        @property ajaxOptions                                                                                          // 570\n        @type object                                                                                                   // 571\n        @default null                                                                                                  // 572\n        @since 1.1.1                                                                                                   // 573\n        @example                                                                                                       // 574\n        ajaxOptions: {                                                                                                 // 575\n            type: 'put',                                                                                               // 576\n            dataType: 'json'                                                                                           // 577\n        }                                                                                                              // 578\n        **/                                                                                                            // 579\n        ajaxOptions: null,                                                                                             // 580\n        /**                                                                                                            // 581\n        Where to show buttons: left(true)|bottom|false                                                                 // 582\n        Form without buttons is auto-submitted.                                                                        // 583\n                                                                                                                       // 584\n        @property showbuttons                                                                                          // 585\n        @type boolean|string                                                                                           // 586\n        @default true                                                                                                  // 587\n        @since 1.1.1                                                                                                   // 588\n        **/                                                                                                            // 589\n        showbuttons: true,                                                                                             // 590\n        /**                                                                                                            // 591\n        Scope for callback methods (success, validate).                                                                // 592\n        If <code>null</code> means editableform instance itself.                                                       // 593\n                                                                                                                       // 594\n        @property scope                                                                                                // 595\n        @type DOMElement|object                                                                                        // 596\n        @default null                                                                                                  // 597\n        @since 1.2.0                                                                                                   // 598\n        @private                                                                                                       // 599\n        **/                                                                                                            // 600\n        scope: null,                                                                                                   // 601\n        /**                                                                                                            // 602\n        Whether to save or cancel value when it was not changed but form was submitted                                 // 603\n                                                                                                                       // 604\n        @property savenochange                                                                                         // 605\n        @type boolean                                                                                                  // 606\n        @default false                                                                                                 // 607\n        @since 1.2.0                                                                                                   // 608\n        **/                                                                                                            // 609\n        savenochange: false                                                                                            // 610\n    };                                                                                                                 // 611\n                                                                                                                       // 612\n    /*                                                                                                                 // 613\n    Note: following params could redefined in engine: bootstrap or jqueryui:                                           // 614\n    Classes 'control-group' and 'editable-error-block' must always present!                                            // 615\n    */                                                                                                                 // 616\n    $.fn.editableform.template = '<form class=\"form-inline editableform\">'+                                            // 617\n    '<div class=\"control-group\">' +                                                                                    // 618\n    '<div><div class=\"editable-input\"></div><div class=\"editable-buttons\"></div></div>'+                               // 619\n    '<div class=\"editable-error-block\"></div>' +                                                                       // 620\n    '</div>' +                                                                                                         // 621\n    '</form>';                                                                                                         // 622\n                                                                                                                       // 623\n    //loading div                                                                                                      // 624\n    $.fn.editableform.loading = '<div class=\"editableform-loading\"></div>';                                            // 625\n                                                                                                                       // 626\n    //buttons                                                                                                          // 627\n    $.fn.editableform.buttons = '<button type=\"submit\" class=\"editable-submit\">ok</button>'+                           // 628\n    '<button type=\"button\" class=\"editable-cancel\">cancel</button>';                                                   // 629\n                                                                                                                       // 630\n    //error class attached to control-group                                                                            // 631\n    $.fn.editableform.errorGroupClass = null;                                                                          // 632\n                                                                                                                       // 633\n    //error class attached to editable-error-block                                                                     // 634\n    $.fn.editableform.errorBlockClass = 'editable-error';                                                              // 635\n                                                                                                                       // 636\n    //engine                                                                                                           // 637\n    $.fn.editableform.engine = 'jquery';                                                                               // 638\n}(window.jQuery));                                                                                                     // 639\n                                                                                                                       // 640\n/**                                                                                                                    // 641\n* EditableForm utilites                                                                                                // 642\n*/                                                                                                                     // 643\n(function ($) {                                                                                                        // 644\n    \"use strict\";                                                                                                      // 645\n                                                                                                                       // 646\n    //utils                                                                                                            // 647\n    $.fn.editableutils = {                                                                                             // 648\n        /**                                                                                                            // 649\n        * classic JS inheritance function                                                                              // 650\n        */                                                                                                             // 651\n        inherit: function (Child, Parent) {                                                                            // 652\n            var F = function() { };                                                                                    // 653\n            F.prototype = Parent.prototype;                                                                            // 654\n            Child.prototype = new F();                                                                                 // 655\n            Child.prototype.constructor = Child;                                                                       // 656\n            Child.superclass = Parent.prototype;                                                                       // 657\n        },                                                                                                             // 658\n                                                                                                                       // 659\n        /**                                                                                                            // 660\n        * set caret position in input                                                                                  // 661\n        * see http://stackoverflow.com/questions/499126/jquery-set-cursor-position-in-text-area                        // 662\n        */                                                                                                             // 663\n        setCursorPosition: function(elem, pos) {                                                                       // 664\n            if (elem.setSelectionRange) {                                                                              // 665\n                elem.setSelectionRange(pos, pos);                                                                      // 666\n            } else if (elem.createTextRange) {                                                                         // 667\n                var range = elem.createTextRange();                                                                    // 668\n                range.collapse(true);                                                                                  // 669\n                range.moveEnd('character', pos);                                                                       // 670\n                range.moveStart('character', pos);                                                                     // 671\n                range.select();                                                                                        // 672\n            }                                                                                                          // 673\n        },                                                                                                             // 674\n                                                                                                                       // 675\n        /**                                                                                                            // 676\n        * function to parse JSON in *single* quotes. (jquery automatically parse only double quotes)                   // 677\n        * That allows such code as: <a data-source=\"{'a': 'b', 'c': 'd'}\">                                             // 678\n        * safe = true --> means no exception will be thrown                                                            // 679\n        * for details see http://stackoverflow.com/questions/7410348/how-to-set-json-format-to-html5-data-attributes-in-the-jquery\n        */                                                                                                             // 681\n        tryParseJson: function(s, safe) {                                                                              // 682\n            if (typeof s === 'string' && s.length && s.match(/^[\\{\\[].*[\\}\\]]$/)) {                                    // 683\n                if (safe) {                                                                                            // 684\n                    try {                                                                                              // 685\n                        /*jslint evil: true*/                                                                          // 686\n                        s = (new Function('return ' + s))();                                                           // 687\n                        /*jslint evil: false*/                                                                         // 688\n                    } catch (e) {} finally {                                                                           // 689\n                        return s;                                                                                      // 690\n                    }                                                                                                  // 691\n                } else {                                                                                               // 692\n                    /*jslint evil: true*/                                                                              // 693\n                    s = (new Function('return ' + s))();                                                               // 694\n                    /*jslint evil: false*/                                                                             // 695\n                }                                                                                                      // 696\n            }                                                                                                          // 697\n            return s;                                                                                                  // 698\n        },                                                                                                             // 699\n                                                                                                                       // 700\n        /**                                                                                                            // 701\n        * slice object by specified keys                                                                               // 702\n        */                                                                                                             // 703\n        sliceObj: function(obj, keys, caseSensitive /* default: false */) {                                            // 704\n            var key, keyLower, newObj = {};                                                                            // 705\n                                                                                                                       // 706\n            if (!$.isArray(keys) || !keys.length) {                                                                    // 707\n                return newObj;                                                                                         // 708\n            }                                                                                                          // 709\n                                                                                                                       // 710\n            for (var i = 0; i < keys.length; i++) {                                                                    // 711\n                key = keys[i];                                                                                         // 712\n                if (obj.hasOwnProperty(key)) {                                                                         // 713\n                    newObj[key] = obj[key];                                                                            // 714\n                }                                                                                                      // 715\n                                                                                                                       // 716\n                if(caseSensitive === true) {                                                                           // 717\n                    continue;                                                                                          // 718\n                }                                                                                                      // 719\n                                                                                                                       // 720\n                //when getting data-* attributes via $.data() it's converted to lowercase.                             // 721\n                //details: http://stackoverflow.com/questions/7602565/using-data-attributes-with-jquery                // 722\n                //workaround is code below.                                                                            // 723\n                keyLower = key.toLowerCase();                                                                          // 724\n                if (obj.hasOwnProperty(keyLower)) {                                                                    // 725\n                    newObj[key] = obj[keyLower];                                                                       // 726\n                }                                                                                                      // 727\n            }                                                                                                          // 728\n                                                                                                                       // 729\n            return newObj;                                                                                             // 730\n        },                                                                                                             // 731\n                                                                                                                       // 732\n        /*                                                                                                             // 733\n        exclude complex objects from $.data() before pass to config                                                    // 734\n        */                                                                                                             // 735\n        getConfigData: function($element) {                                                                            // 736\n            var data = {};                                                                                             // 737\n            $.each($element.data(), function(k, v) {                                                                   // 738\n                if(typeof v !== 'object' || (v && typeof v === 'object' && (v.constructor === Object || v.constructor === Array))) {\n                    data[k] = v;                                                                                       // 740\n                }                                                                                                      // 741\n            });                                                                                                        // 742\n            return data;                                                                                               // 743\n        },                                                                                                             // 744\n                                                                                                                       // 745\n        /*                                                                                                             // 746\n         returns keys of object                                                                                        // 747\n        */                                                                                                             // 748\n        objectKeys: function(o) {                                                                                      // 749\n            if (Object.keys) {                                                                                         // 750\n                return Object.keys(o);                                                                                 // 751\n            } else {                                                                                                   // 752\n                if (o !== Object(o)) {                                                                                 // 753\n                    throw new TypeError('Object.keys called on a non-object');                                         // 754\n                }                                                                                                      // 755\n                var k=[], p;                                                                                           // 756\n                for (p in o) {                                                                                         // 757\n                    if (Object.prototype.hasOwnProperty.call(o,p)) {                                                   // 758\n                        k.push(p);                                                                                     // 759\n                    }                                                                                                  // 760\n                }                                                                                                      // 761\n                return k;                                                                                              // 762\n            }                                                                                                          // 763\n                                                                                                                       // 764\n        },                                                                                                             // 765\n                                                                                                                       // 766\n       /**                                                                                                             // 767\n        method to escape html.                                                                                         // 768\n       **/                                                                                                             // 769\n       escape: function(str) {                                                                                         // 770\n           return $('<div>').text(str).html();                                                                         // 771\n       },                                                                                                              // 772\n                                                                                                                       // 773\n       /*                                                                                                              // 774\n        returns array items from sourceData having value property equal or inArray of 'value'                          // 775\n       */                                                                                                              // 776\n       itemsByValue: function(value, sourceData, valueProp) {                                                          // 777\n           if(!sourceData || value === null) {                                                                         // 778\n               return [];                                                                                              // 779\n           }                                                                                                           // 780\n                                                                                                                       // 781\n           if (typeof(valueProp) !== \"function\") {                                                                     // 782\n               var idKey = valueProp || 'value';                                                                       // 783\n               valueProp = function (e) { return e[idKey]; };                                                          // 784\n           }                                                                                                           // 785\n                                                                                                                       // 786\n           var isValArray = $.isArray(value),                                                                          // 787\n           result = [],                                                                                                // 788\n           that = this;                                                                                                // 789\n                                                                                                                       // 790\n           $.each(sourceData, function(i, o) {                                                                         // 791\n               if(o.children) {                                                                                        // 792\n                   result = result.concat(that.itemsByValue(value, o.children, valueProp));                            // 793\n               } else {                                                                                                // 794\n                   /*jslint eqeq: true*/                                                                               // 795\n                   if(isValArray) {                                                                                    // 796\n                       if($.grep(value, function(v){  return v == (o && typeof o === 'object' ? valueProp(o) : o); }).length) {\n                           result.push(o);                                                                             // 798\n                       }                                                                                               // 799\n                   } else {                                                                                            // 800\n                       var itemValue = (o && (typeof o === 'object')) ? valueProp(o) : o;                              // 801\n                       if(value == itemValue) {                                                                        // 802\n                           result.push(o);                                                                             // 803\n                       }                                                                                               // 804\n                   }                                                                                                   // 805\n                   /*jslint eqeq: false*/                                                                              // 806\n               }                                                                                                       // 807\n           });                                                                                                         // 808\n                                                                                                                       // 809\n           return result;                                                                                              // 810\n       },                                                                                                              // 811\n                                                                                                                       // 812\n       /*                                                                                                              // 813\n       Returns input by options: type, mode.                                                                           // 814\n       */                                                                                                              // 815\n       createInput: function(options) {                                                                                // 816\n           var TypeConstructor, typeOptions, input,                                                                    // 817\n           type = options.type;                                                                                        // 818\n                                                                                                                       // 819\n           //`date` is some kind of virtual type that is transformed to one of exact types                             // 820\n           //depending on mode and core lib                                                                            // 821\n           if(type === 'date') {                                                                                       // 822\n               //inline                                                                                                // 823\n               if(options.mode === 'inline') {                                                                         // 824\n                   if($.fn.editabletypes.datefield) {                                                                  // 825\n                       type = 'datefield';                                                                             // 826\n                   } else if($.fn.editabletypes.dateuifield) {                                                         // 827\n                       type = 'dateuifield';                                                                           // 828\n                   }                                                                                                   // 829\n               //popup                                                                                                 // 830\n               } else {                                                                                                // 831\n                   if($.fn.editabletypes.date) {                                                                       // 832\n                       type = 'date';                                                                                  // 833\n                   } else if($.fn.editabletypes.dateui) {                                                              // 834\n                       type = 'dateui';                                                                                // 835\n                   }                                                                                                   // 836\n               }                                                                                                       // 837\n                                                                                                                       // 838\n               //if type still `date` and not exist in types, replace with `combodate` that is base input              // 839\n               if(type === 'date' && !$.fn.editabletypes.date) {                                                       // 840\n                   type = 'combodate';                                                                                 // 841\n               }                                                                                                       // 842\n           }                                                                                                           // 843\n                                                                                                                       // 844\n           //`datetime` should be datetimefield in 'inline' mode                                                       // 845\n           if(type === 'datetime' && options.mode === 'inline') {                                                      // 846\n             type = 'datetimefield';                                                                                   // 847\n           }                                                                                                           // 848\n                                                                                                                       // 849\n           //change wysihtml5 to textarea for jquery UI and plain versions                                             // 850\n           if(type === 'wysihtml5' && !$.fn.editabletypes[type]) {                                                     // 851\n               type = 'textarea';                                                                                      // 852\n           }                                                                                                           // 853\n                                                                                                                       // 854\n           //create input of specified type. Input will be used for converting value, not in form                      // 855\n           if(typeof $.fn.editabletypes[type] === 'function') {                                                        // 856\n               TypeConstructor = $.fn.editabletypes[type];                                                             // 857\n               typeOptions = this.sliceObj(options, this.objectKeys(TypeConstructor.defaults));                        // 858\n               input = new TypeConstructor(typeOptions);                                                               // 859\n               return input;                                                                                           // 860\n           } else {                                                                                                    // 861\n               $.error('Unknown type: '+ type);                                                                        // 862\n               return false;                                                                                           // 863\n           }                                                                                                           // 864\n       },                                                                                                              // 865\n                                                                                                                       // 866\n       //see http://stackoverflow.com/questions/7264899/detect-css-transitions-using-javascript-and-without-modernizr  // 867\n       supportsTransitions: function () {                                                                              // 868\n           var b = document.body || document.documentElement,                                                          // 869\n               s = b.style,                                                                                            // 870\n               p = 'transition',                                                                                       // 871\n               v = ['Moz', 'Webkit', 'Khtml', 'O', 'ms'];                                                              // 872\n                                                                                                                       // 873\n           if(typeof s[p] === 'string') {                                                                              // 874\n               return true;                                                                                            // 875\n           }                                                                                                           // 876\n                                                                                                                       // 877\n           // Tests for vendor specific prop                                                                           // 878\n           p = p.charAt(0).toUpperCase() + p.substr(1);                                                                // 879\n           for(var i=0; i<v.length; i++) {                                                                             // 880\n               if(typeof s[v[i] + p] === 'string') {                                                                   // 881\n                   return true;                                                                                        // 882\n               }                                                                                                       // 883\n           }                                                                                                           // 884\n           return false;                                                                                               // 885\n       }                                                                                                               // 886\n                                                                                                                       // 887\n    };                                                                                                                 // 888\n}(window.jQuery));                                                                                                     // 889\n                                                                                                                       // 890\n/**                                                                                                                    // 891\nAttaches stand-alone container with editable-form to HTML element. Element is used only for positioning, value is not stored anywhere.<br>\nThis method applied internally in <code>$().editable()</code>. You should subscribe on it's events (save / cancel) to get profit of it.<br>\nFinal realization can be different: bootstrap-popover, jqueryui-tooltip, poshytip, inline-div. It depends on which js file you include.<br>\nApplied as jQuery method.                                                                                              // 895\n                                                                                                                       // 896\n@class editableContainer                                                                                               // 897\n@uses editableform                                                                                                     // 898\n**/                                                                                                                    // 899\n(function ($) {                                                                                                        // 900\n    \"use strict\";                                                                                                      // 901\n                                                                                                                       // 902\n    var Popup = function (element, options) {                                                                          // 903\n        this.init(element, options);                                                                                   // 904\n    };                                                                                                                 // 905\n                                                                                                                       // 906\n    var Inline = function (element, options) {                                                                         // 907\n        this.init(element, options);                                                                                   // 908\n    };                                                                                                                 // 909\n                                                                                                                       // 910\n    //methods                                                                                                          // 911\n    Popup.prototype = {                                                                                                // 912\n        containerName: null, //method to call container on element                                                     // 913\n        containerDataName: null, //object name in element's .data()                                                    // 914\n        innerCss: null, //tbd in child class                                                                           // 915\n        containerClass: 'editable-container editable-popup', //css class applied to container element                  // 916\n        defaults: {}, //container itself defaults                                                                      // 917\n                                                                                                                       // 918\n        init: function(element, options) {                                                                             // 919\n            this.$element = $(element);                                                                                // 920\n            //since 1.4.1 container do not use data-* directly as they already merged into options.                    // 921\n            this.options = $.extend({}, $.fn.editableContainer.defaults, options);                                     // 922\n            this.splitOptions();                                                                                       // 923\n                                                                                                                       // 924\n            //set scope of form callbacks to element                                                                   // 925\n            this.formOptions.scope = this.$element[0];                                                                 // 926\n                                                                                                                       // 927\n            this.initContainer();                                                                                      // 928\n                                                                                                                       // 929\n            //flag to hide container, when saving value will finish                                                    // 930\n            this.delayedHide = false;                                                                                  // 931\n                                                                                                                       // 932\n            //bind 'destroyed' listener to destroy container when element is removed from dom                          // 933\n            this.$element.on('destroyed', $.proxy(function(){                                                          // 934\n                this.destroy();                                                                                        // 935\n            }, this));                                                                                                 // 936\n                                                                                                                       // 937\n            //attach document handler to close containers on click / escape                                            // 938\n            if(!$(document).data('editable-handlers-attached')) {                                                      // 939\n                //close all on escape                                                                                  // 940\n                $(document).on('keyup.editable', function (e) {                                                        // 941\n                    if (e.which === 27) {                                                                              // 942\n                        $('.editable-open').editableContainer('hide');                                                 // 943\n                        //todo: return focus on element                                                                // 944\n                    }                                                                                                  // 945\n                });                                                                                                    // 946\n                                                                                                                       // 947\n                //close containers when click outside                                                                  // 948\n                //(mousedown could be better than click, it closes everything also on drag drop)                       // 949\n                $(document).on('click.editable', function(e) {                                                         // 950\n                    var $target = $(e.target), i,                                                                      // 951\n                        exclude_classes = ['.editable-container',                                                      // 952\n                                           '.ui-datepicker-header',                                                    // 953\n                                           '.datepicker', //in inline mode datepicker is rendered into body            // 954\n                                           '.modal-backdrop',                                                          // 955\n                                           '.bootstrap-wysihtml5-insert-image-modal',                                  // 956\n                                           '.bootstrap-wysihtml5-insert-link-modal'                                    // 957\n                                           ];                                                                          // 958\n                                                                                                                       // 959\n                    //check if element is detached. It occurs when clicking in bootstrap datepicker                    // 960\n                    if (!$.contains(document.documentElement, e.target)) {                                             // 961\n                      return;                                                                                          // 962\n                    }                                                                                                  // 963\n                                                                                                                       // 964\n                    //for some reason FF 20 generates extra event (click) in select2 widget with e.target = document   // 965\n                    //we need to filter it via construction below. See https://github.com/vitalets/x-editable/issues/199\n                    //Possibly related to http://stackoverflow.com/questions/10119793/why-does-firefox-react-differently-from-webkit-and-ie-to-click-event-on-selec\n                    if($target.is(document)) {                                                                         // 968\n                       return;                                                                                         // 969\n                    }                                                                                                  // 970\n                                                                                                                       // 971\n                    //if click inside one of exclude classes --> no nothing                                            // 972\n                    for(i=0; i<exclude_classes.length; i++) {                                                          // 973\n                         if($target.is(exclude_classes[i]) || $target.parents(exclude_classes[i]).length) {            // 974\n                             return;                                                                                   // 975\n                         }                                                                                             // 976\n                    }                                                                                                  // 977\n                                                                                                                       // 978\n                    //close all open containers (except one - target)                                                  // 979\n                    Popup.prototype.closeOthers(e.target);                                                             // 980\n                });                                                                                                    // 981\n                                                                                                                       // 982\n                $(document).data('editable-handlers-attached', true);                                                  // 983\n            }                                                                                                          // 984\n        },                                                                                                             // 985\n                                                                                                                       // 986\n        //split options on containerOptions and formOptions                                                            // 987\n        splitOptions: function() {                                                                                     // 988\n            this.containerOptions = {};                                                                                // 989\n            this.formOptions = {};                                                                                     // 990\n                                                                                                                       // 991\n            if(!$.fn[this.containerName]) {                                                                            // 992\n                throw new Error(this.containerName + ' not found. Have you included corresponding js file?');          // 993\n            }                                                                                                          // 994\n                                                                                                                       // 995\n            //keys defined in container defaults go to container, others go to form                                    // 996\n            for(var k in this.options) {                                                                               // 997\n              if(k in this.defaults) {                                                                                 // 998\n                 this.containerOptions[k] = this.options[k];                                                           // 999\n              } else {                                                                                                 // 1000\n                 this.formOptions[k] = this.options[k];                                                                // 1001\n              }                                                                                                        // 1002\n            }                                                                                                          // 1003\n        },                                                                                                             // 1004\n                                                                                                                       // 1005\n        /*                                                                                                             // 1006\n        Returns jquery object of container                                                                             // 1007\n        @method tip()                                                                                                  // 1008\n        */                                                                                                             // 1009\n        tip: function() {                                                                                              // 1010\n            return this.container() ? this.container().$tip : null;                                                    // 1011\n        },                                                                                                             // 1012\n                                                                                                                       // 1013\n        /* returns container object */                                                                                 // 1014\n        container: function() {                                                                                        // 1015\n            var container;                                                                                             // 1016\n            //first, try get it by `containerDataName`                                                                 // 1017\n            if(this.containerDataName) {                                                                               // 1018\n                if(container = this.$element.data(this.containerDataName)) {                                           // 1019\n                    return container;                                                                                  // 1020\n                }                                                                                                      // 1021\n            }                                                                                                          // 1022\n            //second, try `containerName`                                                                              // 1023\n            container = this.$element.data(this.containerName);                                                        // 1024\n            return container;                                                                                          // 1025\n        },                                                                                                             // 1026\n                                                                                                                       // 1027\n        /* call native method of underlying container, e.g. this.$element.popover('method') */                         // 1028\n        call: function() {                                                                                             // 1029\n            this.$element[this.containerName].apply(this.$element, arguments);                                         // 1030\n        },                                                                                                             // 1031\n                                                                                                                       // 1032\n        initContainer: function(){                                                                                     // 1033\n            this.call(this.containerOptions);                                                                          // 1034\n        },                                                                                                             // 1035\n                                                                                                                       // 1036\n        renderForm: function() {                                                                                       // 1037\n            this.$form                                                                                                 // 1038\n            .editableform(this.formOptions)                                                                            // 1039\n            .on({                                                                                                      // 1040\n                save: $.proxy(this.save, this), //click on submit button (value changed)                               // 1041\n                nochange: $.proxy(function(){ this.hide('nochange'); }, this), //click on submit button (value NOT changed)                \n                cancel: $.proxy(function(){ this.hide('cancel'); }, this), //click on calcel button                    // 1043\n                show: $.proxy(function() {                                                                             // 1044\n                    if(this.delayedHide) {                                                                             // 1045\n                        this.hide(this.delayedHide.reason);                                                            // 1046\n                        this.delayedHide = false;                                                                      // 1047\n                    } else {                                                                                           // 1048\n                        this.setPosition();                                                                            // 1049\n                    }                                                                                                  // 1050\n                }, this), //re-position container every time form is shown (occurs each time after loading state)      // 1051\n                rendering: $.proxy(this.setPosition, this), //this allows to place container correctly when loading shown\n                resize: $.proxy(this.setPosition, this), //this allows to re-position container when form size is changed \n                rendered: $.proxy(function(){                                                                          // 1054\n                    /**                                                                                                // 1055\n                    Fired when container is shown and form is rendered (for select will wait for loading dropdown options).  \n                    **Note:** Bootstrap popover has own `shown` event that now cannot be separated from x-editable's one.\n                    The workaround is to check `arguments.length` that is always `2` for x-editable.                     \n                                                                                                                       // 1059\n                    @event shown                                                                                       // 1060\n                    @param {Object} event event object                                                                 // 1061\n                    @example                                                                                           // 1062\n                    $('#username').on('shown', function(e, editable) {                                                 // 1063\n                        editable.input.$input.val('overwriting value of input..');                                     // 1064\n                    });                                                                                                // 1065\n                    **/                                                                                                // 1066\n                    /*                                                                                                 // 1067\n                     TODO: added second param mainly to distinguish from bootstrap's shown event. It's a hotfix that will be solved in future versions via namespaced events.  \n                    */                                                                                                 // 1069\n                    this.$element.triggerHandler('shown', $(this.options.scope).data('editable'));                     // 1070\n                }, this)                                                                                               // 1071\n            })                                                                                                         // 1072\n            .editableform('render');                                                                                   // 1073\n        },                                                                                                             // 1074\n                                                                                                                       // 1075\n        /**                                                                                                            // 1076\n        Shows container with form                                                                                      // 1077\n        @method show()                                                                                                 // 1078\n        @param {boolean} closeAll Whether to close all other editable containers when showing this one. Default true.  // 1079\n        **/                                                                                                            // 1080\n        /* Note: poshytip owerwrites this method totally! */                                                           // 1081\n        show: function (closeAll) {                                                                                    // 1082\n            this.$element.addClass('editable-open');                                                                   // 1083\n            if(closeAll !== false) {                                                                                   // 1084\n                //close all open containers (except this)                                                              // 1085\n                this.closeOthers(this.$element[0]);                                                                    // 1086\n            }                                                                                                          // 1087\n                                                                                                                       // 1088\n            //show container itself                                                                                    // 1089\n            this.innerShow();                                                                                          // 1090\n            this.tip().addClass(this.containerClass);                                                                  // 1091\n                                                                                                                       // 1092\n            /*                                                                                                         // 1093\n            Currently, form is re-rendered on every show.                                                              // 1094\n            The main reason is that we dont know, what will container do with content when closed:                     // 1095\n            remove(), detach() or just hide() - it depends on container.                                               // 1096\n                                                                                                                       // 1097\n            Detaching form itself before hide and re-insert before show is good solution,                              // 1098\n            but visually it looks ugly --> container changes size before hide.                                         // 1099\n            */                                                                                                         // 1100\n                                                                                                                       // 1101\n            //if form already exist - delete previous data                                                             // 1102\n            if(this.$form) {                                                                                           // 1103\n                //todo: destroy prev data!                                                                             // 1104\n                //this.$form.destroy();                                                                                // 1105\n            }                                                                                                          // 1106\n                                                                                                                       // 1107\n            this.$form = $('<div>');                                                                                   // 1108\n                                                                                                                       // 1109\n            //insert form into container body                                                                          // 1110\n            if(this.tip().is(this.innerCss)) {                                                                         // 1111\n                //for inline container                                                                                 // 1112\n                this.tip().append(this.$form);                                                                         // 1113\n            } else {                                                                                                   // 1114\n                this.tip().find(this.innerCss).append(this.$form);                                                     // 1115\n            }                                                                                                          // 1116\n                                                                                                                       // 1117\n            //render form                                                                                              // 1118\n            this.renderForm();                                                                                         // 1119\n        },                                                                                                             // 1120\n                                                                                                                       // 1121\n        /**                                                                                                            // 1122\n        Hides container with form                                                                                      // 1123\n        @method hide()                                                                                                 // 1124\n        @param {string} reason Reason caused hiding. Can be <code>save|cancel|onblur|nochange|undefined (=manual)</code>\n        **/                                                                                                            // 1126\n        hide: function(reason) {                                                                                       // 1127\n            if(!this.tip() || !this.tip().is(':visible') || !this.$element.hasClass('editable-open')) {                // 1128\n                return;                                                                                                // 1129\n            }                                                                                                          // 1130\n                                                                                                                       // 1131\n            //if form is saving value, schedule hide                                                                   // 1132\n            if(this.$form.data('editableform').isSaving) {                                                             // 1133\n                this.delayedHide = {reason: reason};                                                                   // 1134\n                return;                                                                                                // 1135\n            } else {                                                                                                   // 1136\n                this.delayedHide = false;                                                                              // 1137\n            }                                                                                                          // 1138\n                                                                                                                       // 1139\n            this.$element.removeClass('editable-open');                                                                // 1140\n            this.innerHide();                                                                                          // 1141\n                                                                                                                       // 1142\n            /**                                                                                                        // 1143\n            Fired when container was hidden. It occurs on both save or cancel.                                         // 1144\n            **Note:** Bootstrap popover has own `hidden` event that now cannot be separated from x-editable's one.     // 1145\n            The workaround is to check `arguments.length` that is always `2` for x-editable.                           // 1146\n                                                                                                                       // 1147\n            @event hidden                                                                                              // 1148\n            @param {object} event event object                                                                         // 1149\n            @param {string} reason Reason caused hiding. Can be <code>save|cancel|onblur|nochange|manual</code>        // 1150\n            @example                                                                                                   // 1151\n            $('#username').on('hidden', function(e, reason) {                                                          // 1152\n                if(reason === 'save' || reason === 'cancel') {                                                         // 1153\n                    //auto-open next editable                                                                          // 1154\n                    $(this).closest('tr').next().find('.editable').editable('show');                                   // 1155\n                }                                                                                                      // 1156\n            });                                                                                                        // 1157\n            **/                                                                                                        // 1158\n            this.$element.triggerHandler('hidden', reason || 'manual');                                                // 1159\n        },                                                                                                             // 1160\n                                                                                                                       // 1161\n        /* internal show method. To be overwritten in child classes */                                                 // 1162\n        innerShow: function () {                                                                                       // 1163\n                                                                                                                       // 1164\n        },                                                                                                             // 1165\n                                                                                                                       // 1166\n        /* internal hide method. To be overwritten in child classes */                                                 // 1167\n        innerHide: function () {                                                                                       // 1168\n                                                                                                                       // 1169\n        },                                                                                                             // 1170\n                                                                                                                       // 1171\n        /**                                                                                                            // 1172\n        Toggles container visibility (show / hide)                                                                     // 1173\n        @method toggle()                                                                                               // 1174\n        @param {boolean} closeAll Whether to close all other editable containers when showing this one. Default true.  // 1175\n        **/                                                                                                            // 1176\n        toggle: function(closeAll) {                                                                                   // 1177\n            if(this.container() && this.tip() && this.tip().is(':visible')) {                                          // 1178\n                this.hide();                                                                                           // 1179\n            } else {                                                                                                   // 1180\n                this.show(closeAll);                                                                                   // 1181\n            }                                                                                                          // 1182\n        },                                                                                                             // 1183\n                                                                                                                       // 1184\n        /*                                                                                                             // 1185\n        Updates the position of container when content changed.                                                        // 1186\n        @method setPosition()                                                                                          // 1187\n        */                                                                                                             // 1188\n        setPosition: function() {                                                                                      // 1189\n            //tbd in child class                                                                                       // 1190\n        },                                                                                                             // 1191\n                                                                                                                       // 1192\n        save: function(e, params) {                                                                                    // 1193\n            /**                                                                                                        // 1194\n            Fired when new value was submitted. You can use <code>$(this).data('editableContainer')</code> inside handler to access to editableContainer instance\n                                                                                                                       // 1196\n            @event save                                                                                                // 1197\n            @param {Object} event event object                                                                         // 1198\n            @param {Object} params additional params                                                                   // 1199\n            @param {mixed} params.newValue submitted value                                                             // 1200\n            @param {Object} params.response ajax response                                                              // 1201\n            @example                                                                                                   // 1202\n            $('#username').on('save', function(e, params) {                                                            // 1203\n                //assuming server response: '{success: true}'                                                          // 1204\n                var pk = $(this).data('editableContainer').options.pk;                                                 // 1205\n                if(params.response && params.response.success) {                                                       // 1206\n                    alert('value: ' + params.newValue + ' with pk: ' + pk + ' saved!');                                // 1207\n                } else {                                                                                               // 1208\n                    alert('error!');                                                                                   // 1209\n                }                                                                                                      // 1210\n            });                                                                                                        // 1211\n            **/                                                                                                        // 1212\n            this.$element.triggerHandler('save', params);                                                              // 1213\n                                                                                                                       // 1214\n            //hide must be after trigger, as saving value may require methods of plugin, applied to input              // 1215\n            this.hide('save');                                                                                         // 1216\n        },                                                                                                             // 1217\n                                                                                                                       // 1218\n        /**                                                                                                            // 1219\n        Sets new option                                                                                                // 1220\n                                                                                                                       // 1221\n        @method option(key, value)                                                                                     // 1222\n        @param {string} key                                                                                            // 1223\n        @param {mixed} value                                                                                           // 1224\n        **/                                                                                                            // 1225\n        option: function(key, value) {                                                                                 // 1226\n            this.options[key] = value;                                                                                 // 1227\n            if(key in this.containerOptions) {                                                                         // 1228\n                this.containerOptions[key] = value;                                                                    // 1229\n                this.setContainerOption(key, value);                                                                   // 1230\n            } else {                                                                                                   // 1231\n                this.formOptions[key] = value;                                                                         // 1232\n                if(this.$form) {                                                                                       // 1233\n                    this.$form.editableform('option', key, value);                                                     // 1234\n                }                                                                                                      // 1235\n            }                                                                                                          // 1236\n        },                                                                                                             // 1237\n                                                                                                                       // 1238\n        setContainerOption: function(key, value) {                                                                     // 1239\n            this.call('option', key, value);                                                                           // 1240\n        },                                                                                                             // 1241\n                                                                                                                       // 1242\n        /**                                                                                                            // 1243\n        Destroys the container instance                                                                                // 1244\n        @method destroy()                                                                                              // 1245\n        **/                                                                                                            // 1246\n        destroy: function() {                                                                                          // 1247\n            this.hide();                                                                                               // 1248\n            this.innerDestroy();                                                                                       // 1249\n            this.$element.off('destroyed');                                                                            // 1250\n            this.$element.removeData('editableContainer');                                                             // 1251\n        },                                                                                                             // 1252\n                                                                                                                       // 1253\n        /* to be overwritten in child classes */                                                                       // 1254\n        innerDestroy: function() {                                                                                     // 1255\n                                                                                                                       // 1256\n        },                                                                                                             // 1257\n                                                                                                                       // 1258\n        /*                                                                                                             // 1259\n        Closes other containers except one related to passed element.                                                  // 1260\n        Other containers can be cancelled or submitted (depends on onblur option)                                      // 1261\n        */                                                                                                             // 1262\n        closeOthers: function(element) {                                                                               // 1263\n            $('.editable-open').each(function(i, el){                                                                  // 1264\n                //do nothing with passed element and it's children                                                     // 1265\n                if(el === element || $(el).find(element).length) {                                                     // 1266\n                    return;                                                                                            // 1267\n                }                                                                                                      // 1268\n                                                                                                                       // 1269\n                //otherwise cancel or submit all open containers                                                       // 1270\n                var $el = $(el),                                                                                       // 1271\n                ec = $el.data('editableContainer');                                                                    // 1272\n                                                                                                                       // 1273\n                if(!ec) {                                                                                              // 1274\n                    return;                                                                                            // 1275\n                }                                                                                                      // 1276\n                                                                                                                       // 1277\n                if(ec.options.onblur === 'cancel') {                                                                   // 1278\n                    $el.data('editableContainer').hide('onblur');                                                      // 1279\n                } else if(ec.options.onblur === 'submit') {                                                            // 1280\n                    $el.data('editableContainer').tip().find('form').submit();                                         // 1281\n                }                                                                                                      // 1282\n            });                                                                                                        // 1283\n                                                                                                                       // 1284\n        },                                                                                                             // 1285\n                                                                                                                       // 1286\n        /**                                                                                                            // 1287\n        Activates input of visible container (e.g. set focus)                                                          // 1288\n        @method activate()                                                                                             // 1289\n        **/                                                                                                            // 1290\n        activate: function() {                                                                                         // 1291\n            if(this.tip && this.tip().is(':visible') && this.$form) {                                                  // 1292\n               this.$form.data('editableform').input.activate();                                                       // 1293\n            }                                                                                                          // 1294\n        }                                                                                                              // 1295\n                                                                                                                       // 1296\n    };                                                                                                                 // 1297\n                                                                                                                       // 1298\n    /**                                                                                                                // 1299\n    jQuery method to initialize editableContainer.                                                                     // 1300\n                                                                                                                       // 1301\n    @method $().editableContainer(options)                                                                             // 1302\n    @params {Object} options                                                                                           // 1303\n    @example                                                                                                           // 1304\n    $('#edit').editableContainer({                                                                                     // 1305\n        type: 'text',                                                                                                  // 1306\n        url: '/post',                                                                                                  // 1307\n        pk: 1,                                                                                                         // 1308\n        value: 'hello'                                                                                                 // 1309\n    });                                                                                                                // 1310\n    **/                                                                                                                // 1311\n    $.fn.editableContainer = function (option) {                                                                       // 1312\n        var args = arguments;                                                                                          // 1313\n        return this.each(function () {                                                                                 // 1314\n            var $this = $(this),                                                                                       // 1315\n            dataKey = 'editableContainer',                                                                             // 1316\n            data = $this.data(dataKey),                                                                                // 1317\n            options = typeof option === 'object' && option,                                                            // 1318\n            Constructor = (options.mode === 'inline') ? Inline : Popup;                                                // 1319\n                                                                                                                       // 1320\n            if (!data) {                                                                                               // 1321\n                $this.data(dataKey, (data = new Constructor(this, options)));                                          // 1322\n            }                                                                                                          // 1323\n                                                                                                                       // 1324\n            if (typeof option === 'string') { //call method                                                            // 1325\n                data[option].apply(data, Array.prototype.slice.call(args, 1));                                         // 1326\n            }                                                                                                          // 1327\n        });                                                                                                            // 1328\n    };                                                                                                                 // 1329\n                                                                                                                       // 1330\n    //store constructors                                                                                               // 1331\n    $.fn.editableContainer.Popup = Popup;                                                                              // 1332\n    $.fn.editableContainer.Inline = Inline;                                                                            // 1333\n                                                                                                                       // 1334\n    //defaults                                                                                                         // 1335\n    $.fn.editableContainer.defaults = {                                                                                // 1336\n        /**                                                                                                            // 1337\n        Initial value of form input                                                                                    // 1338\n                                                                                                                       // 1339\n        @property value                                                                                                // 1340\n        @type mixed                                                                                                    // 1341\n        @default null                                                                                                  // 1342\n        @private                                                                                                       // 1343\n        **/                                                                                                            // 1344\n        value: null,                                                                                                   // 1345\n        /**                                                                                                            // 1346\n        Placement of container relative to element. Can be <code>top|right|bottom|left</code>. Not used for inline container.\n                                                                                                                       // 1348\n        @property placement                                                                                            // 1349\n        @type string                                                                                                   // 1350\n        @default 'top'                                                                                                 // 1351\n        **/                                                                                                            // 1352\n        placement: 'top',                                                                                              // 1353\n        /**                                                                                                            // 1354\n        Whether to hide container on save/cancel.                                                                      // 1355\n                                                                                                                       // 1356\n        @property autohide                                                                                             // 1357\n        @type boolean                                                                                                  // 1358\n        @default true                                                                                                  // 1359\n        @private                                                                                                       // 1360\n        **/                                                                                                            // 1361\n        autohide: true,                                                                                                // 1362\n        /**                                                                                                            // 1363\n        Action when user clicks outside the container. Can be <code>cancel|submit|ignore</code>.                       // 1364\n        Setting <code>ignore</code> allows to have several containers open.                                            // 1365\n                                                                                                                       // 1366\n        @property onblur                                                                                               // 1367\n        @type string                                                                                                   // 1368\n        @default 'cancel'                                                                                              // 1369\n        @since 1.1.1                                                                                                   // 1370\n        **/                                                                                                            // 1371\n        onblur: 'cancel',                                                                                              // 1372\n                                                                                                                       // 1373\n        /**                                                                                                            // 1374\n        Animation speed (inline mode only)                                                                             // 1375\n        @property anim                                                                                                 // 1376\n        @type string                                                                                                   // 1377\n        @default false                                                                                                 // 1378\n        **/                                                                                                            // 1379\n        anim: false,                                                                                                   // 1380\n                                                                                                                       // 1381\n        /**                                                                                                            // 1382\n        Mode of editable, can be `popup` or `inline`                                                                   // 1383\n                                                                                                                       // 1384\n        @property mode                                                                                                 // 1385\n        @type string                                                                                                   // 1386\n        @default 'popup'                                                                                               // 1387\n        @since 1.4.0                                                                                                   // 1388\n        **/                                                                                                            // 1389\n        mode: 'popup'                                                                                                  // 1390\n    };                                                                                                                 // 1391\n                                                                                                                       // 1392\n    /*                                                                                                                 // 1393\n    * workaround to have 'destroyed' event to destroy popover when element is destroyed                                // 1394\n    * see http://stackoverflow.com/questions/2200494/jquery-trigger-event-when-an-element-is-removed-from-the-dom      // 1395\n    */                                                                                                                 // 1396\n    jQuery.event.special.destroyed = {                                                                                 // 1397\n        remove: function(o) {                                                                                          // 1398\n            if (o.handler) {                                                                                           // 1399\n                o.handler();                                                                                           // 1400\n            }                                                                                                          // 1401\n        }                                                                                                              // 1402\n    };                                                                                                                 // 1403\n                                                                                                                       // 1404\n}(window.jQuery));                                                                                                     // 1405\n                                                                                                                       // 1406\n/**                                                                                                                    // 1407\n* Editable Inline                                                                                                      // 1408\n* ---------------------                                                                                                // 1409\n*/                                                                                                                     // 1410\n(function ($) {                                                                                                        // 1411\n    \"use strict\";                                                                                                      // 1412\n                                                                                                                       // 1413\n    //copy prototype from EditableContainer                                                                            // 1414\n    //extend methods                                                                                                   // 1415\n    $.extend($.fn.editableContainer.Inline.prototype, $.fn.editableContainer.Popup.prototype, {                        // 1416\n        containerName: 'editableform',                                                                                 // 1417\n        innerCss: '.editable-inline',                                                                                  // 1418\n        containerClass: 'editable-container editable-inline', //css class applied to container element                 // 1419\n                                                                                                                       // 1420\n        initContainer: function(){                                                                                     // 1421\n            //container is <span> element                                                                              // 1422\n            this.$tip = $('<span></span>');                                                                            // 1423\n                                                                                                                       // 1424\n            //convert anim to miliseconds (int)                                                                        // 1425\n            if(!this.options.anim) {                                                                                   // 1426\n                this.options.anim = 0;                                                                                 // 1427\n            }                                                                                                          // 1428\n        },                                                                                                             // 1429\n                                                                                                                       // 1430\n        splitOptions: function() {                                                                                     // 1431\n            //all options are passed to form                                                                           // 1432\n            this.containerOptions = {};                                                                                // 1433\n            this.formOptions = this.options;                                                                           // 1434\n        },                                                                                                             // 1435\n                                                                                                                       // 1436\n        tip: function() {                                                                                              // 1437\n           return this.$tip;                                                                                           // 1438\n        },                                                                                                             // 1439\n                                                                                                                       // 1440\n        innerShow: function () {                                                                                       // 1441\n            this.$element.hide();                                                                                      // 1442\n            this.tip().insertAfter(this.$element).show();                                                              // 1443\n        },                                                                                                             // 1444\n                                                                                                                       // 1445\n        innerHide: function () {                                                                                       // 1446\n            this.$tip.hide(this.options.anim, $.proxy(function() {                                                     // 1447\n                this.$element.show();                                                                                  // 1448\n                this.innerDestroy();                                                                                   // 1449\n            }, this));                                                                                                 // 1450\n        },                                                                                                             // 1451\n                                                                                                                       // 1452\n        innerDestroy: function() {                                                                                     // 1453\n            if(this.tip()) {                                                                                           // 1454\n                this.tip().empty().remove();                                                                           // 1455\n            }                                                                                                          // 1456\n        }                                                                                                              // 1457\n    });                                                                                                                // 1458\n                                                                                                                       // 1459\n}(window.jQuery));                                                                                                     // 1460\n/**                                                                                                                    // 1461\nMakes editable any HTML element on the page. Applied as jQuery method.                                                 // 1462\n                                                                                                                       // 1463\n@class editable                                                                                                        // 1464\n@uses editableContainer                                                                                                // 1465\n**/                                                                                                                    // 1466\n(function ($) {                                                                                                        // 1467\n    \"use strict\";                                                                                                      // 1468\n                                                                                                                       // 1469\n    var Editable = function (element, options) {                                                                       // 1470\n        this.$element = $(element);                                                                                    // 1471\n        //data-* has more priority over js options: because dynamically created elements may change data-*             // 1472\n        this.options = $.extend({}, $.fn.editable.defaults, options, $.fn.editableutils.getConfigData(this.$element));  \n        if(this.options.selector) {                                                                                    // 1474\n            this.initLive();                                                                                           // 1475\n        } else {                                                                                                       // 1476\n            this.init();                                                                                               // 1477\n        }                                                                                                              // 1478\n                                                                                                                       // 1479\n        //check for transition support                                                                                 // 1480\n        if(this.options.highlight && !$.fn.editableutils.supportsTransitions()) {                                      // 1481\n            this.options.highlight = false;                                                                            // 1482\n        }                                                                                                              // 1483\n    };                                                                                                                 // 1484\n                                                                                                                       // 1485\n    Editable.prototype = {                                                                                             // 1486\n        constructor: Editable,                                                                                         // 1487\n        init: function () {                                                                                            // 1488\n            var isValueByText = false,                                                                                 // 1489\n                doAutotext, finalize;                                                                                  // 1490\n                                                                                                                       // 1491\n            //name                                                                                                     // 1492\n            this.options.name = this.options.name || this.$element.attr('id');                                         // 1493\n                                                                                                                       // 1494\n            //create input of specified type. Input needed already here to convert value for initial display (e.g. show text by id for select)\n            //also we set scope option to have access to element inside input specific callbacks (e. g. source as function)\n            this.options.scope = this.$element[0];                                                                     // 1497\n            this.input = $.fn.editableutils.createInput(this.options);                                                 // 1498\n            if(!this.input) {                                                                                          // 1499\n                return;                                                                                                // 1500\n            }                                                                                                          // 1501\n                                                                                                                       // 1502\n            //set value from settings or by element's text                                                             // 1503\n            if (this.options.value === undefined || this.options.value === null) {                                     // 1504\n                this.value = this.input.html2value($.trim(this.$element.html()));                                      // 1505\n                isValueByText = true;                                                                                  // 1506\n            } else {                                                                                                   // 1507\n                /*                                                                                                     // 1508\n                  value can be string when received from 'data-value' attribute                                        // 1509\n                  for complext objects value can be set as json string in data-value attribute,                        // 1510\n                  e.g. data-value=\"{city: 'Moscow', street: 'Lenina'}\"                                                 // 1511\n                */                                                                                                     // 1512\n                this.options.value = $.fn.editableutils.tryParseJson(this.options.value, true);                        // 1513\n                if(typeof this.options.value === 'string') {                                                           // 1514\n                    this.value = this.input.str2value(this.options.value);                                             // 1515\n                } else {                                                                                               // 1516\n                    this.value = this.options.value;                                                                   // 1517\n                }                                                                                                      // 1518\n            }                                                                                                          // 1519\n                                                                                                                       // 1520\n            //add 'editable' class to every editable element                                                           // 1521\n            this.$element.addClass('editable');                                                                        // 1522\n                                                                                                                       // 1523\n            //specifically for \"textarea\" add class .editable-pre-wrapped to keep linebreaks                           // 1524\n            if(this.input.type === 'textarea') {                                                                       // 1525\n                this.$element.addClass('editable-pre-wrapped');                                                        // 1526\n            }                                                                                                          // 1527\n                                                                                                                       // 1528\n            //attach handler activating editable. In disabled mode it just prevent default action (useful for links)   // 1529\n            if(this.options.toggle !== 'manual') {                                                                     // 1530\n                this.$element.addClass('editable-click');                                                              // 1531\n                this.$element.on(this.options.toggle + '.editable', $.proxy(function(e){                               // 1532\n                    //prevent following link if editable enabled                                                       // 1533\n                    if(!this.options.disabled) {                                                                       // 1534\n                        e.preventDefault();                                                                            // 1535\n                    }                                                                                                  // 1536\n                                                                                                                       // 1537\n                    //stop propagation not required because in document click handler it checks event target           // 1538\n                    //e.stopPropagation();                                                                             // 1539\n                                                                                                                       // 1540\n                    if(this.options.toggle === 'mouseenter') {                                                         // 1541\n                        //for hover only show container                                                                // 1542\n                        this.show();                                                                                   // 1543\n                    } else {                                                                                           // 1544\n                        //when toggle='click' we should not close all other containers as they will be closed automatically in document click listener\n                        var closeAll = (this.options.toggle !== 'click');                                              // 1546\n                        this.toggle(closeAll);                                                                         // 1547\n                    }                                                                                                  // 1548\n                }, this));                                                                                             // 1549\n            } else {                                                                                                   // 1550\n                this.$element.attr('tabindex', -1); //do not stop focus on element when toggled manually               // 1551\n            }                                                                                                          // 1552\n                                                                                                                       // 1553\n            //if display is function it's far more convinient to have autotext = always to render correctly on init    // 1554\n            //see https://github.com/vitalets/x-editable-yii/issues/34                                                 // 1555\n            if(typeof this.options.display === 'function') {                                                           // 1556\n                this.options.autotext = 'always';                                                                      // 1557\n            }                                                                                                          // 1558\n                                                                                                                       // 1559\n            //check conditions for autotext:                                                                           // 1560\n            switch(this.options.autotext) {                                                                            // 1561\n              case 'always':                                                                                           // 1562\n               doAutotext = true;                                                                                      // 1563\n              break;                                                                                                   // 1564\n              case 'auto':                                                                                             // 1565\n                //if element text is empty and value is defined and value not generated by text --> run autotext       // 1566\n                doAutotext = !$.trim(this.$element.text()).length && this.value !== null && this.value !== undefined && !isValueByText;\n              break;                                                                                                   // 1568\n              default:                                                                                                 // 1569\n               doAutotext = false;                                                                                     // 1570\n            }                                                                                                          // 1571\n                                                                                                                       // 1572\n            //depending on autotext run render() or just finilize init                                                 // 1573\n            $.when(doAutotext ? this.render() : true).then($.proxy(function() {                                        // 1574\n                if(this.options.disabled) {                                                                            // 1575\n                    this.disable();                                                                                    // 1576\n                } else {                                                                                               // 1577\n                    this.enable();                                                                                     // 1578\n                }                                                                                                      // 1579\n               /**                                                                                                     // 1580\n               Fired when element was initialized by `$().editable()` method.                                          // 1581\n               Please note that you should setup `init` handler **before** applying `editable`.                        // 1582\n                                                                                                                       // 1583\n               @event init                                                                                             // 1584\n               @param {Object} event event object                                                                      // 1585\n               @param {Object} editable editable instance (as here it cannot accessed via data('editable'))            // 1586\n               @since 1.2.0                                                                                            // 1587\n               @example                                                                                                // 1588\n               $('#username').on('init', function(e, editable) {                                                       // 1589\n                   alert('initialized ' + editable.options.name);                                                      // 1590\n               });                                                                                                     // 1591\n               $('#username').editable();                                                                              // 1592\n               **/                                                                                                     // 1593\n                this.$element.triggerHandler('init', this);                                                            // 1594\n            }, this));                                                                                                 // 1595\n        },                                                                                                             // 1596\n                                                                                                                       // 1597\n        /*                                                                                                             // 1598\n         Initializes parent element for live editables                                                                 // 1599\n        */                                                                                                             // 1600\n        initLive: function() {                                                                                         // 1601\n           //store selector                                                                                            // 1602\n           var selector = this.options.selector;                                                                       // 1603\n           //modify options for child elements                                                                         // 1604\n           this.options.selector = false;                                                                              // 1605\n           this.options.autotext = 'never';                                                                            // 1606\n           //listen toggle events                                                                                      // 1607\n           this.$element.on(this.options.toggle + '.editable', selector, $.proxy(function(e){                          // 1608\n               var $target = $(e.target);                                                                              // 1609\n               if(!$target.data('editable')) {                                                                         // 1610\n                   //if delegated element initially empty, we need to clear it's text (that was manually set to `empty` by user)\n                   //see https://github.com/vitalets/x-editable/issues/137                                             // 1612\n                   if($target.hasClass(this.options.emptyclass)) {                                                     // 1613\n                      $target.empty();                                                                                 // 1614\n                   }                                                                                                   // 1615\n                   $target.editable(this.options).trigger(e);                                                          // 1616\n               }                                                                                                       // 1617\n           }, this));                                                                                                  // 1618\n        },                                                                                                             // 1619\n                                                                                                                       // 1620\n        /*                                                                                                             // 1621\n        Renders value into element's text.                                                                             // 1622\n        Can call custom display method from options.                                                                   // 1623\n        Can return deferred object.                                                                                    // 1624\n        @method render()                                                                                               // 1625\n        @param {mixed} response server response (if exist) to pass into display function                               // 1626\n        */                                                                                                             // 1627\n        render: function(response) {                                                                                   // 1628\n            //do not display anything                                                                                  // 1629\n            if(this.options.display === false) {                                                                       // 1630\n                return;                                                                                                // 1631\n            }                                                                                                          // 1632\n                                                                                                                       // 1633\n            //if input has `value2htmlFinal` method, we pass callback in third param to be called when source is loaded\n            if(this.input.value2htmlFinal) {                                                                           // 1635\n                return this.input.value2html(this.value, this.$element[0], this.options.display, response);            // 1636\n            //if display method defined --> use it                                                                     // 1637\n            } else if(typeof this.options.display === 'function') {                                                    // 1638\n                return this.options.display.call(this.$element[0], this.value, response);                              // 1639\n            //else use input's original value2html() method                                                            // 1640\n            } else {                                                                                                   // 1641\n                return this.input.value2html(this.value, this.$element[0]);                                            // 1642\n            }                                                                                                          // 1643\n        },                                                                                                             // 1644\n                                                                                                                       // 1645\n        /**                                                                                                            // 1646\n        Enables editable                                                                                               // 1647\n        @method enable()                                                                                               // 1648\n        **/                                                                                                            // 1649\n        enable: function() {                                                                                           // 1650\n            this.options.disabled = false;                                                                             // 1651\n            this.$element.removeClass('editable-disabled');                                                            // 1652\n            this.handleEmpty(this.isEmpty);                                                                            // 1653\n            if(this.options.toggle !== 'manual') {                                                                     // 1654\n                if(this.$element.attr('tabindex') === '-1') {                                                          // 1655\n                    this.$element.removeAttr('tabindex');                                                              // 1656\n                }                                                                                                      // 1657\n            }                                                                                                          // 1658\n        },                                                                                                             // 1659\n                                                                                                                       // 1660\n        /**                                                                                                            // 1661\n        Disables editable                                                                                              // 1662\n        @method disable()                                                                                              // 1663\n        **/                                                                                                            // 1664\n        disable: function() {                                                                                          // 1665\n            this.options.disabled = true;                                                                              // 1666\n            this.hide();                                                                                               // 1667\n            this.$element.addClass('editable-disabled');                                                               // 1668\n            this.handleEmpty(this.isEmpty);                                                                            // 1669\n            //do not stop focus on this element                                                                        // 1670\n            this.$element.attr('tabindex', -1);                                                                        // 1671\n        },                                                                                                             // 1672\n                                                                                                                       // 1673\n        /**                                                                                                            // 1674\n        Toggles enabled / disabled state of editable element                                                           // 1675\n        @method toggleDisabled()                                                                                       // 1676\n        **/                                                                                                            // 1677\n        toggleDisabled: function() {                                                                                   // 1678\n            if(this.options.disabled) {                                                                                // 1679\n                this.enable();                                                                                         // 1680\n            } else {                                                                                                   // 1681\n                this.disable();                                                                                        // 1682\n            }                                                                                                          // 1683\n        },                                                                                                             // 1684\n                                                                                                                       // 1685\n        /**                                                                                                            // 1686\n        Sets new option                                                                                                // 1687\n                                                                                                                       // 1688\n        @method option(key, value)                                                                                     // 1689\n        @param {string|object} key option name or object with several options                                          // 1690\n        @param {mixed} value option new value                                                                          // 1691\n        @example                                                                                                       // 1692\n        $('.editable').editable('option', 'pk', 2);                                                                    // 1693\n        **/                                                                                                            // 1694\n        option: function(key, value) {                                                                                 // 1695\n            //set option(s) by object                                                                                  // 1696\n            if(key && typeof key === 'object') {                                                                       // 1697\n               $.each(key, $.proxy(function(k, v){                                                                     // 1698\n                  this.option($.trim(k), v);                                                                           // 1699\n               }, this));                                                                                              // 1700\n               return;                                                                                                 // 1701\n            }                                                                                                          // 1702\n                                                                                                                       // 1703\n            //set option by string                                                                                     // 1704\n            this.options[key] = value;                                                                                 // 1705\n                                                                                                                       // 1706\n            //disabled                                                                                                 // 1707\n            if(key === 'disabled') {                                                                                   // 1708\n               return value ? this.disable() : this.enable();                                                          // 1709\n            }                                                                                                          // 1710\n                                                                                                                       // 1711\n            //value                                                                                                    // 1712\n            if(key === 'value') {                                                                                      // 1713\n                this.setValue(value);                                                                                  // 1714\n            }                                                                                                          // 1715\n                                                                                                                       // 1716\n            //transfer new option to container!                                                                        // 1717\n            if(this.container) {                                                                                       // 1718\n                this.container.option(key, value);                                                                     // 1719\n            }                                                                                                          // 1720\n                                                                                                                       // 1721\n            //pass option to input directly (as it points to the same in form)                                         // 1722\n            if(this.input.option) {                                                                                    // 1723\n                this.input.option(key, value);                                                                         // 1724\n            }                                                                                                          // 1725\n                                                                                                                       // 1726\n        },                                                                                                             // 1727\n                                                                                                                       // 1728\n        /*                                                                                                             // 1729\n        * set emptytext if element is empty                                                                            // 1730\n        */                                                                                                             // 1731\n        handleEmpty: function (isEmpty) {                                                                              // 1732\n            //do not handle empty if we do not display anything                                                        // 1733\n            if(this.options.display === false) {                                                                       // 1734\n                return;                                                                                                // 1735\n            }                                                                                                          // 1736\n                                                                                                                       // 1737\n            /*                                                                                                         // 1738\n            isEmpty may be set directly as param of method.                                                            // 1739\n            It is required when we enable/disable field and can't rely on content                                      // 1740\n            as node content is text: \"Empty\" that is not empty %)                                                      // 1741\n            */                                                                                                         // 1742\n            if(isEmpty !== undefined) {                                                                                // 1743\n                this.isEmpty = isEmpty;                                                                                // 1744\n            } else {                                                                                                   // 1745\n                //detect empty                                                                                         // 1746\n                //for some inputs we need more smart check                                                             // 1747\n                //e.g. wysihtml5 may have <br>, <p></p>, <img>                                                         // 1748\n                if(typeof(this.input.isEmpty) === 'function') {                                                        // 1749\n                    this.isEmpty = this.input.isEmpty(this.$element);                                                  // 1750\n                } else {                                                                                               // 1751\n                    this.isEmpty = $.trim(this.$element.html()) === '';                                                // 1752\n                }                                                                                                      // 1753\n            }                                                                                                          // 1754\n                                                                                                                       // 1755\n            //emptytext shown only for enabled                                                                         // 1756\n            if(!this.options.disabled) {                                                                               // 1757\n                if (this.isEmpty) {                                                                                    // 1758\n                    this.$element.html(this.options.emptytext);                                                        // 1759\n                    if(this.options.emptyclass) {                                                                      // 1760\n                        this.$element.addClass(this.options.emptyclass);                                               // 1761\n                    }                                                                                                  // 1762\n                } else if(this.options.emptyclass) {                                                                   // 1763\n                    this.$element.removeClass(this.options.emptyclass);                                                // 1764\n                }                                                                                                      // 1765\n            } else {                                                                                                   // 1766\n                //below required if element disable property was changed                                               // 1767\n                if(this.isEmpty) {                                                                                     // 1768\n                    this.$element.empty();                                                                             // 1769\n                    if(this.options.emptyclass) {                                                                      // 1770\n                        this.$element.removeClass(this.options.emptyclass);                                            // 1771\n                    }                                                                                                  // 1772\n                }                                                                                                      // 1773\n            }                                                                                                          // 1774\n        },                                                                                                             // 1775\n                                                                                                                       // 1776\n        /**                                                                                                            // 1777\n        Shows container with form                                                                                      // 1778\n        @method show()                                                                                                 // 1779\n        @param {boolean} closeAll Whether to close all other editable containers when showing this one. Default true.  // 1780\n        **/                                                                                                            // 1781\n        show: function (closeAll) {                                                                                    // 1782\n            if(this.options.disabled) {                                                                                // 1783\n                return;                                                                                                // 1784\n            }                                                                                                          // 1785\n                                                                                                                       // 1786\n            //init editableContainer: popover, tooltip, inline, etc..                                                  // 1787\n            if(!this.container) {                                                                                      // 1788\n                var containerOptions = $.extend({}, this.options, {                                                    // 1789\n                    value: this.value,                                                                                 // 1790\n                    input: this.input //pass input to form (as it is already created)                                  // 1791\n                });                                                                                                    // 1792\n                this.$element.editableContainer(containerOptions);                                                     // 1793\n                //listen `save` event                                                                                  // 1794\n                this.$element.on(\"save.internal\", $.proxy(this.save, this));                                           // 1795\n                this.container = this.$element.data('editableContainer');                                              // 1796\n            } else if(this.container.tip().is(':visible')) {                                                           // 1797\n                return;                                                                                                // 1798\n            }                                                                                                          // 1799\n                                                                                                                       // 1800\n            //show container                                                                                           // 1801\n            this.container.show(closeAll);                                                                             // 1802\n        },                                                                                                             // 1803\n                                                                                                                       // 1804\n        /**                                                                                                            // 1805\n        Hides container with form                                                                                      // 1806\n        @method hide()                                                                                                 // 1807\n        **/                                                                                                            // 1808\n        hide: function () {                                                                                            // 1809\n            if(this.container) {                                                                                       // 1810\n                this.container.hide();                                                                                 // 1811\n            }                                                                                                          // 1812\n        },                                                                                                             // 1813\n                                                                                                                       // 1814\n        /**                                                                                                            // 1815\n        Toggles container visibility (show / hide)                                                                     // 1816\n        @method toggle()                                                                                               // 1817\n        @param {boolean} closeAll Whether to close all other editable containers when showing this one. Default true.  // 1818\n        **/                                                                                                            // 1819\n        toggle: function(closeAll) {                                                                                   // 1820\n            if(this.container && this.container.tip().is(':visible')) {                                                // 1821\n                this.hide();                                                                                           // 1822\n            } else {                                                                                                   // 1823\n                this.show(closeAll);                                                                                   // 1824\n            }                                                                                                          // 1825\n        },                                                                                                             // 1826\n                                                                                                                       // 1827\n        /*                                                                                                             // 1828\n        * called when form was submitted                                                                               // 1829\n        */                                                                                                             // 1830\n        save: function(e, params) {                                                                                    // 1831\n            //mark element with unsaved class if needed                                                                // 1832\n            if(this.options.unsavedclass) {                                                                            // 1833\n                /*                                                                                                     // 1834\n                 Add unsaved css to element if:                                                                        // 1835\n                  - url is not user's function                                                                         // 1836\n                  - value was not sent to server                                                                       // 1837\n                  - params.response === undefined, that means data was not sent                                        // 1838\n                  - value changed                                                                                      // 1839\n                */                                                                                                     // 1840\n                var sent = false;                                                                                      // 1841\n                sent = sent || typeof this.options.url === 'function';                                                 // 1842\n                sent = sent || this.options.display === false;                                                         // 1843\n                sent = sent || params.response !== undefined;                                                          // 1844\n                sent = sent || (this.options.savenochange && this.input.value2str(this.value) !== this.input.value2str(params.newValue)); \n                                                                                                                       // 1846\n                if(sent) {                                                                                             // 1847\n                    this.$element.removeClass(this.options.unsavedclass);                                              // 1848\n                } else {                                                                                               // 1849\n                    this.$element.addClass(this.options.unsavedclass);                                                 // 1850\n                }                                                                                                      // 1851\n            }                                                                                                          // 1852\n                                                                                                                       // 1853\n            //highlight when saving                                                                                    // 1854\n            if(this.options.highlight) {                                                                               // 1855\n                var $e = this.$element,                                                                                // 1856\n                    bgColor = $e.css('background-color');                                                              // 1857\n                                                                                                                       // 1858\n                $e.css('background-color', this.options.highlight);                                                    // 1859\n                setTimeout(function(){                                                                                 // 1860\n                    if(bgColor === 'transparent') {                                                                    // 1861\n                        bgColor = '';                                                                                  // 1862\n                    }                                                                                                  // 1863\n                    $e.css('background-color', bgColor);                                                               // 1864\n                    $e.addClass('editable-bg-transition');                                                             // 1865\n                    setTimeout(function(){                                                                             // 1866\n                       $e.removeClass('editable-bg-transition');                                                       // 1867\n                    }, 1700);                                                                                          // 1868\n                }, 10);                                                                                                // 1869\n            }                                                                                                          // 1870\n                                                                                                                       // 1871\n            //set new value                                                                                            // 1872\n            this.setValue(params.newValue, false, params.response);                                                    // 1873\n                                                                                                                       // 1874\n            /**                                                                                                        // 1875\n            Fired when new value was submitted. You can use <code>$(this).data('editable')</code> to access to editable instance\n                                                                                                                       // 1877\n            @event save                                                                                                // 1878\n            @param {Object} event event object                                                                         // 1879\n            @param {Object} params additional params                                                                   // 1880\n            @param {mixed} params.newValue submitted value                                                             // 1881\n            @param {Object} params.response ajax response                                                              // 1882\n            @example                                                                                                   // 1883\n            $('#username').on('save', function(e, params) {                                                            // 1884\n                alert('Saved value: ' + params.newValue);                                                              // 1885\n            });                                                                                                        // 1886\n            **/                                                                                                        // 1887\n            //event itself is triggered by editableContainer. Description here is only for documentation              \n        },                                                                                                             // 1889\n                                                                                                                       // 1890\n        validate: function () {                                                                                        // 1891\n            if (typeof this.options.validate === 'function') {                                                         // 1892\n                return this.options.validate.call(this, this.value);                                                   // 1893\n            }                                                                                                          // 1894\n        },                                                                                                             // 1895\n                                                                                                                       // 1896\n        /**                                                                                                            // 1897\n        Sets new value of editable                                                                                     // 1898\n        @method setValue(value, convertStr)                                                                            // 1899\n        @param {mixed} value new value                                                                                 // 1900\n        @param {boolean} convertStr whether to convert value from string to internal format                            // 1901\n        **/                                                                                                            // 1902\n        setValue: function(value, convertStr, response) {                                                              // 1903\n            if(convertStr) {                                                                                           // 1904\n                this.value = this.input.str2value(value);                                                              // 1905\n            } else {                                                                                                   // 1906\n                this.value = value;                                                                                    // 1907\n            }                                                                                                          // 1908\n            if(this.container) {                                                                                       // 1909\n                this.container.option('value', this.value);                                                            // 1910\n            }                                                                                                          // 1911\n            $.when(this.render(response))                                                                              // 1912\n            .then($.proxy(function() {                                                                                 // 1913\n                this.handleEmpty();                                                                                    // 1914\n            }, this));                                                                                                 // 1915\n        },                                                                                                             // 1916\n                                                                                                                       // 1917\n        /**                                                                                                            // 1918\n        Activates input of visible container (e.g. set focus)                                                          // 1919\n        @method activate()                                                                                             // 1920\n        **/                                                                                                            // 1921\n        activate: function() {                                                                                         // 1922\n            if(this.container) {                                                                                       // 1923\n               this.container.activate();                                                                              // 1924\n            }                                                                                                          // 1925\n        },                                                                                                             // 1926\n                                                                                                                       // 1927\n        /**                                                                                                            // 1928\n        Removes editable feature from element                                                                          // 1929\n        @method destroy()                                                                                              // 1930\n        **/                                                                                                            // 1931\n        destroy: function() {                                                                                          // 1932\n            this.disable();                                                                                            // 1933\n                                                                                                                       // 1934\n            if(this.container) {                                                                                       // 1935\n               this.container.destroy();                                                                               // 1936\n            }                                                                                                          // 1937\n                                                                                                                       // 1938\n            this.input.destroy();                                                                                      // 1939\n                                                                                                                       // 1940\n            if(this.options.toggle !== 'manual') {                                                                     // 1941\n                this.$element.removeClass('editable-click');                                                           // 1942\n                this.$element.off(this.options.toggle + '.editable');                                                  // 1943\n            }                                                                                                          // 1944\n                                                                                                                       // 1945\n            this.$element.off(\"save.internal\");                                                                        // 1946\n                                                                                                                       // 1947\n            this.$element.removeClass('editable editable-open editable-disabled');                                     // 1948\n            this.$element.removeData('editable');                                                                      // 1949\n        }                                                                                                              // 1950\n    };                                                                                                                 // 1951\n                                                                                                                       // 1952\n    /* EDITABLE PLUGIN DEFINITION                                                                                      // 1953\n    * ======================= */                                                                                       // 1954\n                                                                                                                       // 1955\n    /**                                                                                                                // 1956\n    jQuery method to initialize editable element.                                                                      // 1957\n                                                                                                                       // 1958\n    @method $().editable(options)                                                                                      // 1959\n    @params {Object} options                                                                                           // 1960\n    @example                                                                                                           // 1961\n    $('#username').editable({                                                                                          // 1962\n        type: 'text',                                                                                                  // 1963\n        url: '/post',                                                                                                  // 1964\n        pk: 1                                                                                                          // 1965\n    });                                                                                                                // 1966\n    **/                                                                                                                // 1967\n    $.fn.editable = function (option) {                                                                                // 1968\n        //special API methods returning non-jquery object                                                              // 1969\n        var result = {}, args = arguments, datakey = 'editable';                                                       // 1970\n        switch (option) {                                                                                              // 1971\n            /**                                                                                                        // 1972\n            Runs client-side validation for all matched editables                                                      // 1973\n                                                                                                                       // 1974\n            @method validate()                                                                                         // 1975\n            @returns {Object} validation errors map                                                                    // 1976\n            @example                                                                                                   // 1977\n            $('#username, #fullname').editable('validate');                                                            // 1978\n            // possible result:                                                                                        // 1979\n            {                                                                                                          // 1980\n              username: \"username is required\",                                                                        // 1981\n              fullname: \"fullname should be minimum 3 letters length\"                                                  // 1982\n            }                                                                                                          // 1983\n            **/                                                                                                        // 1984\n            case 'validate':                                                                                           // 1985\n                this.each(function () {                                                                                // 1986\n                    var $this = $(this), data = $this.data(datakey), error;                                            // 1987\n                    if (data && (error = data.validate())) {                                                           // 1988\n                        result[data.options.name] = error;                                                             // 1989\n                    }                                                                                                  // 1990\n                });                                                                                                    // 1991\n            return result;                                                                                             // 1992\n                                                                                                                       // 1993\n            /**                                                                                                        // 1994\n            Returns current values of editable elements.                                                               // 1995\n            Note that it returns an **object** with name-value pairs, not a value itself. It allows to get data from several elements.    \n            If value of some editable is `null` or `undefined` it is excluded from result object.                      // 1997\n            When param `isSingle` is set to **true** - it is supposed you have single element and will return value of editable instead of object.   \n                                                                                                                       // 1999\n            @method getValue()                                                                                         // 2000\n            @param {bool} isSingle whether to return just value of single element                                      // 2001\n            @returns {Object} object of element names and values                                                       // 2002\n            @example                                                                                                   // 2003\n            $('#username, #fullname').editable('getValue');                                                            // 2004\n            //result:                                                                                                  // 2005\n            {                                                                                                          // 2006\n            username: \"superuser\",                                                                                     // 2007\n            fullname: \"John\"                                                                                           // 2008\n            }                                                                                                          // 2009\n            //isSingle = true                                                                                          // 2010\n            $('#username').editable('getValue', true);                                                                 // 2011\n            //result \"superuser\"                                                                                       // 2012\n            **/                                                                                                        // 2013\n            case 'getValue':                                                                                           // 2014\n                if(arguments.length === 2 && arguments[1] === true) { //isSingle = true                                // 2015\n                    result = this.eq(0).data(datakey).value;                                                           // 2016\n                } else {                                                                                               // 2017\n                    this.each(function () {                                                                            // 2018\n                        var $this = $(this), data = $this.data(datakey);                                               // 2019\n                        if (data && data.value !== undefined && data.value !== null) {                                 // 2020\n                            result[data.options.name] = data.input.value2submit(data.value);                           // 2021\n                        }                                                                                              // 2022\n                    });                                                                                                // 2023\n                }                                                                                                      // 2024\n            return result;                                                                                             // 2025\n                                                                                                                       // 2026\n            /**                                                                                                        // 2027\n            This method collects values from several editable elements and submit them all to server.                  // 2028\n            Internally it runs client-side validation for all fields and submits only in case of success.              // 2029\n            See <a href=\"#newrecord\">creating new records</a> for details.                                             // 2030\n            Since 1.5.1 `submit` can be applied to single element to send data programmatically. In that case          // 2031\n            `url`, `success` and `error` is taken from initial options and you can just call `$('#username').editable('submit')`. \n                                                                                                                       // 2033\n            @method submit(options)                                                                                    // 2034\n            @param {object} options                                                                                    // 2035\n            @param {object} options.url url to submit data                                                             // 2036\n            @param {object} options.data additional data to submit                                                     // 2037\n            @param {object} options.ajaxOptions additional ajax options                                                // 2038\n            @param {function} options.error(obj) error handler                                                         // 2039\n            @param {function} options.success(obj,config) success handler                                              // 2040\n            @returns {Object} jQuery object                                                                            // 2041\n            **/                                                                                                        // 2042\n            case 'submit':  //collects value, validate and submit to server for creating new record                    // 2043\n                var config = arguments[1] || {},                                                                       // 2044\n                $elems = this,                                                                                         // 2045\n                errors = this.editable('validate');                                                                    // 2046\n                                                                                                                       // 2047\n                // validation ok                                                                                       // 2048\n                if($.isEmptyObject(errors)) {                                                                          // 2049\n                    var ajaxOptions = {};                                                                              // 2050\n                                                                                                                       // 2051\n                    // for single element use url, success etc from options                                            // 2052\n                    if($elems.length === 1) {                                                                          // 2053\n                        var editable = $elems.data('editable');                                                        // 2054\n                        //standard params                                                                              // 2055\n                        var params = {                                                                                 // 2056\n                            name: editable.options.name || '',                                                         // 2057\n                            value: editable.input.value2submit(editable.value),                                        // 2058\n                            pk: (typeof editable.options.pk === 'function') ?                                          // 2059\n                                editable.options.pk.call(editable.options.scope) :                                     // 2060\n                                editable.options.pk                                                                    // 2061\n                        };                                                                                             // 2062\n                                                                                                                       // 2063\n                        //additional params                                                                            // 2064\n                        if(typeof editable.options.params === 'function') {                                            // 2065\n                            params = editable.options.params.call(editable.options.scope, params);                     // 2066\n                        } else {                                                                                       // 2067\n                            //try parse json in single quotes (from data-params attribute)                             // 2068\n                            editable.options.params = $.fn.editableutils.tryParseJson(editable.options.params, true);   \n                            $.extend(params, editable.options.params);                                                 // 2070\n                        }                                                                                              // 2071\n                                                                                                                       // 2072\n                        ajaxOptions = {                                                                                // 2073\n                            url: editable.options.url,                                                                 // 2074\n                            data: params,                                                                              // 2075\n                            type: 'POST'                                                                               // 2076\n                        };                                                                                             // 2077\n                                                                                                                       // 2078\n                        // use success / error from options                                                            // 2079\n                        config.success = config.success || editable.options.success;                                   // 2080\n                        config.error = config.error || editable.options.error;                                         // 2081\n                                                                                                                       // 2082\n                    // multiple elements                                                                               // 2083\n                    } else {                                                                                           // 2084\n                        var values = this.editable('getValue');                                                        // 2085\n                                                                                                                       // 2086\n                        ajaxOptions = {                                                                                // 2087\n                            url: config.url,                                                                           // 2088\n                            data: values,                                                                              // 2089\n                            type: 'POST'                                                                               // 2090\n                        };                                                                                             // 2091\n                    }                                                                                                  // 2092\n                                                                                                                       // 2093\n                    // ajax success callabck (response 200 OK)                                                         // 2094\n                    ajaxOptions.success = typeof config.success === 'function' ? function(response) {                  // 2095\n                            config.success.call($elems, response, config);                                             // 2096\n                        } : $.noop;                                                                                    // 2097\n                                                                                                                       // 2098\n                    // ajax error callabck                                                                             // 2099\n                    ajaxOptions.error = typeof config.error === 'function' ? function() {                              // 2100\n                             config.error.apply($elems, arguments);                                                    // 2101\n                        } : $.noop;                                                                                    // 2102\n                                                                                                                       // 2103\n                    // extend ajaxOptions                                                                              // 2104\n                    if(config.ajaxOptions) {                                                                           // 2105\n                        $.extend(ajaxOptions, config.ajaxOptions);                                                     // 2106\n                    }                                                                                                  // 2107\n                                                                                                                       // 2108\n                    // extra data                                                                                      // 2109\n                    if(config.data) {                                                                                  // 2110\n                        $.extend(ajaxOptions.data, config.data);                                                       // 2111\n                    }                                                                                                  // 2112\n                                                                                                                       // 2113\n                    // perform ajax request                                                                            // 2114\n                    $.ajax(ajaxOptions);                                                                               // 2115\n                } else { //client-side validation error                                                                // 2116\n                    if(typeof config.error === 'function') {                                                           // 2117\n                        config.error.call($elems, errors);                                                             // 2118\n                    }                                                                                                  // 2119\n                }                                                                                                      // 2120\n            return this;                                                                                               // 2121\n        }                                                                                                              // 2122\n                                                                                                                       // 2123\n        //return jquery object                                                                                         // 2124\n        return this.each(function () {                                                                                 // 2125\n            var $this = $(this),                                                                                       // 2126\n                data = $this.data(datakey),                                                                            // 2127\n                options = typeof option === 'object' && option;                                                        // 2128\n                                                                                                                       // 2129\n            //for delegated targets do not store `editable` object for element                                         // 2130\n            //it's allows several different selectors.                                                                 // 2131\n            //see: https://github.com/vitalets/x-editable/issues/312                                                   // 2132\n            if(options && options.selector) {                                                                          // 2133\n                data = new Editable(this, options);                                                                    // 2134\n                return;                                                                                                // 2135\n            }                                                                                                          // 2136\n                                                                                                                       // 2137\n            if (!data) {                                                                                               // 2138\n                $this.data(datakey, (data = new Editable(this, options)));                                             // 2139\n            }                                                                                                          // 2140\n                                                                                                                       // 2141\n            if (typeof option === 'string') { //call method                                                            // 2142\n                data[option].apply(data, Array.prototype.slice.call(args, 1));                                         // 2143\n            }                                                                                                          // 2144\n        });                                                                                                            // 2145\n    };                                                                                                                 // 2146\n                                                                                                                       // 2147\n                                                                                                                       // 2148\n    $.fn.editable.defaults = {                                                                                         // 2149\n        /**                                                                                                            // 2150\n        Type of input. Can be <code>text|textarea|select|date|checklist</code> and more                                // 2151\n                                                                                                                       // 2152\n        @property type                                                                                                 // 2153\n        @type string                                                                                                   // 2154\n        @default 'text'                                                                                                // 2155\n        **/                                                                                                            // 2156\n        type: 'text',                                                                                                  // 2157\n        /**                                                                                                            // 2158\n        Sets disabled state of editable                                                                                // 2159\n                                                                                                                       // 2160\n        @property disabled                                                                                             // 2161\n        @type boolean                                                                                                  // 2162\n        @default false                                                                                                 // 2163\n        **/                                                                                                            // 2164\n        disabled: false,                                                                                               // 2165\n        /**                                                                                                            // 2166\n        How to toggle editable. Can be <code>click|dblclick|mouseenter|manual</code>.                                  // 2167\n        When set to <code>manual</code> you should manually call <code>show/hide</code> methods of editable.           // 2168\n        **Note**: if you call <code>show</code> or <code>toggle</code> inside **click** handler of some DOM element,   // 2169\n        you need to apply <code>e.stopPropagation()</code> because containers are being closed on any click on document.\n                                                                                                                       // 2171\n        @example                                                                                                       // 2172\n        $('#edit-button').click(function(e) {                                                                          // 2173\n            e.stopPropagation();                                                                                       // 2174\n            $('#username').editable('toggle');                                                                         // 2175\n        });                                                                                                            // 2176\n                                                                                                                       // 2177\n        @property toggle                                                                                               // 2178\n        @type string                                                                                                   // 2179\n        @default 'click'                                                                                               // 2180\n        **/                                                                                                            // 2181\n        toggle: 'click',                                                                                               // 2182\n        /**                                                                                                            // 2183\n        Text shown when element is empty.                                                                              // 2184\n                                                                                                                       // 2185\n        @property emptytext                                                                                            // 2186\n        @type string                                                                                                   // 2187\n        @default 'Empty'                                                                                               // 2188\n        **/                                                                                                            // 2189\n        emptytext: 'Empty',                                                                                            // 2190\n        /**                                                                                                            // 2191\n        Allows to automatically set element's text based on it's value. Can be <code>auto|always|never</code>. Useful for select and date.\n        For example, if dropdown list is <code>{1: 'a', 2: 'b'}</code> and element's value set to <code>1</code>, it's html will be automatically set to <code>'a'</code>.  \n        <code>auto</code> - text will be automatically set only if element is empty.                                   // 2194\n        <code>always|never</code> - always(never) try to set element's text.                                           // 2195\n                                                                                                                       // 2196\n        @property autotext                                                                                             // 2197\n        @type string                                                                                                   // 2198\n        @default 'auto'                                                                                                // 2199\n        **/                                                                                                            // 2200\n        autotext: 'auto',                                                                                              // 2201\n        /**                                                                                                            // 2202\n        Initial value of input. If not set, taken from element's text.                                                 // 2203\n        Note, that if element's text is empty - text is automatically generated from value and can be customized (see `autotext` option).  \n        For example, to display currency sign:                                                                         // 2205\n        @example                                                                                                       // 2206\n        <a id=\"price\" data-type=\"text\" data-value=\"100\"></a>                                                           // 2207\n        <script>                                                                                                       // 2208\n        $('#price').editable({                                                                                         // 2209\n            ...                                                                                                        // 2210\n            display: function(value) {                                                                                 // 2211\n              $(this).text(value + '$');                                                                               // 2212\n            }                                                                                                          // 2213\n        })                                                                                                             // 2214\n        </script>                                                                                                      // 2215\n                                                                                                                       // 2216\n        @property value                                                                                                // 2217\n        @type mixed                                                                                                    // 2218\n        @default element's text                                                                                        // 2219\n        **/                                                                                                            // 2220\n        value: null,                                                                                                   // 2221\n        /**                                                                                                            // 2222\n        Callback to perform custom displaying of value in element's text.                                              // 2223\n        If `null`, default input's display used.                                                                       // 2224\n        If `false`, no displaying methods will be called, element's text will never change.                            // 2225\n        Runs under element's scope.                                                                                    // 2226\n        _**Parameters:**_                                                                                              // 2227\n                                                                                                                       // 2228\n        * `value` current value to be displayed                                                                        // 2229\n        * `response` server response (if display called after ajax submit), since 1.4.0                                // 2230\n                                                                                                                       // 2231\n        For _inputs with source_ (select, checklist) parameters are different:                                         // 2232\n                                                                                                                       // 2233\n        * `value` current value to be displayed                                                                        // 2234\n        * `sourceData` array of items for current input (e.g. dropdown items)                                          // 2235\n        * `response` server response (if display called after ajax submit), since 1.4.0                                // 2236\n                                                                                                                       // 2237\n        To get currently selected items use `$.fn.editableutils.itemsByValue(value, sourceData)`.                      // 2238\n                                                                                                                       // 2239\n        @property display                                                                                              // 2240\n        @type function|boolean                                                                                         // 2241\n        @default null                                                                                                  // 2242\n        @since 1.2.0                                                                                                   // 2243\n        @example                                                                                                       // 2244\n        display: function(value, sourceData) {                                                                         // 2245\n           //display checklist as comma-separated values                                                               // 2246\n           var html = [],                                                                                              // 2247\n               checked = $.fn.editableutils.itemsByValue(value, sourceData);                                           // 2248\n                                                                                                                       // 2249\n           if(checked.length) {                                                                                        // 2250\n               $.each(checked, function(i, v) { html.push($.fn.editableutils.escape(v.text)); });                      // 2251\n               $(this).html(html.join(', '));                                                                          // 2252\n           } else {                                                                                                    // 2253\n               $(this).empty();                                                                                        // 2254\n           }                                                                                                           // 2255\n        }                                                                                                              // 2256\n        **/                                                                                                            // 2257\n        display: null,                                                                                                 // 2258\n        /**                                                                                                            // 2259\n        Css class applied when editable text is empty.                                                                 // 2260\n                                                                                                                       // 2261\n        @property emptyclass                                                                                           // 2262\n        @type string                                                                                                   // 2263\n        @since 1.4.1                                                                                                   // 2264\n        @default editable-empty                                                                                        // 2265\n        **/                                                                                                            // 2266\n        emptyclass: 'editable-empty',                                                                                  // 2267\n        /**                                                                                                            // 2268\n        Css class applied when value was stored but not sent to server (`pk` is empty or `send = 'never'`).            // 2269\n        You may set it to `null` if you work with editables locally and submit them together.                          // 2270\n                                                                                                                       // 2271\n        @property unsavedclass                                                                                         // 2272\n        @type string                                                                                                   // 2273\n        @since 1.4.1                                                                                                   // 2274\n        @default editable-unsaved                                                                                      // 2275\n        **/                                                                                                            // 2276\n        unsavedclass: 'editable-unsaved',                                                                              // 2277\n        /**                                                                                                            // 2278\n        If selector is provided, editable will be delegated to the specified targets.                                  // 2279\n        Usefull for dynamically generated DOM elements.                                                                // 2280\n        **Please note**, that delegated targets can't be initialized with `emptytext` and `autotext` options,          // 2281\n        as they actually become editable only after first click.                                                       // 2282\n        You should manually set class `editable-click` to these elements.                                              // 2283\n        Also, if element originally empty you should add class `editable-empty`, set `data-value=\"\"` and write emptytext into element:\n                                                                                                                       // 2285\n        @property selector                                                                                             // 2286\n        @type string                                                                                                   // 2287\n        @since 1.4.1                                                                                                   // 2288\n        @default null                                                                                                  // 2289\n        @example                                                                                                       // 2290\n        <div id=\"user\">                                                                                                // 2291\n          <!-- empty -->                                                                                               // 2292\n          <a href=\"#\" data-name=\"username\" data-type=\"text\" class=\"editable-click editable-empty\" data-value=\"\" title=\"Username\">Empty</a>\n          <!-- non-empty -->                                                                                           // 2294\n          <a href=\"#\" data-name=\"group\" data-type=\"select\" data-source=\"/groups\" data-value=\"1\" class=\"editable-click\" title=\"Group\">Operator</a>\n        </div>                                                                                                         // 2296\n                                                                                                                       // 2297\n        <script>                                                                                                       // 2298\n        $('#user').editable({                                                                                          // 2299\n            selector: 'a',                                                                                             // 2300\n            url: '/post',                                                                                              // 2301\n            pk: 1                                                                                                      // 2302\n        });                                                                                                            // 2303\n        </script>                                                                                                      // 2304\n        **/                                                                                                            // 2305\n        selector: null,                                                                                                // 2306\n        /**                                                                                                            // 2307\n        Color used to highlight element after update. Implemented via CSS3 transition, works in modern browsers.       // 2308\n                                                                                                                       // 2309\n        @property highlight                                                                                            // 2310\n        @type string|boolean                                                                                           // 2311\n        @since 1.4.5                                                                                                   // 2312\n        @default #FFFF80                                                                                               // 2313\n        **/                                                                                                            // 2314\n        highlight: '#FFFF80'                                                                                           // 2315\n    };                                                                                                                 // 2316\n                                                                                                                       // 2317\n}(window.jQuery));                                                                                                     // 2318\n                                                                                                                       // 2319\n/**                                                                                                                    // 2320\nAbstractInput - base class for all editable inputs.                                                                    // 2321\nIt defines interface to be implemented by any input type.                                                              // 2322\nTo create your own input you can inherit from this class.                                                              // 2323\n                                                                                                                       // 2324\n@class abstractinput                                                                                                   // 2325\n**/                                                                                                                    // 2326\n(function ($) {                                                                                                        // 2327\n    \"use strict\";                                                                                                      // 2328\n                                                                                                                       // 2329\n    //types                                                                                                            // 2330\n    $.fn.editabletypes = {};                                                                                           // 2331\n                                                                                                                       // 2332\n    var AbstractInput = function () { };                                                                               // 2333\n                                                                                                                       // 2334\n    AbstractInput.prototype = {                                                                                        // 2335\n       /**                                                                                                             // 2336\n        Initializes input                                                                                              // 2337\n                                                                                                                       // 2338\n        @method init()                                                                                                 // 2339\n        **/                                                                                                            // 2340\n       init: function(type, options, defaults) {                                                                       // 2341\n           this.type = type;                                                                                           // 2342\n           this.options = $.extend({}, defaults, options);                                                             // 2343\n       },                                                                                                              // 2344\n                                                                                                                       // 2345\n       /*                                                                                                              // 2346\n       this method called before render to init $tpl that is inserted in DOM                                           // 2347\n       */                                                                                                              // 2348\n       prerender: function() {                                                                                         // 2349\n           this.$tpl = $(this.options.tpl); //whole tpl as jquery object                                               // 2350\n           this.$input = this.$tpl;         //control itself, can be changed in render method                          // 2351\n           this.$clear = null;              //clear button                                                             // 2352\n           this.error = null;               //error message, if input cannot be rendered                               // 2353\n       },                                                                                                              // 2354\n                                                                                                                       // 2355\n       /**                                                                                                             // 2356\n        Renders input from tpl. Can return jQuery deferred object.                                                     // 2357\n        Can be overwritten in child objects                                                                            // 2358\n                                                                                                                       // 2359\n        @method render()                                                                                               // 2360\n       **/                                                                                                             // 2361\n       render: function() {                                                                                            // 2362\n                                                                                                                       // 2363\n       },                                                                                                              // 2364\n                                                                                                                       // 2365\n       /**                                                                                                             // 2366\n        Sets element's html by value.                                                                                  // 2367\n                                                                                                                       // 2368\n        @method value2html(value, element)                                                                             // 2369\n        @param {mixed} value                                                                                           // 2370\n        @param {DOMElement} element                                                                                    // 2371\n       **/                                                                                                             // 2372\n       value2html: function(value, element) {                                                                          // 2373\n           $(element)[this.options.escape ? 'text' : 'html']($.trim(value));                                           // 2374\n       },                                                                                                              // 2375\n                                                                                                                       // 2376\n       /**                                                                                                             // 2377\n        Converts element's html to value                                                                               // 2378\n                                                                                                                       // 2379\n        @method html2value(html)                                                                                       // 2380\n        @param {string} html                                                                                           // 2381\n        @returns {mixed}                                                                                               // 2382\n       **/                                                                                                             // 2383\n       html2value: function(html) {                                                                                    // 2384\n           return $('<div>').html(html).text();                                                                        // 2385\n       },                                                                                                              // 2386\n                                                                                                                       // 2387\n       /**                                                                                                             // 2388\n        Converts value to string (for internal compare). For submitting to server used value2submit().                 // 2389\n                                                                                                                       // 2390\n        @method value2str(value)                                                                                       // 2391\n        @param {mixed} value                                                                                           // 2392\n        @returns {string}                                                                                              // 2393\n       **/                                                                                                             // 2394\n       value2str: function(value) {                                                                                    // 2395\n           return value;                                                                                               // 2396\n       },                                                                                                              // 2397\n                                                                                                                       // 2398\n       /**                                                                                                             // 2399\n        Converts string received from server into value. Usually from `data-value` attribute.                          // 2400\n                                                                                                                       // 2401\n        @method str2value(str)                                                                                         // 2402\n        @param {string} str                                                                                            // 2403\n        @returns {mixed}                                                                                               // 2404\n       **/                                                                                                             // 2405\n       str2value: function(str) {                                                                                      // 2406\n           return str;                                                                                                 // 2407\n       },                                                                                                              // 2408\n                                                                                                                       // 2409\n       /**                                                                                                             // 2410\n        Converts value for submitting to server. Result can be string or object.                                       // 2411\n                                                                                                                       // 2412\n        @method value2submit(value)                                                                                    // 2413\n        @param {mixed} value                                                                                           // 2414\n        @returns {mixed}                                                                                               // 2415\n       **/                                                                                                             // 2416\n       value2submit: function(value) {                                                                                 // 2417\n           return value;                                                                                               // 2418\n       },                                                                                                              // 2419\n                                                                                                                       // 2420\n       /**                                                                                                             // 2421\n        Sets value of input.                                                                                           // 2422\n                                                                                                                       // 2423\n        @method value2input(value)                                                                                     // 2424\n        @param {mixed} value                                                                                           // 2425\n       **/                                                                                                             // 2426\n       value2input: function(value) {                                                                                  // 2427\n           this.$input.val(value);                                                                                     // 2428\n       },                                                                                                              // 2429\n                                                                                                                       // 2430\n       /**                                                                                                             // 2431\n        Returns value of input. Value can be object (e.g. datepicker)                                                  // 2432\n                                                                                                                       // 2433\n        @method input2value()                                                                                          // 2434\n       **/                                                                                                             // 2435\n       input2value: function() {                                                                                       // 2436\n           return this.$input.val();                                                                                   // 2437\n       },                                                                                                              // 2438\n                                                                                                                       // 2439\n       /**                                                                                                             // 2440\n        Activates input. For text it sets focus.                                                                       // 2441\n                                                                                                                       // 2442\n        @method activate()                                                                                             // 2443\n       **/                                                                                                             // 2444\n       activate: function() {                                                                                          // 2445\n           if(this.$input.is(':visible')) {                                                                            // 2446\n               this.$input.focus();                                                                                    // 2447\n           }                                                                                                           // 2448\n       },                                                                                                              // 2449\n                                                                                                                       // 2450\n       /**                                                                                                             // 2451\n        Creates input.                                                                                                 // 2452\n                                                                                                                       // 2453\n        @method clear()                                                                                                // 2454\n       **/                                                                                                             // 2455\n       clear: function() {                                                                                             // 2456\n           this.$input.val(null);                                                                                      // 2457\n       },                                                                                                              // 2458\n                                                                                                                       // 2459\n       /**                                                                                                             // 2460\n        method to escape html.                                                                                         // 2461\n       **/                                                                                                             // 2462\n       escape: function(str) {                                                                                         // 2463\n           return $('<div>').text(str).html();                                                                         // 2464\n       },                                                                                                              // 2465\n                                                                                                                       // 2466\n       /**                                                                                                             // 2467\n        attach handler to automatically submit form when value changed (useful when buttons not shown)                 // 2468\n       **/                                                                                                             // 2469\n       autosubmit: function() {                                                                                        // 2470\n                                                                                                                       // 2471\n       },                                                                                                              // 2472\n                                                                                                                       // 2473\n       /**                                                                                                             // 2474\n       Additional actions when destroying element                                                                      // 2475\n       **/                                                                                                             // 2476\n       destroy: function() {                                                                                           // 2477\n       },                                                                                                              // 2478\n                                                                                                                       // 2479\n       // -------- helper functions --------                                                                           // 2480\n       setClass: function() {                                                                                          // 2481\n           if(this.options.inputclass) {                                                                               // 2482\n               this.$input.addClass(this.options.inputclass);                                                          // 2483\n           }                                                                                                           // 2484\n       },                                                                                                              // 2485\n                                                                                                                       // 2486\n       setAttr: function(attr) {                                                                                       // 2487\n           if (this.options[attr] !== undefined && this.options[attr] !== null) {                                      // 2488\n               this.$input.attr(attr, this.options[attr]);                                                             // 2489\n           }                                                                                                           // 2490\n       },                                                                                                              // 2491\n                                                                                                                       // 2492\n       option: function(key, value) {                                                                                  // 2493\n            this.options[key] = value;                                                                                 // 2494\n       }                                                                                                               // 2495\n                                                                                                                       // 2496\n    };                                                                                                                 // 2497\n                                                                                                                       // 2498\n    AbstractInput.defaults = {                                                                                         // 2499\n        /**                                                                                                            // 2500\n        HTML template of input. Normally you should not change it.                                                     // 2501\n                                                                                                                       // 2502\n        @property tpl                                                                                                  // 2503\n        @type string                                                                                                   // 2504\n        @default ''                                                                                                    // 2505\n        **/                                                                                                            // 2506\n        tpl: '',                                                                                                       // 2507\n        /**                                                                                                            // 2508\n        CSS class automatically applied to input                                                                       // 2509\n                                                                                                                       // 2510\n        @property inputclass                                                                                           // 2511\n        @type string                                                                                                   // 2512\n        @default null                                                                                                  // 2513\n        **/                                                                                                            // 2514\n        inputclass: null,                                                                                              // 2515\n                                                                                                                       // 2516\n        /**                                                                                                            // 2517\n        If `true` - html will be escaped in content of element via $.text() method.                                    // 2518\n        If `false` - html will not be escaped, $.html() used.                                                          // 2519\n        When you use own `display` function, this option obviosly has no effect.                                       // 2520\n                                                                                                                       // 2521\n        @property escape                                                                                               // 2522\n        @type boolean                                                                                                  // 2523\n        @since 1.5.0                                                                                                   // 2524\n        @default true                                                                                                  // 2525\n        **/                                                                                                            // 2526\n        escape: true,                                                                                                  // 2527\n                                                                                                                       // 2528\n        //scope for external methods (e.g. source defined as function)                                                 // 2529\n        //for internal use only                                                                                        // 2530\n        scope: null,                                                                                                   // 2531\n                                                                                                                       // 2532\n        //need to re-declare showbuttons here to get it's value from common config (passed only options existing in defaults)\n        showbuttons: true                                                                                              // 2534\n    };                                                                                                                 // 2535\n                                                                                                                       // 2536\n    $.extend($.fn.editabletypes, {abstractinput: AbstractInput});                                                      // 2537\n                                                                                                                       // 2538\n}(window.jQuery));                                                                                                     // 2539\n                                                                                                                       // 2540\n/**                                                                                                                    // 2541\nList - abstract class for inputs that have source option loaded from js array or via ajax                              // 2542\n                                                                                                                       // 2543\n@class list                                                                                                            // 2544\n@extends abstractinput                                                                                                 // 2545\n**/                                                                                                                    // 2546\n(function ($) {                                                                                                        // 2547\n    \"use strict\";                                                                                                      // 2548\n                                                                                                                       // 2549\n    var List = function (options) {                                                                                    // 2550\n                                                                                                                       // 2551\n    };                                                                                                                 // 2552\n                                                                                                                       // 2553\n    $.fn.editableutils.inherit(List, $.fn.editabletypes.abstractinput);                                                // 2554\n                                                                                                                       // 2555\n    $.extend(List.prototype, {                                                                                         // 2556\n        render: function () {                                                                                          // 2557\n            var deferred = $.Deferred();                                                                               // 2558\n                                                                                                                       // 2559\n            this.error = null;                                                                                         // 2560\n            this.onSourceReady(function () {                                                                           // 2561\n                this.renderList();                                                                                     // 2562\n                deferred.resolve();                                                                                    // 2563\n            }, function () {                                                                                           // 2564\n                this.error = this.options.sourceError;                                                                 // 2565\n                deferred.resolve();                                                                                    // 2566\n            });                                                                                                        // 2567\n                                                                                                                       // 2568\n            return deferred.promise();                                                                                 // 2569\n        },                                                                                                             // 2570\n                                                                                                                       // 2571\n        html2value: function (html) {                                                                                  // 2572\n            return null; //can't set value by text                                                                     // 2573\n        },                                                                                                             // 2574\n                                                                                                                       // 2575\n        value2html: function (value, element, display, response) {                                                     // 2576\n            var deferred = $.Deferred(),                                                                               // 2577\n                success = function () {                                                                                // 2578\n                    if(typeof display === 'function') {                                                                // 2579\n                        //custom display method                                                                        // 2580\n                        display.call(element, value, this.sourceData, response);                                       // 2581\n                    } else {                                                                                           // 2582\n                        this.value2htmlFinal(value, element);                                                          // 2583\n                    }                                                                                                  // 2584\n                    deferred.resolve();                                                                                // 2585\n               };                                                                                                      // 2586\n                                                                                                                       // 2587\n            //for null value just call success without loading source                                                  // 2588\n            if(value === null) {                                                                                       // 2589\n               success.call(this);                                                                                     // 2590\n            } else {                                                                                                   // 2591\n               this.onSourceReady(success, function () { deferred.resolve(); });                                       // 2592\n            }                                                                                                          // 2593\n                                                                                                                       // 2594\n            return deferred.promise();                                                                                 // 2595\n        },                                                                                                             // 2596\n                                                                                                                       // 2597\n        // ------------- additional functions ------------                                                             // 2598\n                                                                                                                       // 2599\n        onSourceReady: function (success, error) {                                                                     // 2600\n            //run source if it function                                                                                // 2601\n            var source;                                                                                                // 2602\n            if ($.isFunction(this.options.source)) {                                                                   // 2603\n                source = this.options.source.call(this.options.scope);                                                 // 2604\n                this.sourceData = null;                                                                                // 2605\n                //note: if function returns the same source as URL - sourceData will be taken from cahce and no extra request performed\n            } else {                                                                                                   // 2607\n                source = this.options.source;                                                                          // 2608\n            }                                                                                                          // 2609\n                                                                                                                       // 2610\n            //if allready loaded just call success                                                                     // 2611\n            if(this.options.sourceCache && $.isArray(this.sourceData)) {                                               // 2612\n                success.call(this);                                                                                    // 2613\n                return;                                                                                                // 2614\n            }                                                                                                          // 2615\n                                                                                                                       // 2616\n            //try parse json in single quotes (for double quotes jquery does automatically)                            // 2617\n            try {                                                                                                      // 2618\n                source = $.fn.editableutils.tryParseJson(source, false);                                               // 2619\n            } catch (e) {                                                                                              // 2620\n                error.call(this);                                                                                      // 2621\n                return;                                                                                                // 2622\n            }                                                                                                          // 2623\n                                                                                                                       // 2624\n            //loading from url                                                                                         // 2625\n            if (typeof source === 'string') {                                                                          // 2626\n                //try to get sourceData from cache                                                                     // 2627\n                if(this.options.sourceCache) {                                                                         // 2628\n                    var cacheID = source,                                                                              // 2629\n                    cache;                                                                                             // 2630\n                                                                                                                       // 2631\n                    if (!$(document).data(cacheID)) {                                                                  // 2632\n                        $(document).data(cacheID, {});                                                                 // 2633\n                    }                                                                                                  // 2634\n                    cache = $(document).data(cacheID);                                                                 // 2635\n                                                                                                                       // 2636\n                    //check for cached data                                                                            // 2637\n                    if (cache.loading === false && cache.sourceData) { //take source from cache                        // 2638\n                        this.sourceData = cache.sourceData;                                                            // 2639\n                        this.doPrepend();                                                                              // 2640\n                        success.call(this);                                                                            // 2641\n                        return;                                                                                        // 2642\n                    } else if (cache.loading === true) { //cache is loading, put callback in stack to be called later  // 2643\n                        cache.callbacks.push($.proxy(function () {                                                     // 2644\n                            this.sourceData = cache.sourceData;                                                        // 2645\n                            this.doPrepend();                                                                          // 2646\n                            success.call(this);                                                                        // 2647\n                        }, this));                                                                                     // 2648\n                                                                                                                       // 2649\n                        //also collecting error callbacks                                                              // 2650\n                        cache.err_callbacks.push($.proxy(error, this));                                                // 2651\n                        return;                                                                                        // 2652\n                    } else { //no cache yet, activate it                                                               // 2653\n                        cache.loading = true;                                                                          // 2654\n                        cache.callbacks = [];                                                                          // 2655\n                        cache.err_callbacks = [];                                                                      // 2656\n                    }                                                                                                  // 2657\n                }                                                                                                      // 2658\n                                                                                                                       // 2659\n                //ajaxOptions for source. Can be overwritten bt options.sourceOptions                                  // 2660\n                var ajaxOptions = $.extend({                                                                           // 2661\n                    url: source,                                                                                       // 2662\n                    type: 'get',                                                                                       // 2663\n                    cache: false,                                                                                      // 2664\n                    dataType: 'json',                                                                                  // 2665\n                    success: $.proxy(function (data) {                                                                 // 2666\n                        if(cache) {                                                                                    // 2667\n                            cache.loading = false;                                                                     // 2668\n                        }                                                                                              // 2669\n                        this.sourceData = this.makeArray(data);                                                        // 2670\n                        if($.isArray(this.sourceData)) {                                                               // 2671\n                            if(cache) {                                                                                // 2672\n                                //store result in cache                                                                // 2673\n                                cache.sourceData = this.sourceData;                                                    // 2674\n                                //run success callbacks for other fields waiting for this source                       // 2675\n                                $.each(cache.callbacks, function () { this.call(); });                                 // 2676\n                            }                                                                                          // 2677\n                            this.doPrepend();                                                                          // 2678\n                            success.call(this);                                                                        // 2679\n                        } else {                                                                                       // 2680\n                            error.call(this);                                                                          // 2681\n                            if(cache) {                                                                                // 2682\n                                //run error callbacks for other fields waiting for this source                         // 2683\n                                $.each(cache.err_callbacks, function () { this.call(); });                             // 2684\n                            }                                                                                          // 2685\n                        }                                                                                              // 2686\n                    }, this),                                                                                          // 2687\n                    error: $.proxy(function () {                                                                       // 2688\n                        error.call(this);                                                                              // 2689\n                        if(cache) {                                                                                    // 2690\n                             cache.loading = false;                                                                    // 2691\n                             //run error callbacks for other fields                                                    // 2692\n                             $.each(cache.err_callbacks, function () { this.call(); });                                // 2693\n                        }                                                                                              // 2694\n                    }, this)                                                                                           // 2695\n                }, this.options.sourceOptions);                                                                        // 2696\n                                                                                                                       // 2697\n                //loading sourceData from server                                                                       // 2698\n                $.ajax(ajaxOptions);                                                                                   // 2699\n                                                                                                                       // 2700\n            } else { //options as json/array                                                                           // 2701\n                this.sourceData = this.makeArray(source);                                                              // 2702\n                                                                                                                       // 2703\n                if($.isArray(this.sourceData)) {                                                                       // 2704\n                    this.doPrepend();                                                                                  // 2705\n                    success.call(this);                                                                                // 2706\n                } else {                                                                                               // 2707\n                    error.call(this);                                                                                  // 2708\n                }                                                                                                      // 2709\n            }                                                                                                          // 2710\n        },                                                                                                             // 2711\n                                                                                                                       // 2712\n        doPrepend: function () {                                                                                       // 2713\n            if(this.options.prepend === null || this.options.prepend === undefined) {                                  // 2714\n                return;                                                                                                // 2715\n            }                                                                                                          // 2716\n                                                                                                                       // 2717\n            if(!$.isArray(this.prependData)) {                                                                         // 2718\n                //run prepend if it is function (once)                                                                 // 2719\n                if ($.isFunction(this.options.prepend)) {                                                              // 2720\n                    this.options.prepend = this.options.prepend.call(this.options.scope);                              // 2721\n                }                                                                                                      // 2722\n                                                                                                                       // 2723\n                //try parse json in single quotes                                                                      // 2724\n                this.options.prepend = $.fn.editableutils.tryParseJson(this.options.prepend, true);                    // 2725\n                                                                                                                       // 2726\n                //convert prepend from string to object                                                                // 2727\n                if (typeof this.options.prepend === 'string') {                                                        // 2728\n                    this.options.prepend = {'': this.options.prepend};                                                 // 2729\n                }                                                                                                      // 2730\n                                                                                                                       // 2731\n                this.prependData = this.makeArray(this.options.prepend);                                               // 2732\n            }                                                                                                          // 2733\n                                                                                                                       // 2734\n            if($.isArray(this.prependData) && $.isArray(this.sourceData)) {                                            // 2735\n                this.sourceData = this.prependData.concat(this.sourceData);                                            // 2736\n            }                                                                                                          // 2737\n        },                                                                                                             // 2738\n                                                                                                                       // 2739\n        /*                                                                                                             // 2740\n         renders input list                                                                                            // 2741\n        */                                                                                                             // 2742\n        renderList: function() {                                                                                       // 2743\n            // this method should be overwritten in child class                                                        // 2744\n        },                                                                                                             // 2745\n                                                                                                                       // 2746\n         /*                                                                                                            // 2747\n         set element's html by value                                                                                   // 2748\n        */                                                                                                             // 2749\n        value2htmlFinal: function(value, element) {                                                                    // 2750\n            // this method should be overwritten in child class                                                        // 2751\n        },                                                                                                             // 2752\n                                                                                                                       // 2753\n        /**                                                                                                            // 2754\n        * convert data to array suitable for sourceData, e.g. [{value: 1, text: 'abc'}, {...}]                         // 2755\n        */                                                                                                             // 2756\n        makeArray: function(data) {                                                                                    // 2757\n            var count, obj, result = [], item, iterateItem;                                                            // 2758\n            if(!data || typeof data === 'string') {                                                                    // 2759\n                return null;                                                                                           // 2760\n            }                                                                                                          // 2761\n                                                                                                                       // 2762\n            if($.isArray(data)) { //array                                                                              // 2763\n                /*                                                                                                     // 2764\n                   function to iterate inside item of array if item is object.                                         // 2765\n                   Caclulates count of keys in item and store in obj.                                                  // 2766\n                */                                                                                                     // 2767\n                iterateItem = function (k, v) {                                                                        // 2768\n                    obj = {value: k, text: v};                                                                         // 2769\n                    if(count++ >= 2) {                                                                                 // 2770\n                        return false;// exit from `each` if item has more than one key.                                // 2771\n                    }                                                                                                  // 2772\n                };                                                                                                     // 2773\n                                                                                                                       // 2774\n                for(var i = 0; i < data.length; i++) {                                                                 // 2775\n                    item = data[i];                                                                                    // 2776\n                    if(typeof item === 'object') {                                                                     // 2777\n                        count = 0; //count of keys inside item                                                         // 2778\n                        $.each(item, iterateItem);                                                                     // 2779\n                        //case: [{val1: 'text1'}, {val2: 'text2} ...]                                                  // 2780\n                        if(count === 1) {                                                                              // 2781\n                            result.push(obj);                                                                          // 2782\n                            //case: [{value: 1, text: 'text1'}, {value: 2, text: 'text2'}, ...]                        // 2783\n                        } else if(count > 1) {                                                                         // 2784\n                            //removed check of existance: item.hasOwnProperty('value') && item.hasOwnProperty('text')  // 2785\n                            if(item.children) {                                                                        // 2786\n                                item.children = this.makeArray(item.children);                                         // 2787\n                            }                                                                                          // 2788\n                            result.push(item);                                                                         // 2789\n                        }                                                                                              // 2790\n                    } else {                                                                                           // 2791\n                        //case: ['text1', 'text2' ...]                                                                 // 2792\n                        result.push({value: item, text: item});                                                        // 2793\n                    }                                                                                                  // 2794\n                }                                                                                                      // 2795\n            } else {  //case: {val1: 'text1', val2: 'text2, ...}                                                       // 2796\n                $.each(data, function (k, v) {                                                                         // 2797\n                    result.push({value: k, text: v});                                                                  // 2798\n                });                                                                                                    // 2799\n            }                                                                                                          // 2800\n            return result;                                                                                             // 2801\n        },                                                                                                             // 2802\n                                                                                                                       // 2803\n        option: function(key, value) {                                                                                 // 2804\n            this.options[key] = value;                                                                                 // 2805\n            if(key === 'source') {                                                                                     // 2806\n                this.sourceData = null;                                                                                // 2807\n            }                                                                                                          // 2808\n            if(key === 'prepend') {                                                                                    // 2809\n                this.prependData = null;                                                                               // 2810\n            }                                                                                                          // 2811\n        }                                                                                                              // 2812\n                                                                                                                       // 2813\n    });                                                                                                                // 2814\n                                                                                                                       // 2815\n    List.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {                                          // 2816\n        /**                                                                                                            // 2817\n        Source data for list.                                                                                          // 2818\n        If **array** - it should be in format: `[{value: 1, text: \"text1\"}, {value: 2, text: \"text2\"}, ...]`           // 2819\n        For compability, object format is also supported: `{\"1\": \"text1\", \"2\": \"text2\" ...}` but it does not guarantee elements order.\n                                                                                                                       // 2821\n        If **string** - considered ajax url to load items. In that case results will be cached for fields with the same source and name. See also `sourceCache` option.\n                                                                                                                       // 2823\n        If **function**, it should return data in format above (since 1.4.0).                                          // 2824\n                                                                                                                       // 2825\n        Since 1.4.1 key `children` supported to render OPTGROUP (for **select** input only).                           // 2826\n        `[{text: \"group1\", children: [{value: 1, text: \"text1\"}, {value: 2, text: \"text2\"}]}, ...]`                    // 2827\n                                                                                                                       // 2828\n\t\t                                                                                                                     // 2829\n        @property source                                                                                               // 2830\n        @type string | array | object | function                                                                       // 2831\n        @default null                                                                                                  // 2832\n        **/                                                                                                            // 2833\n        source: null,                                                                                                  // 2834\n        /**                                                                                                            // 2835\n        Data automatically prepended to the beginning of dropdown list.                                                // 2836\n                                                                                                                       // 2837\n        @property prepend                                                                                              // 2838\n        @type string | array | object | function                                                                       // 2839\n        @default false                                                                                                 // 2840\n        **/                                                                                                            // 2841\n        prepend: false,                                                                                                // 2842\n        /**                                                                                                            // 2843\n        Error message when list cannot be loaded (e.g. ajax error)                                                     // 2844\n                                                                                                                       // 2845\n        @property sourceError                                                                                          // 2846\n        @type string                                                                                                   // 2847\n        @default Error when loading list                                                                               // 2848\n        **/                                                                                                            // 2849\n        sourceError: 'Error when loading list',                                                                        // 2850\n        /**                                                                                                            // 2851\n        if <code>true</code> and source is **string url** - results will be cached for fields with the same source.    \n        Usefull for editable column in grid to prevent extra requests.                                                 // 2853\n                                                                                                                       // 2854\n        @property sourceCache                                                                                          // 2855\n        @type boolean                                                                                                  // 2856\n        @default true                                                                                                  // 2857\n        @since 1.2.0                                                                                                   // 2858\n        **/                                                                                                            // 2859\n        sourceCache: true,                                                                                             // 2860\n        /**                                                                                                            // 2861\n        Additional ajax options to be used in $.ajax() when loading list from server.                                  // 2862\n        Useful to send extra parameters (`data` key) or change request method (`type` key).                            // 2863\n                                                                                                                       // 2864\n        @property sourceOptions                                                                                        // 2865\n        @type object|function                                                                                          // 2866\n        @default null                                                                                                  // 2867\n        @since 1.5.0                                                                                                   // 2868\n        **/                                                                                                            // 2869\n        sourceOptions: null                                                                                            // 2870\n    });                                                                                                                // 2871\n                                                                                                                       // 2872\n    $.fn.editabletypes.list = List;                                                                                    // 2873\n                                                                                                                       // 2874\n}(window.jQuery));                                                                                                     // 2875\n                                                                                                                       // 2876\n/**                                                                                                                    // 2877\nText input                                                                                                             // 2878\n                                                                                                                       // 2879\n@class text                                                                                                            // 2880\n@extends abstractinput                                                                                                 // 2881\n@final                                                                                                                 // 2882\n@example                                                                                                               // 2883\n<a href=\"#\" id=\"username\" data-type=\"text\" data-pk=\"1\">awesome</a>                                                     // 2884\n<script>                                                                                                               // 2885\n$(function(){                                                                                                          // 2886\n    $('#username').editable({                                                                                          // 2887\n        url: '/post',                                                                                                  // 2888\n        title: 'Enter username'                                                                                        // 2889\n    });                                                                                                                // 2890\n});                                                                                                                    // 2891\n</script>                                                                                                              // 2892\n**/                                                                                                                    // 2893\n(function ($) {                                                                                                        // 2894\n    \"use strict\";                                                                                                      // 2895\n                                                                                                                       // 2896\n    var Text = function (options) {                                                                                    // 2897\n        this.init('text', options, Text.defaults);                                                                     // 2898\n    };                                                                                                                 // 2899\n                                                                                                                       // 2900\n    $.fn.editableutils.inherit(Text, $.fn.editabletypes.abstractinput);                                                // 2901\n                                                                                                                       // 2902\n    $.extend(Text.prototype, {                                                                                         // 2903\n        render: function() {                                                                                           // 2904\n           this.renderClear();                                                                                         // 2905\n           this.setClass();                                                                                            // 2906\n           this.setAttr('placeholder');                                                                                // 2907\n        },                                                                                                             // 2908\n                                                                                                                       // 2909\n        activate: function() {                                                                                         // 2910\n            if(this.$input.is(':visible')) {                                                                           // 2911\n                this.$input.focus();                                                                                   // 2912\n                $.fn.editableutils.setCursorPosition(this.$input.get(0), this.$input.val().length);                    // 2913\n                if(this.toggleClear) {                                                                                 // 2914\n                    this.toggleClear();                                                                                // 2915\n                }                                                                                                      // 2916\n            }                                                                                                          // 2917\n        },                                                                                                             // 2918\n                                                                                                                       // 2919\n        //render clear button                                                                                          // 2920\n        renderClear:  function() {                                                                                     // 2921\n           if (this.options.clear) {                                                                                   // 2922\n               this.$clear = $('<span class=\"editable-clear-x\"></span>');                                              // 2923\n               this.$input.after(this.$clear)                                                                          // 2924\n                          .css('padding-right', 24)                                                                    // 2925\n                          .keyup($.proxy(function(e) {                                                                 // 2926\n                              //arrows, enter, tab, etc                                                                // 2927\n                              if(~$.inArray(e.keyCode, [40,38,9,13,27])) {                                             // 2928\n                                return;                                                                                // 2929\n                              }                                                                                        // 2930\n                                                                                                                       // 2931\n                              clearTimeout(this.t);                                                                    // 2932\n                              var that = this;                                                                         // 2933\n                              this.t = setTimeout(function() {                                                         // 2934\n                                that.toggleClear(e);                                                                   // 2935\n                              }, 100);                                                                                 // 2936\n                                                                                                                       // 2937\n                          }, this))                                                                                    // 2938\n                          .parent().css('position', 'relative');                                                       // 2939\n                                                                                                                       // 2940\n               this.$clear.click($.proxy(this.clear, this));                                                           // 2941\n           }                                                                                                           // 2942\n        },                                                                                                             // 2943\n                                                                                                                       // 2944\n        postrender: function() {                                                                                       // 2945\n            /*                                                                                                         // 2946\n            //now `clear` is positioned via css                                                                        // 2947\n            if(this.$clear) {                                                                                          // 2948\n                //can position clear button only here, when form is shown and height can be calculated                 // 2949\n//                var h = this.$input.outerHeight(true) || 20,                                                         // 2950\n                var h = this.$clear.parent().height(),                                                                 // 2951\n                    delta = (h - this.$clear.height()) / 2;                                                            // 2952\n                                                                                                                       // 2953\n                //this.$clear.css({bottom: delta, right: delta});                                                      // 2954\n            }                                                                                                          // 2955\n            */                                                                                                         // 2956\n        },                                                                                                             // 2957\n                                                                                                                       // 2958\n        //show / hide clear button                                                                                     // 2959\n        toggleClear: function(e) {                                                                                     // 2960\n            if(!this.$clear) {                                                                                         // 2961\n                return;                                                                                                // 2962\n            }                                                                                                          // 2963\n                                                                                                                       // 2964\n            var len = this.$input.val().length,                                                                        // 2965\n                visible = this.$clear.is(':visible');                                                                  // 2966\n                                                                                                                       // 2967\n            if(len && !visible) {                                                                                      // 2968\n                this.$clear.show();                                                                                    // 2969\n            }                                                                                                          // 2970\n                                                                                                                       // 2971\n            if(!len && visible) {                                                                                      // 2972\n                this.$clear.hide();                                                                                    // 2973\n            }                                                                                                          // 2974\n        },                                                                                                             // 2975\n                                                                                                                       // 2976\n        clear: function() {                                                                                            // 2977\n           this.$clear.hide();                                                                                         // 2978\n           this.$input.val('').focus();                                                                                // 2979\n        }                                                                                                              // 2980\n    });                                                                                                                // 2981\n                                                                                                                       // 2982\n    Text.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {                                          // 2983\n        /**                                                                                                            // 2984\n        @property tpl                                                                                                  // 2985\n        @default <input type=\"text\">                                                                                   // 2986\n        **/                                                                                                            // 2987\n        tpl: '<input type=\"text\">',                                                                                    // 2988\n        /**                                                                                                            // 2989\n        Placeholder attribute of input. Shown when input is empty.                                                     // 2990\n                                                                                                                       // 2991\n        @property placeholder                                                                                          // 2992\n        @type string                                                                                                   // 2993\n        @default null                                                                                                  // 2994\n        **/                                                                                                            // 2995\n        placeholder: null,                                                                                             // 2996\n                                                                                                                       // 2997\n        /**                                                                                                            // 2998\n        Whether to show `clear` button                                                                                 // 2999\n                                                                                                                       // 3000\n        @property clear                                                                                                // 3001\n        @type boolean                                                                                                  // 3002\n        @default true                                                                                                  // 3003\n        **/                                                                                                            // 3004\n        clear: true                                                                                                    // 3005\n    });                                                                                                                // 3006\n                                                                                                                       // 3007\n    $.fn.editabletypes.text = Text;                                                                                    // 3008\n                                                                                                                       // 3009\n}(window.jQuery));                                                                                                     // 3010\n                                                                                                                       // 3011\n/**                                                                                                                    // 3012\nTextarea input                                                                                                         // 3013\n                                                                                                                       // 3014\n@class textarea                                                                                                        // 3015\n@extends abstractinput                                                                                                 // 3016\n@final                                                                                                                 // 3017\n@example                                                                                                               // 3018\n<a href=\"#\" id=\"comments\" data-type=\"textarea\" data-pk=\"1\">awesome comment!</a>                                        // 3019\n<script>                                                                                                               // 3020\n$(function(){                                                                                                          // 3021\n    $('#comments').editable({                                                                                          // 3022\n        url: '/post',                                                                                                  // 3023\n        title: 'Enter comments',                                                                                       // 3024\n        rows: 10                                                                                                       // 3025\n    });                                                                                                                // 3026\n});                                                                                                                    // 3027\n</script>                                                                                                              // 3028\n**/                                                                                                                    // 3029\n(function ($) {                                                                                                        // 3030\n    \"use strict\";                                                                                                      // 3031\n                                                                                                                       // 3032\n    var Textarea = function (options) {                                                                                // 3033\n        this.init('textarea', options, Textarea.defaults);                                                             // 3034\n    };                                                                                                                 // 3035\n                                                                                                                       // 3036\n    $.fn.editableutils.inherit(Textarea, $.fn.editabletypes.abstractinput);                                            // 3037\n                                                                                                                       // 3038\n    $.extend(Textarea.prototype, {                                                                                     // 3039\n        render: function () {                                                                                          // 3040\n            this.setClass();                                                                                           // 3041\n            this.setAttr('placeholder');                                                                               // 3042\n            this.setAttr('rows');                                                                                      // 3043\n                                                                                                                       // 3044\n            //ctrl + enter                                                                                             // 3045\n            this.$input.keydown(function (e) {                                                                         // 3046\n                if (e.ctrlKey && e.which === 13) {                                                                     // 3047\n                    $(this).closest('form').submit();                                                                  // 3048\n                }                                                                                                      // 3049\n            });                                                                                                        // 3050\n        },                                                                                                             // 3051\n                                                                                                                       // 3052\n       //using `white-space: pre-wrap` solves \\n  <--> BR conversion very elegant!                                     // 3053\n       /*                                                                                                              // 3054\n       value2html: function(value, element) {                                                                          // 3055\n            var html = '', lines;                                                                                      // 3056\n            if(value) {                                                                                                // 3057\n                lines = value.split(\"\\n\");                                                                             // 3058\n                for (var i = 0; i < lines.length; i++) {                                                               // 3059\n                    lines[i] = $('<div>').text(lines[i]).html();                                                       // 3060\n                }                                                                                                      // 3061\n                html = lines.join('<br>');                                                                             // 3062\n            }                                                                                                          // 3063\n            $(element).html(html);                                                                                     // 3064\n        },                                                                                                             // 3065\n                                                                                                                       // 3066\n        html2value: function(html) {                                                                                   // 3067\n            if(!html) {                                                                                                // 3068\n                return '';                                                                                             // 3069\n            }                                                                                                          // 3070\n                                                                                                                       // 3071\n            var regex = new RegExp(String.fromCharCode(10), 'g');                                                      // 3072\n            var lines = html.split(/<br\\s*\\/?>/i);                                                                     // 3073\n            for (var i = 0; i < lines.length; i++) {                                                                   // 3074\n                var text = $('<div>').html(lines[i]).text();                                                           // 3075\n                                                                                                                       // 3076\n                // Remove newline characters (\\n) to avoid them being converted by value2html() method                 // 3077\n                // thus adding extra <br> tags                                                                         // 3078\n                text = text.replace(regex, '');                                                                        // 3079\n                                                                                                                       // 3080\n                lines[i] = text;                                                                                       // 3081\n            }                                                                                                          // 3082\n            return lines.join(\"\\n\");                                                                                   // 3083\n        },                                                                                                             // 3084\n         */                                                                                                            // 3085\n        activate: function() {                                                                                         // 3086\n            $.fn.editabletypes.text.prototype.activate.call(this);                                                     // 3087\n        }                                                                                                              // 3088\n    });                                                                                                                // 3089\n                                                                                                                       // 3090\n    Textarea.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {                                      // 3091\n        /**                                                                                                            // 3092\n        @property tpl                                                                                                  // 3093\n        @default <textarea></textarea>                                                                                 // 3094\n        **/                                                                                                            // 3095\n        tpl:'<textarea></textarea>',                                                                                   // 3096\n        /**                                                                                                            // 3097\n        @property inputclass                                                                                           // 3098\n        @default input-large                                                                                           // 3099\n        **/                                                                                                            // 3100\n        inputclass: 'input-large',                                                                                     // 3101\n        /**                                                                                                            // 3102\n        Placeholder attribute of input. Shown when input is empty.                                                     // 3103\n                                                                                                                       // 3104\n        @property placeholder                                                                                          // 3105\n        @type string                                                                                                   // 3106\n        @default null                                                                                                  // 3107\n        **/                                                                                                            // 3108\n        placeholder: null,                                                                                             // 3109\n        /**                                                                                                            // 3110\n        Number of rows in textarea                                                                                     // 3111\n                                                                                                                       // 3112\n        @property rows                                                                                                 // 3113\n        @type integer                                                                                                  // 3114\n        @default 7                                                                                                     // 3115\n        **/                                                                                                            // 3116\n        rows: 7                                                                                                        // 3117\n    });                                                                                                                // 3118\n                                                                                                                       // 3119\n    $.fn.editabletypes.textarea = Textarea;                                                                            // 3120\n                                                                                                                       // 3121\n}(window.jQuery));                                                                                                     // 3122\n                                                                                                                       // 3123\n/**                                                                                                                    // 3124\nSelect (dropdown)                                                                                                      // 3125\n                                                                                                                       // 3126\n@class select                                                                                                          // 3127\n@extends list                                                                                                          // 3128\n@final                                                                                                                 // 3129\n@example                                                                                                               // 3130\n<a href=\"#\" id=\"status\" data-type=\"select\" data-pk=\"1\" data-url=\"/post\" data-title=\"Select status\"></a>                // 3131\n<script>                                                                                                               // 3132\n$(function(){                                                                                                          // 3133\n    $('#status').editable({                                                                                            // 3134\n        value: 2,                                                                                                      // 3135\n        source: [                                                                                                      // 3136\n              {value: 1, text: 'Active'},                                                                              // 3137\n              {value: 2, text: 'Blocked'},                                                                             // 3138\n              {value: 3, text: 'Deleted'}                                                                              // 3139\n           ]                                                                                                           // 3140\n    });                                                                                                                // 3141\n});                                                                                                                    // 3142\n</script>                                                                                                              // 3143\n**/                                                                                                                    // 3144\n(function ($) {                                                                                                        // 3145\n    \"use strict\";                                                                                                      // 3146\n                                                                                                                       // 3147\n    var Select = function (options) {                                                                                  // 3148\n        this.init('select', options, Select.defaults);                                                                 // 3149\n    };                                                                                                                 // 3150\n                                                                                                                       // 3151\n    $.fn.editableutils.inherit(Select, $.fn.editabletypes.list);                                                       // 3152\n                                                                                                                       // 3153\n    $.extend(Select.prototype, {                                                                                       // 3154\n        renderList: function() {                                                                                       // 3155\n            this.$input.empty();                                                                                       // 3156\n                                                                                                                       // 3157\n            var fillItems = function($el, data) {                                                                      // 3158\n                var attr;                                                                                              // 3159\n                if($.isArray(data)) {                                                                                  // 3160\n                    for(var i=0; i<data.length; i++) {                                                                 // 3161\n                        attr = {};                                                                                     // 3162\n                        if(data[i].children) {                                                                         // 3163\n                            attr.label = data[i].text;                                                                 // 3164\n                            $el.append(fillItems($('<optgroup>', attr), data[i].children));                            // 3165\n                        } else {                                                                                       // 3166\n                            attr.value = data[i].value;                                                                // 3167\n                            if(data[i].disabled) {                                                                     // 3168\n                                attr.disabled = true;                                                                  // 3169\n                            }                                                                                          // 3170\n                            $el.append($('<option>', attr).text(data[i].text));                                        // 3171\n                        }                                                                                              // 3172\n                    }                                                                                                  // 3173\n                }                                                                                                      // 3174\n                return $el;                                                                                            // 3175\n            };                                                                                                         // 3176\n                                                                                                                       // 3177\n            fillItems(this.$input, this.sourceData);                                                                   // 3178\n                                                                                                                       // 3179\n            this.setClass();                                                                                           // 3180\n                                                                                                                       // 3181\n            //enter submit                                                                                             // 3182\n            this.$input.on('keydown.editable', function (e) {                                                          // 3183\n                if (e.which === 13) {                                                                                  // 3184\n                    $(this).closest('form').submit();                                                                  // 3185\n                }                                                                                                      // 3186\n            });                                                                                                        // 3187\n        },                                                                                                             // 3188\n                                                                                                                       // 3189\n        value2htmlFinal: function(value, element) {                                                                    // 3190\n            var text = '',                                                                                             // 3191\n                items = $.fn.editableutils.itemsByValue(value, this.sourceData);                                       // 3192\n                                                                                                                       // 3193\n            if(items.length) {                                                                                         // 3194\n                text = items[0].text;                                                                                  // 3195\n            }                                                                                                          // 3196\n                                                                                                                       // 3197\n            //$(element).text(text);                                                                                   // 3198\n            $.fn.editabletypes.abstractinput.prototype.value2html.call(this, text, element);                           // 3199\n        },                                                                                                             // 3200\n                                                                                                                       // 3201\n        autosubmit: function() {                                                                                       // 3202\n            this.$input.off('keydown.editable').on('change.editable', function(){                                      // 3203\n                $(this).closest('form').submit();                                                                      // 3204\n            });                                                                                                        // 3205\n        }                                                                                                              // 3206\n    });                                                                                                                // 3207\n                                                                                                                       // 3208\n    Select.defaults = $.extend({}, $.fn.editabletypes.list.defaults, {                                                 // 3209\n        /**                                                                                                            // 3210\n        @property tpl                                                                                                  // 3211\n        @default <select></select>                                                                                     // 3212\n        **/                                                                                                            // 3213\n        tpl:'<select></select>'                                                                                        // 3214\n    });                                                                                                                // 3215\n                                                                                                                       // 3216\n    $.fn.editabletypes.select = Select;                                                                                // 3217\n                                                                                                                       // 3218\n}(window.jQuery));                                                                                                     // 3219\n                                                                                                                       // 3220\n/**                                                                                                                    // 3221\nList of checkboxes.                                                                                                    // 3222\nInternally value stored as javascript array of values.                                                                 // 3223\n                                                                                                                       // 3224\n@class checklist                                                                                                       // 3225\n@extends list                                                                                                          // 3226\n@final                                                                                                                 // 3227\n@example                                                                                                               // 3228\n<a href=\"#\" id=\"options\" data-type=\"checklist\" data-pk=\"1\" data-url=\"/post\" data-title=\"Select options\"></a>           // 3229\n<script>                                                                                                               // 3230\n$(function(){                                                                                                          // 3231\n    $('#options').editable({                                                                                           // 3232\n        value: [2, 3],                                                                                                 // 3233\n        source: [                                                                                                      // 3234\n              {value: 1, text: 'option1'},                                                                             // 3235\n              {value: 2, text: 'option2'},                                                                             // 3236\n              {value: 3, text: 'option3'}                                                                              // 3237\n           ]                                                                                                           // 3238\n    });                                                                                                                // 3239\n});                                                                                                                    // 3240\n</script>                                                                                                              // 3241\n**/                                                                                                                    // 3242\n(function ($) {                                                                                                        // 3243\n    \"use strict\";                                                                                                      // 3244\n                                                                                                                       // 3245\n    var Checklist = function (options) {                                                                               // 3246\n        this.init('checklist', options, Checklist.defaults);                                                           // 3247\n    };                                                                                                                 // 3248\n                                                                                                                       // 3249\n    $.fn.editableutils.inherit(Checklist, $.fn.editabletypes.list);                                                    // 3250\n                                                                                                                       // 3251\n    $.extend(Checklist.prototype, {                                                                                    // 3252\n        renderList: function() {                                                                                       // 3253\n            var $label, $div;                                                                                          // 3254\n                                                                                                                       // 3255\n            this.$tpl.empty();                                                                                         // 3256\n                                                                                                                       // 3257\n            if(!$.isArray(this.sourceData)) {                                                                          // 3258\n                return;                                                                                                // 3259\n            }                                                                                                          // 3260\n                                                                                                                       // 3261\n            for(var i=0; i<this.sourceData.length; i++) {                                                              // 3262\n                $label = $('<label>').append($('<input>', {                                                            // 3263\n                                           type: 'checkbox',                                                           // 3264\n                                           value: this.sourceData[i].value                                             // 3265\n                                     }))                                                                               // 3266\n                                     .append($('<span>').text(' '+this.sourceData[i].text));                           // 3267\n                                                                                                                       // 3268\n                $('<div>').append($label).appendTo(this.$tpl);                                                         // 3269\n            }                                                                                                          // 3270\n                                                                                                                       // 3271\n            this.$input = this.$tpl.find('input[type=\"checkbox\"]');                                                    // 3272\n            this.setClass();                                                                                           // 3273\n        },                                                                                                             // 3274\n                                                                                                                       // 3275\n       value2str: function(value) {                                                                                    // 3276\n           return $.isArray(value) ? value.sort().join($.trim(this.options.separator)) : '';                           // 3277\n       },                                                                                                              // 3278\n                                                                                                                       // 3279\n       //parse separated string                                                                                        // 3280\n        str2value: function(str) {                                                                                     // 3281\n           var reg, value = null;                                                                                      // 3282\n           if(typeof str === 'string' && str.length) {                                                                 // 3283\n               reg = new RegExp('\\\\s*'+$.trim(this.options.separator)+'\\\\s*');                                         // 3284\n               value = str.split(reg);                                                                                 // 3285\n           } else if($.isArray(str)) {                                                                                 // 3286\n               value = str;                                                                                            // 3287\n           } else {                                                                                                    // 3288\n               value = [str];                                                                                          // 3289\n           }                                                                                                           // 3290\n           return value;                                                                                               // 3291\n        },                                                                                                             // 3292\n                                                                                                                       // 3293\n       //set checked on required checkboxes                                                                            // 3294\n       value2input: function(value) {                                                                                  // 3295\n            this.$input.prop('checked', false);                                                                        // 3296\n            if($.isArray(value) && value.length) {                                                                     // 3297\n               this.$input.each(function(i, el) {                                                                      // 3298\n                   var $el = $(el);                                                                                    // 3299\n                   // cannot use $.inArray as it performs strict comparison                                            // 3300\n                   $.each(value, function(j, val){                                                                     // 3301\n                       /*jslint eqeq: true*/                                                                           // 3302\n                       if($el.val() == val) {                                                                          // 3303\n                       /*jslint eqeq: false*/                                                                          // 3304\n                           $el.prop('checked', true);                                                                  // 3305\n                       }                                                                                               // 3306\n                   });                                                                                                 // 3307\n               });                                                                                                     // 3308\n            }                                                                                                          // 3309\n        },                                                                                                             // 3310\n                                                                                                                       // 3311\n       input2value: function() {                                                                                       // 3312\n           var checked = [];                                                                                           // 3313\n           this.$input.filter(':checked').each(function(i, el) {                                                       // 3314\n               checked.push($(el).val());                                                                              // 3315\n           });                                                                                                         // 3316\n           return checked;                                                                                             // 3317\n       },                                                                                                              // 3318\n                                                                                                                       // 3319\n       //collect text of checked boxes                                                                                 // 3320\n        value2htmlFinal: function(value, element) {                                                                    // 3321\n           var html = [],                                                                                              // 3322\n               checked = $.fn.editableutils.itemsByValue(value, this.sourceData),                                      // 3323\n               escape = this.options.escape;                                                                           // 3324\n                                                                                                                       // 3325\n           if(checked.length) {                                                                                        // 3326\n               $.each(checked, function(i, v) {                                                                        // 3327\n                   var text = escape ? $.fn.editableutils.escape(v.text) : v.text;                                     // 3328\n                   html.push(text);                                                                                    // 3329\n               });                                                                                                     // 3330\n               $(element).html(html.join('<br>'));                                                                     // 3331\n           } else {                                                                                                    // 3332\n               $(element).empty();                                                                                     // 3333\n           }                                                                                                           // 3334\n        },                                                                                                             // 3335\n                                                                                                                       // 3336\n       activate: function() {                                                                                          // 3337\n           this.$input.first().focus();                                                                                // 3338\n       },                                                                                                              // 3339\n                                                                                                                       // 3340\n       autosubmit: function() {                                                                                        // 3341\n           this.$input.on('keydown', function(e){                                                                      // 3342\n               if (e.which === 13) {                                                                                   // 3343\n                   $(this).closest('form').submit();                                                                   // 3344\n               }                                                                                                       // 3345\n           });                                                                                                         // 3346\n       }                                                                                                               // 3347\n    });                                                                                                                // 3348\n                                                                                                                       // 3349\n    Checklist.defaults = $.extend({}, $.fn.editabletypes.list.defaults, {                                              // 3350\n        /**                                                                                                            // 3351\n        @property tpl                                                                                                  // 3352\n        @default <div></div>                                                                                           // 3353\n        **/                                                                                                            // 3354\n        tpl:'<div class=\"editable-checklist\"></div>',                                                                  // 3355\n                                                                                                                       // 3356\n        /**                                                                                                            // 3357\n        @property inputclass                                                                                           // 3358\n        @type string                                                                                                   // 3359\n        @default null                                                                                                  // 3360\n        **/                                                                                                            // 3361\n        inputclass: null,                                                                                              // 3362\n                                                                                                                       // 3363\n        /**                                                                                                            // 3364\n        Separator of values when reading from `data-value` attribute                                                   // 3365\n                                                                                                                       // 3366\n        @property separator                                                                                            // 3367\n        @type string                                                                                                   // 3368\n        @default ','                                                                                                   // 3369\n        **/                                                                                                            // 3370\n        separator: ','                                                                                                 // 3371\n    });                                                                                                                // 3372\n                                                                                                                       // 3373\n    $.fn.editabletypes.checklist = Checklist;                                                                          // 3374\n                                                                                                                       // 3375\n}(window.jQuery));                                                                                                     // 3376\n                                                                                                                       // 3377\n/**                                                                                                                    // 3378\nHTML5 input types.                                                                                                     // 3379\nFollowing types are supported:                                                                                         // 3380\n                                                                                                                       // 3381\n* password                                                                                                             // 3382\n* email                                                                                                                // 3383\n* url                                                                                                                  // 3384\n* tel                                                                                                                  // 3385\n* number                                                                                                               // 3386\n* range                                                                                                                // 3387\n* time                                                                                                                 // 3388\n                                                                                                                       // 3389\nLearn more about html5 inputs:                                                                                         // 3390\nhttp://www.w3.org/wiki/HTML5_form_additions                                                                            // 3391\nTo check browser compatibility please see:                                                                             // 3392\nhttps://developer.mozilla.org/en-US/docs/HTML/Element/Input                                                            // 3393\n                                                                                                                       // 3394\n@class html5types                                                                                                      // 3395\n@extends text                                                                                                          // 3396\n@final                                                                                                                 // 3397\n@since 1.3.0                                                                                                           // 3398\n@example                                                                                                               // 3399\n<a href=\"#\" id=\"email\" data-type=\"email\" data-pk=\"1\">admin@example.com</a>                                             // 3400\n<script>                                                                                                               // 3401\n$(function(){                                                                                                          // 3402\n    $('#email').editable({                                                                                             // 3403\n        url: '/post',                                                                                                  // 3404\n        title: 'Enter email'                                                                                           // 3405\n    });                                                                                                                // 3406\n});                                                                                                                    // 3407\n</script>                                                                                                              // 3408\n**/                                                                                                                    // 3409\n                                                                                                                       // 3410\n/**                                                                                                                    // 3411\n@property tpl                                                                                                          // 3412\n@default depends on type                                                                                               // 3413\n**/                                                                                                                    // 3414\n                                                                                                                       // 3415\n/*                                                                                                                     // 3416\nPassword                                                                                                               // 3417\n*/                                                                                                                     // 3418\n(function ($) {                                                                                                        // 3419\n    \"use strict\";                                                                                                      // 3420\n                                                                                                                       // 3421\n    var Password = function (options) {                                                                                // 3422\n        this.init('password', options, Password.defaults);                                                             // 3423\n    };                                                                                                                 // 3424\n    $.fn.editableutils.inherit(Password, $.fn.editabletypes.text);                                                     // 3425\n    $.extend(Password.prototype, {                                                                                     // 3426\n       //do not display password, show '[hidden]' instead                                                              // 3427\n       value2html: function(value, element) {                                                                          // 3428\n           if(value) {                                                                                                 // 3429\n               $(element).text('[hidden]');                                                                            // 3430\n           } else {                                                                                                    // 3431\n               $(element).empty();                                                                                     // 3432\n           }                                                                                                           // 3433\n       },                                                                                                              // 3434\n       //as password not displayed, should not set value by html                                                       // 3435\n       html2value: function(html) {                                                                                    // 3436\n           return null;                                                                                                // 3437\n       }                                                                                                               // 3438\n    });                                                                                                                // 3439\n    Password.defaults = $.extend({}, $.fn.editabletypes.text.defaults, {                                               // 3440\n        tpl: '<input type=\"password\">'                                                                                 // 3441\n    });                                                                                                                // 3442\n    $.fn.editabletypes.password = Password;                                                                            // 3443\n}(window.jQuery));                                                                                                     // 3444\n                                                                                                                       // 3445\n                                                                                                                       // 3446\n/*                                                                                                                     // 3447\nEmail                                                                                                                  // 3448\n*/                                                                                                                     // 3449\n(function ($) {                                                                                                        // 3450\n    \"use strict\";                                                                                                      // 3451\n                                                                                                                       // 3452\n    var Email = function (options) {                                                                                   // 3453\n        this.init('email', options, Email.defaults);                                                                   // 3454\n    };                                                                                                                 // 3455\n    $.fn.editableutils.inherit(Email, $.fn.editabletypes.text);                                                        // 3456\n    Email.defaults = $.extend({}, $.fn.editabletypes.text.defaults, {                                                  // 3457\n        tpl: '<input type=\"email\">'                                                                                    // 3458\n    });                                                                                                                // 3459\n    $.fn.editabletypes.email = Email;                                                                                  // 3460\n}(window.jQuery));                                                                                                     // 3461\n                                                                                                                       // 3462\n                                                                                                                       // 3463\n/*                                                                                                                     // 3464\nUrl                                                                                                                    // 3465\n*/                                                                                                                     // 3466\n(function ($) {                                                                                                        // 3467\n    \"use strict\";                                                                                                      // 3468\n                                                                                                                       // 3469\n    var Url = function (options) {                                                                                     // 3470\n        this.init('url', options, Url.defaults);                                                                       // 3471\n    };                                                                                                                 // 3472\n    $.fn.editableutils.inherit(Url, $.fn.editabletypes.text);                                                          // 3473\n    Url.defaults = $.extend({}, $.fn.editabletypes.text.defaults, {                                                    // 3474\n        tpl: '<input type=\"url\">'                                                                                      // 3475\n    });                                                                                                                // 3476\n    $.fn.editabletypes.url = Url;                                                                                      // 3477\n}(window.jQuery));                                                                                                     // 3478\n                                                                                                                       // 3479\n                                                                                                                       // 3480\n/*                                                                                                                     // 3481\nTel                                                                                                                    // 3482\n*/                                                                                                                     // 3483\n(function ($) {                                                                                                        // 3484\n    \"use strict\";                                                                                                      // 3485\n                                                                                                                       // 3486\n    var Tel = function (options) {                                                                                     // 3487\n        this.init('tel', options, Tel.defaults);                                                                       // 3488\n    };                                                                                                                 // 3489\n    $.fn.editableutils.inherit(Tel, $.fn.editabletypes.text);                                                          // 3490\n    Tel.defaults = $.extend({}, $.fn.editabletypes.text.defaults, {                                                    // 3491\n        tpl: '<input type=\"tel\">'                                                                                      // 3492\n    });                                                                                                                // 3493\n    $.fn.editabletypes.tel = Tel;                                                                                      // 3494\n}(window.jQuery));                                                                                                     // 3495\n                                                                                                                       // 3496\n                                                                                                                       // 3497\n/*                                                                                                                     // 3498\nNumber                                                                                                                 // 3499\n*/                                                                                                                     // 3500\n(function ($) {                                                                                                        // 3501\n    \"use strict\";                                                                                                      // 3502\n                                                                                                                       // 3503\n    var NumberInput = function (options) {                                                                             // 3504\n        this.init('number', options, NumberInput.defaults);                                                            // 3505\n    };                                                                                                                 // 3506\n    $.fn.editableutils.inherit(NumberInput, $.fn.editabletypes.text);                                                  // 3507\n    $.extend(NumberInput.prototype, {                                                                                  // 3508\n         render: function () {                                                                                         // 3509\n            NumberInput.superclass.render.call(this);                                                                  // 3510\n            this.setAttr('min');                                                                                       // 3511\n            this.setAttr('max');                                                                                       // 3512\n            this.setAttr('step');                                                                                      // 3513\n        },                                                                                                             // 3514\n        postrender: function() {                                                                                       // 3515\n            if(this.$clear) {                                                                                          // 3516\n                //increase right ffset  for up/down arrows                                                             // 3517\n                this.$clear.css({right: 24});                                                                          // 3518\n                /*                                                                                                     // 3519\n                //can position clear button only here, when form is shown and height can be calculated                 // 3520\n                var h = this.$input.outerHeight(true) || 20,                                                           // 3521\n                    delta = (h - this.$clear.height()) / 2;                                                            // 3522\n                                                                                                                       // 3523\n                //add 12px to offset right for up/down arrows                                                          // 3524\n                this.$clear.css({top: delta, right: delta + 16});                                                      // 3525\n                */                                                                                                     // 3526\n            }                                                                                                          // 3527\n        }                                                                                                              // 3528\n    });                                                                                                                // 3529\n    NumberInput.defaults = $.extend({}, $.fn.editabletypes.text.defaults, {                                            // 3530\n        tpl: '<input type=\"number\">',                                                                                  // 3531\n        inputclass: 'input-mini',                                                                                      // 3532\n        min: null,                                                                                                     // 3533\n        max: null,                                                                                                     // 3534\n        step: null                                                                                                     // 3535\n    });                                                                                                                // 3536\n    $.fn.editabletypes.number = NumberInput;                                                                           // 3537\n}(window.jQuery));                                                                                                     // 3538\n                                                                                                                       // 3539\n                                                                                                                       // 3540\n/*                                                                                                                     // 3541\nRange (inherit from number)                                                                                            // 3542\n*/                                                                                                                     // 3543\n(function ($) {                                                                                                        // 3544\n    \"use strict\";                                                                                                      // 3545\n                                                                                                                       // 3546\n    var Range = function (options) {                                                                                   // 3547\n        this.init('range', options, Range.defaults);                                                                   // 3548\n    };                                                                                                                 // 3549\n    $.fn.editableutils.inherit(Range, $.fn.editabletypes.number);                                                      // 3550\n    $.extend(Range.prototype, {                                                                                        // 3551\n        render: function () {                                                                                          // 3552\n            this.$input = this.$tpl.filter('input');                                                                   // 3553\n                                                                                                                       // 3554\n            this.setClass();                                                                                           // 3555\n            this.setAttr('min');                                                                                       // 3556\n            this.setAttr('max');                                                                                       // 3557\n            this.setAttr('step');                                                                                      // 3558\n                                                                                                                       // 3559\n            this.$input.on('input', function(){                                                                        // 3560\n                $(this).siblings('output').text($(this).val());                                                        // 3561\n            });                                                                                                        // 3562\n        },                                                                                                             // 3563\n        activate: function() {                                                                                         // 3564\n            this.$input.focus();                                                                                       // 3565\n        }                                                                                                              // 3566\n    });                                                                                                                // 3567\n    Range.defaults = $.extend({}, $.fn.editabletypes.number.defaults, {                                                // 3568\n        tpl: '<input type=\"range\"><output style=\"width: 30px; display: inline-block\"></output>',                       // 3569\n        inputclass: 'input-medium'                                                                                     // 3570\n    });                                                                                                                // 3571\n    $.fn.editabletypes.range = Range;                                                                                  // 3572\n}(window.jQuery));                                                                                                     // 3573\n                                                                                                                       // 3574\n/*                                                                                                                     // 3575\nTime                                                                                                                   // 3576\n*/                                                                                                                     // 3577\n(function ($) {                                                                                                        // 3578\n    \"use strict\";                                                                                                      // 3579\n                                                                                                                       // 3580\n    var Time = function (options) {                                                                                    // 3581\n        this.init('time', options, Time.defaults);                                                                     // 3582\n    };                                                                                                                 // 3583\n    //inherit from abstract, as inheritance from text gives selection error.                                           // 3584\n    $.fn.editableutils.inherit(Time, $.fn.editabletypes.abstractinput);                                                // 3585\n    $.extend(Time.prototype, {                                                                                         // 3586\n        render: function() {                                                                                           // 3587\n           this.setClass();                                                                                            // 3588\n        }                                                                                                              // 3589\n    });                                                                                                                // 3590\n    Time.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {                                          // 3591\n        tpl: '<input type=\"time\">'                                                                                     // 3592\n    });                                                                                                                // 3593\n    $.fn.editabletypes.time = Time;                                                                                    // 3594\n}(window.jQuery));                                                                                                     // 3595\n                                                                                                                       // 3596\n/**                                                                                                                    // 3597\nSelect2 input. Based on amazing work of Igor Vaynberg https://github.com/ivaynberg/select2.                            // 3598\nPlease see [original select2 docs](http://ivaynberg.github.com/select2) for detailed description and options.          // 3599\n                                                                                                                       // 3600\nYou should manually download and include select2 distributive:                                                         // 3601\n                                                                                                                       // 3602\n    <link href=\"select2/select2.css\" rel=\"stylesheet\" type=\"text/css\"></link>                                          // 3603\n    <script src=\"select2/select2.js\"></script>                                                                         // 3604\n                                                                                                                       // 3605\nTo make it **bootstrap-styled** you can use css from [here](https://github.com/t0m/select2-bootstrap-css):             // 3606\n                                                                                                                       // 3607\n    <link href=\"select2-bootstrap.css\" rel=\"stylesheet\" type=\"text/css\"></link>                                        // 3608\n                                                                                                                       // 3609\n**Note:** currently `autotext` feature does not work for select2 with `ajax` remote source.                            // 3610\nYou need initially put both `data-value` and element's text youself:                                                   // 3611\n                                                                                                                       // 3612\n    <a href=\"#\" data-type=\"select2\" data-value=\"1\">Text1</a>                                                           // 3613\n                                                                                                                       // 3614\n                                                                                                                       // 3615\n@class select2                                                                                                         // 3616\n@extends abstractinput                                                                                                 // 3617\n@since 1.4.1                                                                                                           // 3618\n@final                                                                                                                 // 3619\n@example                                                                                                               // 3620\n<a href=\"#\" id=\"country\" data-type=\"select2\" data-pk=\"1\" data-value=\"ru\" data-url=\"/post\" data-title=\"Select country\"></a>\n<script>                                                                                                               // 3622\n$(function(){                                                                                                          // 3623\n    //local source                                                                                                     // 3624\n    $('#country').editable({                                                                                           // 3625\n        source: [                                                                                                      // 3626\n              {id: 'gb', text: 'Great Britain'},                                                                       // 3627\n              {id: 'us', text: 'United States'},                                                                       // 3628\n              {id: 'ru', text: 'Russia'}                                                                               // 3629\n           ],                                                                                                          // 3630\n        select2: {                                                                                                     // 3631\n           multiple: true                                                                                              // 3632\n        }                                                                                                              // 3633\n    });                                                                                                                // 3634\n    //remote source (simple)                                                                                           // 3635\n    $('#country').editable({                                                                                           // 3636\n        source: '/getCountries',                                                                                       // 3637\n        select2: {                                                                                                     // 3638\n            placeholder: 'Select Country',                                                                             // 3639\n            minimumInputLength: 1                                                                                      // 3640\n        }                                                                                                              // 3641\n    });                                                                                                                // 3642\n    //remote source (advanced)                                                                                         // 3643\n    $('#country').editable({                                                                                           // 3644\n        select2: {                                                                                                     // 3645\n            placeholder: 'Select Country',                                                                             // 3646\n            allowClear: true,                                                                                          // 3647\n            minimumInputLength: 3,                                                                                     // 3648\n            id: function (item) {                                                                                      // 3649\n                return item.CountryId;                                                                                 // 3650\n            },                                                                                                         // 3651\n            ajax: {                                                                                                    // 3652\n                url: '/getCountries',                                                                                  // 3653\n                dataType: 'json',                                                                                      // 3654\n                data: function (term, page) {                                                                          // 3655\n                    return { query: term };                                                                            // 3656\n                },                                                                                                     // 3657\n                results: function (data, page) {                                                                       // 3658\n                    return { results: data };                                                                          // 3659\n                }                                                                                                      // 3660\n            },                                                                                                         // 3661\n            formatResult: function (item) {                                                                            // 3662\n                return item.CountryName;                                                                               // 3663\n            },                                                                                                         // 3664\n            formatSelection: function (item) {                                                                         // 3665\n                return item.CountryName;                                                                               // 3666\n            },                                                                                                         // 3667\n            initSelection: function (element, callback) {                                                              // 3668\n                return $.get('/getCountryById', { query: element.val() }, function (data) {                            // 3669\n                    callback(data);                                                                                    // 3670\n                });                                                                                                    // 3671\n            }                                                                                                          // 3672\n        }                                                                                                              // 3673\n    });                                                                                                                // 3674\n});                                                                                                                    // 3675\n</script>                                                                                                              // 3676\n**/                                                                                                                    // 3677\n(function ($) {                                                                                                        // 3678\n    \"use strict\";                                                                                                      // 3679\n                                                                                                                       // 3680\n    var Constructor = function (options) {                                                                             // 3681\n        this.init('select2', options, Constructor.defaults);                                                           // 3682\n                                                                                                                       // 3683\n        options.select2 = options.select2 || {};                                                                       // 3684\n                                                                                                                       // 3685\n        this.sourceData = null;                                                                                        // 3686\n                                                                                                                       // 3687\n        //placeholder                                                                                                  // 3688\n        if(options.placeholder) {                                                                                      // 3689\n            options.select2.placeholder = options.placeholder;                                                         // 3690\n        }                                                                                                              // 3691\n                                                                                                                       // 3692\n        //if not `tags` mode, use source                                                                               // 3693\n        if(!options.select2.tags && options.source) {                                                                  // 3694\n            var source = options.source;                                                                               // 3695\n            //if source is function, call it (once!)                                                                   // 3696\n            if ($.isFunction(options.source)) {                                                                        // 3697\n                source = options.source.call(options.scope);                                                           // 3698\n            }                                                                                                          // 3699\n                                                                                                                       // 3700\n            if (typeof source === 'string') {                                                                          // 3701\n                options.select2.ajax = options.select2.ajax || {};                                                     // 3702\n                //some default ajax params                                                                             // 3703\n                if(!options.select2.ajax.data) {                                                                       // 3704\n                    options.select2.ajax.data = function(term) {return { query:term };};                               // 3705\n                }                                                                                                      // 3706\n                if(!options.select2.ajax.results) {                                                                    // 3707\n                    options.select2.ajax.results = function(data) { return {results:data };};                          // 3708\n                }                                                                                                      // 3709\n                options.select2.ajax.url = source;                                                                     // 3710\n            } else {                                                                                                   // 3711\n                //check format and convert x-editable format to select2 format (if needed)                             // 3712\n                this.sourceData = this.convertSource(source);                                                          // 3713\n                options.select2.data = this.sourceData;                                                                // 3714\n            }                                                                                                          // 3715\n        }                                                                                                              // 3716\n                                                                                                                       // 3717\n        //overriding objects in config (as by default jQuery extend() is not recursive)                                // 3718\n        this.options.select2 = $.extend({}, Constructor.defaults.select2, options.select2);                            // 3719\n                                                                                                                       // 3720\n        //detect whether it is multi-valued                                                                            // 3721\n        this.isMultiple = this.options.select2.tags || this.options.select2.multiple;                                  // 3722\n        this.isRemote = ('ajax' in this.options.select2);                                                              // 3723\n                                                                                                                       // 3724\n        //store function returning ID of item                                                                          // 3725\n        //should be here as used inautotext for local source                                                           // 3726\n        this.idFunc = this.options.select2.id;                                                                         // 3727\n        if (typeof(this.idFunc) !== \"function\") {                                                                      // 3728\n            var idKey = this.idFunc || 'id';                                                                           // 3729\n            this.idFunc = function (e) { return e[idKey]; };                                                           // 3730\n        }                                                                                                              // 3731\n                                                                                                                       // 3732\n        //store function that renders text in select2                                                                  // 3733\n        this.formatSelection = this.options.select2.formatSelection;                                                   // 3734\n        if (typeof(this.formatSelection) !== \"function\") {                                                             // 3735\n            this.formatSelection = function (e) { return e.text; };                                                    // 3736\n        }                                                                                                              // 3737\n    };                                                                                                                 // 3738\n                                                                                                                       // 3739\n    $.fn.editableutils.inherit(Constructor, $.fn.editabletypes.abstractinput);                                         // 3740\n                                                                                                                       // 3741\n    $.extend(Constructor.prototype, {                                                                                  // 3742\n        render: function() {                                                                                           // 3743\n            this.setClass();                                                                                           // 3744\n                                                                                                                       // 3745\n            //can not apply select2 here as it calls initSelection                                                     // 3746\n            //over input that does not have correct value yet.                                                         // 3747\n            //apply select2 only in value2input                                                                        // 3748\n            //this.$input.select2(this.options.select2);                                                               // 3749\n                                                                                                                       // 3750\n            //when data is loaded via ajax, we need to know when it's done to populate listData                        // 3751\n            if(this.isRemote) {                                                                                        // 3752\n                //listen to loaded event to populate data                                                              // 3753\n                this.$input.on('select2-loaded', $.proxy(function(e) {                                                 // 3754\n                    this.sourceData = e.items.results;                                                                 // 3755\n                }, this));                                                                                             // 3756\n            }                                                                                                          // 3757\n                                                                                                                       // 3758\n            //trigger resize of editableform to re-position container in multi-valued mode                             // 3759\n            if(this.isMultiple) {                                                                                      // 3760\n               this.$input.on('change', function() {                                                                   // 3761\n                   $(this).closest('form').parent().triggerHandler('resize');                                          // 3762\n               });                                                                                                     // 3763\n            }                                                                                                          // 3764\n       },                                                                                                              // 3765\n                                                                                                                       // 3766\n       value2html: function(value, element) {                                                                          // 3767\n           var text = '', data,                                                                                        // 3768\n               that = this;                                                                                            // 3769\n                                                                                                                       // 3770\n           if(this.options.select2.tags) { //in tags mode just assign value                                            // 3771\n              data = value;                                                                                            // 3772\n              //data = $.fn.editableutils.itemsByValue(value, this.options.select2.tags, this.idFunc);                 // 3773\n           } else if(this.sourceData) {                                                                                // 3774\n              data = $.fn.editableutils.itemsByValue(value, this.sourceData, this.idFunc);                             // 3775\n           } else {                                                                                                    // 3776\n              //can not get list of possible values                                                                    // 3777\n              //(e.g. autotext for select2 with ajax source)                                                           // 3778\n           }                                                                                                           // 3779\n                                                                                                                       // 3780\n           //data may be array (when multiple values allowed)                                                          // 3781\n           if($.isArray(data)) {                                                                                       // 3782\n               //collect selected data and show with separator                                                         // 3783\n               text = [];                                                                                              // 3784\n               $.each(data, function(k, v){                                                                            // 3785\n                   text.push(v && typeof v === 'object' ? that.formatSelection(v) : v);                                // 3786\n               });                                                                                                     // 3787\n           } else if(data) {                                                                                           // 3788\n               text = that.formatSelection(data);                                                                      // 3789\n           }                                                                                                           // 3790\n                                                                                                                       // 3791\n           text = $.isArray(text) ? text.join(this.options.viewseparator) : text;                                      // 3792\n                                                                                                                       // 3793\n           //$(element).text(text);                                                                                    // 3794\n           Constructor.superclass.value2html.call(this, text, element);                                                // 3795\n       },                                                                                                              // 3796\n                                                                                                                       // 3797\n       html2value: function(html) {                                                                                    // 3798\n           return this.options.select2.tags ? this.str2value(html, this.options.viewseparator) : null;                 // 3799\n       },                                                                                                              // 3800\n                                                                                                                       // 3801\n       value2input: function(value) {                                                                                  // 3802\n           // if value array => join it anyway                                                                         // 3803\n           if($.isArray(value)) {                                                                                      // 3804\n              value = value.join(this.getSeparator());                                                                 // 3805\n           }                                                                                                           // 3806\n                                                                                                                       // 3807\n           //for remote source just set value, text is updated by initSelection                                        // 3808\n           if(!this.$input.data('select2')) {                                                                          // 3809\n               this.$input.val(value);                                                                                 // 3810\n               this.$input.select2(this.options.select2);                                                              // 3811\n           } else {                                                                                                    // 3812\n               //second argument needed to separate initial change from user's click (for autosubmit)                  // 3813\n               this.$input.val(value).trigger('change', true);                                                         // 3814\n                                                                                                                       // 3815\n               //Uncaught Error: cannot call val() if initSelection() is not defined                                   // 3816\n               //this.$input.select2('val', value);                                                                    // 3817\n           }                                                                                                           // 3818\n                                                                                                                       // 3819\n           // if defined remote source AND no multiple mode AND no user's initSelection provided -->                   // 3820\n           // we should somehow get text for provided id.                                                              // 3821\n           // The solution is to use element's text as text for that id (exclude empty)                                // 3822\n           if(this.isRemote && !this.isMultiple && !this.options.select2.initSelection) {                              // 3823\n               // customId and customText are methods to extract `id` and `text` from data object                      // 3824\n               // we can use this workaround only if user did not define these methods                                 // 3825\n               // otherwise we cant construct data object                                                              // 3826\n               var customId = this.options.select2.id,                                                                 // 3827\n                   customText = this.options.select2.formatSelection;                                                  // 3828\n                                                                                                                       // 3829\n               if(!customId && !customText) {                                                                          // 3830\n                   var $el = $(this.options.scope);                                                                    // 3831\n                   if (!$el.data('editable').isEmpty) {                                                                // 3832\n                       var data = {id: value, text: $el.text()};                                                       // 3833\n                       this.$input.select2('data', data);                                                              // 3834\n                   }                                                                                                   // 3835\n               }                                                                                                       // 3836\n           }                                                                                                           // 3837\n       },                                                                                                              // 3838\n                                                                                                                       // 3839\n       input2value: function() {                                                                                       // 3840\n           return this.$input.select2('val');                                                                          // 3841\n       },                                                                                                              // 3842\n                                                                                                                       // 3843\n       str2value: function(str, separator) {                                                                           // 3844\n            if(typeof str !== 'string' || !this.isMultiple) {                                                          // 3845\n                return str;                                                                                            // 3846\n            }                                                                                                          // 3847\n                                                                                                                       // 3848\n            separator = separator || this.getSeparator();                                                              // 3849\n                                                                                                                       // 3850\n            var val, i, l;                                                                                             // 3851\n                                                                                                                       // 3852\n            if (str === null || str.length < 1) {                                                                      // 3853\n                return null;                                                                                           // 3854\n            }                                                                                                          // 3855\n            val = str.split(separator);                                                                                // 3856\n            for (i = 0, l = val.length; i < l; i = i + 1) {                                                            // 3857\n                val[i] = $.trim(val[i]);                                                                               // 3858\n            }                                                                                                          // 3859\n                                                                                                                       // 3860\n            return val;                                                                                                // 3861\n       },                                                                                                              // 3862\n                                                                                                                       // 3863\n        autosubmit: function() {                                                                                       // 3864\n            this.$input.on('change', function(e, isInitial){                                                           // 3865\n                if(!isInitial) {                                                                                       // 3866\n                  $(this).closest('form').submit();                                                                    // 3867\n                }                                                                                                      // 3868\n            });                                                                                                        // 3869\n        },                                                                                                             // 3870\n                                                                                                                       // 3871\n        getSeparator: function() {                                                                                     // 3872\n            return this.options.select2.separator || $.fn.select2.defaults.separator;                                  // 3873\n        },                                                                                                             // 3874\n                                                                                                                       // 3875\n        /*                                                                                                             // 3876\n        Converts source from x-editable format: {value: 1, text: \"1\"} to                                               // 3877\n        select2 format: {id: 1, text: \"1\"}                                                                             // 3878\n        */                                                                                                             // 3879\n        convertSource: function(source) {                                                                              // 3880\n            if($.isArray(source) && source.length && source[0].value !== undefined) {                                  // 3881\n                for(var i = 0; i<source.length; i++) {                                                                 // 3882\n                    if(source[i].value !== undefined) {                                                                // 3883\n                        source[i].id = source[i].value;                                                                // 3884\n                        delete source[i].value;                                                                        // 3885\n                    }                                                                                                  // 3886\n                }                                                                                                      // 3887\n            }                                                                                                          // 3888\n            return source;                                                                                             // 3889\n        },                                                                                                             // 3890\n                                                                                                                       // 3891\n        destroy: function() {                                                                                          // 3892\n            if(this.$input.data('select2')) {                                                                          // 3893\n                this.$input.select2('destroy');                                                                        // 3894\n            }                                                                                                          // 3895\n        }                                                                                                              // 3896\n                                                                                                                       // 3897\n    });                                                                                                                // 3898\n                                                                                                                       // 3899\n    Constructor.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {                                   // 3900\n        /**                                                                                                            // 3901\n        @property tpl                                                                                                  // 3902\n        @default <input type=\"hidden\">                                                                                 // 3903\n        **/                                                                                                            // 3904\n        tpl:'<input type=\"hidden\">',                                                                                   // 3905\n        /**                                                                                                            // 3906\n        Configuration of select2. [Full list of options](http://ivaynberg.github.com/select2).                         // 3907\n                                                                                                                       // 3908\n        @property select2                                                                                              // 3909\n        @type object                                                                                                   // 3910\n        @default null                                                                                                  // 3911\n        **/                                                                                                            // 3912\n        select2: null,                                                                                                 // 3913\n        /**                                                                                                            // 3914\n        Placeholder attribute of select                                                                                // 3915\n                                                                                                                       // 3916\n        @property placeholder                                                                                          // 3917\n        @type string                                                                                                   // 3918\n        @default null                                                                                                  // 3919\n        **/                                                                                                            // 3920\n        placeholder: null,                                                                                             // 3921\n        /**                                                                                                            // 3922\n        Source data for select. It will be assigned to select2 `data` property and kept here just for convenience.     // 3923\n        Please note, that format is different from simple `select` input: use 'id' instead of 'value'.                 // 3924\n        E.g. `[{id: 1, text: \"text1\"}, {id: 2, text: \"text2\"}, ...]`.                                                  // 3925\n                                                                                                                       // 3926\n        @property source                                                                                               // 3927\n        @type array|string|function                                                                                    // 3928\n        @default null                                                                                                  // 3929\n        **/                                                                                                            // 3930\n        source: null,                                                                                                  // 3931\n        /**                                                                                                            // 3932\n        Separator used to display tags.                                                                                // 3933\n                                                                                                                       // 3934\n        @property viewseparator                                                                                        // 3935\n        @type string                                                                                                   // 3936\n        @default ', '                                                                                                  // 3937\n        **/                                                                                                            // 3938\n        viewseparator: ', '                                                                                            // 3939\n    });                                                                                                                // 3940\n                                                                                                                       // 3941\n    $.fn.editabletypes.select2 = Constructor;                                                                          // 3942\n                                                                                                                       // 3943\n}(window.jQuery));                                                                                                     // 3944\n                                                                                                                       // 3945\n/**                                                                                                                    // 3946\n* Combodate - 1.0.5                                                                                                    // 3947\n* Dropdown date and time picker.                                                                                       // 3948\n* Converts text input into dropdowns to pick day, month, year, hour, minute and second.                                // 3949\n* Uses momentjs as datetime library http://momentjs.com.                                                               // 3950\n* For i18n include corresponding file from https://github.com/timrwood/moment/tree/master/lang                         // 3951\n*                                                                                                                      // 3952\n* Confusion at noon and midnight - see http://en.wikipedia.org/wiki/12-hour_clock#Confusion_at_noon_and_midnight       // 3953\n* In combodate:                                                                                                        // 3954\n* 12:00 pm --> 12:00 (24-h format, midday)                                                                             // 3955\n* 12:00 am --> 00:00 (24-h format, midnight, start of day)                                                             // 3956\n*                                                                                                                      // 3957\n* Differs from momentjs parse rules:                                                                                   // 3958\n* 00:00 pm, 12:00 pm --> 12:00 (24-h format, day not change)                                                           // 3959\n* 00:00 am, 12:00 am --> 00:00 (24-h format, day not change)                                                           // 3960\n*                                                                                                                      // 3961\n*                                                                                                                      // 3962\n* Author: Vitaliy Potapov                                                                                              // 3963\n* Project page: http://github.com/vitalets/combodate                                                                   // 3964\n* Copyright (c) 2012 Vitaliy Potapov. Released under MIT License.                                                      // 3965\n**/                                                                                                                    // 3966\n(function ($) {                                                                                                        // 3967\n                                                                                                                       // 3968\n    var Combodate = function (element, options) {                                                                      // 3969\n        this.$element = $(element);                                                                                    // 3970\n        if(!this.$element.is('input')) {                                                                               // 3971\n            $.error('Combodate should be applied to INPUT element');                                                   // 3972\n            return;                                                                                                    // 3973\n        }                                                                                                              // 3974\n        this.options = $.extend({}, $.fn.combodate.defaults, options, this.$element.data());                           // 3975\n        this.init();                                                                                                   // 3976\n     };                                                                                                                // 3977\n                                                                                                                       // 3978\n    Combodate.prototype = {                                                                                            // 3979\n        constructor: Combodate,                                                                                        // 3980\n        init: function () {                                                                                            // 3981\n            this.map = {                                                                                               // 3982\n                //key   regexp    moment.method                                                                        // 3983\n                day:    ['D',    'date'],                                                                              // 3984\n                month:  ['M',    'month'],                                                                             // 3985\n                year:   ['Y',    'year'],                                                                              // 3986\n                hour:   ['[Hh]', 'hours'],                                                                             // 3987\n                minute: ['m',    'minutes'],                                                                           // 3988\n                second: ['s',    'seconds'],                                                                           // 3989\n                ampm:   ['[Aa]', '']                                                                                   // 3990\n            };                                                                                                         // 3991\n                                                                                                                       // 3992\n            this.$widget = $('<span class=\"combodate\"></span>').html(this.getTemplate());                              // 3993\n                                                                                                                       // 3994\n            this.initCombos();                                                                                         // 3995\n                                                                                                                       // 3996\n            //update original input on change                                                                          // 3997\n            this.$widget.on('change', 'select', $.proxy(function(e) {                                                  // 3998\n                this.$element.val(this.getValue()).change();                                                           // 3999\n                // update days count if month or year changes                                                          // 4000\n                if (this.options.smartDays) {                                                                          // 4001\n                    if ($(e.target).is('.month') || $(e.target).is('.year')) {                                         // 4002\n                        this.fillCombo('day');                                                                         // 4003\n                    }                                                                                                  // 4004\n                }                                                                                                      // 4005\n            }, this));                                                                                                 // 4006\n                                                                                                                       // 4007\n            this.$widget.find('select').css('width', 'auto');                                                          // 4008\n                                                                                                                       // 4009\n            // hide original input and insert widget                                                                   // 4010\n            this.$element.hide().after(this.$widget);                                                                  // 4011\n                                                                                                                       // 4012\n            // set initial value                                                                                       // 4013\n            this.setValue(this.$element.val() || this.options.value);                                                  // 4014\n        },                                                                                                             // 4015\n                                                                                                                       // 4016\n        /*                                                                                                             // 4017\n         Replace tokens in template with <select> elements                                                             // 4018\n        */                                                                                                             // 4019\n        getTemplate: function() {                                                                                      // 4020\n            var tpl = this.options.template;                                                                           // 4021\n                                                                                                                       // 4022\n            //first pass                                                                                               // 4023\n            $.each(this.map, function(k, v) {                                                                          // 4024\n                v = v[0];                                                                                              // 4025\n                var r = new RegExp(v+'+'),                                                                             // 4026\n                    token = v.length > 1 ? v.substring(1, 2) : v;                                                      // 4027\n                                                                                                                       // 4028\n                tpl = tpl.replace(r, '{'+token+'}');                                                                   // 4029\n            });                                                                                                        // 4030\n                                                                                                                       // 4031\n            //replace spaces with &nbsp;                                                                               // 4032\n            tpl = tpl.replace(/ /g, '&nbsp;');                                                                         // 4033\n                                                                                                                       // 4034\n            //second pass                                                                                              // 4035\n            $.each(this.map, function(k, v) {                                                                          // 4036\n                v = v[0];                                                                                              // 4037\n                var token = v.length > 1 ? v.substring(1, 2) : v;                                                      // 4038\n                                                                                                                       // 4039\n                tpl = tpl.replace('{'+token+'}', '<select class=\"'+k+'\"></select>');                                   // 4040\n            });                                                                                                        // 4041\n                                                                                                                       // 4042\n            return tpl;                                                                                                // 4043\n        },                                                                                                             // 4044\n                                                                                                                       // 4045\n        /*                                                                                                             // 4046\n         Initialize combos that presents in template                                                                   // 4047\n        */                                                                                                             // 4048\n        initCombos: function() {                                                                                       // 4049\n            for (var k in this.map) {                                                                                  // 4050\n                var $c = this.$widget.find('.'+k);                                                                     // 4051\n                // set properties like this.$day, this.$month etc.                                                     // 4052\n                this['$'+k] = $c.length ? $c : null;                                                                   // 4053\n                // fill with items                                                                                     // 4054\n                this.fillCombo(k);                                                                                     // 4055\n            }                                                                                                          // 4056\n        },                                                                                                             // 4057\n                                                                                                                       // 4058\n        /*                                                                                                             // 4059\n         Fill combo with items                                                                                         // 4060\n        */                                                                                                             // 4061\n        fillCombo: function(k) {                                                                                       // 4062\n            var $combo = this['$'+k];                                                                                  // 4063\n            if (!$combo) {                                                                                             // 4064\n                return;                                                                                                // 4065\n            }                                                                                                          // 4066\n                                                                                                                       // 4067\n            // define method name to fill items, e.g `fillDays`                                                        // 4068\n            var f = 'fill' + k.charAt(0).toUpperCase() + k.slice(1);                                                   // 4069\n            var items = this[f]();                                                                                     // 4070\n            var value = $combo.val();                                                                                  // 4071\n                                                                                                                       // 4072\n            $combo.empty();                                                                                            // 4073\n            for(var i=0; i<items.length; i++) {                                                                        // 4074\n                $combo.append('<option value=\"'+items[i][0]+'\">'+items[i][1]+'</option>');                             // 4075\n            }                                                                                                          // 4076\n                                                                                                                       // 4077\n            $combo.val(value);                                                                                         // 4078\n        },                                                                                                             // 4079\n                                                                                                                       // 4080\n        /*                                                                                                             // 4081\n         Initialize items of combos. Handles `firstItem` option                                                        // 4082\n        */                                                                                                             // 4083\n        fillCommon: function(key) {                                                                                    // 4084\n            var values = [],                                                                                           // 4085\n                relTime;                                                                                               // 4086\n                                                                                                                       // 4087\n            if(this.options.firstItem === 'name') {                                                                    // 4088\n                //need both to support moment ver < 2 and  >= 2                                                        // 4089\n                relTime = moment.relativeTime || moment.langData()._relativeTime;                                      // 4090\n                var header = typeof relTime[key] === 'function' ? relTime[key](1, true, key, false) : relTime[key];    // 4091\n                //take last entry (see momentjs lang files structure)                                                  // 4092\n                header = header.split(' ').reverse()[0];                                                               // 4093\n                values.push(['', header]);                                                                             // 4094\n            } else if(this.options.firstItem === 'empty') {                                                            // 4095\n                values.push(['', '']);                                                                                 // 4096\n            }                                                                                                          // 4097\n            return values;                                                                                             // 4098\n        },                                                                                                             // 4099\n                                                                                                                       // 4100\n                                                                                                                       // 4101\n        /*                                                                                                             // 4102\n        fill day                                                                                                       // 4103\n        */                                                                                                             // 4104\n        fillDay: function() {                                                                                          // 4105\n            var items = this.fillCommon('d'), name, i,                                                                 // 4106\n                twoDigit = this.options.template.indexOf('DD') !== -1,                                                 // 4107\n                daysCount = 31;                                                                                        // 4108\n                                                                                                                       // 4109\n            // detect days count (depends on month and year)                                                           // 4110\n            // originally https://github.com/vitalets/combodate/pull/7                                                 // 4111\n            if (this.options.smartDays && this.$month && this.$year) {                                                 // 4112\n                var month = parseInt(this.$month.val(), 10);                                                           // 4113\n                var year = parseInt(this.$year.val(), 10);                                                             // 4114\n                                                                                                                       // 4115\n                if (!isNaN(month) && !isNaN(year)) {                                                                   // 4116\n                    daysCount = moment([year, month]).daysInMonth();                                                   // 4117\n                }                                                                                                      // 4118\n            }                                                                                                          // 4119\n                                                                                                                       // 4120\n            for (i = 1; i <= daysCount; i++) {                                                                         // 4121\n                name = twoDigit ? this.leadZero(i) : i;                                                                // 4122\n                items.push([i, name]);                                                                                 // 4123\n            }                                                                                                          // 4124\n            return items;                                                                                              // 4125\n        },                                                                                                             // 4126\n                                                                                                                       // 4127\n        /*                                                                                                             // 4128\n        fill month                                                                                                     // 4129\n        */                                                                                                             // 4130\n        fillMonth: function() {                                                                                        // 4131\n            var items = this.fillCommon('M'), name, i,                                                                 // 4132\n                longNames = this.options.template.indexOf('MMMM') !== -1,                                              // 4133\n                shortNames = this.options.template.indexOf('MMM') !== -1,                                              // 4134\n                twoDigit = this.options.template.indexOf('MM') !== -1;                                                 // 4135\n                                                                                                                       // 4136\n            for(i=0; i<=11; i++) {                                                                                     // 4137\n                if(longNames) {                                                                                        // 4138\n                    //see https://github.com/timrwood/momentjs.com/pull/36                                             // 4139\n                    name = moment().date(1).month(i).format('MMMM');                                                   // 4140\n                } else if(shortNames) {                                                                                // 4141\n                    name = moment().date(1).month(i).format('MMM');                                                    // 4142\n                } else if(twoDigit) {                                                                                  // 4143\n                    name = this.leadZero(i+1);                                                                         // 4144\n                } else {                                                                                               // 4145\n                    name = i+1;                                                                                        // 4146\n                }                                                                                                      // 4147\n                items.push([i, name]);                                                                                 // 4148\n            }                                                                                                          // 4149\n            return items;                                                                                              // 4150\n        },                                                                                                             // 4151\n                                                                                                                       // 4152\n        /*                                                                                                             // 4153\n        fill year                                                                                                      // 4154\n        */                                                                                                             // 4155\n        fillYear: function() {                                                                                         // 4156\n            var items = [], name, i,                                                                                   // 4157\n                longNames = this.options.template.indexOf('YYYY') !== -1;                                              // 4158\n                                                                                                                       // 4159\n            for(i=this.options.maxYear; i>=this.options.minYear; i--) {                                                // 4160\n                name = longNames ? i : (i+'').substring(2);                                                            // 4161\n                items[this.options.yearDescending ? 'push' : 'unshift']([i, name]);                                    // 4162\n            }                                                                                                          // 4163\n                                                                                                                       // 4164\n            items = this.fillCommon('y').concat(items);                                                                // 4165\n                                                                                                                       // 4166\n            return items;                                                                                              // 4167\n        },                                                                                                             // 4168\n                                                                                                                       // 4169\n        /*                                                                                                             // 4170\n        fill hour                                                                                                      // 4171\n        */                                                                                                             // 4172\n        fillHour: function() {                                                                                         // 4173\n            var items = this.fillCommon('h'), name, i,                                                                 // 4174\n                h12 = this.options.template.indexOf('h') !== -1,                                                       // 4175\n                h24 = this.options.template.indexOf('H') !== -1,                                                       // 4176\n                twoDigit = this.options.template.toLowerCase().indexOf('hh') !== -1,                                   // 4177\n                min = h12 ? 1 : 0,                                                                                     // 4178\n                max = h12 ? 12 : 23;                                                                                   // 4179\n                                                                                                                       // 4180\n            for(i=min; i<=max; i++) {                                                                                  // 4181\n                name = twoDigit ? this.leadZero(i) : i;                                                                // 4182\n                items.push([i, name]);                                                                                 // 4183\n            }                                                                                                          // 4184\n            return items;                                                                                              // 4185\n        },                                                                                                             // 4186\n                                                                                                                       // 4187\n        /*                                                                                                             // 4188\n        fill minute                                                                                                    // 4189\n        */                                                                                                             // 4190\n        fillMinute: function() {                                                                                       // 4191\n            var items = this.fillCommon('m'), name, i,                                                                 // 4192\n                twoDigit = this.options.template.indexOf('mm') !== -1;                                                 // 4193\n                                                                                                                       // 4194\n            for(i=0; i<=59; i+= this.options.minuteStep) {                                                             // 4195\n                name = twoDigit ? this.leadZero(i) : i;                                                                // 4196\n                items.push([i, name]);                                                                                 // 4197\n            }                                                                                                          // 4198\n            return items;                                                                                              // 4199\n        },                                                                                                             // 4200\n                                                                                                                       // 4201\n        /*                                                                                                             // 4202\n        fill second                                                                                                    // 4203\n        */                                                                                                             // 4204\n        fillSecond: function() {                                                                                       // 4205\n            var items = this.fillCommon('s'), name, i,                                                                 // 4206\n                twoDigit = this.options.template.indexOf('ss') !== -1;                                                 // 4207\n                                                                                                                       // 4208\n            for(i=0; i<=59; i+= this.options.secondStep) {                                                             // 4209\n                name = twoDigit ? this.leadZero(i) : i;                                                                // 4210\n                items.push([i, name]);                                                                                 // 4211\n            }                                                                                                          // 4212\n            return items;                                                                                              // 4213\n        },                                                                                                             // 4214\n                                                                                                                       // 4215\n        /*                                                                                                             // 4216\n        fill ampm                                                                                                      // 4217\n        */                                                                                                             // 4218\n        fillAmpm: function() {                                                                                         // 4219\n            var ampmL = this.options.template.indexOf('a') !== -1,                                                     // 4220\n                ampmU = this.options.template.indexOf('A') !== -1,                                                     // 4221\n                items = [                                                                                              // 4222\n                    ['am', ampmL ? 'am' : 'AM'],                                                                       // 4223\n                    ['pm', ampmL ? 'pm' : 'PM']                                                                        // 4224\n                ];                                                                                                     // 4225\n            return items;                                                                                              // 4226\n        },                                                                                                             // 4227\n                                                                                                                       // 4228\n        /*                                                                                                             // 4229\n         Returns current date value from combos.                                                                       // 4230\n         If format not specified - `options.format` used.                                                              // 4231\n         If format = `null` - Moment object returned.                                                                  // 4232\n        */                                                                                                             // 4233\n        getValue: function(format) {                                                                                   // 4234\n            var dt, values = {},                                                                                       // 4235\n                that = this,                                                                                           // 4236\n                notSelected = false;                                                                                   // 4237\n                                                                                                                       // 4238\n            //getting selected values                                                                                  // 4239\n            $.each(this.map, function(k, v) {                                                                          // 4240\n                if(k === 'ampm') {                                                                                     // 4241\n                    return;                                                                                            // 4242\n                }                                                                                                      // 4243\n                var def = k === 'day' ? 1 : 0;                                                                         // 4244\n                                                                                                                       // 4245\n                values[k] = that['$'+k] ? parseInt(that['$'+k].val(), 10) : def;                                       // 4246\n                                                                                                                       // 4247\n                if(isNaN(values[k])) {                                                                                 // 4248\n                   notSelected = true;                                                                                 // 4249\n                   return false;                                                                                       // 4250\n                }                                                                                                      // 4251\n            });                                                                                                        // 4252\n                                                                                                                       // 4253\n            //if at least one visible combo not selected - return empty string                                         // 4254\n            if(notSelected) {                                                                                          // 4255\n               return '';                                                                                              // 4256\n            }                                                                                                          // 4257\n                                                                                                                       // 4258\n            //convert hours 12h --> 24h                                                                                // 4259\n            if(this.$ampm) {                                                                                           // 4260\n                //12:00 pm --> 12:00 (24-h format, midday), 12:00 am --> 00:00 (24-h format, midnight, start of day)   // 4261\n                if(values.hour === 12) {                                                                               // 4262\n                    values.hour = this.$ampm.val() === 'am' ? 0 : 12;                                                  // 4263\n                } else {                                                                                               // 4264\n                    values.hour = this.$ampm.val() === 'am' ? values.hour : values.hour+12;                            // 4265\n                }                                                                                                      // 4266\n            }                                                                                                          // 4267\n                                                                                                                       // 4268\n            dt = moment([values.year, values.month, values.day, values.hour, values.minute, values.second]);           // 4269\n                                                                                                                       // 4270\n            //highlight invalid date                                                                                   // 4271\n            this.highlight(dt);                                                                                        // 4272\n                                                                                                                       // 4273\n            format = format === undefined ? this.options.format : format;                                              // 4274\n            if(format === null) {                                                                                      // 4275\n               return dt.isValid() ? dt : null;                                                                        // 4276\n            } else {                                                                                                   // 4277\n               return dt.isValid() ? dt.format(format) : '';                                                           // 4278\n            }                                                                                                          // 4279\n        },                                                                                                             // 4280\n                                                                                                                       // 4281\n        setValue: function(value) {                                                                                    // 4282\n            if(!value) {                                                                                               // 4283\n                return;                                                                                                // 4284\n            }                                                                                                          // 4285\n                                                                                                                       // 4286\n            var dt = typeof value === 'string' ? moment(value, this.options.format) : moment(value),                   // 4287\n                that = this,                                                                                           // 4288\n                values = {};                                                                                           // 4289\n                                                                                                                       // 4290\n            //function to find nearest value in select options                                                         // 4291\n            function getNearest($select, value) {                                                                      // 4292\n                var delta = {};                                                                                        // 4293\n                $select.children('option').each(function(i, opt){                                                      // 4294\n                    var optValue = $(opt).attr('value'),                                                               // 4295\n                    distance;                                                                                          // 4296\n                                                                                                                       // 4297\n                    if(optValue === '') return;                                                                        // 4298\n                    distance = Math.abs(optValue - value);                                                             // 4299\n                    if(typeof delta.distance === 'undefined' || distance < delta.distance) {                           // 4300\n                        delta = {value: optValue, distance: distance};                                                 // 4301\n                    }                                                                                                  // 4302\n                });                                                                                                    // 4303\n                return delta.value;                                                                                    // 4304\n            }                                                                                                          // 4305\n                                                                                                                       // 4306\n            if(dt.isValid()) {                                                                                         // 4307\n                //read values from date object                                                                         // 4308\n                $.each(this.map, function(k, v) {                                                                      // 4309\n                    if(k === 'ampm') {                                                                                 // 4310\n                       return;                                                                                         // 4311\n                    }                                                                                                  // 4312\n                    values[k] = dt[v[1]]();                                                                            // 4313\n                });                                                                                                    // 4314\n                                                                                                                       // 4315\n                if(this.$ampm) {                                                                                       // 4316\n                    //12:00 pm --> 12:00 (24-h format, midday), 12:00 am --> 00:00 (24-h format, midnight, start of day)\n                    if(values.hour >= 12) {                                                                            // 4318\n                        values.ampm = 'pm';                                                                            // 4319\n                        if(values.hour > 12) {                                                                         // 4320\n                            values.hour -= 12;                                                                         // 4321\n                        }                                                                                              // 4322\n                    } else {                                                                                           // 4323\n                        values.ampm = 'am';                                                                            // 4324\n                        if(values.hour === 0) {                                                                        // 4325\n                            values.hour = 12;                                                                          // 4326\n                        }                                                                                              // 4327\n                    }                                                                                                  // 4328\n                }                                                                                                      // 4329\n                                                                                                                       // 4330\n                $.each(values, function(k, v) {                                                                        // 4331\n                    //call val() for each existing combo, e.g. this.$hour.val()                                        // 4332\n                    if(that['$'+k]) {                                                                                  // 4333\n                                                                                                                       // 4334\n                        if(k === 'minute' && that.options.minuteStep > 1 && that.options.roundTime) {                  // 4335\n                           v = getNearest(that['$'+k], v);                                                             // 4336\n                        }                                                                                              // 4337\n                                                                                                                       // 4338\n                        if(k === 'second' && that.options.secondStep > 1 && that.options.roundTime) {                  // 4339\n                           v = getNearest(that['$'+k], v);                                                             // 4340\n                        }                                                                                              // 4341\n                                                                                                                       // 4342\n                        that['$'+k].val(v);                                                                            // 4343\n                    }                                                                                                  // 4344\n                });                                                                                                    // 4345\n                                                                                                                       // 4346\n                // update days count                                                                                   // 4347\n                if (this.options.smartDays) {                                                                          // 4348\n                    this.fillCombo('day');                                                                             // 4349\n                }                                                                                                      // 4350\n                                                                                                                       // 4351\n               this.$element.val(dt.format(this.options.format)).change();                                             // 4352\n            }                                                                                                          // 4353\n        },                                                                                                             // 4354\n                                                                                                                       // 4355\n        /*                                                                                                             // 4356\n         highlight combos if date is invalid                                                                           // 4357\n        */                                                                                                             // 4358\n        highlight: function(dt) {                                                                                      // 4359\n            if(!dt.isValid()) {                                                                                        // 4360\n                if(this.options.errorClass) {                                                                          // 4361\n                    this.$widget.addClass(this.options.errorClass);                                                    // 4362\n                } else {                                                                                               // 4363\n                    //store original border color                                                                      // 4364\n                    if(!this.borderColor) {                                                                            // 4365\n                        this.borderColor = this.$widget.find('select').css('border-color');                            // 4366\n                    }                                                                                                  // 4367\n                    this.$widget.find('select').css('border-color', 'red');                                            // 4368\n                }                                                                                                      // 4369\n            } else {                                                                                                   // 4370\n                if(this.options.errorClass) {                                                                          // 4371\n                    this.$widget.removeClass(this.options.errorClass);                                                 // 4372\n                } else {                                                                                               // 4373\n                    this.$widget.find('select').css('border-color', this.borderColor);                                 // 4374\n                }                                                                                                      // 4375\n            }                                                                                                          // 4376\n        },                                                                                                             // 4377\n                                                                                                                       // 4378\n        leadZero: function(v) {                                                                                        // 4379\n            return v <= 9 ? '0' + v : v;                                                                               // 4380\n        },                                                                                                             // 4381\n                                                                                                                       // 4382\n        destroy: function() {                                                                                          // 4383\n            this.$widget.remove();                                                                                     // 4384\n            this.$element.removeData('combodate').show();                                                              // 4385\n        }                                                                                                              // 4386\n                                                                                                                       // 4387\n        //todo: clear method                                                                                           // 4388\n    };                                                                                                                 // 4389\n                                                                                                                       // 4390\n    $.fn.combodate = function ( option ) {                                                                             // 4391\n        var d, args = Array.apply(null, arguments);                                                                    // 4392\n        args.shift();                                                                                                  // 4393\n                                                                                                                       // 4394\n        //getValue returns date as string / object (not jQuery object)                                                 // 4395\n        if(option === 'getValue' && this.length && (d = this.eq(0).data('combodate'))) {                               // 4396\n          return d.getValue.apply(d, args);                                                                            // 4397\n        }                                                                                                              // 4398\n                                                                                                                       // 4399\n        return this.each(function () {                                                                                 // 4400\n            var $this = $(this),                                                                                       // 4401\n            data = $this.data('combodate'),                                                                            // 4402\n            options = typeof option == 'object' && option;                                                             // 4403\n            if (!data) {                                                                                               // 4404\n                $this.data('combodate', (data = new Combodate(this, options)));                                        // 4405\n            }                                                                                                          // 4406\n            if (typeof option == 'string' && typeof data[option] == 'function') {                                      // 4407\n                data[option].apply(data, args);                                                                        // 4408\n            }                                                                                                          // 4409\n        });                                                                                                            // 4410\n    };                                                                                                                 // 4411\n                                                                                                                       // 4412\n    $.fn.combodate.defaults = {                                                                                        // 4413\n         //in this format value stored in original input                                                               // 4414\n        format: 'DD-MM-YYYY HH:mm',                                                                                    // 4415\n        //in this format items in dropdowns are displayed                                                              // 4416\n        template: 'D / MMM / YYYY   H : mm',                                                                           // 4417\n        //initial value, can be `new Date()`                                                                           // 4418\n        value: null,                                                                                                   // 4419\n        minYear: 1970,                                                                                                 // 4420\n        maxYear: 2015,                                                                                                 // 4421\n        yearDescending: true,                                                                                          // 4422\n        minuteStep: 5,                                                                                                 // 4423\n        secondStep: 1,                                                                                                 // 4424\n        firstItem: 'empty', //'name', 'empty', 'none'                                                                  // 4425\n        errorClass: null,                                                                                              // 4426\n        roundTime: true, // whether to round minutes and seconds if step > 1                                           // 4427\n        smartDays: false // whether days in combo depend on selected month: 31, 30, 28                                 // 4428\n    };                                                                                                                 // 4429\n                                                                                                                       // 4430\n}(window.jQuery));                                                                                                     // 4431\n/**                                                                                                                    // 4432\nCombodate input - dropdown date and time picker.                                                                       // 4433\nBased on [combodate](http://vitalets.github.com/combodate) plugin (included). To use it you should manually include [momentjs](http://momentjs.com).\n                                                                                                                       // 4435\n    <script src=\"js/moment.min.js\"></script>                                                                           // 4436\n                                                                                                                       // 4437\nAllows to input:                                                                                                       // 4438\n                                                                                                                       // 4439\n* only date                                                                                                            // 4440\n* only time                                                                                                            // 4441\n* both date and time                                                                                                   // 4442\n                                                                                                                       // 4443\nPlease note, that format is taken from momentjs and **not compatible** with bootstrap-datepicker / jquery UI datepicker.  \nInternally value stored as `momentjs` object.                                                                          // 4445\n                                                                                                                       // 4446\n@class combodate                                                                                                       // 4447\n@extends abstractinput                                                                                                 // 4448\n@final                                                                                                                 // 4449\n@since 1.4.0                                                                                                           // 4450\n@example                                                                                                               // 4451\n<a href=\"#\" id=\"dob\" data-type=\"combodate\" data-pk=\"1\" data-url=\"/post\" data-value=\"1984-05-15\" data-title=\"Select date\"></a>\n<script>                                                                                                               // 4453\n$(function(){                                                                                                          // 4454\n    $('#dob').editable({                                                                                               // 4455\n        format: 'YYYY-MM-DD',                                                                                          // 4456\n        viewformat: 'DD.MM.YYYY',                                                                                      // 4457\n        template: 'D / MMMM / YYYY',                                                                                   // 4458\n        combodate: {                                                                                                   // 4459\n                minYear: 2000,                                                                                         // 4460\n                maxYear: 2015,                                                                                         // 4461\n                minuteStep: 1                                                                                          // 4462\n           }                                                                                                           // 4463\n        }                                                                                                              // 4464\n    });                                                                                                                // 4465\n});                                                                                                                    // 4466\n</script>                                                                                                              // 4467\n**/                                                                                                                    // 4468\n                                                                                                                       // 4469\n/*global moment*/                                                                                                      // 4470\n                                                                                                                       // 4471\n(function ($) {                                                                                                        // 4472\n    \"use strict\";                                                                                                      // 4473\n                                                                                                                       // 4474\n    var Constructor = function (options) {                                                                             // 4475\n        this.init('combodate', options, Constructor.defaults);                                                         // 4476\n                                                                                                                       // 4477\n        //by default viewformat equals to format                                                                       // 4478\n        if(!this.options.viewformat) {                                                                                 // 4479\n            this.options.viewformat = this.options.format;                                                             // 4480\n        }                                                                                                              // 4481\n                                                                                                                       // 4482\n        //try parse combodate config defined as json string in data-combodate                                          // 4483\n        options.combodate = $.fn.editableutils.tryParseJson(options.combodate, true);                                  // 4484\n                                                                                                                       // 4485\n        //overriding combodate config (as by default jQuery extend() is not recursive)                                 // 4486\n        this.options.combodate = $.extend({}, Constructor.defaults.combodate, options.combodate, {                     // 4487\n            format: this.options.format,                                                                               // 4488\n            template: this.options.template                                                                            // 4489\n        });                                                                                                            // 4490\n    };                                                                                                                 // 4491\n                                                                                                                       // 4492\n    $.fn.editableutils.inherit(Constructor, $.fn.editabletypes.abstractinput);                                         // 4493\n                                                                                                                       // 4494\n    $.extend(Constructor.prototype, {                                                                                  // 4495\n        render: function () {                                                                                          // 4496\n            this.$input.combodate(this.options.combodate);                                                             // 4497\n                                                                                                                       // 4498\n            if($.fn.editableform.engine === 'bs3') {                                                                   // 4499\n                this.$input.siblings().find('select').addClass('form-control');                                        // 4500\n            }                                                                                                          // 4501\n                                                                                                                       // 4502\n            if(this.options.inputclass) {                                                                              // 4503\n                this.$input.siblings().find('select').addClass(this.options.inputclass);                               // 4504\n            }                                                                                                          // 4505\n            //\"clear\" link                                                                                             // 4506\n            /*                                                                                                         // 4507\n            if(this.options.clear) {                                                                                   // 4508\n                this.$clear = $('<a href=\"#\"></a>').html(this.options.clear).click($.proxy(function(e){                // 4509\n                    e.preventDefault();                                                                                // 4510\n                    e.stopPropagation();                                                                               // 4511\n                    this.clear();                                                                                      // 4512\n                }, this));                                                                                             // 4513\n                                                                                                                       // 4514\n                this.$tpl.parent().append($('<div class=\"editable-clear\">').append(this.$clear));                      // 4515\n            }                                                                                                          // 4516\n            */                                                                                                         // 4517\n        },                                                                                                             // 4518\n                                                                                                                       // 4519\n        value2html: function(value, element) {                                                                         // 4520\n            var text = value ? value.format(this.options.viewformat) : '';                                             // 4521\n            //$(element).text(text);                                                                                   // 4522\n            Constructor.superclass.value2html.call(this, text, element);                                               // 4523\n        },                                                                                                             // 4524\n                                                                                                                       // 4525\n        html2value: function(html) {                                                                                   // 4526\n            return html ? moment(html, this.options.viewformat) : null;                                                // 4527\n        },                                                                                                             // 4528\n                                                                                                                       // 4529\n        value2str: function(value) {                                                                                   // 4530\n            return value ? value.format(this.options.format) : '';                                                     // 4531\n       },                                                                                                              // 4532\n                                                                                                                       // 4533\n       str2value: function(str) {                                                                                      // 4534\n           return str ? moment(str, this.options.format) : null;                                                       // 4535\n       },                                                                                                              // 4536\n                                                                                                                       // 4537\n       value2submit: function(value) {                                                                                 // 4538\n           return this.value2str(value);                                                                               // 4539\n       },                                                                                                              // 4540\n                                                                                                                       // 4541\n       value2input: function(value) {                                                                                  // 4542\n           this.$input.combodate('setValue', value);                                                                   // 4543\n       },                                                                                                              // 4544\n                                                                                                                       // 4545\n       input2value: function() {                                                                                       // 4546\n           return this.$input.combodate('getValue', null);                                                             // 4547\n       },                                                                                                              // 4548\n                                                                                                                       // 4549\n       activate: function() {                                                                                          // 4550\n           this.$input.siblings('.combodate').find('select').eq(0).focus();                                            // 4551\n       },                                                                                                              // 4552\n                                                                                                                       // 4553\n       /*                                                                                                              // 4554\n       clear:  function() {                                                                                            // 4555\n          this.$input.data('datepicker').date = null;                                                                  // 4556\n          this.$input.find('.active').removeClass('active');                                                           // 4557\n       },                                                                                                              // 4558\n       */                                                                                                              // 4559\n                                                                                                                       // 4560\n       autosubmit: function() {                                                                                        // 4561\n                                                                                                                       // 4562\n       }                                                                                                               // 4563\n                                                                                                                       // 4564\n    });                                                                                                                // 4565\n                                                                                                                       // 4566\n    Constructor.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {                                   // 4567\n        /**                                                                                                            // 4568\n        @property tpl                                                                                                  // 4569\n        @default <input type=\"text\">                                                                                   // 4570\n        **/                                                                                                            // 4571\n        tpl:'<input type=\"text\">',                                                                                     // 4572\n        /**                                                                                                            // 4573\n        @property inputclass                                                                                           // 4574\n        @default null                                                                                                  // 4575\n        **/                                                                                                            // 4576\n        inputclass: null,                                                                                              // 4577\n        /**                                                                                                            // 4578\n        Format used for sending value to server. Also applied when converting date from <code>data-value</code> attribute.<br>\n        See list of tokens in [momentjs docs](http://momentjs.com/docs/#/parsing/string-format)                        // 4580\n                                                                                                                       // 4581\n        @property format                                                                                               // 4582\n        @type string                                                                                                   // 4583\n        @default YYYY-MM-DD                                                                                            // 4584\n        **/                                                                                                            // 4585\n        format:'YYYY-MM-DD',                                                                                           // 4586\n        /**                                                                                                            // 4587\n        Format used for displaying date. Also applied when converting date from element's text on init.                // 4588\n        If not specified equals to `format`.                                                                           // 4589\n                                                                                                                       // 4590\n        @property viewformat                                                                                           // 4591\n        @type string                                                                                                   // 4592\n        @default null                                                                                                  // 4593\n        **/                                                                                                            // 4594\n        viewformat: null,                                                                                              // 4595\n        /**                                                                                                            // 4596\n        Template used for displaying dropdowns.                                                                        // 4597\n                                                                                                                       // 4598\n        @property template                                                                                             // 4599\n        @type string                                                                                                   // 4600\n        @default D / MMM / YYYY                                                                                        // 4601\n        **/                                                                                                            // 4602\n        template: 'D / MMM / YYYY',                                                                                    // 4603\n        /**                                                                                                            // 4604\n        Configuration of combodate.                                                                                    // 4605\n        Full list of options: http://vitalets.github.com/combodate/#docs                                               // 4606\n                                                                                                                       // 4607\n        @property combodate                                                                                            // 4608\n        @type object                                                                                                   // 4609\n        @default null                                                                                                  // 4610\n        **/                                                                                                            // 4611\n        combodate: null                                                                                                // 4612\n                                                                                                                       // 4613\n        /*                                                                                                             // 4614\n        (not implemented yet)                                                                                          // 4615\n        Text shown as clear date button.                                                                               // 4616\n        If <code>false</code> clear button will not be rendered.                                                       // 4617\n                                                                                                                       // 4618\n        @property clear                                                                                                // 4619\n        @type boolean|string                                                                                           // 4620\n        @default 'x clear'                                                                                             // 4621\n        */                                                                                                             // 4622\n        //clear: '&times; clear'                                                                                       // 4623\n    });                                                                                                                // 4624\n                                                                                                                       // 4625\n    $.fn.editabletypes.combodate = Constructor;                                                                        // 4626\n                                                                                                                       // 4627\n}(window.jQuery));                                                                                                     // 4628\n                                                                                                                       // 4629\n/*                                                                                                                     // 4630\nEditableform based on Twitter Bootstrap 3                                                                              // 4631\n*/                                                                                                                     // 4632\n(function ($) {                                                                                                        // 4633\n    \"use strict\";                                                                                                      // 4634\n                                                                                                                       // 4635\n    //store parent methods                                                                                             // 4636\n    var pInitInput = $.fn.editableform.Constructor.prototype.initInput;                                                // 4637\n                                                                                                                       // 4638\n    $.extend($.fn.editableform.Constructor.prototype, {                                                                // 4639\n        initTemplate: function() {                                                                                     // 4640\n            this.$form = $($.fn.editableform.template);                                                                // 4641\n            this.$form.find('.control-group').addClass('form-group');                                                  // 4642\n            this.$form.find('.editable-error-block').addClass('help-block');                                           // 4643\n        },                                                                                                             // 4644\n        initInput: function() {                                                                                        // 4645\n            pInitInput.apply(this);                                                                                    // 4646\n                                                                                                                       // 4647\n            //for bs3 set default class `input-sm` to standard inputs                                                  // 4648\n            var emptyInputClass = this.input.options.inputclass === null || this.input.options.inputclass === false;   // 4649\n            var defaultClass = 'input-sm';                                                                             // 4650\n                                                                                                                       // 4651\n            //bs3 add `form-control` class to standard inputs                                                          // 4652\n            var stdtypes = 'text,select,textarea,password,email,url,tel,number,range,time,typeaheadjs'.split(',');     // 4653\n            if(~$.inArray(this.input.type, stdtypes)) {                                                                // 4654\n                this.input.$input.addClass('form-control');                                                            // 4655\n                if(emptyInputClass) {                                                                                  // 4656\n                    this.input.options.inputclass = defaultClass;                                                      // 4657\n                    this.input.$input.addClass(defaultClass);                                                          // 4658\n                }                                                                                                      // 4659\n            }                                                                                                          // 4660\n                                                                                                                       // 4661\n            //apply bs3 size class also to buttons (to fit size of control)                                            // 4662\n            var $btn = this.$form.find('.editable-buttons');                                                           // 4663\n            var classes = emptyInputClass ? [defaultClass] : this.input.options.inputclass.split(' ');                 // 4664\n            for(var i=0; i<classes.length; i++) {                                                                      // 4665\n                // `btn-sm` is default now                                                                             // 4666\n                /*                                                                                                     // 4667\n                if(classes[i].toLowerCase() === 'input-sm') {                                                          // 4668\n                    $btn.find('button').addClass('btn-sm');                                                            // 4669\n                }                                                                                                      // 4670\n                */                                                                                                     // 4671\n                if(classes[i].toLowerCase() === 'input-lg') {                                                          // 4672\n                    $btn.find('button').removeClass('btn-sm').addClass('btn-lg');                                      // 4673\n                }                                                                                                      // 4674\n            }                                                                                                          // 4675\n        }                                                                                                              // 4676\n    });                                                                                                                // 4677\n                                                                                                                       // 4678\n    //buttons                                                                                                          // 4679\n    $.fn.editableform.buttons =                                                                                        // 4680\n      '<button type=\"submit\" class=\"btn btn-primary btn-sm editable-submit\">'+                                         // 4681\n        '<i class=\"glyphicon glyphicon-ok\"></i>'+                                                                      // 4682\n      '</button>'+                                                                                                     // 4683\n      '<button type=\"button\" class=\"btn btn-default btn-sm editable-cancel\">'+                                         // 4684\n        '<i class=\"glyphicon glyphicon-remove\"></i>'+                                                                  // 4685\n      '</button>';                                                                                                     // 4686\n                                                                                                                       // 4687\n    //error classes                                                                                                    // 4688\n    $.fn.editableform.errorGroupClass = 'has-error';                                                                   // 4689\n    $.fn.editableform.errorBlockClass = null;                                                                          // 4690\n    //engine                                                                                                           // 4691\n    $.fn.editableform.engine = 'bs3';                                                                                  // 4692\n}(window.jQuery));                                                                                                     // 4693\n/**                                                                                                                    // 4694\n* Editable Popover3 (for Bootstrap 3)                                                                                  // 4695\n* ---------------------                                                                                                // 4696\n* requires bootstrap-popover.js                                                                                        // 4697\n*/                                                                                                                     // 4698\n(function ($) {                                                                                                        // 4699\n    \"use strict\";                                                                                                      // 4700\n                                                                                                                       // 4701\n    //extend methods                                                                                                   // 4702\n    $.extend($.fn.editableContainer.Popup.prototype, {                                                                 // 4703\n        containerName: 'popover',                                                                                      // 4704\n        containerDataName: 'bs.popover',                                                                               // 4705\n        innerCss: '.popover-content',                                                                                  // 4706\n        defaults: $.fn.popover.Constructor.DEFAULTS,                                                                   // 4707\n                                                                                                                       // 4708\n        initContainer: function(){                                                                                     // 4709\n            $.extend(this.containerOptions, {                                                                          // 4710\n                trigger: 'manual',                                                                                     // 4711\n                selector: false,                                                                                       // 4712\n                content: ' ',                                                                                          // 4713\n                template: this.defaults.template                                                                       // 4714\n            });                                                                                                        // 4715\n                                                                                                                       // 4716\n            //as template property is used in inputs, hide it from popover                                             // 4717\n            var t;                                                                                                     // 4718\n            if(this.$element.data('template')) {                                                                       // 4719\n               t = this.$element.data('template');                                                                     // 4720\n               this.$element.removeData('template');                                                                   // 4721\n            }                                                                                                          // 4722\n                                                                                                                       // 4723\n            this.call(this.containerOptions);                                                                          // 4724\n                                                                                                                       // 4725\n            if(t) {                                                                                                    // 4726\n               //restore data('template')                                                                              // 4727\n               this.$element.data('template', t);                                                                      // 4728\n            }                                                                                                          // 4729\n        },                                                                                                             // 4730\n                                                                                                                       // 4731\n        /* show */                                                                                                     // 4732\n        innerShow: function () {                                                                                       // 4733\n            this.call('show');                                                                                         // 4734\n        },                                                                                                             // 4735\n                                                                                                                       // 4736\n        /* hide */                                                                                                     // 4737\n        innerHide: function () {                                                                                       // 4738\n            this.call('hide');                                                                                         // 4739\n        },                                                                                                             // 4740\n                                                                                                                       // 4741\n        /* destroy */                                                                                                  // 4742\n        innerDestroy: function() {                                                                                     // 4743\n            this.call('destroy');                                                                                      // 4744\n        },                                                                                                             // 4745\n                                                                                                                       // 4746\n        setContainerOption: function(key, value) {                                                                     // 4747\n            this.container().options[key] = value;                                                                     // 4748\n        },                                                                                                             // 4749\n                                                                                                                       // 4750\n        /**                                                                                                            // 4751\n        * move popover to new position. This function mainly copied from bootstrap-popover.                            // 4752\n        */                                                                                                             // 4753\n        /*jshint laxcomma: true, eqeqeq: false*/                                                                       // 4754\n        setPosition: function () {                                                                                     // 4755\n                                                                                                                       // 4756\n            (function() {                                                                                              // 4757\n            /*                                                                                                         // 4758\n                var $tip = this.tip()                                                                                  // 4759\n                , inside                                                                                               // 4760\n                , pos                                                                                                  // 4761\n                , actualWidth                                                                                          // 4762\n                , actualHeight                                                                                         // 4763\n                , placement                                                                                            // 4764\n                , tp                                                                                                   // 4765\n                , tpt                                                                                                  // 4766\n                , tpb                                                                                                  // 4767\n                , tpl                                                                                                  // 4768\n                , tpr;                                                                                                 // 4769\n                                                                                                                       // 4770\n                placement = typeof this.options.placement === 'function' ?                                             // 4771\n                this.options.placement.call(this, $tip[0], this.$element[0]) :                                         // 4772\n                this.options.placement;                                                                                // 4773\n                                                                                                                       // 4774\n                inside = /in/.test(placement);                                                                         // 4775\n                                                                                                                       // 4776\n                $tip                                                                                                   // 4777\n              //  .detach()                                                                                            // 4778\n              //vitalets: remove any placement class because otherwise they dont influence on re-positioning of visible popover\n                .removeClass('top right bottom left')                                                                  // 4780\n                .css({ top: 0, left: 0, display: 'block' });                                                           // 4781\n              //  .insertAfter(this.$element);                                                                         // 4782\n                                                                                                                       // 4783\n                pos = this.getPosition(inside);                                                                        // 4784\n                                                                                                                       // 4785\n                actualWidth = $tip[0].offsetWidth;                                                                     // 4786\n                actualHeight = $tip[0].offsetHeight;                                                                   // 4787\n                                                                                                                       // 4788\n                placement = inside ? placement.split(' ')[1] : placement;                                              // 4789\n                                                                                                                       // 4790\n                tpb = {top: pos.top + pos.height, left: pos.left + pos.width / 2 - actualWidth / 2};                   // 4791\n                tpt = {top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2};                 // 4792\n                tpl = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth};                // 4793\n                tpr = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width};                  // 4794\n                                                                                                                       // 4795\n                switch (placement) {                                                                                   // 4796\n                    case 'bottom':                                                                                     // 4797\n                        if ((tpb.top + actualHeight) > ($(window).scrollTop() + $(window).height())) {                 // 4798\n                            if (tpt.top > $(window).scrollTop()) {                                                     // 4799\n                                placement = 'top';                                                                     // 4800\n                            } else if ((tpr.left + actualWidth) < ($(window).scrollLeft() + $(window).width())) {      // 4801\n                                placement = 'right';                                                                   // 4802\n                            } else if (tpl.left > $(window).scrollLeft()) {                                            // 4803\n                                placement = 'left';                                                                    // 4804\n                            } else {                                                                                   // 4805\n                                placement = 'right';                                                                   // 4806\n                            }                                                                                          // 4807\n                        }                                                                                              // 4808\n                        break;                                                                                         // 4809\n                    case 'top':                                                                                        // 4810\n                        if (tpt.top < $(window).scrollTop()) {                                                         // 4811\n                            if ((tpb.top + actualHeight) < ($(window).scrollTop() + $(window).height())) {             // 4812\n                                placement = 'bottom';                                                                  // 4813\n                            } else if ((tpr.left + actualWidth) < ($(window).scrollLeft() + $(window).width())) {      // 4814\n                                placement = 'right';                                                                   // 4815\n                            } else if (tpl.left > $(window).scrollLeft()) {                                            // 4816\n                                placement = 'left';                                                                    // 4817\n                            } else {                                                                                   // 4818\n                                placement = 'right';                                                                   // 4819\n                            }                                                                                          // 4820\n                        }                                                                                              // 4821\n                        break;                                                                                         // 4822\n                    case 'left':                                                                                       // 4823\n                        if (tpl.left < $(window).scrollLeft()) {                                                       // 4824\n                            if ((tpr.left + actualWidth) < ($(window).scrollLeft() + $(window).width())) {             // 4825\n                                placement = 'right';                                                                   // 4826\n                            } else if (tpt.top > $(window).scrollTop()) {                                              // 4827\n                                placement = 'top';                                                                     // 4828\n                            } else if (tpt.top > $(window).scrollTop()) {                                              // 4829\n                                placement = 'bottom';                                                                  // 4830\n                            } else {                                                                                   // 4831\n                                placement = 'right';                                                                   // 4832\n                            }                                                                                          // 4833\n                        }                                                                                              // 4834\n                        break;                                                                                         // 4835\n                    case 'right':                                                                                      // 4836\n                        if ((tpr.left + actualWidth) > ($(window).scrollLeft() + $(window).width())) {                 // 4837\n                            if (tpl.left > $(window).scrollLeft()) {                                                   // 4838\n                                placement = 'left';                                                                    // 4839\n                            } else if (tpt.top > $(window).scrollTop()) {                                              // 4840\n                                placement = 'top';                                                                     // 4841\n                            } else if (tpt.top > $(window).scrollTop()) {                                              // 4842\n                                placement = 'bottom';                                                                  // 4843\n                            }                                                                                          // 4844\n                        }                                                                                              // 4845\n                        break;                                                                                         // 4846\n                }                                                                                                      // 4847\n                                                                                                                       // 4848\n                switch (placement) {                                                                                   // 4849\n                    case 'bottom':                                                                                     // 4850\n                        tp = tpb;                                                                                      // 4851\n                        break;                                                                                         // 4852\n                    case 'top':                                                                                        // 4853\n                        tp = tpt;                                                                                      // 4854\n                        break;                                                                                         // 4855\n                    case 'left':                                                                                       // 4856\n                        tp = tpl;                                                                                      // 4857\n                        break;                                                                                         // 4858\n                    case 'right':                                                                                      // 4859\n                        tp = tpr;                                                                                      // 4860\n                        break;                                                                                         // 4861\n                }                                                                                                      // 4862\n                                                                                                                       // 4863\n                $tip                                                                                                   // 4864\n                .offset(tp)                                                                                            // 4865\n                .addClass(placement)                                                                                   // 4866\n                .addClass('in');                                                                                       // 4867\n           */                                                                                                          // 4868\n                                                                                                                       // 4869\n                                                                                                                       // 4870\n            var $tip = this.tip();                                                                                     // 4871\n                                                                                                                       // 4872\n            var placement = typeof this.options.placement == 'function' ?                                              // 4873\n                this.options.placement.call(this, $tip[0], this.$element[0]) :                                         // 4874\n                this.options.placement;                                                                                // 4875\n                                                                                                                       // 4876\n            var autoToken = /\\s?auto?\\s?/i;                                                                            // 4877\n            var autoPlace = autoToken.test(placement);                                                                 // 4878\n            if (autoPlace) {                                                                                           // 4879\n                placement = placement.replace(autoToken, '') || 'top';                                                 // 4880\n            }                                                                                                          // 4881\n                                                                                                                       // 4882\n                                                                                                                       // 4883\n            var pos = this.getPosition();                                                                              // 4884\n            var actualWidth = $tip[0].offsetWidth;                                                                     // 4885\n            var actualHeight = $tip[0].offsetHeight;                                                                   // 4886\n                                                                                                                       // 4887\n            if (autoPlace) {                                                                                           // 4888\n                var $parent = this.$element.parent();                                                                  // 4889\n                                                                                                                       // 4890\n                var orgPlacement = placement;                                                                          // 4891\n                var docScroll    = document.documentElement.scrollTop || document.body.scrollTop;                      // 4892\n                var parentWidth  = this.options.container == 'body' ? window.innerWidth  : $parent.outerWidth();       // 4893\n                var parentHeight = this.options.container == 'body' ? window.innerHeight : $parent.outerHeight();      // 4894\n                var parentLeft   = this.options.container == 'body' ? 0 : $parent.offset().left;                       // 4895\n                                                                                                                       // 4896\n                placement = placement == 'bottom' && pos.top   + pos.height  + actualHeight - docScroll > parentHeight  ? 'top'    :\n                            placement == 'top'    && pos.top   - docScroll   - actualHeight < 0                         ? 'bottom' :\n                            placement == 'right'  && pos.right + actualWidth > parentWidth                              ? 'left'   :\n                            placement == 'left'   && pos.left  - actualWidth < parentLeft                               ? 'right'  :\n                            placement;                                                                                 // 4901\n                                                                                                                       // 4902\n                $tip                                                                                                   // 4903\n                  .removeClass(orgPlacement)                                                                           // 4904\n                  .addClass(placement);                                                                                // 4905\n            }                                                                                                          // 4906\n                                                                                                                       // 4907\n                                                                                                                       // 4908\n            var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight);                // 4909\n                                                                                                                       // 4910\n            this.applyPlacement(calculatedOffset, placement);                                                          // 4911\n                                                                                                                       // 4912\n                                                                                                                       // 4913\n            }).call(this.container());                                                                                 // 4914\n          /*jshint laxcomma: false, eqeqeq: true*/                                                                     // 4915\n        }                                                                                                              // 4916\n    });                                                                                                                // 4917\n                                                                                                                       // 4918\n}(window.jQuery));                                                                                                     // 4919\n                                                                                                                       // 4920\n/* =========================================================                                                           // 4921\n * bootstrap-datepicker.js                                                                                             // 4922\n * http://www.eyecon.ro/bootstrap-datepicker                                                                           // 4923\n * =========================================================                                                           // 4924\n * Copyright 2012 Stefan Petre                                                                                         // 4925\n * Improvements by Andrew Rowls                                                                                        // 4926\n *                                                                                                                     // 4927\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 4928\n * you may not use this file except in compliance with the License.                                                    // 4929\n * You may obtain a copy of the License at                                                                             // 4930\n *                                                                                                                     // 4931\n * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 4932\n *                                                                                                                     // 4933\n * Unless required by applicable law or agreed to in writing, software                                                 // 4934\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 4935\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 4936\n * See the License for the specific language governing permissions and                                                 // 4937\n * limitations under the License.                                                                                      // 4938\n * ========================================================= */                                                        // 4939\n                                                                                                                       // 4940\n(function( $ ) {                                                                                                       // 4941\n                                                                                                                       // 4942\n\tfunction UTCDate(){                                                                                                   // 4943\n\t\treturn new Date(Date.UTC.apply(Date, arguments));                                                                    // 4944\n\t}                                                                                                                     // 4945\n\tfunction UTCToday(){                                                                                                  // 4946\n\t\tvar today = new Date();                                                                                              // 4947\n\t\treturn UTCDate(today.getUTCFullYear(), today.getUTCMonth(), today.getUTCDate());                                     // 4948\n\t}                                                                                                                     // 4949\n                                                                                                                       // 4950\n\t// Picker object                                                                                                      // 4951\n                                                                                                                       // 4952\n\tvar Datepicker = function(element, options) {                                                                         // 4953\n\t\tvar that = this;                                                                                                     // 4954\n                                                                                                                       // 4955\n\t\tthis._process_options(options);                                                                                      // 4956\n                                                                                                                       // 4957\n\t\tthis.element = $(element);                                                                                           // 4958\n\t\tthis.isInline = false;                                                                                               // 4959\n\t\tthis.isInput = this.element.is('input');                                                                             // 4960\n\t\tthis.component = this.element.is('.date') ? this.element.find('.add-on, .btn') : false;                              // 4961\n\t\tthis.hasInput = this.component && this.element.find('input').length;                                                 // 4962\n\t\tif(this.component && this.component.length === 0)                                                                    // 4963\n\t\t\tthis.component = false;                                                                                             // 4964\n                                                                                                                       // 4965\n\t\tthis.picker = $(DPGlobal.template);                                                                                  // 4966\n\t\tthis._buildEvents();                                                                                                 // 4967\n\t\tthis._attachEvents();                                                                                                // 4968\n                                                                                                                       // 4969\n\t\tif(this.isInline) {                                                                                                  // 4970\n\t\t\tthis.picker.addClass('datepicker-inline').appendTo(this.element);                                                   // 4971\n\t\t} else {                                                                                                             // 4972\n\t\t\tthis.picker.addClass('datepicker-dropdown dropdown-menu');                                                          // 4973\n\t\t}                                                                                                                    // 4974\n                                                                                                                       // 4975\n\t\tif (this.o.rtl){                                                                                                     // 4976\n\t\t\tthis.picker.addClass('datepicker-rtl');                                                                             // 4977\n\t\t\tthis.picker.find('.prev i, .next i')                                                                                // 4978\n\t\t\t\t\t\t.toggleClass('icon-arrow-left icon-arrow-right');                                                                // 4979\n\t\t}                                                                                                                    // 4980\n                                                                                                                       // 4981\n                                                                                                                       // 4982\n\t\tthis.viewMode = this.o.startView;                                                                                    // 4983\n                                                                                                                       // 4984\n\t\tif (this.o.calendarWeeks)                                                                                            // 4985\n\t\t\tthis.picker.find('tfoot th.today')                                                                                  // 4986\n\t\t\t\t\t\t.attr('colspan', function(i, val){                                                                               // 4987\n\t\t\t\t\t\t\treturn parseInt(val) + 1;                                                                                       // 4988\n\t\t\t\t\t\t});                                                                                                              // 4989\n                                                                                                                       // 4990\n\t\tthis._allow_update = false;                                                                                          // 4991\n                                                                                                                       // 4992\n\t\tthis.setStartDate(this.o.startDate);                                                                                 // 4993\n\t\tthis.setEndDate(this.o.endDate);                                                                                     // 4994\n\t\tthis.setDaysOfWeekDisabled(this.o.daysOfWeekDisabled);                                                               // 4995\n                                                                                                                       // 4996\n\t\tthis.fillDow();                                                                                                      // 4997\n\t\tthis.fillMonths();                                                                                                   // 4998\n                                                                                                                       // 4999\n\t\tthis._allow_update = true;                                                                                           // 5000\n                                                                                                                       // 5001\n\t\tthis.update();                                                                                                       // 5002\n\t\tthis.showMode();                                                                                                     // 5003\n                                                                                                                       // 5004\n\t\tif(this.isInline) {                                                                                                  // 5005\n\t\t\tthis.show();                                                                                                        // 5006\n\t\t}                                                                                                                    // 5007\n\t};                                                                                                                    // 5008\n                                                                                                                       // 5009\n\tDatepicker.prototype = {                                                                                              // 5010\n\t\tconstructor: Datepicker,                                                                                             // 5011\n                                                                                                                       // 5012\n\t\t_process_options: function(opts){                                                                                    // 5013\n\t\t\t// Store raw options for reference                                                                                  // 5014\n\t\t\tthis._o = $.extend({}, this._o, opts);                                                                              // 5015\n\t\t\t// Processed options                                                                                                // 5016\n\t\t\tvar o = this.o = $.extend({}, this._o);                                                                             // 5017\n                                                                                                                       // 5018\n\t\t\t// Check if \"de-DE\" style date is available, if not language should                                                 // 5019\n\t\t\t// fallback to 2 letter code eg \"de\"                                                                                // 5020\n\t\t\tvar lang = o.language;                                                                                              // 5021\n\t\t\tif (!dates[lang]) {                                                                                                 // 5022\n\t\t\t\tlang = lang.split('-')[0];                                                                                         // 5023\n\t\t\t\tif (!dates[lang])                                                                                                  // 5024\n\t\t\t\t\tlang = defaults.language;                                                                                         // 5025\n\t\t\t}                                                                                                                   // 5026\n\t\t\to.language = lang;                                                                                                  // 5027\n                                                                                                                       // 5028\n\t\t\tswitch(o.startView){                                                                                                // 5029\n\t\t\t\tcase 2:                                                                                                            // 5030\n\t\t\t\tcase 'decade':                                                                                                     // 5031\n\t\t\t\t\to.startView = 2;                                                                                                  // 5032\n\t\t\t\t\tbreak;                                                                                                            // 5033\n\t\t\t\tcase 1:                                                                                                            // 5034\n\t\t\t\tcase 'year':                                                                                                       // 5035\n\t\t\t\t\to.startView = 1;                                                                                                  // 5036\n\t\t\t\t\tbreak;                                                                                                            // 5037\n\t\t\t\tdefault:                                                                                                           // 5038\n\t\t\t\t\to.startView = 0;                                                                                                  // 5039\n\t\t\t}                                                                                                                   // 5040\n                                                                                                                       // 5041\n\t\t\tswitch (o.minViewMode) {                                                                                            // 5042\n\t\t\t\tcase 1:                                                                                                            // 5043\n\t\t\t\tcase 'months':                                                                                                     // 5044\n\t\t\t\t\to.minViewMode = 1;                                                                                                // 5045\n\t\t\t\t\tbreak;                                                                                                            // 5046\n\t\t\t\tcase 2:                                                                                                            // 5047\n\t\t\t\tcase 'years':                                                                                                      // 5048\n\t\t\t\t\to.minViewMode = 2;                                                                                                // 5049\n\t\t\t\t\tbreak;                                                                                                            // 5050\n\t\t\t\tdefault:                                                                                                           // 5051\n\t\t\t\t\to.minViewMode = 0;                                                                                                // 5052\n\t\t\t}                                                                                                                   // 5053\n                                                                                                                       // 5054\n\t\t\to.startView = Math.max(o.startView, o.minViewMode);                                                                 // 5055\n                                                                                                                       // 5056\n\t\t\to.weekStart %= 7;                                                                                                   // 5057\n\t\t\to.weekEnd = ((o.weekStart + 6) % 7);                                                                                // 5058\n                                                                                                                       // 5059\n\t\t\tvar format = DPGlobal.parseFormat(o.format)                                                                         // 5060\n\t\t\tif (o.startDate !== -Infinity) {                                                                                    // 5061\n\t\t\t\to.startDate = DPGlobal.parseDate(o.startDate, format, o.language);                                                 // 5062\n\t\t\t}                                                                                                                   // 5063\n\t\t\tif (o.endDate !== Infinity) {                                                                                       // 5064\n\t\t\t\to.endDate = DPGlobal.parseDate(o.endDate, format, o.language);                                                     // 5065\n\t\t\t}                                                                                                                   // 5066\n                                                                                                                       // 5067\n\t\t\to.daysOfWeekDisabled = o.daysOfWeekDisabled||[];                                                                    // 5068\n\t\t\tif (!$.isArray(o.daysOfWeekDisabled))                                                                               // 5069\n\t\t\t\to.daysOfWeekDisabled = o.daysOfWeekDisabled.split(/[,\\s]*/);                                                       // 5070\n\t\t\to.daysOfWeekDisabled = $.map(o.daysOfWeekDisabled, function (d) {                                                   // 5071\n\t\t\t\treturn parseInt(d, 10);                                                                                            // 5072\n\t\t\t});                                                                                                                 // 5073\n\t\t},                                                                                                                   // 5074\n\t\t_events: [],                                                                                                         // 5075\n\t\t_secondaryEvents: [],                                                                                                // 5076\n\t\t_applyEvents: function(evs){                                                                                         // 5077\n\t\t\tfor (var i=0, el, ev; i<evs.length; i++){                                                                           // 5078\n\t\t\t\tel = evs[i][0];                                                                                                    // 5079\n\t\t\t\tev = evs[i][1];                                                                                                    // 5080\n\t\t\t\tel.on(ev);                                                                                                         // 5081\n\t\t\t}                                                                                                                   // 5082\n\t\t},                                                                                                                   // 5083\n\t\t_unapplyEvents: function(evs){                                                                                       // 5084\n\t\t\tfor (var i=0, el, ev; i<evs.length; i++){                                                                           // 5085\n\t\t\t\tel = evs[i][0];                                                                                                    // 5086\n\t\t\t\tev = evs[i][1];                                                                                                    // 5087\n\t\t\t\tel.off(ev);                                                                                                        // 5088\n\t\t\t}                                                                                                                   // 5089\n\t\t},                                                                                                                   // 5090\n\t\t_buildEvents: function(){                                                                                            // 5091\n\t\t\tif (this.isInput) { // single input                                                                                 // 5092\n\t\t\t\tthis._events = [                                                                                                   // 5093\n\t\t\t\t\t[this.element, {                                                                                                  // 5094\n\t\t\t\t\t\tfocus: $.proxy(this.show, this),                                                                                 // 5095\n\t\t\t\t\t\tkeyup: $.proxy(this.update, this),                                                                               // 5096\n\t\t\t\t\t\tkeydown: $.proxy(this.keydown, this)                                                                             // 5097\n\t\t\t\t\t}]                                                                                                                // 5098\n\t\t\t\t];                                                                                                                 // 5099\n\t\t\t}                                                                                                                   // 5100\n\t\t\telse if (this.component && this.hasInput){ // component: input + button                                             // 5101\n\t\t\t\tthis._events = [                                                                                                   // 5102\n\t\t\t\t\t// For components that are not readonly, allow keyboard nav                                                       // 5103\n\t\t\t\t\t[this.element.find('input'), {                                                                                    // 5104\n\t\t\t\t\t\tfocus: $.proxy(this.show, this),                                                                                 // 5105\n\t\t\t\t\t\tkeyup: $.proxy(this.update, this),                                                                               // 5106\n\t\t\t\t\t\tkeydown: $.proxy(this.keydown, this)                                                                             // 5107\n\t\t\t\t\t}],                                                                                                               // 5108\n\t\t\t\t\t[this.component, {                                                                                                // 5109\n\t\t\t\t\t\tclick: $.proxy(this.show, this)                                                                                  // 5110\n\t\t\t\t\t}]                                                                                                                // 5111\n\t\t\t\t];                                                                                                                 // 5112\n\t\t\t}                                                                                                                   // 5113\n\t\t\telse if (this.element.is('div')) {  // inline datepicker                                                            // 5114\n\t\t\t\tthis.isInline = true;                                                                                              // 5115\n\t\t\t}                                                                                                                   // 5116\n\t\t\telse {                                                                                                              // 5117\n\t\t\t\tthis._events = [                                                                                                   // 5118\n\t\t\t\t\t[this.element, {                                                                                                  // 5119\n\t\t\t\t\t\tclick: $.proxy(this.show, this)                                                                                  // 5120\n\t\t\t\t\t}]                                                                                                                // 5121\n\t\t\t\t];                                                                                                                 // 5122\n\t\t\t}                                                                                                                   // 5123\n                                                                                                                       // 5124\n\t\t\tthis._secondaryEvents = [                                                                                           // 5125\n\t\t\t\t[this.picker, {                                                                                                    // 5126\n\t\t\t\t\tclick: $.proxy(this.click, this)                                                                                  // 5127\n\t\t\t\t}],                                                                                                                // 5128\n\t\t\t\t[$(window), {                                                                                                      // 5129\n\t\t\t\t\tresize: $.proxy(this.place, this)                                                                                 // 5130\n\t\t\t\t}],                                                                                                                // 5131\n\t\t\t\t[$(document), {                                                                                                    // 5132\n\t\t\t\t\tmousedown: $.proxy(function (e) {                                                                                 // 5133\n\t\t\t\t\t\t// Clicked outside the datepicker, hide it                                                                       // 5134\n\t\t\t\t\t\tif (!(                                                                                                           // 5135\n\t\t\t\t\t\t\tthis.element.is(e.target) ||                                                                                    // 5136\n\t\t\t\t\t\t\tthis.element.find(e.target).size() ||                                                                           // 5137\n\t\t\t\t\t\t\tthis.picker.is(e.target) ||                                                                                     // 5138\n\t\t\t\t\t\t\tthis.picker.find(e.target).size()                                                                               // 5139\n\t\t\t\t\t\t)) {                                                                                                             // 5140\n\t\t\t\t\t\t\tthis.hide();                                                                                                    // 5141\n\t\t\t\t\t\t}                                                                                                                // 5142\n\t\t\t\t\t}, this)                                                                                                          // 5143\n\t\t\t\t}]                                                                                                                 // 5144\n\t\t\t];                                                                                                                  // 5145\n\t\t},                                                                                                                   // 5146\n\t\t_attachEvents: function(){                                                                                           // 5147\n\t\t\tthis._detachEvents();                                                                                               // 5148\n\t\t\tthis._applyEvents(this._events);                                                                                    // 5149\n\t\t},                                                                                                                   // 5150\n\t\t_detachEvents: function(){                                                                                           // 5151\n\t\t\tthis._unapplyEvents(this._events);                                                                                  // 5152\n\t\t},                                                                                                                   // 5153\n\t\t_attachSecondaryEvents: function(){                                                                                  // 5154\n\t\t\tthis._detachSecondaryEvents();                                                                                      // 5155\n\t\t\tthis._applyEvents(this._secondaryEvents);                                                                           // 5156\n\t\t},                                                                                                                   // 5157\n\t\t_detachSecondaryEvents: function(){                                                                                  // 5158\n\t\t\tthis._unapplyEvents(this._secondaryEvents);                                                                         // 5159\n\t\t},                                                                                                                   // 5160\n\t\t_trigger: function(event, altdate){                                                                                  // 5161\n\t\t\tvar date = altdate || this.date,                                                                                    // 5162\n\t\t\t\tlocal_date = new Date(date.getTime() + (date.getTimezoneOffset()*60000));                                          // 5163\n                                                                                                                       // 5164\n\t\t\tthis.element.trigger({                                                                                              // 5165\n\t\t\t\ttype: event,                                                                                                       // 5166\n\t\t\t\tdate: local_date,                                                                                                  // 5167\n\t\t\t\tformat: $.proxy(function(altformat){                                                                               // 5168\n\t\t\t\t\tvar format = altformat || this.o.format;                                                                          // 5169\n\t\t\t\t\treturn DPGlobal.formatDate(date, format, this.o.language);                                                        // 5170\n\t\t\t\t}, this)                                                                                                           // 5171\n\t\t\t});                                                                                                                 // 5172\n\t\t},                                                                                                                   // 5173\n                                                                                                                       // 5174\n\t\tshow: function(e) {                                                                                                  // 5175\n\t\t\tif (!this.isInline)                                                                                                 // 5176\n\t\t\t\tthis.picker.appendTo('body');                                                                                      // 5177\n\t\t\tthis.picker.show();                                                                                                 // 5178\n\t\t\tthis.height = this.component ? this.component.outerHeight() : this.element.outerHeight();                           // 5179\n\t\t\tthis.place();                                                                                                       // 5180\n\t\t\tthis._attachSecondaryEvents();                                                                                      // 5181\n\t\t\tif (e) {                                                                                                            // 5182\n\t\t\t\te.preventDefault();                                                                                                // 5183\n\t\t\t}                                                                                                                   // 5184\n\t\t\tthis._trigger('show');                                                                                              // 5185\n\t\t},                                                                                                                   // 5186\n                                                                                                                       // 5187\n\t\thide: function(e){                                                                                                   // 5188\n\t\t\tif(this.isInline) return;                                                                                           // 5189\n\t\t\tif (!this.picker.is(':visible')) return;                                                                            // 5190\n\t\t\tthis.picker.hide().detach();                                                                                        // 5191\n\t\t\tthis._detachSecondaryEvents();                                                                                      // 5192\n\t\t\tthis.viewMode = this.o.startView;                                                                                   // 5193\n\t\t\tthis.showMode();                                                                                                    // 5194\n                                                                                                                       // 5195\n\t\t\tif (                                                                                                                // 5196\n\t\t\t\tthis.o.forceParse &&                                                                                               // 5197\n\t\t\t\t(                                                                                                                  // 5198\n\t\t\t\t\tthis.isInput && this.element.val() ||                                                                             // 5199\n\t\t\t\t\tthis.hasInput && this.element.find('input').val()                                                                 // 5200\n\t\t\t\t)                                                                                                                  // 5201\n\t\t\t)                                                                                                                   // 5202\n\t\t\t\tthis.setValue();                                                                                                   // 5203\n\t\t\tthis._trigger('hide');                                                                                              // 5204\n\t\t},                                                                                                                   // 5205\n                                                                                                                       // 5206\n\t\tremove: function() {                                                                                                 // 5207\n\t\t\tthis.hide();                                                                                                        // 5208\n\t\t\tthis._detachEvents();                                                                                               // 5209\n\t\t\tthis._detachSecondaryEvents();                                                                                      // 5210\n\t\t\tthis.picker.remove();                                                                                               // 5211\n\t\t\tdelete this.element.data().datepicker;                                                                              // 5212\n\t\t\tif (!this.isInput) {                                                                                                // 5213\n\t\t\t\tdelete this.element.data().date;                                                                                   // 5214\n\t\t\t}                                                                                                                   // 5215\n\t\t},                                                                                                                   // 5216\n                                                                                                                       // 5217\n\t\tgetDate: function() {                                                                                                // 5218\n\t\t\tvar d = this.getUTCDate();                                                                                          // 5219\n\t\t\treturn new Date(d.getTime() + (d.getTimezoneOffset()*60000));                                                       // 5220\n\t\t},                                                                                                                   // 5221\n                                                                                                                       // 5222\n\t\tgetUTCDate: function() {                                                                                             // 5223\n\t\t\treturn this.date;                                                                                                   // 5224\n\t\t},                                                                                                                   // 5225\n                                                                                                                       // 5226\n\t\tsetDate: function(d) {                                                                                               // 5227\n\t\t\tthis.setUTCDate(new Date(d.getTime() - (d.getTimezoneOffset()*60000)));                                             // 5228\n\t\t},                                                                                                                   // 5229\n                                                                                                                       // 5230\n\t\tsetUTCDate: function(d) {                                                                                            // 5231\n\t\t\tthis.date = d;                                                                                                      // 5232\n\t\t\tthis.setValue();                                                                                                    // 5233\n\t\t},                                                                                                                   // 5234\n                                                                                                                       // 5235\n\t\tsetValue: function() {                                                                                               // 5236\n\t\t\tvar formatted = this.getFormattedDate();                                                                            // 5237\n\t\t\tif (!this.isInput) {                                                                                                // 5238\n\t\t\t\tif (this.component){                                                                                               // 5239\n\t\t\t\t\tthis.element.find('input').val(formatted);                                                                        // 5240\n\t\t\t\t}                                                                                                                  // 5241\n\t\t\t} else {                                                                                                            // 5242\n\t\t\t\tthis.element.val(formatted);                                                                                       // 5243\n\t\t\t}                                                                                                                   // 5244\n\t\t},                                                                                                                   // 5245\n                                                                                                                       // 5246\n\t\tgetFormattedDate: function(format) {                                                                                 // 5247\n\t\t\tif (format === undefined)                                                                                           // 5248\n\t\t\t\tformat = this.o.format;                                                                                            // 5249\n\t\t\treturn DPGlobal.formatDate(this.date, format, this.o.language);                                                     // 5250\n\t\t},                                                                                                                   // 5251\n                                                                                                                       // 5252\n\t\tsetStartDate: function(startDate){                                                                                   // 5253\n\t\t\tthis._process_options({startDate: startDate});                                                                      // 5254\n\t\t\tthis.update();                                                                                                      // 5255\n\t\t\tthis.updateNavArrows();                                                                                             // 5256\n\t\t},                                                                                                                   // 5257\n                                                                                                                       // 5258\n\t\tsetEndDate: function(endDate){                                                                                       // 5259\n\t\t\tthis._process_options({endDate: endDate});                                                                          // 5260\n\t\t\tthis.update();                                                                                                      // 5261\n\t\t\tthis.updateNavArrows();                                                                                             // 5262\n\t\t},                                                                                                                   // 5263\n                                                                                                                       // 5264\n\t\tsetDaysOfWeekDisabled: function(daysOfWeekDisabled){                                                                 // 5265\n\t\t\tthis._process_options({daysOfWeekDisabled: daysOfWeekDisabled});                                                    // 5266\n\t\t\tthis.update();                                                                                                      // 5267\n\t\t\tthis.updateNavArrows();                                                                                             // 5268\n\t\t},                                                                                                                   // 5269\n                                                                                                                       // 5270\n\t\tplace: function(){                                                                                                   // 5271\n\t\t\t\t\t\tif(this.isInline) return;                                                                                        // 5272\n\t\t\tvar zIndex = parseInt(this.element.parents().filter(function() {                                                    // 5273\n\t\t\t\t\t\t\treturn $(this).css('z-index') != 'auto';                                                                        // 5274\n\t\t\t\t\t\t}).first().css('z-index'))+10;                                                                                   // 5275\n\t\t\tvar offset = this.component ? this.component.parent().offset() : this.element.offset();                             // 5276\n\t\t\tvar height = this.component ? this.component.outerHeight(true) : this.element.outerHeight(true);                    // 5277\n\t\t\tthis.picker.css({                                                                                                   // 5278\n\t\t\t\ttop: offset.top + height,                                                                                          // 5279\n\t\t\t\tleft: offset.left,                                                                                                 // 5280\n\t\t\t\tzIndex: zIndex                                                                                                     // 5281\n\t\t\t});                                                                                                                 // 5282\n\t\t},                                                                                                                   // 5283\n                                                                                                                       // 5284\n\t\t_allow_update: true,                                                                                                 // 5285\n\t\tupdate: function(){                                                                                                  // 5286\n\t\t\tif (!this._allow_update) return;                                                                                    // 5287\n                                                                                                                       // 5288\n\t\t\tvar date, fromArgs = false;                                                                                         // 5289\n\t\t\tif(arguments && arguments.length && (typeof arguments[0] === 'string' || arguments[0] instanceof Date)) {           // 5290\n\t\t\t\tdate = arguments[0];                                                                                               // 5291\n\t\t\t\tfromArgs = true;                                                                                                   // 5292\n\t\t\t} else {                                                                                                            // 5293\n\t\t\t\tdate = this.isInput ? this.element.val() : this.element.data('date') || this.element.find('input').val();          // 5294\n\t\t\t\tdelete this.element.data().date;                                                                                   // 5295\n\t\t\t}                                                                                                                   // 5296\n                                                                                                                       // 5297\n\t\t\tthis.date = DPGlobal.parseDate(date, this.o.format, this.o.language);                                               // 5298\n                                                                                                                       // 5299\n\t\t\tif(fromArgs) this.setValue();                                                                                       // 5300\n                                                                                                                       // 5301\n\t\t\tif (this.date < this.o.startDate) {                                                                                 // 5302\n\t\t\t\tthis.viewDate = new Date(this.o.startDate);                                                                        // 5303\n\t\t\t} else if (this.date > this.o.endDate) {                                                                            // 5304\n\t\t\t\tthis.viewDate = new Date(this.o.endDate);                                                                          // 5305\n\t\t\t} else {                                                                                                            // 5306\n\t\t\t\tthis.viewDate = new Date(this.date);                                                                               // 5307\n\t\t\t}                                                                                                                   // 5308\n\t\t\tthis.fill();                                                                                                        // 5309\n\t\t},                                                                                                                   // 5310\n                                                                                                                       // 5311\n\t\tfillDow: function(){                                                                                                 // 5312\n\t\t\tvar dowCnt = this.o.weekStart,                                                                                      // 5313\n\t\t\thtml = '<tr>';                                                                                                      // 5314\n\t\t\tif(this.o.calendarWeeks){                                                                                           // 5315\n\t\t\t\tvar cell = '<th class=\"cw\">&nbsp;</th>';                                                                           // 5316\n\t\t\t\thtml += cell;                                                                                                      // 5317\n\t\t\t\tthis.picker.find('.datepicker-days thead tr:first-child').prepend(cell);                                           // 5318\n\t\t\t}                                                                                                                   // 5319\n\t\t\twhile (dowCnt < this.o.weekStart + 7) {                                                                             // 5320\n\t\t\t\thtml += '<th class=\"dow\">'+dates[this.o.language].daysMin[(dowCnt++)%7]+'</th>';                                   // 5321\n\t\t\t}                                                                                                                   // 5322\n\t\t\thtml += '</tr>';                                                                                                    // 5323\n\t\t\tthis.picker.find('.datepicker-days thead').append(html);                                                            // 5324\n\t\t},                                                                                                                   // 5325\n                                                                                                                       // 5326\n\t\tfillMonths: function(){                                                                                              // 5327\n\t\t\tvar html = '',                                                                                                      // 5328\n\t\t\ti = 0;                                                                                                              // 5329\n\t\t\twhile (i < 12) {                                                                                                    // 5330\n\t\t\t\thtml += '<span class=\"month\">'+dates[this.o.language].monthsShort[i++]+'</span>';                                  // 5331\n\t\t\t}                                                                                                                   // 5332\n\t\t\tthis.picker.find('.datepicker-months td').html(html);                                                               // 5333\n\t\t},                                                                                                                   // 5334\n                                                                                                                       // 5335\n\t\tsetRange: function(range){                                                                                           // 5336\n\t\t\tif (!range || !range.length)                                                                                        // 5337\n\t\t\t\tdelete this.range;                                                                                                 // 5338\n\t\t\telse                                                                                                                // 5339\n\t\t\t\tthis.range = $.map(range, function(d){ return d.valueOf(); });                                                     // 5340\n\t\t\tthis.fill();                                                                                                        // 5341\n\t\t},                                                                                                                   // 5342\n                                                                                                                       // 5343\n\t\tgetClassNames: function(date){                                                                                       // 5344\n\t\t\tvar cls = [],                                                                                                       // 5345\n\t\t\t\tyear = this.viewDate.getUTCFullYear(),                                                                             // 5346\n\t\t\t\tmonth = this.viewDate.getUTCMonth(),                                                                               // 5347\n\t\t\t\tcurrentDate = this.date.valueOf(),                                                                                 // 5348\n\t\t\t\ttoday = new Date();                                                                                                // 5349\n\t\t\tif (date.getUTCFullYear() < year || (date.getUTCFullYear() == year && date.getUTCMonth() < month)) {                // 5350\n\t\t\t\tcls.push('old');                                                                                                   // 5351\n\t\t\t} else if (date.getUTCFullYear() > year || (date.getUTCFullYear() == year && date.getUTCMonth() > month)) {         // 5352\n\t\t\t\tcls.push('new');                                                                                                   // 5353\n\t\t\t}                                                                                                                   // 5354\n\t\t\t// Compare internal UTC date with local today, not UTC today                                                        // 5355\n\t\t\tif (this.o.todayHighlight &&                                                                                        // 5356\n\t\t\t\tdate.getUTCFullYear() == today.getFullYear() &&                                                                    // 5357\n\t\t\t\tdate.getUTCMonth() == today.getMonth() &&                                                                          // 5358\n\t\t\t\tdate.getUTCDate() == today.getDate()) {                                                                            // 5359\n\t\t\t\tcls.push('today');                                                                                                 // 5360\n\t\t\t}                                                                                                                   // 5361\n\t\t\tif (currentDate && date.valueOf() == currentDate) {                                                                 // 5362\n\t\t\t\tcls.push('active');                                                                                                // 5363\n\t\t\t}                                                                                                                   // 5364\n\t\t\tif (date.valueOf() < this.o.startDate || date.valueOf() > this.o.endDate ||                                         // 5365\n\t\t\t\t$.inArray(date.getUTCDay(), this.o.daysOfWeekDisabled) !== -1) {                                                   // 5366\n\t\t\t\tcls.push('disabled');                                                                                              // 5367\n\t\t\t}                                                                                                                   // 5368\n\t\t\tif (this.range){                                                                                                    // 5369\n\t\t\t\tif (date > this.range[0] && date < this.range[this.range.length-1]){                                               // 5370\n\t\t\t\t\tcls.push('range');                                                                                                // 5371\n\t\t\t\t}                                                                                                                  // 5372\n\t\t\t\tif ($.inArray(date.valueOf(), this.range) != -1){                                                                  // 5373\n\t\t\t\t\tcls.push('selected');                                                                                             // 5374\n\t\t\t\t}                                                                                                                  // 5375\n\t\t\t}                                                                                                                   // 5376\n\t\t\treturn cls;                                                                                                         // 5377\n\t\t},                                                                                                                   // 5378\n                                                                                                                       // 5379\n\t\tfill: function() {                                                                                                   // 5380\n\t\t\tvar d = new Date(this.viewDate),                                                                                    // 5381\n\t\t\t\tyear = d.getUTCFullYear(),                                                                                         // 5382\n\t\t\t\tmonth = d.getUTCMonth(),                                                                                           // 5383\n\t\t\t\tstartYear = this.o.startDate !== -Infinity ? this.o.startDate.getUTCFullYear() : -Infinity,                        // 5384\n\t\t\t\tstartMonth = this.o.startDate !== -Infinity ? this.o.startDate.getUTCMonth() : -Infinity,                          // 5385\n\t\t\t\tendYear = this.o.endDate !== Infinity ? this.o.endDate.getUTCFullYear() : Infinity,                                // 5386\n\t\t\t\tendMonth = this.o.endDate !== Infinity ? this.o.endDate.getUTCMonth() : Infinity,                                  // 5387\n\t\t\t\tcurrentDate = this.date && this.date.valueOf(),                                                                    // 5388\n\t\t\t\ttooltip;                                                                                                           // 5389\n\t\t\tthis.picker.find('.datepicker-days thead th.datepicker-switch')                                                     // 5390\n\t\t\t\t\t\t.text(dates[this.o.language].months[month]+' '+year);                                                            // 5391\n\t\t\tthis.picker.find('tfoot th.today')                                                                                  // 5392\n\t\t\t\t\t\t.text(dates[this.o.language].today)                                                                              // 5393\n\t\t\t\t\t\t.toggle(this.o.todayBtn !== false);                                                                              // 5394\n\t\t\tthis.picker.find('tfoot th.clear')                                                                                  // 5395\n\t\t\t\t\t\t.text(dates[this.o.language].clear)                                                                              // 5396\n\t\t\t\t\t\t.toggle(this.o.clearBtn !== false);                                                                              // 5397\n\t\t\tthis.updateNavArrows();                                                                                             // 5398\n\t\t\tthis.fillMonths();                                                                                                  // 5399\n\t\t\tvar prevMonth = UTCDate(year, month-1, 28,0,0,0,0),                                                                 // 5400\n\t\t\t\tday = DPGlobal.getDaysInMonth(prevMonth.getUTCFullYear(), prevMonth.getUTCMonth());                                // 5401\n\t\t\tprevMonth.setUTCDate(day);                                                                                          // 5402\n\t\t\tprevMonth.setUTCDate(day - (prevMonth.getUTCDay() - this.o.weekStart + 7)%7);                                       // 5403\n\t\t\tvar nextMonth = new Date(prevMonth);                                                                                // 5404\n\t\t\tnextMonth.setUTCDate(nextMonth.getUTCDate() + 42);                                                                  // 5405\n\t\t\tnextMonth = nextMonth.valueOf();                                                                                    // 5406\n\t\t\tvar html = [];                                                                                                      // 5407\n\t\t\tvar clsName;                                                                                                        // 5408\n\t\t\twhile(prevMonth.valueOf() < nextMonth) {                                                                            // 5409\n\t\t\t\tif (prevMonth.getUTCDay() == this.o.weekStart) {                                                                   // 5410\n\t\t\t\t\thtml.push('<tr>');                                                                                                // 5411\n\t\t\t\t\tif(this.o.calendarWeeks){                                                                                         // 5412\n\t\t\t\t\t\t// ISO 8601: First week contains first thursday.                                                                 // 5413\n\t\t\t\t\t\t// ISO also states week starts on Monday, but we can be more abstract here.                                      // 5414\n\t\t\t\t\t\tvar                                                                                                              // 5415\n\t\t\t\t\t\t\t// Start of current week: based on weekstart/current date                                                       // 5416\n\t\t\t\t\t\t\tws = new Date(+prevMonth + (this.o.weekStart - prevMonth.getUTCDay() - 7) % 7 * 864e5),                         // 5417\n\t\t\t\t\t\t\t// Thursday of this week                                                                                        // 5418\n\t\t\t\t\t\t\tth = new Date(+ws + (7 + 4 - ws.getUTCDay()) % 7 * 864e5),                                                      // 5419\n\t\t\t\t\t\t\t// First Thursday of year, year from thursday                                                                   // 5420\n\t\t\t\t\t\t\tyth = new Date(+(yth = UTCDate(th.getUTCFullYear(), 0, 1)) + (7 + 4 - yth.getUTCDay())%7*864e5),                // 5421\n\t\t\t\t\t\t\t// Calendar week: ms between thursdays, div ms per day, div 7 days                                              // 5422\n\t\t\t\t\t\t\tcalWeek =  (th - yth) / 864e5 / 7 + 1;                                                                          // 5423\n\t\t\t\t\t\thtml.push('<td class=\"cw\">'+ calWeek +'</td>');                                                                  // 5424\n                                                                                                                       // 5425\n\t\t\t\t\t}                                                                                                                 // 5426\n\t\t\t\t}                                                                                                                  // 5427\n\t\t\t\tclsName = this.getClassNames(prevMonth);                                                                           // 5428\n\t\t\t\tclsName.push('day');                                                                                               // 5429\n                                                                                                                       // 5430\n\t\t\t\tvar before = this.o.beforeShowDay(prevMonth);                                                                      // 5431\n\t\t\t\tif (before === undefined)                                                                                          // 5432\n\t\t\t\t\tbefore = {};                                                                                                      // 5433\n\t\t\t\telse if (typeof(before) === 'boolean')                                                                             // 5434\n\t\t\t\t\tbefore = {enabled: before};                                                                                       // 5435\n\t\t\t\telse if (typeof(before) === 'string')                                                                              // 5436\n\t\t\t\t\tbefore = {classes: before};                                                                                       // 5437\n\t\t\t\tif (before.enabled === false)                                                                                      // 5438\n\t\t\t\t\tclsName.push('disabled');                                                                                         // 5439\n\t\t\t\tif (before.classes)                                                                                                // 5440\n\t\t\t\t\tclsName = clsName.concat(before.classes.split(/\\s+/));                                                            // 5441\n\t\t\t\tif (before.tooltip)                                                                                                // 5442\n\t\t\t\t\ttooltip = before.tooltip;                                                                                         // 5443\n                                                                                                                       // 5444\n\t\t\t\tclsName = $.unique(clsName);                                                                                       // 5445\n\t\t\t\thtml.push('<td class=\"'+clsName.join(' ')+'\"' + (tooltip ? ' title=\"'+tooltip+'\"' : '') + '>'+prevMonth.getUTCDate() + '</td>');\n\t\t\t\tif (prevMonth.getUTCDay() == this.o.weekEnd) {                                                                     // 5447\n\t\t\t\t\thtml.push('</tr>');                                                                                               // 5448\n\t\t\t\t}                                                                                                                  // 5449\n\t\t\t\tprevMonth.setUTCDate(prevMonth.getUTCDate()+1);                                                                    // 5450\n\t\t\t}                                                                                                                   // 5451\n\t\t\tthis.picker.find('.datepicker-days tbody').empty().append(html.join(''));                                           // 5452\n\t\t\tvar currentYear = this.date && this.date.getUTCFullYear();                                                          // 5453\n                                                                                                                       // 5454\n\t\t\tvar months = this.picker.find('.datepicker-months')                                                                 // 5455\n\t\t\t\t\t\t.find('th:eq(1)')                                                                                                // 5456\n\t\t\t\t\t\t\t.text(year)                                                                                                     // 5457\n\t\t\t\t\t\t\t.end()                                                                                                          // 5458\n\t\t\t\t\t\t.find('span').removeClass('active');                                                                             // 5459\n\t\t\tif (currentYear && currentYear == year) {                                                                           // 5460\n\t\t\t\tmonths.eq(this.date.getUTCMonth()).addClass('active');                                                             // 5461\n\t\t\t}                                                                                                                   // 5462\n\t\t\tif (year < startYear || year > endYear) {                                                                           // 5463\n\t\t\t\tmonths.addClass('disabled');                                                                                       // 5464\n\t\t\t}                                                                                                                   // 5465\n\t\t\tif (year == startYear) {                                                                                            // 5466\n\t\t\t\tmonths.slice(0, startMonth).addClass('disabled');                                                                  // 5467\n\t\t\t}                                                                                                                   // 5468\n\t\t\tif (year == endYear) {                                                                                              // 5469\n\t\t\t\tmonths.slice(endMonth+1).addClass('disabled');                                                                     // 5470\n\t\t\t}                                                                                                                   // 5471\n                                                                                                                       // 5472\n\t\t\thtml = '';                                                                                                          // 5473\n\t\t\tyear = parseInt(year/10, 10) * 10;                                                                                  // 5474\n\t\t\tvar yearCont = this.picker.find('.datepicker-years')                                                                // 5475\n\t\t\t\t\t\t\t\t.find('th:eq(1)')                                                                                              // 5476\n\t\t\t\t\t\t\t\t\t.text(year + '-' + (year + 9))                                                                                // 5477\n\t\t\t\t\t\t\t\t\t.end()                                                                                                        // 5478\n\t\t\t\t\t\t\t\t.find('td');                                                                                                   // 5479\n\t\t\tyear -= 1;                                                                                                          // 5480\n\t\t\tfor (var i = -1; i < 11; i++) {                                                                                     // 5481\n\t\t\t\thtml += '<span class=\"year'+(i == -1 ? ' old' : i == 10 ? ' new' : '')+(currentYear == year ? ' active' : '')+(year < startYear || year > endYear ? ' disabled' : '')+'\">'+year+'</span>';\n\t\t\t\tyear += 1;                                                                                                         // 5483\n\t\t\t}                                                                                                                   // 5484\n\t\t\tyearCont.html(html);                                                                                                // 5485\n\t\t},                                                                                                                   // 5486\n                                                                                                                       // 5487\n\t\tupdateNavArrows: function() {                                                                                        // 5488\n\t\t\tif (!this._allow_update) return;                                                                                    // 5489\n                                                                                                                       // 5490\n\t\t\tvar d = new Date(this.viewDate),                                                                                    // 5491\n\t\t\t\tyear = d.getUTCFullYear(),                                                                                         // 5492\n\t\t\t\tmonth = d.getUTCMonth();                                                                                           // 5493\n\t\t\tswitch (this.viewMode) {                                                                                            // 5494\n\t\t\t\tcase 0:                                                                                                            // 5495\n\t\t\t\t\tif (this.o.startDate !== -Infinity && year <= this.o.startDate.getUTCFullYear() && month <= this.o.startDate.getUTCMonth()) {\n\t\t\t\t\t\tthis.picker.find('.prev').css({visibility: 'hidden'});                                                           // 5497\n\t\t\t\t\t} else {                                                                                                          // 5498\n\t\t\t\t\t\tthis.picker.find('.prev').css({visibility: 'visible'});                                                          // 5499\n\t\t\t\t\t}                                                                                                                 // 5500\n\t\t\t\t\tif (this.o.endDate !== Infinity && year >= this.o.endDate.getUTCFullYear() && month >= this.o.endDate.getUTCMonth()) {\n\t\t\t\t\t\tthis.picker.find('.next').css({visibility: 'hidden'});                                                           // 5502\n\t\t\t\t\t} else {                                                                                                          // 5503\n\t\t\t\t\t\tthis.picker.find('.next').css({visibility: 'visible'});                                                          // 5504\n\t\t\t\t\t}                                                                                                                 // 5505\n\t\t\t\t\tbreak;                                                                                                            // 5506\n\t\t\t\tcase 1:                                                                                                            // 5507\n\t\t\t\tcase 2:                                                                                                            // 5508\n\t\t\t\t\tif (this.o.startDate !== -Infinity && year <= this.o.startDate.getUTCFullYear()) {                                // 5509\n\t\t\t\t\t\tthis.picker.find('.prev').css({visibility: 'hidden'});                                                           // 5510\n\t\t\t\t\t} else {                                                                                                          // 5511\n\t\t\t\t\t\tthis.picker.find('.prev').css({visibility: 'visible'});                                                          // 5512\n\t\t\t\t\t}                                                                                                                 // 5513\n\t\t\t\t\tif (this.o.endDate !== Infinity && year >= this.o.endDate.getUTCFullYear()) {                                     // 5514\n\t\t\t\t\t\tthis.picker.find('.next').css({visibility: 'hidden'});                                                           // 5515\n\t\t\t\t\t} else {                                                                                                          // 5516\n\t\t\t\t\t\tthis.picker.find('.next').css({visibility: 'visible'});                                                          // 5517\n\t\t\t\t\t}                                                                                                                 // 5518\n\t\t\t\t\tbreak;                                                                                                            // 5519\n\t\t\t}                                                                                                                   // 5520\n\t\t},                                                                                                                   // 5521\n                                                                                                                       // 5522\n\t\tclick: function(e) {                                                                                                 // 5523\n\t\t\te.preventDefault();                                                                                                 // 5524\n\t\t\tvar target = $(e.target).closest('span, td, th');                                                                   // 5525\n\t\t\tif (target.length == 1) {                                                                                           // 5526\n\t\t\t\tswitch(target[0].nodeName.toLowerCase()) {                                                                         // 5527\n\t\t\t\t\tcase 'th':                                                                                                        // 5528\n\t\t\t\t\t\tswitch(target[0].className) {                                                                                    // 5529\n\t\t\t\t\t\t\tcase 'datepicker-switch':                                                                                       // 5530\n\t\t\t\t\t\t\t\tthis.showMode(1);                                                                                              // 5531\n\t\t\t\t\t\t\t\tbreak;                                                                                                         // 5532\n\t\t\t\t\t\t\tcase 'prev':                                                                                                    // 5533\n\t\t\t\t\t\t\tcase 'next':                                                                                                    // 5534\n\t\t\t\t\t\t\t\tvar dir = DPGlobal.modes[this.viewMode].navStep * (target[0].className == 'prev' ? -1 : 1);                    // 5535\n\t\t\t\t\t\t\t\tswitch(this.viewMode){                                                                                         // 5536\n\t\t\t\t\t\t\t\t\tcase 0:                                                                                                       // 5537\n\t\t\t\t\t\t\t\t\t\tthis.viewDate = this.moveMonth(this.viewDate, dir);                                                          // 5538\n\t\t\t\t\t\t\t\t\t\tbreak;                                                                                                       // 5539\n\t\t\t\t\t\t\t\t\tcase 1:                                                                                                       // 5540\n\t\t\t\t\t\t\t\t\tcase 2:                                                                                                       // 5541\n\t\t\t\t\t\t\t\t\t\tthis.viewDate = this.moveYear(this.viewDate, dir);                                                           // 5542\n\t\t\t\t\t\t\t\t\t\tbreak;                                                                                                       // 5543\n\t\t\t\t\t\t\t\t}                                                                                                              // 5544\n\t\t\t\t\t\t\t\tthis.fill();                                                                                                   // 5545\n\t\t\t\t\t\t\t\tbreak;                                                                                                         // 5546\n\t\t\t\t\t\t\tcase 'today':                                                                                                   // 5547\n\t\t\t\t\t\t\t\tvar date = new Date();                                                                                         // 5548\n\t\t\t\t\t\t\t\tdate = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);                                  // 5549\n                                                                                                                       // 5550\n\t\t\t\t\t\t\t\tthis.showMode(-2);                                                                                             // 5551\n\t\t\t\t\t\t\t\tvar which = this.o.todayBtn == 'linked' ? null : 'view';                                                       // 5552\n\t\t\t\t\t\t\t\tthis._setDate(date, which);                                                                                    // 5553\n\t\t\t\t\t\t\t\tbreak;                                                                                                         // 5554\n\t\t\t\t\t\t\tcase 'clear':                                                                                                   // 5555\n\t\t\t\t\t\t\t\tvar element;                                                                                                   // 5556\n\t\t\t\t\t\t\t\tif (this.isInput)                                                                                              // 5557\n\t\t\t\t\t\t\t\t\telement = this.element;                                                                                       // 5558\n\t\t\t\t\t\t\t\telse if (this.component)                                                                                       // 5559\n\t\t\t\t\t\t\t\t\telement = this.element.find('input');                                                                         // 5560\n\t\t\t\t\t\t\t\tif (element)                                                                                                   // 5561\n\t\t\t\t\t\t\t\t\telement.val(\"\").change();                                                                                     // 5562\n\t\t\t\t\t\t\t\tthis._trigger('changeDate');                                                                                   // 5563\n\t\t\t\t\t\t\t\tthis.update();                                                                                                 // 5564\n\t\t\t\t\t\t\t\tif (this.o.autoclose)                                                                                          // 5565\n\t\t\t\t\t\t\t\t\tthis.hide();                                                                                                  // 5566\n\t\t\t\t\t\t\t\tbreak;                                                                                                         // 5567\n\t\t\t\t\t\t}                                                                                                                // 5568\n\t\t\t\t\t\tbreak;                                                                                                           // 5569\n\t\t\t\t\tcase 'span':                                                                                                      // 5570\n\t\t\t\t\t\tif (!target.is('.disabled')) {                                                                                   // 5571\n\t\t\t\t\t\t\tthis.viewDate.setUTCDate(1);                                                                                    // 5572\n\t\t\t\t\t\t\tif (target.is('.month')) {                                                                                      // 5573\n\t\t\t\t\t\t\t\tvar day = 1;                                                                                                   // 5574\n\t\t\t\t\t\t\t\tvar month = target.parent().find('span').index(target);                                                        // 5575\n\t\t\t\t\t\t\t\tvar year = this.viewDate.getUTCFullYear();                                                                     // 5576\n\t\t\t\t\t\t\t\tthis.viewDate.setUTCMonth(month);                                                                              // 5577\n\t\t\t\t\t\t\t\tthis._trigger('changeMonth', this.viewDate);                                                                   // 5578\n\t\t\t\t\t\t\t\tif (this.o.minViewMode === 1) {                                                                                // 5579\n\t\t\t\t\t\t\t\t\tthis._setDate(UTCDate(year, month, day,0,0,0,0));                                                             // 5580\n\t\t\t\t\t\t\t\t}                                                                                                              // 5581\n\t\t\t\t\t\t\t} else {                                                                                                        // 5582\n\t\t\t\t\t\t\t\tvar year = parseInt(target.text(), 10)||0;                                                                     // 5583\n\t\t\t\t\t\t\t\tvar day = 1;                                                                                                   // 5584\n\t\t\t\t\t\t\t\tvar month = 0;                                                                                                 // 5585\n\t\t\t\t\t\t\t\tthis.viewDate.setUTCFullYear(year);                                                                            // 5586\n\t\t\t\t\t\t\t\tthis._trigger('changeYear', this.viewDate);                                                                    // 5587\n\t\t\t\t\t\t\t\tif (this.o.minViewMode === 2) {                                                                                // 5588\n\t\t\t\t\t\t\t\t\tthis._setDate(UTCDate(year, month, day,0,0,0,0));                                                             // 5589\n\t\t\t\t\t\t\t\t}                                                                                                              // 5590\n\t\t\t\t\t\t\t}                                                                                                               // 5591\n\t\t\t\t\t\t\tthis.showMode(-1);                                                                                              // 5592\n\t\t\t\t\t\t\tthis.fill();                                                                                                    // 5593\n\t\t\t\t\t\t}                                                                                                                // 5594\n\t\t\t\t\t\tbreak;                                                                                                           // 5595\n\t\t\t\t\tcase 'td':                                                                                                        // 5596\n\t\t\t\t\t\tif (target.is('.day') && !target.is('.disabled')){                                                               // 5597\n\t\t\t\t\t\t\tvar day = parseInt(target.text(), 10)||1;                                                                       // 5598\n\t\t\t\t\t\t\tvar year = this.viewDate.getUTCFullYear(),                                                                      // 5599\n\t\t\t\t\t\t\t\tmonth = this.viewDate.getUTCMonth();                                                                           // 5600\n\t\t\t\t\t\t\tif (target.is('.old')) {                                                                                        // 5601\n\t\t\t\t\t\t\t\tif (month === 0) {                                                                                             // 5602\n\t\t\t\t\t\t\t\t\tmonth = 11;                                                                                                   // 5603\n\t\t\t\t\t\t\t\t\tyear -= 1;                                                                                                    // 5604\n\t\t\t\t\t\t\t\t} else {                                                                                                       // 5605\n\t\t\t\t\t\t\t\t\tmonth -= 1;                                                                                                   // 5606\n\t\t\t\t\t\t\t\t}                                                                                                              // 5607\n\t\t\t\t\t\t\t} else if (target.is('.new')) {                                                                                 // 5608\n\t\t\t\t\t\t\t\tif (month == 11) {                                                                                             // 5609\n\t\t\t\t\t\t\t\t\tmonth = 0;                                                                                                    // 5610\n\t\t\t\t\t\t\t\t\tyear += 1;                                                                                                    // 5611\n\t\t\t\t\t\t\t\t} else {                                                                                                       // 5612\n\t\t\t\t\t\t\t\t\tmonth += 1;                                                                                                   // 5613\n\t\t\t\t\t\t\t\t}                                                                                                              // 5614\n\t\t\t\t\t\t\t}                                                                                                               // 5615\n\t\t\t\t\t\t\tthis._setDate(UTCDate(year, month, day,0,0,0,0));                                                               // 5616\n\t\t\t\t\t\t}                                                                                                                // 5617\n\t\t\t\t\t\tbreak;                                                                                                           // 5618\n\t\t\t\t}                                                                                                                  // 5619\n\t\t\t}                                                                                                                   // 5620\n\t\t},                                                                                                                   // 5621\n                                                                                                                       // 5622\n\t\t_setDate: function(date, which){                                                                                     // 5623\n\t\t\tif (!which || which == 'date')                                                                                      // 5624\n\t\t\t\tthis.date = new Date(date);                                                                                        // 5625\n\t\t\tif (!which || which  == 'view')                                                                                     // 5626\n\t\t\t\tthis.viewDate = new Date(date);                                                                                    // 5627\n\t\t\tthis.fill();                                                                                                        // 5628\n\t\t\tthis.setValue();                                                                                                    // 5629\n\t\t\tthis._trigger('changeDate');                                                                                        // 5630\n\t\t\tvar element;                                                                                                        // 5631\n\t\t\tif (this.isInput) {                                                                                                 // 5632\n\t\t\t\telement = this.element;                                                                                            // 5633\n\t\t\t} else if (this.component){                                                                                         // 5634\n\t\t\t\telement = this.element.find('input');                                                                              // 5635\n\t\t\t}                                                                                                                   // 5636\n\t\t\tif (element) {                                                                                                      // 5637\n\t\t\t\telement.change();                                                                                                  // 5638\n\t\t\t\tif (this.o.autoclose && (!which || which == 'date')) {                                                             // 5639\n\t\t\t\t\tthis.hide();                                                                                                      // 5640\n\t\t\t\t}                                                                                                                  // 5641\n\t\t\t}                                                                                                                   // 5642\n\t\t},                                                                                                                   // 5643\n                                                                                                                       // 5644\n\t\tmoveMonth: function(date, dir){                                                                                      // 5645\n\t\t\tif (!dir) return date;                                                                                              // 5646\n\t\t\tvar new_date = new Date(date.valueOf()),                                                                            // 5647\n\t\t\t\tday = new_date.getUTCDate(),                                                                                       // 5648\n\t\t\t\tmonth = new_date.getUTCMonth(),                                                                                    // 5649\n\t\t\t\tmag = Math.abs(dir),                                                                                               // 5650\n\t\t\t\tnew_month, test;                                                                                                   // 5651\n\t\t\tdir = dir > 0 ? 1 : -1;                                                                                             // 5652\n\t\t\tif (mag == 1){                                                                                                      // 5653\n\t\t\t\ttest = dir == -1                                                                                                   // 5654\n\t\t\t\t\t// If going back one month, make sure month is not current month                                                  // 5655\n\t\t\t\t\t// (eg, Mar 31 -> Feb 31 == Feb 28, not Mar 02)                                                                   // 5656\n\t\t\t\t\t? function(){ return new_date.getUTCMonth() == month; }                                                           // 5657\n\t\t\t\t\t// If going forward one month, make sure month is as expected                                                     // 5658\n\t\t\t\t\t// (eg, Jan 31 -> Feb 31 == Feb 28, not Mar 02)                                                                   // 5659\n\t\t\t\t\t: function(){ return new_date.getUTCMonth() != new_month; };                                                      // 5660\n\t\t\t\tnew_month = month + dir;                                                                                           // 5661\n\t\t\t\tnew_date.setUTCMonth(new_month);                                                                                   // 5662\n\t\t\t\t// Dec -> Jan (12) or Jan -> Dec (-1) -- limit expected date to 0-11                                               // 5663\n\t\t\t\tif (new_month < 0 || new_month > 11)                                                                               // 5664\n\t\t\t\t\tnew_month = (new_month + 12) % 12;                                                                                // 5665\n\t\t\t} else {                                                                                                            // 5666\n\t\t\t\t// For magnitudes >1, move one month at a time...                                                                  // 5667\n\t\t\t\tfor (var i=0; i<mag; i++)                                                                                          // 5668\n\t\t\t\t\t// ...which might decrease the day (eg, Jan 31 to Feb 28, etc)...                                                 // 5669\n\t\t\t\t\tnew_date = this.moveMonth(new_date, dir);                                                                         // 5670\n\t\t\t\t// ...then reset the day, keeping it in the new month                                                              // 5671\n\t\t\t\tnew_month = new_date.getUTCMonth();                                                                                // 5672\n\t\t\t\tnew_date.setUTCDate(day);                                                                                          // 5673\n\t\t\t\ttest = function(){ return new_month != new_date.getUTCMonth(); };                                                  // 5674\n\t\t\t}                                                                                                                   // 5675\n\t\t\t// Common date-resetting loop -- if date is beyond end of month, make it                                            // 5676\n\t\t\t// end of month                                                                                                     // 5677\n\t\t\twhile (test()){                                                                                                     // 5678\n\t\t\t\tnew_date.setUTCDate(--day);                                                                                        // 5679\n\t\t\t\tnew_date.setUTCMonth(new_month);                                                                                   // 5680\n\t\t\t}                                                                                                                   // 5681\n\t\t\treturn new_date;                                                                                                    // 5682\n\t\t},                                                                                                                   // 5683\n                                                                                                                       // 5684\n\t\tmoveYear: function(date, dir){                                                                                       // 5685\n\t\t\treturn this.moveMonth(date, dir*12);                                                                                // 5686\n\t\t},                                                                                                                   // 5687\n                                                                                                                       // 5688\n\t\tdateWithinRange: function(date){                                                                                     // 5689\n\t\t\treturn date >= this.o.startDate && date <= this.o.endDate;                                                          // 5690\n\t\t},                                                                                                                   // 5691\n                                                                                                                       // 5692\n\t\tkeydown: function(e){                                                                                                // 5693\n\t\t\tif (this.picker.is(':not(:visible)')){                                                                              // 5694\n\t\t\t\tif (e.keyCode == 27) // allow escape to hide and re-show picker                                                    // 5695\n\t\t\t\t\tthis.show();                                                                                                      // 5696\n\t\t\t\treturn;                                                                                                            // 5697\n\t\t\t}                                                                                                                   // 5698\n\t\t\tvar dateChanged = false,                                                                                            // 5699\n\t\t\t\tdir, day, month,                                                                                                   // 5700\n\t\t\t\tnewDate, newViewDate;                                                                                              // 5701\n\t\t\tswitch(e.keyCode){                                                                                                  // 5702\n\t\t\t\tcase 27: // escape                                                                                                 // 5703\n\t\t\t\t\tthis.hide();                                                                                                      // 5704\n\t\t\t\t\te.preventDefault();                                                                                               // 5705\n\t\t\t\t\tbreak;                                                                                                            // 5706\n\t\t\t\tcase 37: // left                                                                                                   // 5707\n\t\t\t\tcase 39: // right                                                                                                  // 5708\n\t\t\t\t\tif (!this.o.keyboardNavigation) break;                                                                            // 5709\n\t\t\t\t\tdir = e.keyCode == 37 ? -1 : 1;                                                                                   // 5710\n\t\t\t\t\tif (e.ctrlKey){                                                                                                   // 5711\n\t\t\t\t\t\tnewDate = this.moveYear(this.date, dir);                                                                         // 5712\n\t\t\t\t\t\tnewViewDate = this.moveYear(this.viewDate, dir);                                                                 // 5713\n\t\t\t\t\t} else if (e.shiftKey){                                                                                           // 5714\n\t\t\t\t\t\tnewDate = this.moveMonth(this.date, dir);                                                                        // 5715\n\t\t\t\t\t\tnewViewDate = this.moveMonth(this.viewDate, dir);                                                                // 5716\n\t\t\t\t\t} else {                                                                                                          // 5717\n\t\t\t\t\t\tnewDate = new Date(this.date);                                                                                   // 5718\n\t\t\t\t\t\tnewDate.setUTCDate(this.date.getUTCDate() + dir);                                                                // 5719\n\t\t\t\t\t\tnewViewDate = new Date(this.viewDate);                                                                           // 5720\n\t\t\t\t\t\tnewViewDate.setUTCDate(this.viewDate.getUTCDate() + dir);                                                        // 5721\n\t\t\t\t\t}                                                                                                                 // 5722\n\t\t\t\t\tif (this.dateWithinRange(newDate)){                                                                               // 5723\n\t\t\t\t\t\tthis.date = newDate;                                                                                             // 5724\n\t\t\t\t\t\tthis.viewDate = newViewDate;                                                                                     // 5725\n\t\t\t\t\t\tthis.setValue();                                                                                                 // 5726\n\t\t\t\t\t\tthis.update();                                                                                                   // 5727\n\t\t\t\t\t\te.preventDefault();                                                                                              // 5728\n\t\t\t\t\t\tdateChanged = true;                                                                                              // 5729\n\t\t\t\t\t}                                                                                                                 // 5730\n\t\t\t\t\tbreak;                                                                                                            // 5731\n\t\t\t\tcase 38: // up                                                                                                     // 5732\n\t\t\t\tcase 40: // down                                                                                                   // 5733\n\t\t\t\t\tif (!this.o.keyboardNavigation) break;                                                                            // 5734\n\t\t\t\t\tdir = e.keyCode == 38 ? -1 : 1;                                                                                   // 5735\n\t\t\t\t\tif (e.ctrlKey){                                                                                                   // 5736\n\t\t\t\t\t\tnewDate = this.moveYear(this.date, dir);                                                                         // 5737\n\t\t\t\t\t\tnewViewDate = this.moveYear(this.viewDate, dir);                                                                 // 5738\n\t\t\t\t\t} else if (e.shiftKey){                                                                                           // 5739\n\t\t\t\t\t\tnewDate = this.moveMonth(this.date, dir);                                                                        // 5740\n\t\t\t\t\t\tnewViewDate = this.moveMonth(this.viewDate, dir);                                                                // 5741\n\t\t\t\t\t} else {                                                                                                          // 5742\n\t\t\t\t\t\tnewDate = new Date(this.date);                                                                                   // 5743\n\t\t\t\t\t\tnewDate.setUTCDate(this.date.getUTCDate() + dir * 7);                                                            // 5744\n\t\t\t\t\t\tnewViewDate = new Date(this.viewDate);                                                                           // 5745\n\t\t\t\t\t\tnewViewDate.setUTCDate(this.viewDate.getUTCDate() + dir * 7);                                                    // 5746\n\t\t\t\t\t}                                                                                                                 // 5747\n\t\t\t\t\tif (this.dateWithinRange(newDate)){                                                                               // 5748\n\t\t\t\t\t\tthis.date = newDate;                                                                                             // 5749\n\t\t\t\t\t\tthis.viewDate = newViewDate;                                                                                     // 5750\n\t\t\t\t\t\tthis.setValue();                                                                                                 // 5751\n\t\t\t\t\t\tthis.update();                                                                                                   // 5752\n\t\t\t\t\t\te.preventDefault();                                                                                              // 5753\n\t\t\t\t\t\tdateChanged = true;                                                                                              // 5754\n\t\t\t\t\t}                                                                                                                 // 5755\n\t\t\t\t\tbreak;                                                                                                            // 5756\n\t\t\t\tcase 13: // enter                                                                                                  // 5757\n\t\t\t\t\tthis.hide();                                                                                                      // 5758\n\t\t\t\t\te.preventDefault();                                                                                               // 5759\n\t\t\t\t\tbreak;                                                                                                            // 5760\n\t\t\t\tcase 9: // tab                                                                                                     // 5761\n\t\t\t\t\tthis.hide();                                                                                                      // 5762\n\t\t\t\t\tbreak;                                                                                                            // 5763\n\t\t\t}                                                                                                                   // 5764\n\t\t\tif (dateChanged){                                                                                                   // 5765\n\t\t\t\tthis._trigger('changeDate');                                                                                       // 5766\n\t\t\t\tvar element;                                                                                                       // 5767\n\t\t\t\tif (this.isInput) {                                                                                                // 5768\n\t\t\t\t\telement = this.element;                                                                                           // 5769\n\t\t\t\t} else if (this.component){                                                                                        // 5770\n\t\t\t\t\telement = this.element.find('input');                                                                             // 5771\n\t\t\t\t}                                                                                                                  // 5772\n\t\t\t\tif (element) {                                                                                                     // 5773\n\t\t\t\t\telement.change();                                                                                                 // 5774\n\t\t\t\t}                                                                                                                  // 5775\n\t\t\t}                                                                                                                   // 5776\n\t\t},                                                                                                                   // 5777\n                                                                                                                       // 5778\n\t\tshowMode: function(dir) {                                                                                            // 5779\n\t\t\tif (dir) {                                                                                                          // 5780\n\t\t\t\tthis.viewMode = Math.max(this.o.minViewMode, Math.min(2, this.viewMode + dir));                                    // 5781\n\t\t\t}                                                                                                                   // 5782\n\t\t\t/*                                                                                                                  // 5783\n\t\t\t\tvitalets: fixing bug of very special conditions:                                                                   // 5784\n\t\t\t\tjquery 1.7.1 + webkit + show inline datepicker in bootstrap popover.                                               // 5785\n\t\t\t\tMethod show() does not set display css correctly and datepicker is not shown.                                      // 5786\n\t\t\t\tChanged to .css('display', 'block') solve the problem.                                                             // 5787\n\t\t\t\tSee https://github.com/vitalets/x-editable/issues/37                                                               // 5788\n                                                                                                                       // 5789\n\t\t\t\tIn jquery 1.7.2+ everything works fine.                                                                            // 5790\n\t\t\t*/                                                                                                                  // 5791\n\t\t\t//this.picker.find('>div').hide().filter('.datepicker-'+DPGlobal.modes[this.viewMode].clsName).show();              // 5792\n\t\t\tthis.picker.find('>div').hide().filter('.datepicker-'+DPGlobal.modes[this.viewMode].clsName).css('display', 'block');\n\t\t\tthis.updateNavArrows();                                                                                             // 5794\n\t\t}                                                                                                                    // 5795\n\t};                                                                                                                    // 5796\n                                                                                                                       // 5797\n\tvar DateRangePicker = function(element, options){                                                                     // 5798\n\t\tthis.element = $(element);                                                                                           // 5799\n\t\tthis.inputs = $.map(options.inputs, function(i){ return i.jquery ? i[0] : i; });                                     // 5800\n\t\tdelete options.inputs;                                                                                               // 5801\n                                                                                                                       // 5802\n\t\t$(this.inputs)                                                                                                       // 5803\n\t\t\t.datepicker(options)                                                                                                // 5804\n\t\t\t.bind('changeDate', $.proxy(this.dateUpdated, this));                                                               // 5805\n                                                                                                                       // 5806\n\t\tthis.pickers = $.map(this.inputs, function(i){ return $(i).data('datepicker'); });                                   // 5807\n\t\tthis.updateDates();                                                                                                  // 5808\n\t};                                                                                                                    // 5809\n\tDateRangePicker.prototype = {                                                                                         // 5810\n\t\tupdateDates: function(){                                                                                             // 5811\n\t\t\tthis.dates = $.map(this.pickers, function(i){ return i.date; });                                                    // 5812\n\t\t\tthis.updateRanges();                                                                                                // 5813\n\t\t},                                                                                                                   // 5814\n\t\tupdateRanges: function(){                                                                                            // 5815\n\t\t\tvar range = $.map(this.dates, function(d){ return d.valueOf(); });                                                  // 5816\n\t\t\t$.each(this.pickers, function(i, p){                                                                                // 5817\n\t\t\t\tp.setRange(range);                                                                                                 // 5818\n\t\t\t});                                                                                                                 // 5819\n\t\t},                                                                                                                   // 5820\n\t\tdateUpdated: function(e){                                                                                            // 5821\n\t\t\tvar dp = $(e.target).data('datepicker'),                                                                            // 5822\n\t\t\t\tnew_date = dp.getUTCDate(),                                                                                        // 5823\n\t\t\t\ti = $.inArray(e.target, this.inputs),                                                                              // 5824\n\t\t\t\tl = this.inputs.length;                                                                                            // 5825\n\t\t\tif (i == -1) return;                                                                                                // 5826\n                                                                                                                       // 5827\n\t\t\tif (new_date < this.dates[i]){                                                                                      // 5828\n\t\t\t\t// Date being moved earlier/left                                                                                   // 5829\n\t\t\t\twhile (i>=0 && new_date < this.dates[i]){                                                                          // 5830\n\t\t\t\t\tthis.pickers[i--].setUTCDate(new_date);                                                                           // 5831\n\t\t\t\t}                                                                                                                  // 5832\n\t\t\t}                                                                                                                   // 5833\n\t\t\telse if (new_date > this.dates[i]){                                                                                 // 5834\n\t\t\t\t// Date being moved later/right                                                                                    // 5835\n\t\t\t\twhile (i<l && new_date > this.dates[i]){                                                                           // 5836\n\t\t\t\t\tthis.pickers[i++].setUTCDate(new_date);                                                                           // 5837\n\t\t\t\t}                                                                                                                  // 5838\n\t\t\t}                                                                                                                   // 5839\n\t\t\tthis.updateDates();                                                                                                 // 5840\n\t\t},                                                                                                                   // 5841\n\t\tremove: function(){                                                                                                  // 5842\n\t\t\t$.map(this.pickers, function(p){ p.remove(); });                                                                    // 5843\n\t\t\tdelete this.element.data().datepicker;                                                                              // 5844\n\t\t}                                                                                                                    // 5845\n\t};                                                                                                                    // 5846\n                                                                                                                       // 5847\n\tfunction opts_from_el(el, prefix){                                                                                    // 5848\n\t\t// Derive options from element data-attrs                                                                            // 5849\n\t\tvar data = $(el).data(),                                                                                             // 5850\n\t\t\tout = {}, inkey,                                                                                                    // 5851\n\t\t\treplace = new RegExp('^' + prefix.toLowerCase() + '([A-Z])'),                                                       // 5852\n\t\t\tprefix = new RegExp('^' + prefix.toLowerCase());                                                                    // 5853\n\t\tfor (var key in data)                                                                                                // 5854\n\t\t\tif (prefix.test(key)){                                                                                              // 5855\n\t\t\t\tinkey = key.replace(replace, function(_,a){ return a.toLowerCase(); });                                            // 5856\n\t\t\t\tout[inkey] = data[key];                                                                                            // 5857\n\t\t\t}                                                                                                                   // 5858\n\t\treturn out;                                                                                                          // 5859\n\t}                                                                                                                     // 5860\n                                                                                                                       // 5861\n\tfunction opts_from_locale(lang){                                                                                      // 5862\n\t\t// Derive options from locale plugins                                                                                // 5863\n\t\tvar out = {};                                                                                                        // 5864\n\t\t// Check if \"de-DE\" style date is available, if not language should                                                  // 5865\n\t\t// fallback to 2 letter code eg \"de\"                                                                                 // 5866\n\t\tif (!dates[lang]) {                                                                                                  // 5867\n\t\t\tlang = lang.split('-')[0]                                                                                           // 5868\n\t\t\tif (!dates[lang])                                                                                                   // 5869\n\t\t\t\treturn;                                                                                                            // 5870\n\t\t}                                                                                                                    // 5871\n\t\tvar d = dates[lang];                                                                                                 // 5872\n\t\t$.each(locale_opts, function(i,k){                                                                                   // 5873\n\t\t\tif (k in d)                                                                                                         // 5874\n\t\t\t\tout[k] = d[k];                                                                                                     // 5875\n\t\t});                                                                                                                  // 5876\n\t\treturn out;                                                                                                          // 5877\n\t}                                                                                                                     // 5878\n                                                                                                                       // 5879\n\tvar old = $.fn.datepicker;                                                                                            // 5880\n\tvar datepicker = $.fn.datepicker = function ( option ) {                                                              // 5881\n\t\tvar args = Array.apply(null, arguments);                                                                             // 5882\n\t\targs.shift();                                                                                                        // 5883\n\t\tvar internal_return,                                                                                                 // 5884\n\t\t\tthis_return;                                                                                                        // 5885\n\t\tthis.each(function () {                                                                                              // 5886\n\t\t\tvar $this = $(this),                                                                                                // 5887\n\t\t\t\tdata = $this.data('datepicker'),                                                                                   // 5888\n\t\t\t\toptions = typeof option == 'object' && option;                                                                     // 5889\n\t\t\tif (!data) {                                                                                                        // 5890\n\t\t\t\tvar elopts = opts_from_el(this, 'date'),                                                                           // 5891\n\t\t\t\t\t// Preliminary otions                                                                                             // 5892\n\t\t\t\t\txopts = $.extend({}, defaults, elopts, options),                                                                  // 5893\n\t\t\t\t\tlocopts = opts_from_locale(xopts.language),                                                                       // 5894\n\t\t\t\t\t// Options priority: js args, data-attrs, locales, defaults                                                       // 5895\n\t\t\t\t\topts = $.extend({}, defaults, locopts, elopts, options);                                                          // 5896\n\t\t\t\tif ($this.is('.input-daterange') || opts.inputs){                                                                  // 5897\n\t\t\t\t\tvar ropts = {                                                                                                     // 5898\n\t\t\t\t\t\tinputs: opts.inputs || $this.find('input').toArray()                                                             // 5899\n\t\t\t\t\t};                                                                                                                // 5900\n\t\t\t\t\t$this.data('datepicker', (data = new DateRangePicker(this, $.extend(opts, ropts))));                              // 5901\n\t\t\t\t}                                                                                                                  // 5902\n\t\t\t\telse{                                                                                                              // 5903\n\t\t\t\t\t$this.data('datepicker', (data = new Datepicker(this, opts)));                                                    // 5904\n\t\t\t\t}                                                                                                                  // 5905\n\t\t\t}                                                                                                                   // 5906\n\t\t\tif (typeof option == 'string' && typeof data[option] == 'function') {                                               // 5907\n\t\t\t\tinternal_return = data[option].apply(data, args);                                                                  // 5908\n\t\t\t\tif (internal_return !== undefined)                                                                                 // 5909\n\t\t\t\t\treturn false;                                                                                                     // 5910\n\t\t\t}                                                                                                                   // 5911\n\t\t});                                                                                                                  // 5912\n\t\tif (internal_return !== undefined)                                                                                   // 5913\n\t\t\treturn internal_return;                                                                                             // 5914\n\t\telse                                                                                                                 // 5915\n\t\t\treturn this;                                                                                                        // 5916\n\t};                                                                                                                    // 5917\n                                                                                                                       // 5918\n\tvar defaults = $.fn.datepicker.defaults = {                                                                           // 5919\n\t\tautoclose: false,                                                                                                    // 5920\n\t\tbeforeShowDay: $.noop,                                                                                               // 5921\n\t\tcalendarWeeks: false,                                                                                                // 5922\n\t\tclearBtn: false,                                                                                                     // 5923\n\t\tdaysOfWeekDisabled: [],                                                                                              // 5924\n\t\tendDate: Infinity,                                                                                                   // 5925\n\t\tforceParse: true,                                                                                                    // 5926\n\t\tformat: 'mm/dd/yyyy',                                                                                                // 5927\n\t\tkeyboardNavigation: true,                                                                                            // 5928\n\t\tlanguage: 'en',                                                                                                      // 5929\n\t\tminViewMode: 0,                                                                                                      // 5930\n\t\trtl: false,                                                                                                          // 5931\n\t\tstartDate: -Infinity,                                                                                                // 5932\n\t\tstartView: 0,                                                                                                        // 5933\n\t\ttodayBtn: false,                                                                                                     // 5934\n\t\ttodayHighlight: false,                                                                                               // 5935\n\t\tweekStart: 0                                                                                                         // 5936\n\t};                                                                                                                    // 5937\n\tvar locale_opts = $.fn.datepicker.locale_opts = [                                                                     // 5938\n\t\t'format',                                                                                                            // 5939\n\t\t'rtl',                                                                                                               // 5940\n\t\t'weekStart'                                                                                                          // 5941\n\t];                                                                                                                    // 5942\n\t$.fn.datepicker.Constructor = Datepicker;                                                                             // 5943\n\tvar dates = $.fn.datepicker.dates = {                                                                                 // 5944\n\t\ten: {                                                                                                                // 5945\n\t\t\tdays: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"],                     // 5946\n\t\t\tdaysShort: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"],                                                // 5947\n\t\t\tdaysMin: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\", \"Su\"],                                                          // 5948\n\t\t\tmonths: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n\t\t\tmonthsShort: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],                  // 5950\n\t\t\ttoday: \"Today\",                                                                                                     // 5951\n\t\t\tclear: \"Clear\"                                                                                                      // 5952\n\t\t}                                                                                                                    // 5953\n\t};                                                                                                                    // 5954\n                                                                                                                       // 5955\n\tvar DPGlobal = {                                                                                                      // 5956\n\t\tmodes: [                                                                                                             // 5957\n\t\t\t{                                                                                                                   // 5958\n\t\t\t\tclsName: 'days',                                                                                                   // 5959\n\t\t\t\tnavFnc: 'Month',                                                                                                   // 5960\n\t\t\t\tnavStep: 1                                                                                                         // 5961\n\t\t\t},                                                                                                                  // 5962\n\t\t\t{                                                                                                                   // 5963\n\t\t\t\tclsName: 'months',                                                                                                 // 5964\n\t\t\t\tnavFnc: 'FullYear',                                                                                                // 5965\n\t\t\t\tnavStep: 1                                                                                                         // 5966\n\t\t\t},                                                                                                                  // 5967\n\t\t\t{                                                                                                                   // 5968\n\t\t\t\tclsName: 'years',                                                                                                  // 5969\n\t\t\t\tnavFnc: 'FullYear',                                                                                                // 5970\n\t\t\t\tnavStep: 10                                                                                                        // 5971\n\t\t}],                                                                                                                  // 5972\n\t\tisLeapYear: function (year) {                                                                                        // 5973\n\t\t\treturn (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0));                                            // 5974\n\t\t},                                                                                                                   // 5975\n\t\tgetDaysInMonth: function (year, month) {                                                                             // 5976\n\t\t\treturn [31, (DPGlobal.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];                  // 5977\n\t\t},                                                                                                                   // 5978\n\t\tvalidParts: /dd?|DD?|mm?|MM?|yy(?:yy)?/g,                                                                            // 5979\n\t\tnonpunctuation: /[^ -\\/:-@\\[\\u3400-\\u9fff-`{-~\\t\\n\\r]+/g,                                                            // 5980\n\t\tparseFormat: function(format){                                                                                       // 5981\n\t\t\t// IE treats \\0 as a string end in inputs (truncating the value),                                                   // 5982\n\t\t\t// so it's a bad format delimiter, anyway                                                                           // 5983\n\t\t\tvar separators = format.replace(this.validParts, '\\0').split('\\0'),                                                 // 5984\n\t\t\t\tparts = format.match(this.validParts);                                                                             // 5985\n\t\t\tif (!separators || !separators.length || !parts || parts.length === 0){                                             // 5986\n\t\t\t\tthrow new Error(\"Invalid date format.\");                                                                           // 5987\n\t\t\t}                                                                                                                   // 5988\n\t\t\treturn {separators: separators, parts: parts};                                                                      // 5989\n\t\t},                                                                                                                   // 5990\n\t\tparseDate: function(date, format, language) {                                                                        // 5991\n\t\t\tif (date instanceof Date) return date;                                                                              // 5992\n\t\t\tif (typeof format === 'string')                                                                                     // 5993\n\t\t\t\tformat = DPGlobal.parseFormat(format);                                                                             // 5994\n\t\t\tif (/^[\\-+]\\d+[dmwy]([\\s,]+[\\-+]\\d+[dmwy])*$/.test(date)) {                                                         // 5995\n\t\t\t\tvar part_re = /([\\-+]\\d+)([dmwy])/,                                                                                // 5996\n\t\t\t\t\tparts = date.match(/([\\-+]\\d+)([dmwy])/g),                                                                        // 5997\n\t\t\t\t\tpart, dir;                                                                                                        // 5998\n\t\t\t\tdate = new Date();                                                                                                 // 5999\n\t\t\t\tfor (var i=0; i<parts.length; i++) {                                                                               // 6000\n\t\t\t\t\tpart = part_re.exec(parts[i]);                                                                                    // 6001\n\t\t\t\t\tdir = parseInt(part[1]);                                                                                          // 6002\n\t\t\t\t\tswitch(part[2]){                                                                                                  // 6003\n\t\t\t\t\t\tcase 'd':                                                                                                        // 6004\n\t\t\t\t\t\t\tdate.setUTCDate(date.getUTCDate() + dir);                                                                       // 6005\n\t\t\t\t\t\t\tbreak;                                                                                                          // 6006\n\t\t\t\t\t\tcase 'm':                                                                                                        // 6007\n\t\t\t\t\t\t\tdate = Datepicker.prototype.moveMonth.call(Datepicker.prototype, date, dir);                                    // 6008\n\t\t\t\t\t\t\tbreak;                                                                                                          // 6009\n\t\t\t\t\t\tcase 'w':                                                                                                        // 6010\n\t\t\t\t\t\t\tdate.setUTCDate(date.getUTCDate() + dir * 7);                                                                   // 6011\n\t\t\t\t\t\t\tbreak;                                                                                                          // 6012\n\t\t\t\t\t\tcase 'y':                                                                                                        // 6013\n\t\t\t\t\t\t\tdate = Datepicker.prototype.moveYear.call(Datepicker.prototype, date, dir);                                     // 6014\n\t\t\t\t\t\t\tbreak;                                                                                                          // 6015\n\t\t\t\t\t}                                                                                                                 // 6016\n\t\t\t\t}                                                                                                                  // 6017\n\t\t\t\treturn UTCDate(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), 0, 0, 0);                             // 6018\n\t\t\t}                                                                                                                   // 6019\n\t\t\tvar parts = date && date.match(this.nonpunctuation) || [],                                                          // 6020\n\t\t\t\tdate = new Date(),                                                                                                 // 6021\n\t\t\t\tparsed = {},                                                                                                       // 6022\n\t\t\t\tsetters_order = ['yyyy', 'yy', 'M', 'MM', 'm', 'mm', 'd', 'dd'],                                                   // 6023\n\t\t\t\tsetters_map = {                                                                                                    // 6024\n\t\t\t\t\tyyyy: function(d,v){ return d.setUTCFullYear(v); },                                                               // 6025\n\t\t\t\t\tyy: function(d,v){ return d.setUTCFullYear(2000+v); },                                                            // 6026\n\t\t\t\t\tm: function(d,v){                                                                                                 // 6027\n\t\t\t\t\t\tv -= 1;                                                                                                          // 6028\n\t\t\t\t\t\twhile (v<0) v += 12;                                                                                             // 6029\n\t\t\t\t\t\tv %= 12;                                                                                                         // 6030\n\t\t\t\t\t\td.setUTCMonth(v);                                                                                                // 6031\n\t\t\t\t\t\twhile (d.getUTCMonth() != v)                                                                                     // 6032\n\t\t\t\t\t\t\td.setUTCDate(d.getUTCDate()-1);                                                                                 // 6033\n\t\t\t\t\t\treturn d;                                                                                                        // 6034\n\t\t\t\t\t},                                                                                                                // 6035\n\t\t\t\t\td: function(d,v){ return d.setUTCDate(v); }                                                                       // 6036\n\t\t\t\t},                                                                                                                 // 6037\n\t\t\t\tval, filtered, part;                                                                                               // 6038\n\t\t\tsetters_map['M'] = setters_map['MM'] = setters_map['mm'] = setters_map['m'];                                        // 6039\n\t\t\tsetters_map['dd'] = setters_map['d'];                                                                               // 6040\n\t\t\tdate = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);                                       // 6041\n\t\t\tvar fparts = format.parts.slice();                                                                                  // 6042\n\t\t\t// Remove noop parts                                                                                                // 6043\n\t\t\tif (parts.length != fparts.length) {                                                                                // 6044\n\t\t\t\tfparts = $(fparts).filter(function(i,p){                                                                           // 6045\n\t\t\t\t\treturn $.inArray(p, setters_order) !== -1;                                                                        // 6046\n\t\t\t\t}).toArray();                                                                                                      // 6047\n\t\t\t}                                                                                                                   // 6048\n\t\t\t// Process remainder                                                                                                // 6049\n\t\t\tif (parts.length == fparts.length) {                                                                                // 6050\n\t\t\t\tfor (var i=0, cnt = fparts.length; i < cnt; i++) {                                                                 // 6051\n\t\t\t\t\tval = parseInt(parts[i], 10);                                                                                     // 6052\n\t\t\t\t\tpart = fparts[i];                                                                                                 // 6053\n\t\t\t\t\tif (isNaN(val)) {                                                                                                 // 6054\n\t\t\t\t\t\tswitch(part) {                                                                                                   // 6055\n\t\t\t\t\t\t\tcase 'MM':                                                                                                      // 6056\n\t\t\t\t\t\t\t\tfiltered = $(dates[language].months).filter(function(){                                                        // 6057\n\t\t\t\t\t\t\t\t\tvar m = this.slice(0, parts[i].length),                                                                       // 6058\n\t\t\t\t\t\t\t\t\t\tp = parts[i].slice(0, m.length);                                                                             // 6059\n\t\t\t\t\t\t\t\t\treturn m == p;                                                                                                // 6060\n\t\t\t\t\t\t\t\t});                                                                                                            // 6061\n\t\t\t\t\t\t\t\tval = $.inArray(filtered[0], dates[language].months) + 1;                                                      // 6062\n\t\t\t\t\t\t\t\tbreak;                                                                                                         // 6063\n\t\t\t\t\t\t\tcase 'M':                                                                                                       // 6064\n\t\t\t\t\t\t\t\tfiltered = $(dates[language].monthsShort).filter(function(){                                                   // 6065\n\t\t\t\t\t\t\t\t\tvar m = this.slice(0, parts[i].length),                                                                       // 6066\n\t\t\t\t\t\t\t\t\t\tp = parts[i].slice(0, m.length);                                                                             // 6067\n\t\t\t\t\t\t\t\t\treturn m == p;                                                                                                // 6068\n\t\t\t\t\t\t\t\t});                                                                                                            // 6069\n\t\t\t\t\t\t\t\tval = $.inArray(filtered[0], dates[language].monthsShort) + 1;                                                 // 6070\n\t\t\t\t\t\t\t\tbreak;                                                                                                         // 6071\n\t\t\t\t\t\t}                                                                                                                // 6072\n\t\t\t\t\t}                                                                                                                 // 6073\n\t\t\t\t\tparsed[part] = val;                                                                                               // 6074\n\t\t\t\t}                                                                                                                  // 6075\n\t\t\t\tfor (var i=0, s; i<setters_order.length; i++){                                                                     // 6076\n\t\t\t\t\ts = setters_order[i];                                                                                             // 6077\n\t\t\t\t\tif (s in parsed && !isNaN(parsed[s]))                                                                             // 6078\n\t\t\t\t\t\tsetters_map[s](date, parsed[s]);                                                                                 // 6079\n\t\t\t\t}                                                                                                                  // 6080\n\t\t\t}                                                                                                                   // 6081\n\t\t\treturn date;                                                                                                        // 6082\n\t\t},                                                                                                                   // 6083\n\t\tformatDate: function(date, format, language){                                                                        // 6084\n\t\t\tif (typeof format === 'string')                                                                                     // 6085\n\t\t\t\tformat = DPGlobal.parseFormat(format);                                                                             // 6086\n\t\t\tvar val = {                                                                                                         // 6087\n\t\t\t\td: date.getUTCDate(),                                                                                              // 6088\n\t\t\t\tD: dates[language].daysShort[date.getUTCDay()],                                                                    // 6089\n\t\t\t\tDD: dates[language].days[date.getUTCDay()],                                                                        // 6090\n\t\t\t\tm: date.getUTCMonth() + 1,                                                                                         // 6091\n\t\t\t\tM: dates[language].monthsShort[date.getUTCMonth()],                                                                // 6092\n\t\t\t\tMM: dates[language].months[date.getUTCMonth()],                                                                    // 6093\n\t\t\t\tyy: date.getUTCFullYear().toString().substring(2),                                                                 // 6094\n\t\t\t\tyyyy: date.getUTCFullYear()                                                                                        // 6095\n\t\t\t};                                                                                                                  // 6096\n\t\t\tval.dd = (val.d < 10 ? '0' : '') + val.d;                                                                           // 6097\n\t\t\tval.mm = (val.m < 10 ? '0' : '') + val.m;                                                                           // 6098\n\t\t\tvar date = [],                                                                                                      // 6099\n\t\t\t\tseps = $.extend([], format.separators);                                                                            // 6100\n\t\t\tfor (var i=0, cnt = format.parts.length; i <= cnt; i++) {                                                           // 6101\n\t\t\t\tif (seps.length)                                                                                                   // 6102\n\t\t\t\t\tdate.push(seps.shift());                                                                                          // 6103\n\t\t\t\tdate.push(val[format.parts[i]]);                                                                                   // 6104\n\t\t\t}                                                                                                                   // 6105\n\t\t\treturn date.join('');                                                                                               // 6106\n\t\t},                                                                                                                   // 6107\n\t\theadTemplate: '<thead>'+                                                                                             // 6108\n\t\t\t\t\t\t\t'<tr>'+                                                                                                         // 6109\n\t\t\t\t\t\t\t\t'<th class=\"prev\"><i class=\"icon-arrow-left\"/></th>'+                                                          // 6110\n\t\t\t\t\t\t\t\t'<th colspan=\"5\" class=\"datepicker-switch\"></th>'+                                                             // 6111\n\t\t\t\t\t\t\t\t'<th class=\"next\"><i class=\"icon-arrow-right\"/></th>'+                                                         // 6112\n\t\t\t\t\t\t\t'</tr>'+                                                                                                        // 6113\n\t\t\t\t\t\t'</thead>',                                                                                                      // 6114\n\t\tcontTemplate: '<tbody><tr><td colspan=\"7\"></td></tr></tbody>',                                                       // 6115\n\t\tfootTemplate: '<tfoot><tr><th colspan=\"7\" class=\"today\"></th></tr><tr><th colspan=\"7\" class=\"clear\"></th></tr></tfoot>'\n\t};                                                                                                                    // 6117\n\tDPGlobal.template = '<div class=\"datepicker\">'+                                                                       // 6118\n\t\t\t\t\t\t\t'<div class=\"datepicker-days\">'+                                                                                // 6119\n\t\t\t\t\t\t\t\t'<table class=\" table-condensed\">'+                                                                            // 6120\n\t\t\t\t\t\t\t\t\tDPGlobal.headTemplate+                                                                                        // 6121\n\t\t\t\t\t\t\t\t\t'<tbody></tbody>'+                                                                                            // 6122\n\t\t\t\t\t\t\t\t\tDPGlobal.footTemplate+                                                                                        // 6123\n\t\t\t\t\t\t\t\t'</table>'+                                                                                                    // 6124\n\t\t\t\t\t\t\t'</div>'+                                                                                                       // 6125\n\t\t\t\t\t\t\t'<div class=\"datepicker-months\">'+                                                                              // 6126\n\t\t\t\t\t\t\t\t'<table class=\"table-condensed\">'+                                                                             // 6127\n\t\t\t\t\t\t\t\t\tDPGlobal.headTemplate+                                                                                        // 6128\n\t\t\t\t\t\t\t\t\tDPGlobal.contTemplate+                                                                                        // 6129\n\t\t\t\t\t\t\t\t\tDPGlobal.footTemplate+                                                                                        // 6130\n\t\t\t\t\t\t\t\t'</table>'+                                                                                                    // 6131\n\t\t\t\t\t\t\t'</div>'+                                                                                                       // 6132\n\t\t\t\t\t\t\t'<div class=\"datepicker-years\">'+                                                                               // 6133\n\t\t\t\t\t\t\t\t'<table class=\"table-condensed\">'+                                                                             // 6134\n\t\t\t\t\t\t\t\t\tDPGlobal.headTemplate+                                                                                        // 6135\n\t\t\t\t\t\t\t\t\tDPGlobal.contTemplate+                                                                                        // 6136\n\t\t\t\t\t\t\t\t\tDPGlobal.footTemplate+                                                                                        // 6137\n\t\t\t\t\t\t\t\t'</table>'+                                                                                                    // 6138\n\t\t\t\t\t\t\t'</div>'+                                                                                                       // 6139\n\t\t\t\t\t\t'</div>';                                                                                                        // 6140\n                                                                                                                       // 6141\n\t$.fn.datepicker.DPGlobal = DPGlobal;                                                                                  // 6142\n                                                                                                                       // 6143\n                                                                                                                       // 6144\n\t/* DATEPICKER NO CONFLICT                                                                                             // 6145\n\t* =================== */                                                                                              // 6146\n                                                                                                                       // 6147\n\t$.fn.datepicker.noConflict = function(){                                                                              // 6148\n\t\t$.fn.datepicker = old;                                                                                               // 6149\n\t\treturn this;                                                                                                         // 6150\n\t};                                                                                                                    // 6151\n                                                                                                                       // 6152\n                                                                                                                       // 6153\n\t/* DATEPICKER DATA-API                                                                                                // 6154\n\t* ================== */                                                                                               // 6155\n                                                                                                                       // 6156\n\t$(document).on(                                                                                                       // 6157\n\t\t'focus.datepicker.data-api click.datepicker.data-api',                                                               // 6158\n\t\t'[data-provide=\"datepicker\"]',                                                                                       // 6159\n\t\tfunction(e){                                                                                                         // 6160\n\t\t\tvar $this = $(this);                                                                                                // 6161\n\t\t\tif ($this.data('datepicker')) return;                                                                               // 6162\n\t\t\te.preventDefault();                                                                                                 // 6163\n\t\t\t// component click requires us to explicitly show it                                                                // 6164\n\t\t\tdatepicker.call($this, 'show');                                                                                     // 6165\n\t\t}                                                                                                                    // 6166\n\t);                                                                                                                    // 6167\n\t$(function(){                                                                                                         // 6168\n\t\t//$('[data-provide=\"datepicker-inline\"]').datepicker();                                                              // 6169\n        //vit: changed to support noConflict()                                                                         // 6170\n        datepicker.call($('[data-provide=\"datepicker-inline\"]'));                                                      // 6171\n\t});                                                                                                                   // 6172\n                                                                                                                       // 6173\n}( window.jQuery ));                                                                                                   // 6174\n                                                                                                                       // 6175\n/**                                                                                                                    // 6176\nBootstrap-datepicker.                                                                                                  // 6177\nDescription and examples: https://github.com/eternicode/bootstrap-datepicker.                                          // 6178\nFor **i18n** you should include js file from here: https://github.com/eternicode/bootstrap-datepicker/tree/master/js/locales\nand set `language` option.                                                                                             // 6180\nSince 1.4.0 date has different appearance in **popup** and **inline** modes.                                           // 6181\n                                                                                                                       // 6182\n@class date                                                                                                            // 6183\n@extends abstractinput                                                                                                 // 6184\n@final                                                                                                                 // 6185\n@example                                                                                                               // 6186\n<a href=\"#\" id=\"dob\" data-type=\"date\" data-pk=\"1\" data-url=\"/post\" data-title=\"Select date\">15/05/1984</a>             // 6187\n<script>                                                                                                               // 6188\n$(function(){                                                                                                          // 6189\n    $('#dob').editable({                                                                                               // 6190\n        format: 'yyyy-mm-dd',                                                                                          // 6191\n        viewformat: 'dd/mm/yyyy',                                                                                      // 6192\n        datepicker: {                                                                                                  // 6193\n                weekStart: 1                                                                                           // 6194\n           }                                                                                                           // 6195\n        }                                                                                                              // 6196\n    });                                                                                                                // 6197\n});                                                                                                                    // 6198\n</script>                                                                                                              // 6199\n**/                                                                                                                    // 6200\n(function ($) {                                                                                                        // 6201\n    \"use strict\";                                                                                                      // 6202\n                                                                                                                       // 6203\n    //store bootstrap-datepicker as bdateicker to exclude conflict with jQuery UI one                                  // 6204\n    $.fn.bdatepicker = $.fn.datepicker.noConflict();                                                                   // 6205\n    if(!$.fn.datepicker) { //if there were no other datepickers, keep also original name                               // 6206\n        $.fn.datepicker = $.fn.bdatepicker;                                                                            // 6207\n    }                                                                                                                  // 6208\n                                                                                                                       // 6209\n    var Date = function (options) {                                                                                    // 6210\n        this.init('date', options, Date.defaults);                                                                     // 6211\n        this.initPicker(options, Date.defaults);                                                                       // 6212\n    };                                                                                                                 // 6213\n                                                                                                                       // 6214\n    $.fn.editableutils.inherit(Date, $.fn.editabletypes.abstractinput);                                                // 6215\n                                                                                                                       // 6216\n    $.extend(Date.prototype, {                                                                                         // 6217\n        initPicker: function(options, defaults) {                                                                      // 6218\n            //'format' is set directly from settings or data-* attributes                                              // 6219\n                                                                                                                       // 6220\n            //by default viewformat equals to format                                                                   // 6221\n            if(!this.options.viewformat) {                                                                             // 6222\n                this.options.viewformat = this.options.format;                                                         // 6223\n            }                                                                                                          // 6224\n                                                                                                                       // 6225\n            //try parse datepicker config defined as json string in data-datepicker                                    // 6226\n            options.datepicker = $.fn.editableutils.tryParseJson(options.datepicker, true);                            // 6227\n                                                                                                                       // 6228\n            //overriding datepicker config (as by default jQuery extend() is not recursive)                            // 6229\n            //since 1.4 datepicker internally uses viewformat instead of format. Format is for submit only             // 6230\n            this.options.datepicker = $.extend({}, defaults.datepicker, options.datepicker, {                          // 6231\n                format: this.options.viewformat                                                                        // 6232\n            });                                                                                                        // 6233\n                                                                                                                       // 6234\n            //language                                                                                                 // 6235\n            this.options.datepicker.language = this.options.datepicker.language || 'en';                               // 6236\n                                                                                                                       // 6237\n            //store DPglobal                                                                                           // 6238\n            this.dpg = $.fn.bdatepicker.DPGlobal;                                                                      // 6239\n                                                                                                                       // 6240\n            //store parsed formats                                                                                     // 6241\n            this.parsedFormat = this.dpg.parseFormat(this.options.format);                                             // 6242\n            this.parsedViewFormat = this.dpg.parseFormat(this.options.viewformat);                                     // 6243\n        },                                                                                                             // 6244\n                                                                                                                       // 6245\n        render: function () {                                                                                          // 6246\n            this.$input.bdatepicker(this.options.datepicker);                                                          // 6247\n                                                                                                                       // 6248\n            //\"clear\" link                                                                                             // 6249\n            if(this.options.clear) {                                                                                   // 6250\n                this.$clear = $('<a href=\"#\"></a>').html(this.options.clear).click($.proxy(function(e){                // 6251\n                    e.preventDefault();                                                                                // 6252\n                    e.stopPropagation();                                                                               // 6253\n                    this.clear();                                                                                      // 6254\n                }, this));                                                                                             // 6255\n                                                                                                                       // 6256\n                this.$tpl.parent().append($('<div class=\"editable-clear\">').append(this.$clear));                      // 6257\n            }                                                                                                          // 6258\n        },                                                                                                             // 6259\n                                                                                                                       // 6260\n        value2html: function(value, element) {                                                                         // 6261\n           var text = value ? this.dpg.formatDate(value, this.parsedViewFormat, this.options.datepicker.language) : '';\n           Date.superclass.value2html.call(this, text, element);                                                       // 6263\n        },                                                                                                             // 6264\n                                                                                                                       // 6265\n        html2value: function(html) {                                                                                   // 6266\n            return this.parseDate(html, this.parsedViewFormat);                                                        // 6267\n        },                                                                                                             // 6268\n                                                                                                                       // 6269\n        value2str: function(value) {                                                                                   // 6270\n            return value ? this.dpg.formatDate(value, this.parsedFormat, this.options.datepicker.language) : '';       // 6271\n        },                                                                                                             // 6272\n                                                                                                                       // 6273\n        str2value: function(str) {                                                                                     // 6274\n            return this.parseDate(str, this.parsedFormat);                                                             // 6275\n        },                                                                                                             // 6276\n                                                                                                                       // 6277\n        value2submit: function(value) {                                                                                // 6278\n            return this.value2str(value);                                                                              // 6279\n        },                                                                                                             // 6280\n                                                                                                                       // 6281\n        value2input: function(value) {                                                                                 // 6282\n            this.$input.bdatepicker('update', value);                                                                  // 6283\n        },                                                                                                             // 6284\n                                                                                                                       // 6285\n        input2value: function() {                                                                                      // 6286\n            return this.$input.data('datepicker').date;                                                                // 6287\n        },                                                                                                             // 6288\n                                                                                                                       // 6289\n        activate: function() {                                                                                         // 6290\n        },                                                                                                             // 6291\n                                                                                                                       // 6292\n        clear:  function() {                                                                                           // 6293\n            this.$input.data('datepicker').date = null;                                                                // 6294\n            this.$input.find('.active').removeClass('active');                                                         // 6295\n            if(!this.options.showbuttons) {                                                                            // 6296\n                this.$input.closest('form').submit();                                                                  // 6297\n            }                                                                                                          // 6298\n        },                                                                                                             // 6299\n                                                                                                                       // 6300\n        autosubmit: function() {                                                                                       // 6301\n            this.$input.on('mouseup', '.day', function(e){                                                             // 6302\n                if($(e.currentTarget).is('.old') || $(e.currentTarget).is('.new')) {                                   // 6303\n                    return;                                                                                            // 6304\n                }                                                                                                      // 6305\n                var $form = $(this).closest('form');                                                                   // 6306\n                setTimeout(function() {                                                                                // 6307\n                    $form.submit();                                                                                    // 6308\n                }, 200);                                                                                               // 6309\n            });                                                                                                        // 6310\n           //changedate is not suitable as it triggered when showing datepicker. see #149                              // 6311\n           /*                                                                                                          // 6312\n           this.$input.on('changeDate', function(e){                                                                   // 6313\n               var $form = $(this).closest('form');                                                                    // 6314\n               setTimeout(function() {                                                                                 // 6315\n                   $form.submit();                                                                                     // 6316\n               }, 200);                                                                                                // 6317\n           });                                                                                                         // 6318\n           */                                                                                                          // 6319\n       },                                                                                                              // 6320\n                                                                                                                       // 6321\n       /*                                                                                                              // 6322\n        For incorrect date bootstrap-datepicker returns current date that is not suitable                              // 6323\n        for datefield.                                                                                                 // 6324\n        This function returns null for incorrect date.                                                                 // 6325\n       */                                                                                                              // 6326\n       parseDate: function(str, format) {                                                                              // 6327\n           var date = null, formattedBack;                                                                             // 6328\n           if(str) {                                                                                                   // 6329\n               date = this.dpg.parseDate(str, format, this.options.datepicker.language);                               // 6330\n               if(typeof str === 'string') {                                                                           // 6331\n                   formattedBack = this.dpg.formatDate(date, format, this.options.datepicker.language);                // 6332\n                   if(str !== formattedBack) {                                                                         // 6333\n                       date = null;                                                                                    // 6334\n                   }                                                                                                   // 6335\n               }                                                                                                       // 6336\n           }                                                                                                           // 6337\n           return date;                                                                                                // 6338\n       }                                                                                                               // 6339\n                                                                                                                       // 6340\n    });                                                                                                                // 6341\n                                                                                                                       // 6342\n    Date.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {                                          // 6343\n        /**                                                                                                            // 6344\n        @property tpl                                                                                                  // 6345\n        @default <div></div>                                                                                           // 6346\n        **/                                                                                                            // 6347\n        tpl:'<div class=\"editable-date well\"></div>',                                                                  // 6348\n        /**                                                                                                            // 6349\n        @property inputclass                                                                                           // 6350\n        @default null                                                                                                  // 6351\n        **/                                                                                                            // 6352\n        inputclass: null,                                                                                              // 6353\n        /**                                                                                                            // 6354\n        Format used for sending value to server. Also applied when converting date from <code>data-value</code> attribute.<br>\n        Possible tokens are: <code>d, dd, m, mm, yy, yyyy</code>                                                       // 6356\n                                                                                                                       // 6357\n        @property format                                                                                               // 6358\n        @type string                                                                                                   // 6359\n        @default yyyy-mm-dd                                                                                            // 6360\n        **/                                                                                                            // 6361\n        format:'yyyy-mm-dd',                                                                                           // 6362\n        /**                                                                                                            // 6363\n        Format used for displaying date. Also applied when converting date from element's text on init.                // 6364\n        If not specified equals to <code>format</code>                                                                 // 6365\n                                                                                                                       // 6366\n        @property viewformat                                                                                           // 6367\n        @type string                                                                                                   // 6368\n        @default null                                                                                                  // 6369\n        **/                                                                                                            // 6370\n        viewformat: null,                                                                                              // 6371\n        /**                                                                                                            // 6372\n        Configuration of datepicker.                                                                                   // 6373\n        Full list of options: http://bootstrap-datepicker.readthedocs.org/en/latest/options.html                       // 6374\n                                                                                                                       // 6375\n        @property datepicker                                                                                           // 6376\n        @type object                                                                                                   // 6377\n        @default {                                                                                                     // 6378\n            weekStart: 0,                                                                                              // 6379\n            startView: 0,                                                                                              // 6380\n            minViewMode: 0,                                                                                            // 6381\n            autoclose: false                                                                                           // 6382\n        }                                                                                                              // 6383\n        **/                                                                                                            // 6384\n        datepicker:{                                                                                                   // 6385\n            weekStart: 0,                                                                                              // 6386\n            startView: 0,                                                                                              // 6387\n            minViewMode: 0,                                                                                            // 6388\n            autoclose: false                                                                                           // 6389\n        },                                                                                                             // 6390\n        /**                                                                                                            // 6391\n        Text shown as clear date button.                                                                               // 6392\n        If <code>false</code> clear button will not be rendered.                                                       // 6393\n                                                                                                                       // 6394\n        @property clear                                                                                                // 6395\n        @type boolean|string                                                                                           // 6396\n        @default 'x clear'                                                                                             // 6397\n        **/                                                                                                            // 6398\n        clear: '&times; clear'                                                                                         // 6399\n    });                                                                                                                // 6400\n                                                                                                                       // 6401\n    $.fn.editabletypes.date = Date;                                                                                    // 6402\n                                                                                                                       // 6403\n}(window.jQuery));                                                                                                     // 6404\n                                                                                                                       // 6405\n/**                                                                                                                    // 6406\nBootstrap datefield input - modification for inline mode.                                                              // 6407\nShows normal <input type=\"text\"> and binds popup datepicker.                                                           // 6408\nAutomatically shown in inline mode.                                                                                    // 6409\n                                                                                                                       // 6410\n@class datefield                                                                                                       // 6411\n@extends date                                                                                                          // 6412\n                                                                                                                       // 6413\n@since 1.4.0                                                                                                           // 6414\n**/                                                                                                                    // 6415\n(function ($) {                                                                                                        // 6416\n    \"use strict\";                                                                                                      // 6417\n                                                                                                                       // 6418\n    var DateField = function (options) {                                                                               // 6419\n        this.init('datefield', options, DateField.defaults);                                                           // 6420\n        this.initPicker(options, DateField.defaults);                                                                  // 6421\n    };                                                                                                                 // 6422\n                                                                                                                       // 6423\n    $.fn.editableutils.inherit(DateField, $.fn.editabletypes.date);                                                    // 6424\n                                                                                                                       // 6425\n    $.extend(DateField.prototype, {                                                                                    // 6426\n        render: function () {                                                                                          // 6427\n            this.$input = this.$tpl.find('input');                                                                     // 6428\n            this.setClass();                                                                                           // 6429\n            this.setAttr('placeholder');                                                                               // 6430\n                                                                                                                       // 6431\n            //bootstrap-datepicker is set `bdateicker` to exclude conflict with jQuery UI one. (in date.js)            // 6432\n            this.$tpl.bdatepicker(this.options.datepicker);                                                            // 6433\n                                                                                                                       // 6434\n            //need to disable original event handlers                                                                  // 6435\n            this.$input.off('focus keydown');                                                                          // 6436\n                                                                                                                       // 6437\n            //update value of datepicker                                                                               // 6438\n            this.$input.keyup($.proxy(function(){                                                                      // 6439\n               this.$tpl.removeData('date');                                                                           // 6440\n               this.$tpl.bdatepicker('update');                                                                        // 6441\n            }, this));                                                                                                 // 6442\n                                                                                                                       // 6443\n        },                                                                                                             // 6444\n                                                                                                                       // 6445\n       value2input: function(value) {                                                                                  // 6446\n           this.$input.val(value ? this.dpg.formatDate(value, this.parsedViewFormat, this.options.datepicker.language) : '');\n           this.$tpl.bdatepicker('update');                                                                            // 6448\n       },                                                                                                              // 6449\n                                                                                                                       // 6450\n       input2value: function() {                                                                                       // 6451\n           return this.html2value(this.$input.val());                                                                  // 6452\n       },                                                                                                              // 6453\n                                                                                                                       // 6454\n       activate: function() {                                                                                          // 6455\n           $.fn.editabletypes.text.prototype.activate.call(this);                                                      // 6456\n       },                                                                                                              // 6457\n                                                                                                                       // 6458\n       autosubmit: function() {                                                                                        // 6459\n         //reset autosubmit to empty                                                                                   // 6460\n       }                                                                                                               // 6461\n    });                                                                                                                // 6462\n                                                                                                                       // 6463\n    DateField.defaults = $.extend({}, $.fn.editabletypes.date.defaults, {                                              // 6464\n        /**                                                                                                            // 6465\n        @property tpl                                                                                                  // 6466\n        **/                                                                                                            // 6467\n        tpl:'<div class=\"input-append date\"><input type=\"text\"/><span class=\"add-on\"><i class=\"icon-th\"></i></span></div>',\n        /**                                                                                                            // 6469\n        @property inputclass                                                                                           // 6470\n        @default 'input-small'                                                                                         // 6471\n        **/                                                                                                            // 6472\n        inputclass: 'input-small',                                                                                     // 6473\n                                                                                                                       // 6474\n        /* datepicker config */                                                                                        // 6475\n        datepicker: {                                                                                                  // 6476\n            weekStart: 0,                                                                                              // 6477\n            startView: 0,                                                                                              // 6478\n            minViewMode: 0,                                                                                            // 6479\n            autoclose: true                                                                                            // 6480\n        }                                                                                                              // 6481\n    });                                                                                                                // 6482\n                                                                                                                       // 6483\n    $.fn.editabletypes.datefield = DateField;                                                                          // 6484\n                                                                                                                       // 6485\n}(window.jQuery));                                                                                                     // 6486\n/**                                                                                                                    // 6487\nBootstrap-datetimepicker.                                                                                              // 6488\nBased on [smalot bootstrap-datetimepicker plugin](https://github.com/smalot/bootstrap-datetimepicker).                 // 6489\nBefore usage you should manually include dependent js and css:                                                         // 6490\n                                                                                                                       // 6491\n    <link href=\"css/datetimepicker.css\" rel=\"stylesheet\" type=\"text/css\"></link>                                       // 6492\n    <script src=\"js/bootstrap-datetimepicker.js\"></script>                                                             // 6493\n                                                                                                                       // 6494\nFor **i18n** you should include js file from here: https://github.com/smalot/bootstrap-datetimepicker/tree/master/js/locales\nand set `language` option.                                                                                             // 6496\n                                                                                                                       // 6497\n@class datetime                                                                                                        // 6498\n@extends abstractinput                                                                                                 // 6499\n@final                                                                                                                 // 6500\n@since 1.4.4                                                                                                           // 6501\n@example                                                                                                               // 6502\n<a href=\"#\" id=\"last_seen\" data-type=\"datetime\" data-pk=\"1\" data-url=\"/post\" title=\"Select date & time\">15/03/2013 12:45</a>\n<script>                                                                                                               // 6504\n$(function(){                                                                                                          // 6505\n    $('#last_seen').editable({                                                                                         // 6506\n        format: 'yyyy-mm-dd hh:ii',                                                                                    // 6507\n        viewformat: 'dd/mm/yyyy hh:ii',                                                                                // 6508\n        datetimepicker: {                                                                                              // 6509\n                weekStart: 1                                                                                           // 6510\n           }                                                                                                           // 6511\n        }                                                                                                              // 6512\n    });                                                                                                                // 6513\n});                                                                                                                    // 6514\n</script>                                                                                                              // 6515\n**/                                                                                                                    // 6516\n(function ($) {                                                                                                        // 6517\n    \"use strict\";                                                                                                      // 6518\n                                                                                                                       // 6519\n    var DateTime = function (options) {                                                                                // 6520\n        this.init('datetime', options, DateTime.defaults);                                                             // 6521\n        this.initPicker(options, DateTime.defaults);                                                                   // 6522\n    };                                                                                                                 // 6523\n                                                                                                                       // 6524\n    $.fn.editableutils.inherit(DateTime, $.fn.editabletypes.abstractinput);                                            // 6525\n                                                                                                                       // 6526\n    $.extend(DateTime.prototype, {                                                                                     // 6527\n        initPicker: function(options, defaults) {                                                                      // 6528\n            //'format' is set directly from settings or data-* attributes                                              // 6529\n                                                                                                                       // 6530\n            //by default viewformat equals to format                                                                   // 6531\n            if(!this.options.viewformat) {                                                                             // 6532\n                this.options.viewformat = this.options.format;                                                         // 6533\n            }                                                                                                          // 6534\n                                                                                                                       // 6535\n            //try parse datetimepicker config defined as json string in data-datetimepicker                            // 6536\n            options.datetimepicker = $.fn.editableutils.tryParseJson(options.datetimepicker, true);                    // 6537\n                                                                                                                       // 6538\n            //overriding datetimepicker config (as by default jQuery extend() is not recursive)                        // 6539\n            //since 1.4 datetimepicker internally uses viewformat instead of format. Format is for submit only         // 6540\n            this.options.datetimepicker = $.extend({}, defaults.datetimepicker, options.datetimepicker, {              // 6541\n                format: this.options.viewformat                                                                        // 6542\n            });                                                                                                        // 6543\n                                                                                                                       // 6544\n            //language                                                                                                 // 6545\n            this.options.datetimepicker.language = this.options.datetimepicker.language || 'en';                       // 6546\n                                                                                                                       // 6547\n            //store DPglobal                                                                                           // 6548\n            this.dpg = $.fn.datetimepicker.DPGlobal;                                                                   // 6549\n                                                                                                                       // 6550\n            //store parsed formats                                                                                     // 6551\n            this.parsedFormat = this.dpg.parseFormat(this.options.format, this.options.formatType);                    // 6552\n            this.parsedViewFormat = this.dpg.parseFormat(this.options.viewformat, this.options.formatType);            // 6553\n        },                                                                                                             // 6554\n                                                                                                                       // 6555\n        render: function () {                                                                                          // 6556\n            this.$input.datetimepicker(this.options.datetimepicker);                                                   // 6557\n                                                                                                                       // 6558\n            //adjust container position when viewMode changes                                                          // 6559\n            //see https://github.com/smalot/bootstrap-datetimepicker/pull/80                                           // 6560\n            this.$input.on('changeMode', function(e) {                                                                 // 6561\n                var f = $(this).closest('form').parent();                                                              // 6562\n                //timeout here, otherwise container changes position before form has new size                          // 6563\n                setTimeout(function(){                                                                                 // 6564\n                    f.triggerHandler('resize');                                                                        // 6565\n                }, 0);                                                                                                 // 6566\n            });                                                                                                        // 6567\n                                                                                                                       // 6568\n            //\"clear\" link                                                                                             // 6569\n            if(this.options.clear) {                                                                                   // 6570\n                this.$clear = $('<a href=\"#\"></a>').html(this.options.clear).click($.proxy(function(e){                // 6571\n                    e.preventDefault();                                                                                // 6572\n                    e.stopPropagation();                                                                               // 6573\n                    this.clear();                                                                                      // 6574\n                }, this));                                                                                             // 6575\n                                                                                                                       // 6576\n                this.$tpl.parent().append($('<div class=\"editable-clear\">').append(this.$clear));                      // 6577\n            }                                                                                                          // 6578\n        },                                                                                                             // 6579\n                                                                                                                       // 6580\n        value2html: function(value, element) {                                                                         // 6581\n            //formatDate works with UTCDate!                                                                           // 6582\n            var text = value ? this.dpg.formatDate(this.toUTC(value), this.parsedViewFormat, this.options.datetimepicker.language, this.options.formatType) : '';\n            if(element) {                                                                                              // 6584\n                DateTime.superclass.value2html.call(this, text, element);                                              // 6585\n            } else {                                                                                                   // 6586\n                return text;                                                                                           // 6587\n            }                                                                                                          // 6588\n        },                                                                                                             // 6589\n                                                                                                                       // 6590\n        html2value: function(html) {                                                                                   // 6591\n            //parseDate return utc date!                                                                               // 6592\n            var value = this.parseDate(html, this.parsedViewFormat);                                                   // 6593\n            return value ? this.fromUTC(value) : null;                                                                 // 6594\n        },                                                                                                             // 6595\n                                                                                                                       // 6596\n        value2str: function(value) {                                                                                   // 6597\n            //formatDate works with UTCDate!                                                                           // 6598\n            return value ? this.dpg.formatDate(this.toUTC(value), this.parsedFormat, this.options.datetimepicker.language, this.options.formatType) : '';\n       },                                                                                                              // 6600\n                                                                                                                       // 6601\n       str2value: function(str) {                                                                                      // 6602\n           //parseDate return utc date!                                                                                // 6603\n           var value = this.parseDate(str, this.parsedFormat);                                                         // 6604\n           return value ? this.fromUTC(value) : null;                                                                  // 6605\n       },                                                                                                              // 6606\n                                                                                                                       // 6607\n       value2submit: function(value) {                                                                                 // 6608\n           return this.value2str(value);                                                                               // 6609\n       },                                                                                                              // 6610\n                                                                                                                       // 6611\n       value2input: function(value) {                                                                                  // 6612\n           if(value) {                                                                                                 // 6613\n             this.$input.data('datetimepicker').setDate(value);                                                        // 6614\n           }                                                                                                           // 6615\n       },                                                                                                              // 6616\n                                                                                                                       // 6617\n       input2value: function() {                                                                                       // 6618\n           //date may be cleared, in that case getDate() triggers error                                                // 6619\n           var dt = this.$input.data('datetimepicker');                                                                // 6620\n           return dt.date ? dt.getDate() : null;                                                                       // 6621\n       },                                                                                                              // 6622\n                                                                                                                       // 6623\n       activate: function() {                                                                                          // 6624\n       },                                                                                                              // 6625\n                                                                                                                       // 6626\n       clear: function() {                                                                                             // 6627\n          this.$input.data('datetimepicker').date = null;                                                              // 6628\n          this.$input.find('.active').removeClass('active');                                                           // 6629\n          if(!this.options.showbuttons) {                                                                              // 6630\n             this.$input.closest('form').submit();                                                                     // 6631\n          }                                                                                                            // 6632\n       },                                                                                                              // 6633\n                                                                                                                       // 6634\n       autosubmit: function() {                                                                                        // 6635\n           this.$input.on('mouseup', '.minute', function(e){                                                           // 6636\n               var $form = $(this).closest('form');                                                                    // 6637\n               setTimeout(function() {                                                                                 // 6638\n                   $form.submit();                                                                                     // 6639\n               }, 200);                                                                                                // 6640\n           });                                                                                                         // 6641\n       },                                                                                                              // 6642\n                                                                                                                       // 6643\n       //convert date from local to utc                                                                                // 6644\n       toUTC: function(value) {                                                                                        // 6645\n         return value ? new Date(value.valueOf() - value.getTimezoneOffset() * 60000) : value;                         // 6646\n       },                                                                                                              // 6647\n                                                                                                                       // 6648\n       //convert date from utc to local                                                                                // 6649\n       fromUTC: function(value) {                                                                                      // 6650\n         return value ? new Date(value.valueOf() + value.getTimezoneOffset() * 60000) : value;                         // 6651\n       },                                                                                                              // 6652\n                                                                                                                       // 6653\n       /*                                                                                                              // 6654\n        For incorrect date bootstrap-datetimepicker returns current date that is not suitable                          // 6655\n        for datetimefield.                                                                                             // 6656\n        This function returns null for incorrect date.                                                                 // 6657\n       */                                                                                                              // 6658\n       parseDate: function(str, format) {                                                                              // 6659\n           var date = null, formattedBack;                                                                             // 6660\n           if(str) {                                                                                                   // 6661\n               date = this.dpg.parseDate(str, format, this.options.datetimepicker.language, this.options.formatType);  // 6662\n               if(typeof str === 'string') {                                                                           // 6663\n                   formattedBack = this.dpg.formatDate(date, format, this.options.datetimepicker.language, this.options.formatType);\n                   if(str !== formattedBack) {                                                                         // 6665\n                       date = null;                                                                                    // 6666\n                   }                                                                                                   // 6667\n               }                                                                                                       // 6668\n           }                                                                                                           // 6669\n           return date;                                                                                                // 6670\n       }                                                                                                               // 6671\n                                                                                                                       // 6672\n    });                                                                                                                // 6673\n                                                                                                                       // 6674\n    DateTime.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {                                      // 6675\n        /**                                                                                                            // 6676\n        @property tpl                                                                                                  // 6677\n        @default <div></div>                                                                                           // 6678\n        **/                                                                                                            // 6679\n        tpl:'<div class=\"editable-date well\"></div>',                                                                  // 6680\n        /**                                                                                                            // 6681\n        @property inputclass                                                                                           // 6682\n        @default null                                                                                                  // 6683\n        **/                                                                                                            // 6684\n        inputclass: null,                                                                                              // 6685\n        /**                                                                                                            // 6686\n        Format used for sending value to server. Also applied when converting date from <code>data-value</code> attribute.<br>\n        Possible tokens are: <code>d, dd, m, mm, yy, yyyy, h, i</code>                                                 // 6688\n                                                                                                                       // 6689\n        @property format                                                                                               // 6690\n        @type string                                                                                                   // 6691\n        @default yyyy-mm-dd hh:ii                                                                                      // 6692\n        **/                                                                                                            // 6693\n        format:'yyyy-mm-dd hh:ii',                                                                                     // 6694\n        formatType:'standard',                                                                                         // 6695\n        /**                                                                                                            // 6696\n        Format used for displaying date. Also applied when converting date from element's text on init.                // 6697\n        If not specified equals to <code>format</code>                                                                 // 6698\n                                                                                                                       // 6699\n        @property viewformat                                                                                           // 6700\n        @type string                                                                                                   // 6701\n        @default null                                                                                                  // 6702\n        **/                                                                                                            // 6703\n        viewformat: null,                                                                                              // 6704\n        /**                                                                                                            // 6705\n        Configuration of datetimepicker.                                                                               // 6706\n        Full list of options: https://github.com/smalot/bootstrap-datetimepicker                                       // 6707\n                                                                                                                       // 6708\n        @property datetimepicker                                                                                       // 6709\n        @type object                                                                                                   // 6710\n        @default { }                                                                                                   // 6711\n        **/                                                                                                            // 6712\n        datetimepicker:{                                                                                               // 6713\n            todayHighlight: false,                                                                                     // 6714\n            autoclose: false                                                                                           // 6715\n        },                                                                                                             // 6716\n        /**                                                                                                            // 6717\n        Text shown as clear date button.                                                                               // 6718\n        If <code>false</code> clear button will not be rendered.                                                       // 6719\n                                                                                                                       // 6720\n        @property clear                                                                                                // 6721\n        @type boolean|string                                                                                           // 6722\n        @default 'x clear'                                                                                             // 6723\n        **/                                                                                                            // 6724\n        clear: '&times; clear'                                                                                         // 6725\n    });                                                                                                                // 6726\n                                                                                                                       // 6727\n    $.fn.editabletypes.datetime = DateTime;                                                                            // 6728\n                                                                                                                       // 6729\n}(window.jQuery));                                                                                                     // 6730\n/**                                                                                                                    // 6731\nBootstrap datetimefield input - datetime input for inline mode.                                                        // 6732\nShows normal <input type=\"text\"> and binds popup datetimepicker.                                                       // 6733\nAutomatically shown in inline mode.                                                                                    // 6734\n                                                                                                                       // 6735\n@class datetimefield                                                                                                   // 6736\n@extends datetime                                                                                                      // 6737\n                                                                                                                       // 6738\n**/                                                                                                                    // 6739\n(function ($) {                                                                                                        // 6740\n    \"use strict\";                                                                                                      // 6741\n                                                                                                                       // 6742\n    var DateTimeField = function (options) {                                                                           // 6743\n        this.init('datetimefield', options, DateTimeField.defaults);                                                   // 6744\n        this.initPicker(options, DateTimeField.defaults);                                                              // 6745\n    };                                                                                                                 // 6746\n                                                                                                                       // 6747\n    $.fn.editableutils.inherit(DateTimeField, $.fn.editabletypes.datetime);                                            // 6748\n                                                                                                                       // 6749\n    $.extend(DateTimeField.prototype, {                                                                                // 6750\n        render: function () {                                                                                          // 6751\n            this.$input = this.$tpl.find('input');                                                                     // 6752\n            this.setClass();                                                                                           // 6753\n            this.setAttr('placeholder');                                                                               // 6754\n                                                                                                                       // 6755\n            this.$tpl.datetimepicker(this.options.datetimepicker);                                                     // 6756\n                                                                                                                       // 6757\n            //need to disable original event handlers                                                                  // 6758\n            this.$input.off('focus keydown');                                                                          // 6759\n                                                                                                                       // 6760\n            //update value of datepicker                                                                               // 6761\n            this.$input.keyup($.proxy(function(){                                                                      // 6762\n               this.$tpl.removeData('date');                                                                           // 6763\n               this.$tpl.datetimepicker('update');                                                                     // 6764\n            }, this));                                                                                                 // 6765\n                                                                                                                       // 6766\n        },                                                                                                             // 6767\n                                                                                                                       // 6768\n       value2input: function(value) {                                                                                  // 6769\n           this.$input.val(this.value2html(value));                                                                    // 6770\n           this.$tpl.datetimepicker('update');                                                                         // 6771\n       },                                                                                                              // 6772\n                                                                                                                       // 6773\n       input2value: function() {                                                                                       // 6774\n           return this.html2value(this.$input.val());                                                                  // 6775\n       },                                                                                                              // 6776\n                                                                                                                       // 6777\n       activate: function() {                                                                                          // 6778\n           $.fn.editabletypes.text.prototype.activate.call(this);                                                      // 6779\n       },                                                                                                              // 6780\n                                                                                                                       // 6781\n       autosubmit: function() {                                                                                        // 6782\n         //reset autosubmit to empty                                                                                   // 6783\n       }                                                                                                               // 6784\n    });                                                                                                                // 6785\n                                                                                                                       // 6786\n    DateTimeField.defaults = $.extend({}, $.fn.editabletypes.datetime.defaults, {                                      // 6787\n        /**                                                                                                            // 6788\n        @property tpl                                                                                                  // 6789\n        **/                                                                                                            // 6790\n        tpl:'<div class=\"input-append date\"><input type=\"text\"/><span class=\"add-on\"><i class=\"icon-th\"></i></span></div>',\n        /**                                                                                                            // 6792\n        @property inputclass                                                                                           // 6793\n        @default 'input-medium'                                                                                        // 6794\n        **/                                                                                                            // 6795\n        inputclass: 'input-medium',                                                                                    // 6796\n                                                                                                                       // 6797\n        /* datetimepicker config */                                                                                    // 6798\n        datetimepicker:{                                                                                               // 6799\n            todayHighlight: false,                                                                                     // 6800\n            autoclose: true                                                                                            // 6801\n        }                                                                                                              // 6802\n    });                                                                                                                // 6803\n                                                                                                                       // 6804\n    $.fn.editabletypes.datetimefield = DateTimeField;                                                                  // 6805\n                                                                                                                       // 6806\n}(window.jQuery));                                                                                                     // 6807\n                                                                                                                       // 6808\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/natestrauser_x-editable-bootstrap/lib/address/address.js                                                   //\n// This file is in bare mode and is not in its own closure.                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\nAddress editable input.                                                                                                // 2\nInternally value stored as {city: \"Moscow\", street: \"Lenina\", building: \"15\"}                                          // 3\n                                                                                                                       // 4\n@class address                                                                                                         // 5\n@extends abstractinput                                                                                                 // 6\n@final                                                                                                                 // 7\n@example                                                                                                               // 8\n<a href=\"#\" id=\"address\" data-type=\"address\" data-pk=\"1\">awesome</a>                                                   // 9\n<script>                                                                                                               // 10\n$(function(){                                                                                                          // 11\n    $('#address').editable({                                                                                           // 12\n        url: '/post',                                                                                                  // 13\n        title: 'Enter city, street and building #',                                                                    // 14\n        value: {                                                                                                       // 15\n            city: \"Moscow\",                                                                                            // 16\n            street: \"Lenina\",                                                                                          // 17\n            building: \"15\"                                                                                             // 18\n        }                                                                                                              // 19\n    });                                                                                                                // 20\n});                                                                                                                    // 21\n</script>                                                                                                              // 22\n**/                                                                                                                    // 23\n(function ($) {                                                                                                        // 24\n    \"use strict\";                                                                                                      // 25\n                                                                                                                       // 26\n    var Address = function (options) {                                                                                 // 27\n        this.init('address', options, Address.defaults);                                                               // 28\n    };                                                                                                                 // 29\n                                                                                                                       // 30\n    //inherit from Abstract input                                                                                      // 31\n    $.fn.editableutils.inherit(Address, $.fn.editabletypes.abstractinput);                                             // 32\n                                                                                                                       // 33\n    $.extend(Address.prototype, {                                                                                      // 34\n        /**                                                                                                            // 35\n        Renders input from tpl                                                                                         // 36\n                                                                                                                       // 37\n        @method render()                                                                                               // 38\n        **/                                                                                                            // 39\n        render: function() {                                                                                           // 40\n           this.$input = this.$tpl.find('input');                                                                      // 41\n        },                                                                                                             // 42\n                                                                                                                       // 43\n        /**                                                                                                            // 44\n        Default method to show value in element. Can be overwritten by display option.                                 // 45\n                                                                                                                       // 46\n        @method value2html(value, element)                                                                             // 47\n        **/                                                                                                            // 48\n        value2html: function(value, element) {                                                                         // 49\n            if(!value) {                                                                                               // 50\n                $(element).empty();                                                                                    // 51\n                return;                                                                                                // 52\n            }                                                                                                          // 53\n            var html = $('<div>').text(value.city).html() + ', ' + $('<div>').text(value.street).html() + ' st., bld. ' + $('<div>').text(value.building).html();\n            $(element).html(html);                                                                                     // 55\n        },                                                                                                             // 56\n                                                                                                                       // 57\n        /**                                                                                                            // 58\n        Gets value from element's html                                                                                 // 59\n                                                                                                                       // 60\n        @method html2value(html)                                                                                       // 61\n        **/                                                                                                            // 62\n        html2value: function(html) {                                                                                   // 63\n          /*                                                                                                           // 64\n            you may write parsing method to get value by element's html                                                // 65\n            e.g. \"Moscow, st. Lenina, bld. 15\" => {city: \"Moscow\", street: \"Lenina\", building: \"15\"}                   // 66\n            but for complex structures it's not recommended.                                                           // 67\n            Better set value directly via javascript, e.g.                                                             // 68\n            editable({                                                                                                 // 69\n                value: {                                                                                               // 70\n                    city: \"Moscow\",                                                                                    // 71\n                    street: \"Lenina\",                                                                                  // 72\n                    building: \"15\"                                                                                     // 73\n                }                                                                                                      // 74\n            });                                                                                                        // 75\n          */                                                                                                           // 76\n          return null;                                                                                                 // 77\n        },                                                                                                             // 78\n                                                                                                                       // 79\n       /**                                                                                                             // 80\n        Converts value to string.                                                                                      // 81\n        It is used in internal comparing (not for sending to server).                                                  // 82\n                                                                                                                       // 83\n        @method value2str(value)                                                                                       // 84\n       **/                                                                                                             // 85\n       value2str: function(value) {                                                                                    // 86\n           var str = '';                                                                                               // 87\n           if(value) {                                                                                                 // 88\n               for(var k in value) {                                                                                   // 89\n                   str = str + k + ':' + value[k] + ';';                                                               // 90\n               }                                                                                                       // 91\n           }                                                                                                           // 92\n           return str;                                                                                                 // 93\n       },                                                                                                              // 94\n                                                                                                                       // 95\n       /*                                                                                                              // 96\n        Converts string to value. Used for reading value from 'data-value' attribute.                                  // 97\n                                                                                                                       // 98\n        @method str2value(str)                                                                                         // 99\n       */                                                                                                              // 100\n       str2value: function(str) {                                                                                      // 101\n           /*                                                                                                          // 102\n           this is mainly for parsing value defined in data-value attribute.                                           // 103\n           If you will always set value by javascript, no need to overwrite it                                         // 104\n           */                                                                                                          // 105\n           return str;                                                                                                 // 106\n       },                                                                                                              // 107\n                                                                                                                       // 108\n       /**                                                                                                             // 109\n        Sets value of input.                                                                                           // 110\n                                                                                                                       // 111\n        @method value2input(value)                                                                                     // 112\n        @param {mixed} value                                                                                           // 113\n       **/                                                                                                             // 114\n       value2input: function(value) {                                                                                  // 115\n           if(!value) {                                                                                                // 116\n             return;                                                                                                   // 117\n           }                                                                                                           // 118\n           this.$input.filter('[name=\"city\"]').val(value.city);                                                        // 119\n           this.$input.filter('[name=\"street\"]').val(value.street);                                                    // 120\n           this.$input.filter('[name=\"building\"]').val(value.building);                                                // 121\n       },                                                                                                              // 122\n                                                                                                                       // 123\n       /**                                                                                                             // 124\n        Returns value of input.                                                                                        // 125\n                                                                                                                       // 126\n        @method input2value()                                                                                          // 127\n       **/                                                                                                             // 128\n       input2value: function() {                                                                                       // 129\n           return {                                                                                                    // 130\n              city: this.$input.filter('[name=\"city\"]').val(),                                                         // 131\n              street: this.$input.filter('[name=\"street\"]').val(),                                                     // 132\n              building: this.$input.filter('[name=\"building\"]').val()                                                  // 133\n           };                                                                                                          // 134\n       },                                                                                                              // 135\n                                                                                                                       // 136\n        /**                                                                                                            // 137\n        Activates input: sets focus on the first field.                                                                // 138\n                                                                                                                       // 139\n        @method activate()                                                                                             // 140\n       **/                                                                                                             // 141\n       activate: function() {                                                                                          // 142\n            this.$input.filter('[name=\"city\"]').focus();                                                               // 143\n       },                                                                                                              // 144\n                                                                                                                       // 145\n       /**                                                                                                             // 146\n        Attaches handler to submit form in case of 'showbuttons=false' mode                                            // 147\n                                                                                                                       // 148\n        @method autosubmit()                                                                                           // 149\n       **/                                                                                                             // 150\n       autosubmit: function() {                                                                                        // 151\n           this.$input.keydown(function (e) {                                                                          // 152\n                if (e.which === 13) {                                                                                  // 153\n                    $(this).closest('form').submit();                                                                  // 154\n                }                                                                                                      // 155\n           });                                                                                                         // 156\n       }                                                                                                               // 157\n    });                                                                                                                // 158\n                                                                                                                       // 159\n    Address.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {                                       // 160\n        tpl: '<div class=\"editable-address\"><label><span>City: </span><input type=\"text\" name=\"city\" class=\"input-small\"></label></div>'+\n             '<div class=\"editable-address\"><label><span>Street: </span><input type=\"text\" name=\"street\" class=\"input-small\"></label></div>'+\n             '<div class=\"editable-address\"><label><span>Building: </span><input type=\"text\" name=\"building\" class=\"input-mini\"></label></div>',\n                                                                                                                       // 164\n        inputclass: ''                                                                                                 // 165\n    });                                                                                                                // 166\n                                                                                                                       // 167\n    $.fn.editabletypes.address = Address;                                                                              // 168\n                                                                                                                       // 169\n}(window.jQuery));                                                                                                     // 170\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/natestrauser_x-editable-bootstrap/lib/wysihtml5/wysihtml5.js                                               //\n// This file is in bare mode and is not in its own closure.                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\nBootstrap wysihtml5 editor. Based on [bootstrap-wysihtml5](https://github.com/jhollingworth/bootstrap-wysihtml5).      // 2\nYou should include **manually** distributives of `wysihtml5` and `bootstrap-wysihtml5`:                                // 3\n                                                                                                                       // 4\n    <link href=\"js/inputs-ext/wysihtml5/bootstrap-wysihtml5-0.0.2/bootstrap-wysihtml5-0.0.2.css\" rel=\"stylesheet\" type=\"text/css\"></link>  \n    <script src=\"js/inputs-ext/wysihtml5/bootstrap-wysihtml5-0.0.2/wysihtml5-0.3.0.min.js\"></script>                   // 6\n    <script src=\"js/inputs-ext/wysihtml5/bootstrap-wysihtml5-0.0.2/bootstrap-wysihtml5-0.0.2.min.js\"></script>         // 7\n                                                                                                                       // 8\nAnd also include `wysihtml5.js` from `inputs-ext` directory of x-editable:                                             // 9\n                                                                                                                       // 10\n    <script src=\"js/inputs-ext/wysihtml5/wysihtml5.js\"></script>                                                       // 11\n                                                                                                                       // 12\n**Note:** It's better to use fresh bootstrap-wysihtml5 from it's [master branch](https://github.com/jhollingworth/bootstrap-wysihtml5/tree/master/src) as there is update for correct image insertion.    \n                                                                                                                       // 14\n@class wysihtml5                                                                                                       // 15\n@extends abstractinput                                                                                                 // 16\n@final                                                                                                                 // 17\n@since 1.4.0                                                                                                           // 18\n@example                                                                                                               // 19\n<div id=\"comments\" data-type=\"wysihtml5\" data-pk=\"1\"><h2>awesome</h2> comment!</div>                                   // 20\n<script>                                                                                                               // 21\n$(function(){                                                                                                          // 22\n    $('#comments').editable({                                                                                          // 23\n        url: '/post',                                                                                                  // 24\n        title: 'Enter comments'                                                                                        // 25\n    });                                                                                                                // 26\n});                                                                                                                    // 27\n</script>                                                                                                              // 28\n**/                                                                                                                    // 29\n(function ($) {                                                                                                        // 30\n    \"use strict\";                                                                                                      // 31\n                                                                                                                       // 32\n    var Wysihtml5 = function (options) {                                                                               // 33\n        this.init('wysihtml5', options, Wysihtml5.defaults);                                                           // 34\n                                                                                                                       // 35\n        //extend wysihtml5 manually as $.extend not recursive                                                          // 36\n        this.options.wysihtml5 = $.extend({}, Wysihtml5.defaults.wysihtml5, options.wysihtml5);                        // 37\n    };                                                                                                                 // 38\n                                                                                                                       // 39\n    $.fn.editableutils.inherit(Wysihtml5, $.fn.editabletypes.abstractinput);                                           // 40\n                                                                                                                       // 41\n    $.extend(Wysihtml5.prototype, {                                                                                    // 42\n        render: function () {                                                                                          // 43\n            var deferred = $.Deferred(),                                                                               // 44\n            msieOld;                                                                                                   // 45\n                                                                                                                       // 46\n            //generate unique id as it required for wysihtml5                                                          // 47\n            this.$input.attr('id', 'textarea_'+(new Date()).getTime());                                                // 48\n                                                                                                                       // 49\n            this.setClass();                                                                                           // 50\n            this.setAttr('placeholder');                                                                               // 51\n                                                                                                                       // 52\n            //resolve deffered when widget loaded                                                                      // 53\n            $.extend(this.options.wysihtml5, {                                                                         // 54\n                events: {                                                                                              // 55\n                  load: function() {                                                                                   // 56\n                      deferred.resolve();                                                                              // 57\n                  }                                                                                                    // 58\n                }                                                                                                      // 59\n            });                                                                                                        // 60\n                                                                                                                       // 61\n            this.$input.wysihtml5(this.options.wysihtml5);                                                             // 62\n                                                                                                                       // 63\n            /*                                                                                                         // 64\n             In IE8 wysihtml5 iframe stays on the same line with buttons toolbar (inside popover).                     // 65\n             The only solution I found is to add <br>. If you fine better way, please send PR.                         // 66\n            */                                                                                                         // 67\n            msieOld = /msie\\s*(8|7|6)/.test(navigator.userAgent.toLowerCase());                                        // 68\n            if(msieOld) {                                                                                              // 69\n                this.$input.before('<br><br>');                                                                        // 70\n            }                                                                                                          // 71\n                                                                                                                       // 72\n            return deferred.promise();                                                                                 // 73\n        },                                                                                                             // 74\n                                                                                                                       // 75\n        value2html: function(value, element) {                                                                         // 76\n            $(element).html(value);                                                                                    // 77\n        },                                                                                                             // 78\n                                                                                                                       // 79\n        html2value: function(html) {                                                                                   // 80\n            return html;                                                                                               // 81\n        },                                                                                                             // 82\n                                                                                                                       // 83\n        value2input: function(value) {                                                                                 // 84\n            this.$input.data(\"wysihtml5\").editor.setValue(value, true);                                                // 85\n        },                                                                                                             // 86\n                                                                                                                       // 87\n        activate: function() {                                                                                         // 88\n            this.$input.data(\"wysihtml5\").editor.focus();                                                              // 89\n        },                                                                                                             // 90\n                                                                                                                       // 91\n        isEmpty: function($element) {                                                                                  // 92\n            if($.trim($element.html()) === '') {                                                                       // 93\n                return true;                                                                                           // 94\n            } else if($.trim($element.text()) !== '') {                                                                // 95\n                return false;                                                                                          // 96\n            } else {                                                                                                   // 97\n                //e.g. '<img>', '<br>', '<p></p>'                                                                      // 98\n                return !$element.height() || !$element.width();                                                        // 99\n            }                                                                                                          // 100\n        }                                                                                                              // 101\n    });                                                                                                                // 102\n                                                                                                                       // 103\n    Wysihtml5.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {                                     // 104\n        /**                                                                                                            // 105\n        @property tpl                                                                                                  // 106\n        @default <textarea></textarea>                                                                                 // 107\n        **/                                                                                                            // 108\n        tpl:'<textarea></textarea>',                                                                                   // 109\n        /**                                                                                                            // 110\n        @property inputclass                                                                                           // 111\n        @default editable-wysihtml5                                                                                    // 112\n        **/                                                                                                            // 113\n        inputclass: 'editable-wysihtml5',                                                                              // 114\n        /**                                                                                                            // 115\n        Placeholder attribute of input. Shown when input is empty.                                                     // 116\n                                                                                                                       // 117\n        @property placeholder                                                                                          // 118\n        @type string                                                                                                   // 119\n        @default null                                                                                                  // 120\n        **/                                                                                                            // 121\n        placeholder: null,                                                                                             // 122\n        /**                                                                                                            // 123\n        Wysihtml5 default options.                                                                                     // 124\n        See https://github.com/jhollingworth/bootstrap-wysihtml5#options                                               // 125\n                                                                                                                       // 126\n        @property wysihtml5                                                                                            // 127\n        @type object                                                                                                   // 128\n        @default {stylesheets: false}                                                                                  // 129\n        **/                                                                                                            // 130\n        wysihtml5: {                                                                                                   // 131\n            stylesheets: false //see https://github.com/jhollingworth/bootstrap-wysihtml5/issues/183                   // 132\n        }                                                                                                              // 133\n    });                                                                                                                // 134\n                                                                                                                       // 135\n    $.fn.editabletypes.wysihtml5 = Wysihtml5;                                                                          // 136\n                                                                                                                       // 137\n}(window.jQuery));                                                                                                     // 138\n                                                                                                                       // 139\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/natestrauser_x-editable-bootstrap/lib/wysihtml5/bootstrap-wysihtml5-0.0.2/wysihtml5-0.3.0.js               //\n// This file is in bare mode and is not in its own closure.                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * @license wysihtml5 v0.3.0                                                                                           // 2\n * https://github.com/xing/wysihtml5                                                                                   // 3\n *                                                                                                                     // 4\n * Author: Christopher Blum (https://github.com/tiff)                                                                  // 5\n *                                                                                                                     // 6\n * Copyright (C) 2012 XING AG                                                                                          // 7\n * Licensed under the MIT license (MIT)                                                                                // 8\n *                                                                                                                     // 9\n */                                                                                                                    // 10\nwysihtml5 = {                                                                                                          // 11\n  version: \"0.3.0\",                                                                                                    // 12\n                                                                                                                       // 13\n  // namespaces                                                                                                        // 14\n  commands:   {},                                                                                                      // 15\n  dom:        {},                                                                                                      // 16\n  quirks:     {},                                                                                                      // 17\n  toolbar:    {},                                                                                                      // 18\n  lang:       {},                                                                                                      // 19\n  selection:  {},                                                                                                      // 20\n  views:      {},                                                                                                      // 21\n                                                                                                                       // 22\n  INVISIBLE_SPACE: \"\\uFEFF\",                                                                                           // 23\n                                                                                                                       // 24\n  EMPTY_FUNCTION: function() {},                                                                                       // 25\n                                                                                                                       // 26\n  ELEMENT_NODE: 1,                                                                                                     // 27\n  TEXT_NODE:    3,                                                                                                     // 28\n                                                                                                                       // 29\n  BACKSPACE_KEY:  8,                                                                                                   // 30\n  ENTER_KEY:      13,                                                                                                  // 31\n  ESCAPE_KEY:     27,                                                                                                  // 32\n  SPACE_KEY:      32,                                                                                                  // 33\n  DELETE_KEY:     46                                                                                                   // 34\n};/**                                                                                                                  // 35\n * @license Rangy, a cross-browser JavaScript range and selection library                                              // 36\n * http://code.google.com/p/rangy/                                                                                     // 37\n *                                                                                                                     // 38\n * Copyright 2011, Tim Down                                                                                            // 39\n * Licensed under the MIT license.                                                                                     // 40\n * Version: 1.2.2                                                                                                      // 41\n * Build date: 13 November 2011                                                                                        // 42\n */                                                                                                                    // 43\nwindow['rangy'] = (function() {                                                                                        // 44\n                                                                                                                       // 45\n                                                                                                                       // 46\n    var OBJECT = \"object\", FUNCTION = \"function\", UNDEFINED = \"undefined\";                                             // 47\n                                                                                                                       // 48\n    var domRangeProperties = [\"startContainer\", \"startOffset\", \"endContainer\", \"endOffset\", \"collapsed\",               // 49\n        \"commonAncestorContainer\", \"START_TO_START\", \"START_TO_END\", \"END_TO_START\", \"END_TO_END\"];                    // 50\n                                                                                                                       // 51\n    var domRangeMethods = [\"setStart\", \"setStartBefore\", \"setStartAfter\", \"setEnd\", \"setEndBefore\",                    // 52\n        \"setEndAfter\", \"collapse\", \"selectNode\", \"selectNodeContents\", \"compareBoundaryPoints\", \"deleteContents\",      // 53\n        \"extractContents\", \"cloneContents\", \"insertNode\", \"surroundContents\", \"cloneRange\", \"toString\", \"detach\"];     // 54\n                                                                                                                       // 55\n    var textRangeProperties = [\"boundingHeight\", \"boundingLeft\", \"boundingTop\", \"boundingWidth\", \"htmlText\", \"text\"];  // 56\n                                                                                                                       // 57\n    // Subset of TextRange's full set of methods that we're interested in                                              // 58\n    var textRangeMethods = [\"collapse\", \"compareEndPoints\", \"duplicate\", \"getBookmark\", \"moveToBookmark\",              // 59\n        \"moveToElementText\", \"parentElement\", \"pasteHTML\", \"select\", \"setEndPoint\", \"getBoundingClientRect\"];          // 60\n                                                                                                                       // 61\n    /*----------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 63\n    // Trio of functions taken from Peter Michaux's article:                                                           // 64\n    // http://peter.michaux.ca/articles/feature-detection-state-of-the-art-browser-scripting                           // 65\n    function isHostMethod(o, p) {                                                                                      // 66\n        var t = typeof o[p];                                                                                           // 67\n        return t == FUNCTION || (!!(t == OBJECT && o[p])) || t == \"unknown\";                                           // 68\n    }                                                                                                                  // 69\n                                                                                                                       // 70\n    function isHostObject(o, p) {                                                                                      // 71\n        return !!(typeof o[p] == OBJECT && o[p]);                                                                      // 72\n    }                                                                                                                  // 73\n                                                                                                                       // 74\n    function isHostProperty(o, p) {                                                                                    // 75\n        return typeof o[p] != UNDEFINED;                                                                               // 76\n    }                                                                                                                  // 77\n                                                                                                                       // 78\n    // Creates a convenience function to save verbose repeated calls to tests functions                                // 79\n    function createMultiplePropertyTest(testFunc) {                                                                    // 80\n        return function(o, props) {                                                                                    // 81\n            var i = props.length;                                                                                      // 82\n            while (i--) {                                                                                              // 83\n                if (!testFunc(o, props[i])) {                                                                          // 84\n                    return false;                                                                                      // 85\n                }                                                                                                      // 86\n            }                                                                                                          // 87\n            return true;                                                                                               // 88\n        };                                                                                                             // 89\n    }                                                                                                                  // 90\n                                                                                                                       // 91\n    // Next trio of functions are a convenience to save verbose repeated calls to previous two functions               // 92\n    var areHostMethods = createMultiplePropertyTest(isHostMethod);                                                     // 93\n    var areHostObjects = createMultiplePropertyTest(isHostObject);                                                     // 94\n    var areHostProperties = createMultiplePropertyTest(isHostProperty);                                                // 95\n                                                                                                                       // 96\n    function isTextRange(range) {                                                                                      // 97\n        return range && areHostMethods(range, textRangeMethods) && areHostProperties(range, textRangeProperties);      // 98\n    }                                                                                                                  // 99\n                                                                                                                       // 100\n    var api = {                                                                                                        // 101\n        version: \"1.2.2\",                                                                                              // 102\n        initialized: false,                                                                                            // 103\n        supported: true,                                                                                               // 104\n                                                                                                                       // 105\n        util: {                                                                                                        // 106\n            isHostMethod: isHostMethod,                                                                                // 107\n            isHostObject: isHostObject,                                                                                // 108\n            isHostProperty: isHostProperty,                                                                            // 109\n            areHostMethods: areHostMethods,                                                                            // 110\n            areHostObjects: areHostObjects,                                                                            // 111\n            areHostProperties: areHostProperties,                                                                      // 112\n            isTextRange: isTextRange                                                                                   // 113\n        },                                                                                                             // 114\n                                                                                                                       // 115\n        features: {},                                                                                                  // 116\n                                                                                                                       // 117\n        modules: {},                                                                                                   // 118\n        config: {                                                                                                      // 119\n            alertOnWarn: false,                                                                                        // 120\n            preferTextRange: false                                                                                     // 121\n        }                                                                                                              // 122\n    };                                                                                                                 // 123\n                                                                                                                       // 124\n    function fail(reason) {                                                                                            // 125\n        window.alert(\"Rangy not supported in your browser. Reason: \" + reason);                                        // 126\n        api.initialized = true;                                                                                        // 127\n        api.supported = false;                                                                                         // 128\n    }                                                                                                                  // 129\n                                                                                                                       // 130\n    api.fail = fail;                                                                                                   // 131\n                                                                                                                       // 132\n    function warn(msg) {                                                                                               // 133\n        var warningMessage = \"Rangy warning: \" + msg;                                                                  // 134\n        if (api.config.alertOnWarn) {                                                                                  // 135\n            window.alert(warningMessage);                                                                              // 136\n        } else if (typeof window.console != UNDEFINED && typeof window.console.log != UNDEFINED) {                     // 137\n            window.console.log(warningMessage);                                                                        // 138\n        }                                                                                                              // 139\n    }                                                                                                                  // 140\n                                                                                                                       // 141\n    api.warn = warn;                                                                                                   // 142\n                                                                                                                       // 143\n    if ({}.hasOwnProperty) {                                                                                           // 144\n        api.util.extend = function(o, props) {                                                                         // 145\n            for (var i in props) {                                                                                     // 146\n                if (props.hasOwnProperty(i)) {                                                                         // 147\n                    o[i] = props[i];                                                                                   // 148\n                }                                                                                                      // 149\n            }                                                                                                          // 150\n        };                                                                                                             // 151\n    } else {                                                                                                           // 152\n        fail(\"hasOwnProperty not supported\");                                                                          // 153\n    }                                                                                                                  // 154\n                                                                                                                       // 155\n    var initListeners = [];                                                                                            // 156\n    var moduleInitializers = [];                                                                                       // 157\n                                                                                                                       // 158\n    // Initialization                                                                                                  // 159\n    function init() {                                                                                                  // 160\n        if (api.initialized) {                                                                                         // 161\n            return;                                                                                                    // 162\n        }                                                                                                              // 163\n        var testRange;                                                                                                 // 164\n        var implementsDomRange = false, implementsTextRange = false;                                                   // 165\n                                                                                                                       // 166\n        // First, perform basic feature tests                                                                          // 167\n                                                                                                                       // 168\n        if (isHostMethod(document, \"createRange\")) {                                                                   // 169\n            testRange = document.createRange();                                                                        // 170\n            if (areHostMethods(testRange, domRangeMethods) && areHostProperties(testRange, domRangeProperties)) {      // 171\n                implementsDomRange = true;                                                                             // 172\n            }                                                                                                          // 173\n            testRange.detach();                                                                                        // 174\n        }                                                                                                              // 175\n                                                                                                                       // 176\n        var body = isHostObject(document, \"body\") ? document.body : document.getElementsByTagName(\"body\")[0];          // 177\n                                                                                                                       // 178\n        if (body && isHostMethod(body, \"createTextRange\")) {                                                           // 179\n            testRange = body.createTextRange();                                                                        // 180\n            if (isTextRange(testRange)) {                                                                              // 181\n                implementsTextRange = true;                                                                            // 182\n            }                                                                                                          // 183\n        }                                                                                                              // 184\n                                                                                                                       // 185\n        if (!implementsDomRange && !implementsTextRange) {                                                             // 186\n            fail(\"Neither Range nor TextRange are implemented\");                                                       // 187\n        }                                                                                                              // 188\n                                                                                                                       // 189\n        api.initialized = true;                                                                                        // 190\n        api.features = {                                                                                               // 191\n            implementsDomRange: implementsDomRange,                                                                    // 192\n            implementsTextRange: implementsTextRange                                                                   // 193\n        };                                                                                                             // 194\n                                                                                                                       // 195\n        // Initialize modules and call init listeners                                                                  // 196\n        var allListeners = moduleInitializers.concat(initListeners);                                                   // 197\n        for (var i = 0, len = allListeners.length; i < len; ++i) {                                                     // 198\n            try {                                                                                                      // 199\n                allListeners[i](api);                                                                                  // 200\n            } catch (ex) {                                                                                             // 201\n                if (isHostObject(window, \"console\") && isHostMethod(window.console, \"log\")) {                          // 202\n                    window.console.log(\"Init listener threw an exception. Continuing.\", ex);                           // 203\n                }                                                                                                      // 204\n                                                                                                                       // 205\n            }                                                                                                          // 206\n        }                                                                                                              // 207\n    }                                                                                                                  // 208\n                                                                                                                       // 209\n    // Allow external scripts to initialize this library in case it's loaded after the document has loaded             // 210\n    api.init = init;                                                                                                   // 211\n                                                                                                                       // 212\n    // Execute listener immediately if already initialized                                                             // 213\n    api.addInitListener = function(listener) {                                                                         // 214\n        if (api.initialized) {                                                                                         // 215\n            listener(api);                                                                                             // 216\n        } else {                                                                                                       // 217\n            initListeners.push(listener);                                                                              // 218\n        }                                                                                                              // 219\n    };                                                                                                                 // 220\n                                                                                                                       // 221\n    var createMissingNativeApiListeners = [];                                                                          // 222\n                                                                                                                       // 223\n    api.addCreateMissingNativeApiListener = function(listener) {                                                       // 224\n        createMissingNativeApiListeners.push(listener);                                                                // 225\n    };                                                                                                                 // 226\n                                                                                                                       // 227\n    function createMissingNativeApi(win) {                                                                             // 228\n        win = win || window;                                                                                           // 229\n        init();                                                                                                        // 230\n                                                                                                                       // 231\n        // Notify listeners                                                                                            // 232\n        for (var i = 0, len = createMissingNativeApiListeners.length; i < len; ++i) {                                  // 233\n            createMissingNativeApiListeners[i](win);                                                                   // 234\n        }                                                                                                              // 235\n    }                                                                                                                  // 236\n                                                                                                                       // 237\n    api.createMissingNativeApi = createMissingNativeApi;                                                               // 238\n                                                                                                                       // 239\n    /**                                                                                                                // 240\n     * @constructor                                                                                                    // 241\n     */                                                                                                                // 242\n    function Module(name) {                                                                                            // 243\n        this.name = name;                                                                                              // 244\n        this.initialized = false;                                                                                      // 245\n        this.supported = false;                                                                                        // 246\n    }                                                                                                                  // 247\n                                                                                                                       // 248\n    Module.prototype.fail = function(reason) {                                                                         // 249\n        this.initialized = true;                                                                                       // 250\n        this.supported = false;                                                                                        // 251\n                                                                                                                       // 252\n        throw new Error(\"Module '\" + this.name + \"' failed to load: \" + reason);                                       // 253\n    };                                                                                                                 // 254\n                                                                                                                       // 255\n    Module.prototype.warn = function(msg) {                                                                            // 256\n        api.warn(\"Module \" + this.name + \": \" + msg);                                                                  // 257\n    };                                                                                                                 // 258\n                                                                                                                       // 259\n    Module.prototype.createError = function(msg) {                                                                     // 260\n        return new Error(\"Error in Rangy \" + this.name + \" module: \" + msg);                                           // 261\n    };                                                                                                                 // 262\n                                                                                                                       // 263\n    api.createModule = function(name, initFunc) {                                                                      // 264\n        var module = new Module(name);                                                                                 // 265\n        api.modules[name] = module;                                                                                    // 266\n                                                                                                                       // 267\n        moduleInitializers.push(function(api) {                                                                        // 268\n            initFunc(api, module);                                                                                     // 269\n            module.initialized = true;                                                                                 // 270\n            module.supported = true;                                                                                   // 271\n        });                                                                                                            // 272\n    };                                                                                                                 // 273\n                                                                                                                       // 274\n    api.requireModules = function(modules) {                                                                           // 275\n        for (var i = 0, len = modules.length, module, moduleName; i < len; ++i) {                                      // 276\n            moduleName = modules[i];                                                                                   // 277\n            module = api.modules[moduleName];                                                                          // 278\n            if (!module || !(module instanceof Module)) {                                                              // 279\n                throw new Error(\"Module '\" + moduleName + \"' not found\");                                              // 280\n            }                                                                                                          // 281\n            if (!module.supported) {                                                                                   // 282\n                throw new Error(\"Module '\" + moduleName + \"' not supported\");                                          // 283\n            }                                                                                                          // 284\n        }                                                                                                              // 285\n    };                                                                                                                 // 286\n                                                                                                                       // 287\n    /*----------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 289\n    // Wait for document to load before running tests                                                                  // 290\n                                                                                                                       // 291\n    var docReady = false;                                                                                              // 292\n                                                                                                                       // 293\n    var loadHandler = function(e) {                                                                                    // 294\n                                                                                                                       // 295\n        if (!docReady) {                                                                                               // 296\n            docReady = true;                                                                                           // 297\n            if (!api.initialized) {                                                                                    // 298\n                init();                                                                                                // 299\n            }                                                                                                          // 300\n        }                                                                                                              // 301\n    };                                                                                                                 // 302\n                                                                                                                       // 303\n    // Test whether we have window and document objects that we will need                                              // 304\n    if (typeof window == UNDEFINED) {                                                                                  // 305\n        fail(\"No window found\");                                                                                       // 306\n        return;                                                                                                        // 307\n    }                                                                                                                  // 308\n    if (typeof document == UNDEFINED) {                                                                                // 309\n        fail(\"No document found\");                                                                                     // 310\n        return;                                                                                                        // 311\n    }                                                                                                                  // 312\n                                                                                                                       // 313\n    if (isHostMethod(document, \"addEventListener\")) {                                                                  // 314\n        document.addEventListener(\"DOMContentLoaded\", loadHandler, false);                                             // 315\n    }                                                                                                                  // 316\n                                                                                                                       // 317\n    // Add a fallback in case the DOMContentLoaded event isn't supported                                               // 318\n    if (isHostMethod(window, \"addEventListener\")) {                                                                    // 319\n        window.addEventListener(\"load\", loadHandler, false);                                                           // 320\n    } else if (isHostMethod(window, \"attachEvent\")) {                                                                  // 321\n        window.attachEvent(\"onload\", loadHandler);                                                                     // 322\n    } else {                                                                                                           // 323\n        fail(\"Window does not have required addEventListener or attachEvent method\");                                  // 324\n    }                                                                                                                  // 325\n                                                                                                                       // 326\n    return api;                                                                                                        // 327\n})();                                                                                                                  // 328\nrangy.createModule(\"DomUtil\", function(api, module) {                                                                  // 329\n                                                                                                                       // 330\n    var UNDEF = \"undefined\";                                                                                           // 331\n    var util = api.util;                                                                                               // 332\n                                                                                                                       // 333\n    // Perform feature tests                                                                                           // 334\n    if (!util.areHostMethods(document, [\"createDocumentFragment\", \"createElement\", \"createTextNode\"])) {               // 335\n        module.fail(\"document missing a Node creation method\");                                                        // 336\n    }                                                                                                                  // 337\n                                                                                                                       // 338\n    if (!util.isHostMethod(document, \"getElementsByTagName\")) {                                                        // 339\n        module.fail(\"document missing getElementsByTagName method\");                                                   // 340\n    }                                                                                                                  // 341\n                                                                                                                       // 342\n    var el = document.createElement(\"div\");                                                                            // 343\n    if (!util.areHostMethods(el, [\"insertBefore\", \"appendChild\", \"cloneNode\"] ||                                       // 344\n            !util.areHostObjects(el, [\"previousSibling\", \"nextSibling\", \"childNodes\", \"parentNode\"]))) {               // 345\n        module.fail(\"Incomplete Element implementation\");                                                              // 346\n    }                                                                                                                  // 347\n                                                                                                                       // 348\n    // innerHTML is required for Range's createContextualFragment method                                               // 349\n    if (!util.isHostProperty(el, \"innerHTML\")) {                                                                       // 350\n        module.fail(\"Element is missing innerHTML property\");                                                          // 351\n    }                                                                                                                  // 352\n                                                                                                                       // 353\n    var textNode = document.createTextNode(\"test\");                                                                    // 354\n    if (!util.areHostMethods(textNode, [\"splitText\", \"deleteData\", \"insertData\", \"appendData\", \"cloneNode\"] ||         // 355\n            !util.areHostObjects(el, [\"previousSibling\", \"nextSibling\", \"childNodes\", \"parentNode\"]) ||                // 356\n            !util.areHostProperties(textNode, [\"data\"]))) {                                                            // 357\n        module.fail(\"Incomplete Text Node implementation\");                                                            // 358\n    }                                                                                                                  // 359\n                                                                                                                       // 360\n    /*----------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 362\n    // Removed use of indexOf because of a bizarre bug in Opera that is thrown in one of the Acid3 tests. I haven't been\n    // able to replicate it outside of the test. The bug is that indexOf returns -1 when called on an Array that       // 364\n    // contains just the document as a single element and the value searched for is the document.                      // 365\n    var arrayContains = /*Array.prototype.indexOf ?                                                                    // 366\n        function(arr, val) {                                                                                           // 367\n            return arr.indexOf(val) > -1;                                                                              // 368\n        }:*/                                                                                                           // 369\n                                                                                                                       // 370\n        function(arr, val) {                                                                                           // 371\n            var i = arr.length;                                                                                        // 372\n            while (i--) {                                                                                              // 373\n                if (arr[i] === val) {                                                                                  // 374\n                    return true;                                                                                       // 375\n                }                                                                                                      // 376\n            }                                                                                                          // 377\n            return false;                                                                                              // 378\n        };                                                                                                             // 379\n                                                                                                                       // 380\n    // Opera 11 puts HTML elements in the null namespace, it seems, and IE 7 has undefined namespaceURI                // 381\n    function isHtmlNamespace(node) {                                                                                   // 382\n        var ns;                                                                                                        // 383\n        return typeof node.namespaceURI == UNDEF || ((ns = node.namespaceURI) === null || ns == \"http://www.w3.org/1999/xhtml\");\n    }                                                                                                                  // 385\n                                                                                                                       // 386\n    function parentElement(node) {                                                                                     // 387\n        var parent = node.parentNode;                                                                                  // 388\n        return (parent.nodeType == 1) ? parent : null;                                                                 // 389\n    }                                                                                                                  // 390\n                                                                                                                       // 391\n    function getNodeIndex(node) {                                                                                      // 392\n        var i = 0;                                                                                                     // 393\n        while( (node = node.previousSibling) ) {                                                                       // 394\n            i++;                                                                                                       // 395\n        }                                                                                                              // 396\n        return i;                                                                                                      // 397\n    }                                                                                                                  // 398\n                                                                                                                       // 399\n    function getNodeLength(node) {                                                                                     // 400\n        var childNodes;                                                                                                // 401\n        return isCharacterDataNode(node) ? node.length : ((childNodes = node.childNodes) ? childNodes.length : 0);     // 402\n    }                                                                                                                  // 403\n                                                                                                                       // 404\n    function getCommonAncestor(node1, node2) {                                                                         // 405\n        var ancestors = [], n;                                                                                         // 406\n        for (n = node1; n; n = n.parentNode) {                                                                         // 407\n            ancestors.push(n);                                                                                         // 408\n        }                                                                                                              // 409\n                                                                                                                       // 410\n        for (n = node2; n; n = n.parentNode) {                                                                         // 411\n            if (arrayContains(ancestors, n)) {                                                                         // 412\n                return n;                                                                                              // 413\n            }                                                                                                          // 414\n        }                                                                                                              // 415\n                                                                                                                       // 416\n        return null;                                                                                                   // 417\n    }                                                                                                                  // 418\n                                                                                                                       // 419\n    function isAncestorOf(ancestor, descendant, selfIsAncestor) {                                                      // 420\n        var n = selfIsAncestor ? descendant : descendant.parentNode;                                                   // 421\n        while (n) {                                                                                                    // 422\n            if (n === ancestor) {                                                                                      // 423\n                return true;                                                                                           // 424\n            } else {                                                                                                   // 425\n                n = n.parentNode;                                                                                      // 426\n            }                                                                                                          // 427\n        }                                                                                                              // 428\n        return false;                                                                                                  // 429\n    }                                                                                                                  // 430\n                                                                                                                       // 431\n    function getClosestAncestorIn(node, ancestor, selfIsAncestor) {                                                    // 432\n        var p, n = selfIsAncestor ? node : node.parentNode;                                                            // 433\n        while (n) {                                                                                                    // 434\n            p = n.parentNode;                                                                                          // 435\n            if (p === ancestor) {                                                                                      // 436\n                return n;                                                                                              // 437\n            }                                                                                                          // 438\n            n = p;                                                                                                     // 439\n        }                                                                                                              // 440\n        return null;                                                                                                   // 441\n    }                                                                                                                  // 442\n                                                                                                                       // 443\n    function isCharacterDataNode(node) {                                                                               // 444\n        var t = node.nodeType;                                                                                         // 445\n        return t == 3 || t == 4 || t == 8 ; // Text, CDataSection or Comment                                           // 446\n    }                                                                                                                  // 447\n                                                                                                                       // 448\n    function insertAfter(node, precedingNode) {                                                                        // 449\n        var nextNode = precedingNode.nextSibling, parent = precedingNode.parentNode;                                   // 450\n        if (nextNode) {                                                                                                // 451\n            parent.insertBefore(node, nextNode);                                                                       // 452\n        } else {                                                                                                       // 453\n            parent.appendChild(node);                                                                                  // 454\n        }                                                                                                              // 455\n        return node;                                                                                                   // 456\n    }                                                                                                                  // 457\n                                                                                                                       // 458\n    // Note that we cannot use splitText() because it is bugridden in IE 9.                                            // 459\n    function splitDataNode(node, index) {                                                                              // 460\n        var newNode = node.cloneNode(false);                                                                           // 461\n        newNode.deleteData(0, index);                                                                                  // 462\n        node.deleteData(index, node.length - index);                                                                   // 463\n        insertAfter(newNode, node);                                                                                    // 464\n        return newNode;                                                                                                // 465\n    }                                                                                                                  // 466\n                                                                                                                       // 467\n    function getDocument(node) {                                                                                       // 468\n        if (node.nodeType == 9) {                                                                                      // 469\n            return node;                                                                                               // 470\n        } else if (typeof node.ownerDocument != UNDEF) {                                                               // 471\n            return node.ownerDocument;                                                                                 // 472\n        } else if (typeof node.document != UNDEF) {                                                                    // 473\n            return node.document;                                                                                      // 474\n        } else if (node.parentNode) {                                                                                  // 475\n            return getDocument(node.parentNode);                                                                       // 476\n        } else {                                                                                                       // 477\n            throw new Error(\"getDocument: no document found for node\");                                                // 478\n        }                                                                                                              // 479\n    }                                                                                                                  // 480\n                                                                                                                       // 481\n    function getWindow(node) {                                                                                         // 482\n        var doc = getDocument(node);                                                                                   // 483\n        if (typeof doc.defaultView != UNDEF) {                                                                         // 484\n            return doc.defaultView;                                                                                    // 485\n        } else if (typeof doc.parentWindow != UNDEF) {                                                                 // 486\n            return doc.parentWindow;                                                                                   // 487\n        } else {                                                                                                       // 488\n            throw new Error(\"Cannot get a window object for node\");                                                    // 489\n        }                                                                                                              // 490\n    }                                                                                                                  // 491\n                                                                                                                       // 492\n    function getIframeDocument(iframeEl) {                                                                             // 493\n        if (typeof iframeEl.contentDocument != UNDEF) {                                                                // 494\n            return iframeEl.contentDocument;                                                                           // 495\n        } else if (typeof iframeEl.contentWindow != UNDEF) {                                                           // 496\n            return iframeEl.contentWindow.document;                                                                    // 497\n        } else {                                                                                                       // 498\n            throw new Error(\"getIframeWindow: No Document object found for iframe element\");                           // 499\n        }                                                                                                              // 500\n    }                                                                                                                  // 501\n                                                                                                                       // 502\n    function getIframeWindow(iframeEl) {                                                                               // 503\n        if (typeof iframeEl.contentWindow != UNDEF) {                                                                  // 504\n            return iframeEl.contentWindow;                                                                             // 505\n        } else if (typeof iframeEl.contentDocument != UNDEF) {                                                         // 506\n            return iframeEl.contentDocument.defaultView;                                                               // 507\n        } else {                                                                                                       // 508\n            throw new Error(\"getIframeWindow: No Window object found for iframe element\");                             // 509\n        }                                                                                                              // 510\n    }                                                                                                                  // 511\n                                                                                                                       // 512\n    function getBody(doc) {                                                                                            // 513\n        return util.isHostObject(doc, \"body\") ? doc.body : doc.getElementsByTagName(\"body\")[0];                        // 514\n    }                                                                                                                  // 515\n                                                                                                                       // 516\n    function getRootContainer(node) {                                                                                  // 517\n        var parent;                                                                                                    // 518\n        while ( (parent = node.parentNode) ) {                                                                         // 519\n            node = parent;                                                                                             // 520\n        }                                                                                                              // 521\n        return node;                                                                                                   // 522\n    }                                                                                                                  // 523\n                                                                                                                       // 524\n    function comparePoints(nodeA, offsetA, nodeB, offsetB) {                                                           // 525\n        // See http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level-2-Range-Comparing                    // 526\n        var nodeC, root, childA, childB, n;                                                                            // 527\n        if (nodeA == nodeB) {                                                                                          // 528\n                                                                                                                       // 529\n            // Case 1: nodes are the same                                                                              // 530\n            return offsetA === offsetB ? 0 : (offsetA < offsetB) ? -1 : 1;                                             // 531\n        } else if ( (nodeC = getClosestAncestorIn(nodeB, nodeA, true)) ) {                                             // 532\n                                                                                                                       // 533\n            // Case 2: node C (container B or an ancestor) is a child node of A                                        // 534\n            return offsetA <= getNodeIndex(nodeC) ? -1 : 1;                                                            // 535\n        } else if ( (nodeC = getClosestAncestorIn(nodeA, nodeB, true)) ) {                                             // 536\n                                                                                                                       // 537\n            // Case 3: node C (container A or an ancestor) is a child node of B                                        // 538\n            return getNodeIndex(nodeC) < offsetB  ? -1 : 1;                                                            // 539\n        } else {                                                                                                       // 540\n                                                                                                                       // 541\n            // Case 4: containers are siblings or descendants of siblings                                              // 542\n            root = getCommonAncestor(nodeA, nodeB);                                                                    // 543\n            childA = (nodeA === root) ? root : getClosestAncestorIn(nodeA, root, true);                                // 544\n            childB = (nodeB === root) ? root : getClosestAncestorIn(nodeB, root, true);                                // 545\n                                                                                                                       // 546\n            if (childA === childB) {                                                                                   // 547\n                // This shouldn't be possible                                                                          // 548\n                                                                                                                       // 549\n                throw new Error(\"comparePoints got to case 4 and childA and childB are the same!\");                    // 550\n            } else {                                                                                                   // 551\n                n = root.firstChild;                                                                                   // 552\n                while (n) {                                                                                            // 553\n                    if (n === childA) {                                                                                // 554\n                        return -1;                                                                                     // 555\n                    } else if (n === childB) {                                                                         // 556\n                        return 1;                                                                                      // 557\n                    }                                                                                                  // 558\n                    n = n.nextSibling;                                                                                 // 559\n                }                                                                                                      // 560\n                throw new Error(\"Should not be here!\");                                                                // 561\n            }                                                                                                          // 562\n        }                                                                                                              // 563\n    }                                                                                                                  // 564\n                                                                                                                       // 565\n    function fragmentFromNodeChildren(node) {                                                                          // 566\n        var fragment = getDocument(node).createDocumentFragment(), child;                                              // 567\n        while ( (child = node.firstChild) ) {                                                                          // 568\n            fragment.appendChild(child);                                                                               // 569\n        }                                                                                                              // 570\n        return fragment;                                                                                               // 571\n    }                                                                                                                  // 572\n                                                                                                                       // 573\n    function inspectNode(node) {                                                                                       // 574\n        if (!node) {                                                                                                   // 575\n            return \"[No node]\";                                                                                        // 576\n        }                                                                                                              // 577\n        if (isCharacterDataNode(node)) {                                                                               // 578\n            return '\"' + node.data + '\"';                                                                              // 579\n        } else if (node.nodeType == 1) {                                                                               // 580\n            var idAttr = node.id ? ' id=\"' + node.id + '\"' : \"\";                                                       // 581\n            return \"<\" + node.nodeName + idAttr + \">[\" + node.childNodes.length + \"]\";                                 // 582\n        } else {                                                                                                       // 583\n            return node.nodeName;                                                                                      // 584\n        }                                                                                                              // 585\n    }                                                                                                                  // 586\n                                                                                                                       // 587\n    /**                                                                                                                // 588\n     * @constructor                                                                                                    // 589\n     */                                                                                                                // 590\n    function NodeIterator(root) {                                                                                      // 591\n        this.root = root;                                                                                              // 592\n        this._next = root;                                                                                             // 593\n    }                                                                                                                  // 594\n                                                                                                                       // 595\n    NodeIterator.prototype = {                                                                                         // 596\n        _current: null,                                                                                                // 597\n                                                                                                                       // 598\n        hasNext: function() {                                                                                          // 599\n            return !!this._next;                                                                                       // 600\n        },                                                                                                             // 601\n                                                                                                                       // 602\n        next: function() {                                                                                             // 603\n            var n = this._current = this._next;                                                                        // 604\n            var child, next;                                                                                           // 605\n            if (this._current) {                                                                                       // 606\n                child = n.firstChild;                                                                                  // 607\n                if (child) {                                                                                           // 608\n                    this._next = child;                                                                                // 609\n                } else {                                                                                               // 610\n                    next = null;                                                                                       // 611\n                    while ((n !== this.root) && !(next = n.nextSibling)) {                                             // 612\n                        n = n.parentNode;                                                                              // 613\n                    }                                                                                                  // 614\n                    this._next = next;                                                                                 // 615\n                }                                                                                                      // 616\n            }                                                                                                          // 617\n            return this._current;                                                                                      // 618\n        },                                                                                                             // 619\n                                                                                                                       // 620\n        detach: function() {                                                                                           // 621\n            this._current = this._next = this.root = null;                                                             // 622\n        }                                                                                                              // 623\n    };                                                                                                                 // 624\n                                                                                                                       // 625\n    function createIterator(root) {                                                                                    // 626\n        return new NodeIterator(root);                                                                                 // 627\n    }                                                                                                                  // 628\n                                                                                                                       // 629\n    /**                                                                                                                // 630\n     * @constructor                                                                                                    // 631\n     */                                                                                                                // 632\n    function DomPosition(node, offset) {                                                                               // 633\n        this.node = node;                                                                                              // 634\n        this.offset = offset;                                                                                          // 635\n    }                                                                                                                  // 636\n                                                                                                                       // 637\n    DomPosition.prototype = {                                                                                          // 638\n        equals: function(pos) {                                                                                        // 639\n            return this.node === pos.node & this.offset == pos.offset;                                                 // 640\n        },                                                                                                             // 641\n                                                                                                                       // 642\n        inspect: function() {                                                                                          // 643\n            return \"[DomPosition(\" + inspectNode(this.node) + \":\" + this.offset + \")]\";                                // 644\n        }                                                                                                              // 645\n    };                                                                                                                 // 646\n                                                                                                                       // 647\n    /**                                                                                                                // 648\n     * @constructor                                                                                                    // 649\n     */                                                                                                                // 650\n    function DOMException(codeName) {                                                                                  // 651\n        this.code = this[codeName];                                                                                    // 652\n        this.codeName = codeName;                                                                                      // 653\n        this.message = \"DOMException: \" + this.codeName;                                                               // 654\n    }                                                                                                                  // 655\n                                                                                                                       // 656\n    DOMException.prototype = {                                                                                         // 657\n        INDEX_SIZE_ERR: 1,                                                                                             // 658\n        HIERARCHY_REQUEST_ERR: 3,                                                                                      // 659\n        WRONG_DOCUMENT_ERR: 4,                                                                                         // 660\n        NO_MODIFICATION_ALLOWED_ERR: 7,                                                                                // 661\n        NOT_FOUND_ERR: 8,                                                                                              // 662\n        NOT_SUPPORTED_ERR: 9,                                                                                          // 663\n        INVALID_STATE_ERR: 11                                                                                          // 664\n    };                                                                                                                 // 665\n                                                                                                                       // 666\n    DOMException.prototype.toString = function() {                                                                     // 667\n        return this.message;                                                                                           // 668\n    };                                                                                                                 // 669\n                                                                                                                       // 670\n    api.dom = {                                                                                                        // 671\n        arrayContains: arrayContains,                                                                                  // 672\n        isHtmlNamespace: isHtmlNamespace,                                                                              // 673\n        parentElement: parentElement,                                                                                  // 674\n        getNodeIndex: getNodeIndex,                                                                                    // 675\n        getNodeLength: getNodeLength,                                                                                  // 676\n        getCommonAncestor: getCommonAncestor,                                                                          // 677\n        isAncestorOf: isAncestorOf,                                                                                    // 678\n        getClosestAncestorIn: getClosestAncestorIn,                                                                    // 679\n        isCharacterDataNode: isCharacterDataNode,                                                                      // 680\n        insertAfter: insertAfter,                                                                                      // 681\n        splitDataNode: splitDataNode,                                                                                  // 682\n        getDocument: getDocument,                                                                                      // 683\n        getWindow: getWindow,                                                                                          // 684\n        getIframeWindow: getIframeWindow,                                                                              // 685\n        getIframeDocument: getIframeDocument,                                                                          // 686\n        getBody: getBody,                                                                                              // 687\n        getRootContainer: getRootContainer,                                                                            // 688\n        comparePoints: comparePoints,                                                                                  // 689\n        inspectNode: inspectNode,                                                                                      // 690\n        fragmentFromNodeChildren: fragmentFromNodeChildren,                                                            // 691\n        createIterator: createIterator,                                                                                // 692\n        DomPosition: DomPosition                                                                                       // 693\n    };                                                                                                                 // 694\n                                                                                                                       // 695\n    api.DOMException = DOMException;                                                                                   // 696\n});rangy.createModule(\"DomRange\", function(api, module) {                                                              // 697\n    api.requireModules( [\"DomUtil\"] );                                                                                 // 698\n                                                                                                                       // 699\n                                                                                                                       // 700\n    var dom = api.dom;                                                                                                 // 701\n    var DomPosition = dom.DomPosition;                                                                                 // 702\n    var DOMException = api.DOMException;                                                                               // 703\n                                                                                                                       // 704\n    /*----------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 706\n    // Utility functions                                                                                               // 707\n                                                                                                                       // 708\n    function isNonTextPartiallySelected(node, range) {                                                                 // 709\n        return (node.nodeType != 3) &&                                                                                 // 710\n               (dom.isAncestorOf(node, range.startContainer, true) || dom.isAncestorOf(node, range.endContainer, true));\n    }                                                                                                                  // 712\n                                                                                                                       // 713\n    function getRangeDocument(range) {                                                                                 // 714\n        return dom.getDocument(range.startContainer);                                                                  // 715\n    }                                                                                                                  // 716\n                                                                                                                       // 717\n    function dispatchEvent(range, type, args) {                                                                        // 718\n        var listeners = range._listeners[type];                                                                        // 719\n        if (listeners) {                                                                                               // 720\n            for (var i = 0, len = listeners.length; i < len; ++i) {                                                    // 721\n                listeners[i].call(range, {target: range, args: args});                                                 // 722\n            }                                                                                                          // 723\n        }                                                                                                              // 724\n    }                                                                                                                  // 725\n                                                                                                                       // 726\n    function getBoundaryBeforeNode(node) {                                                                             // 727\n        return new DomPosition(node.parentNode, dom.getNodeIndex(node));                                               // 728\n    }                                                                                                                  // 729\n                                                                                                                       // 730\n    function getBoundaryAfterNode(node) {                                                                              // 731\n        return new DomPosition(node.parentNode, dom.getNodeIndex(node) + 1);                                           // 732\n    }                                                                                                                  // 733\n                                                                                                                       // 734\n    function insertNodeAtPosition(node, n, o) {                                                                        // 735\n        var firstNodeInserted = node.nodeType == 11 ? node.firstChild : node;                                          // 736\n        if (dom.isCharacterDataNode(n)) {                                                                              // 737\n            if (o == n.length) {                                                                                       // 738\n                dom.insertAfter(node, n);                                                                              // 739\n            } else {                                                                                                   // 740\n                n.parentNode.insertBefore(node, o == 0 ? n : dom.splitDataNode(n, o));                                 // 741\n            }                                                                                                          // 742\n        } else if (o >= n.childNodes.length) {                                                                         // 743\n            n.appendChild(node);                                                                                       // 744\n        } else {                                                                                                       // 745\n            n.insertBefore(node, n.childNodes[o]);                                                                     // 746\n        }                                                                                                              // 747\n        return firstNodeInserted;                                                                                      // 748\n    }                                                                                                                  // 749\n                                                                                                                       // 750\n    function cloneSubtree(iterator) {                                                                                  // 751\n        var partiallySelected;                                                                                         // 752\n        for (var node, frag = getRangeDocument(iterator.range).createDocumentFragment(), subIterator; node = iterator.next(); ) {\n            partiallySelected = iterator.isPartiallySelectedSubtree();                                                 // 754\n                                                                                                                       // 755\n            node = node.cloneNode(!partiallySelected);                                                                 // 756\n            if (partiallySelected) {                                                                                   // 757\n                subIterator = iterator.getSubtreeIterator();                                                           // 758\n                node.appendChild(cloneSubtree(subIterator));                                                           // 759\n                subIterator.detach(true);                                                                              // 760\n            }                                                                                                          // 761\n                                                                                                                       // 762\n            if (node.nodeType == 10) { // DocumentType                                                                 // 763\n                throw new DOMException(\"HIERARCHY_REQUEST_ERR\");                                                       // 764\n            }                                                                                                          // 765\n            frag.appendChild(node);                                                                                    // 766\n        }                                                                                                              // 767\n        return frag;                                                                                                   // 768\n    }                                                                                                                  // 769\n                                                                                                                       // 770\n    function iterateSubtree(rangeIterator, func, iteratorState) {                                                      // 771\n        var it, n;                                                                                                     // 772\n        iteratorState = iteratorState || { stop: false };                                                              // 773\n        for (var node, subRangeIterator; node = rangeIterator.next(); ) {                                              // 774\n            //log.debug(\"iterateSubtree, partially selected: \" + rangeIterator.isPartiallySelectedSubtree(), nodeToString(node));\n            if (rangeIterator.isPartiallySelectedSubtree()) {                                                          // 776\n                // The node is partially selected by the Range, so we can use a new RangeIterator on the portion of the\n                // node selected by the Range.                                                                         // 778\n                if (func(node) === false) {                                                                            // 779\n                    iteratorState.stop = true;                                                                         // 780\n                    return;                                                                                            // 781\n                } else {                                                                                               // 782\n                    subRangeIterator = rangeIterator.getSubtreeIterator();                                             // 783\n                    iterateSubtree(subRangeIterator, func, iteratorState);                                             // 784\n                    subRangeIterator.detach(true);                                                                     // 785\n                    if (iteratorState.stop) {                                                                          // 786\n                        return;                                                                                        // 787\n                    }                                                                                                  // 788\n                }                                                                                                      // 789\n            } else {                                                                                                   // 790\n                // The whole node is selected, so we can use efficient DOM iteration to iterate over the node and its  // 791\n                // descendant                                                                                          // 792\n                it = dom.createIterator(node);                                                                         // 793\n                while ( (n = it.next()) ) {                                                                            // 794\n                    if (func(n) === false) {                                                                           // 795\n                        iteratorState.stop = true;                                                                     // 796\n                        return;                                                                                        // 797\n                    }                                                                                                  // 798\n                }                                                                                                      // 799\n            }                                                                                                          // 800\n        }                                                                                                              // 801\n    }                                                                                                                  // 802\n                                                                                                                       // 803\n    function deleteSubtree(iterator) {                                                                                 // 804\n        var subIterator;                                                                                               // 805\n        while (iterator.next()) {                                                                                      // 806\n            if (iterator.isPartiallySelectedSubtree()) {                                                               // 807\n                subIterator = iterator.getSubtreeIterator();                                                           // 808\n                deleteSubtree(subIterator);                                                                            // 809\n                subIterator.detach(true);                                                                              // 810\n            } else {                                                                                                   // 811\n                iterator.remove();                                                                                     // 812\n            }                                                                                                          // 813\n        }                                                                                                              // 814\n    }                                                                                                                  // 815\n                                                                                                                       // 816\n    function extractSubtree(iterator) {                                                                                // 817\n                                                                                                                       // 818\n        for (var node, frag = getRangeDocument(iterator.range).createDocumentFragment(), subIterator; node = iterator.next(); ) {\n                                                                                                                       // 820\n                                                                                                                       // 821\n            if (iterator.isPartiallySelectedSubtree()) {                                                               // 822\n                node = node.cloneNode(false);                                                                          // 823\n                subIterator = iterator.getSubtreeIterator();                                                           // 824\n                node.appendChild(extractSubtree(subIterator));                                                         // 825\n                subIterator.detach(true);                                                                              // 826\n            } else {                                                                                                   // 827\n                iterator.remove();                                                                                     // 828\n            }                                                                                                          // 829\n            if (node.nodeType == 10) { // DocumentType                                                                 // 830\n                throw new DOMException(\"HIERARCHY_REQUEST_ERR\");                                                       // 831\n            }                                                                                                          // 832\n            frag.appendChild(node);                                                                                    // 833\n        }                                                                                                              // 834\n        return frag;                                                                                                   // 835\n    }                                                                                                                  // 836\n                                                                                                                       // 837\n    function getNodesInRange(range, nodeTypes, filter) {                                                               // 838\n        //log.info(\"getNodesInRange, \" + nodeTypes.join(\",\"));                                                         // 839\n        var filterNodeTypes = !!(nodeTypes && nodeTypes.length), regex;                                                // 840\n        var filterExists = !!filter;                                                                                   // 841\n        if (filterNodeTypes) {                                                                                         // 842\n            regex = new RegExp(\"^(\" + nodeTypes.join(\"|\") + \")$\");                                                     // 843\n        }                                                                                                              // 844\n                                                                                                                       // 845\n        var nodes = [];                                                                                                // 846\n        iterateSubtree(new RangeIterator(range, false), function(node) {                                               // 847\n            if ((!filterNodeTypes || regex.test(node.nodeType)) && (!filterExists || filter(node))) {                  // 848\n                nodes.push(node);                                                                                      // 849\n            }                                                                                                          // 850\n        });                                                                                                            // 851\n        return nodes;                                                                                                  // 852\n    }                                                                                                                  // 853\n                                                                                                                       // 854\n    function inspect(range) {                                                                                          // 855\n        var name = (typeof range.getName == \"undefined\") ? \"Range\" : range.getName();                                  // 856\n        return \"[\" + name + \"(\" + dom.inspectNode(range.startContainer) + \":\" + range.startOffset + \", \" +             // 857\n                dom.inspectNode(range.endContainer) + \":\" + range.endOffset + \")]\";                                    // 858\n    }                                                                                                                  // 859\n                                                                                                                       // 860\n    /*----------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 862\n    // RangeIterator code partially borrows from IERange by Tim Ryan (http://github.com/timcameronryan/IERange)        // 863\n                                                                                                                       // 864\n    /**                                                                                                                // 865\n     * @constructor                                                                                                    // 866\n     */                                                                                                                // 867\n    function RangeIterator(range, clonePartiallySelectedTextNodes) {                                                   // 868\n        this.range = range;                                                                                            // 869\n        this.clonePartiallySelectedTextNodes = clonePartiallySelectedTextNodes;                                        // 870\n                                                                                                                       // 871\n                                                                                                                       // 872\n                                                                                                                       // 873\n        if (!range.collapsed) {                                                                                        // 874\n            this.sc = range.startContainer;                                                                            // 875\n            this.so = range.startOffset;                                                                               // 876\n            this.ec = range.endContainer;                                                                              // 877\n            this.eo = range.endOffset;                                                                                 // 878\n            var root = range.commonAncestorContainer;                                                                  // 879\n                                                                                                                       // 880\n            if (this.sc === this.ec && dom.isCharacterDataNode(this.sc)) {                                             // 881\n                this.isSingleCharacterDataNode = true;                                                                 // 882\n                this._first = this._last = this._next = this.sc;                                                       // 883\n            } else {                                                                                                   // 884\n                this._first = this._next = (this.sc === root && !dom.isCharacterDataNode(this.sc)) ?                   // 885\n                    this.sc.childNodes[this.so] : dom.getClosestAncestorIn(this.sc, root, true);                       // 886\n                this._last = (this.ec === root && !dom.isCharacterDataNode(this.ec)) ?                                 // 887\n                    this.ec.childNodes[this.eo - 1] : dom.getClosestAncestorIn(this.ec, root, true);                   // 888\n            }                                                                                                          // 889\n                                                                                                                       // 890\n        }                                                                                                              // 891\n    }                                                                                                                  // 892\n                                                                                                                       // 893\n    RangeIterator.prototype = {                                                                                        // 894\n        _current: null,                                                                                                // 895\n        _next: null,                                                                                                   // 896\n        _first: null,                                                                                                  // 897\n        _last: null,                                                                                                   // 898\n        isSingleCharacterDataNode: false,                                                                              // 899\n                                                                                                                       // 900\n        reset: function() {                                                                                            // 901\n            this._current = null;                                                                                      // 902\n            this._next = this._first;                                                                                  // 903\n        },                                                                                                             // 904\n                                                                                                                       // 905\n        hasNext: function() {                                                                                          // 906\n            return !!this._next;                                                                                       // 907\n        },                                                                                                             // 908\n                                                                                                                       // 909\n        next: function() {                                                                                             // 910\n            // Move to next node                                                                                       // 911\n            var current = this._current = this._next;                                                                  // 912\n            if (current) {                                                                                             // 913\n                this._next = (current !== this._last) ? current.nextSibling : null;                                    // 914\n                                                                                                                       // 915\n                // Check for partially selected text nodes                                                             // 916\n                if (dom.isCharacterDataNode(current) && this.clonePartiallySelectedTextNodes) {                        // 917\n                    if (current === this.ec) {                                                                         // 918\n                                                                                                                       // 919\n                        (current = current.cloneNode(true)).deleteData(this.eo, current.length - this.eo);             // 920\n                    }                                                                                                  // 921\n                    if (this._current === this.sc) {                                                                   // 922\n                                                                                                                       // 923\n                        (current = current.cloneNode(true)).deleteData(0, this.so);                                    // 924\n                    }                                                                                                  // 925\n                }                                                                                                      // 926\n            }                                                                                                          // 927\n                                                                                                                       // 928\n            return current;                                                                                            // 929\n        },                                                                                                             // 930\n                                                                                                                       // 931\n        remove: function() {                                                                                           // 932\n            var current = this._current, start, end;                                                                   // 933\n                                                                                                                       // 934\n            if (dom.isCharacterDataNode(current) && (current === this.sc || current === this.ec)) {                    // 935\n                start = (current === this.sc) ? this.so : 0;                                                           // 936\n                end = (current === this.ec) ? this.eo : current.length;                                                // 937\n                if (start != end) {                                                                                    // 938\n                    current.deleteData(start, end - start);                                                            // 939\n                }                                                                                                      // 940\n            } else {                                                                                                   // 941\n                if (current.parentNode) {                                                                              // 942\n                    current.parentNode.removeChild(current);                                                           // 943\n                } else {                                                                                               // 944\n                                                                                                                       // 945\n                }                                                                                                      // 946\n            }                                                                                                          // 947\n        },                                                                                                             // 948\n                                                                                                                       // 949\n        // Checks if the current node is partially selected                                                            // 950\n        isPartiallySelectedSubtree: function() {                                                                       // 951\n            var current = this._current;                                                                               // 952\n            return isNonTextPartiallySelected(current, this.range);                                                    // 953\n        },                                                                                                             // 954\n                                                                                                                       // 955\n        getSubtreeIterator: function() {                                                                               // 956\n            var subRange;                                                                                              // 957\n            if (this.isSingleCharacterDataNode) {                                                                      // 958\n                subRange = this.range.cloneRange();                                                                    // 959\n                subRange.collapse();                                                                                   // 960\n            } else {                                                                                                   // 961\n                subRange = new Range(getRangeDocument(this.range));                                                    // 962\n                var current = this._current;                                                                           // 963\n                var startContainer = current, startOffset = 0, endContainer = current, endOffset = dom.getNodeLength(current);\n                                                                                                                       // 965\n                if (dom.isAncestorOf(current, this.sc, true)) {                                                        // 966\n                    startContainer = this.sc;                                                                          // 967\n                    startOffset = this.so;                                                                             // 968\n                }                                                                                                      // 969\n                if (dom.isAncestorOf(current, this.ec, true)) {                                                        // 970\n                    endContainer = this.ec;                                                                            // 971\n                    endOffset = this.eo;                                                                               // 972\n                }                                                                                                      // 973\n                                                                                                                       // 974\n                updateBoundaries(subRange, startContainer, startOffset, endContainer, endOffset);                      // 975\n            }                                                                                                          // 976\n            return new RangeIterator(subRange, this.clonePartiallySelectedTextNodes);                                  // 977\n        },                                                                                                             // 978\n                                                                                                                       // 979\n        detach: function(detachRange) {                                                                                // 980\n            if (detachRange) {                                                                                         // 981\n                this.range.detach();                                                                                   // 982\n            }                                                                                                          // 983\n            this.range = this._current = this._next = this._first = this._last = this.sc = this.so = this.ec = this.eo = null;\n        }                                                                                                              // 985\n    };                                                                                                                 // 986\n                                                                                                                       // 987\n    /*----------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 989\n    // Exceptions                                                                                                      // 990\n                                                                                                                       // 991\n    /**                                                                                                                // 992\n     * @constructor                                                                                                    // 993\n     */                                                                                                                // 994\n    function RangeException(codeName) {                                                                                // 995\n        this.code = this[codeName];                                                                                    // 996\n        this.codeName = codeName;                                                                                      // 997\n        this.message = \"RangeException: \" + this.codeName;                                                             // 998\n    }                                                                                                                  // 999\n                                                                                                                       // 1000\n    RangeException.prototype = {                                                                                       // 1001\n        BAD_BOUNDARYPOINTS_ERR: 1,                                                                                     // 1002\n        INVALID_NODE_TYPE_ERR: 2                                                                                       // 1003\n    };                                                                                                                 // 1004\n                                                                                                                       // 1005\n    RangeException.prototype.toString = function() {                                                                   // 1006\n        return this.message;                                                                                           // 1007\n    };                                                                                                                 // 1008\n                                                                                                                       // 1009\n    /*----------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 1011\n    /**                                                                                                                // 1012\n     * Currently iterates through all nodes in the range on creation until I think of a decent way to do it            // 1013\n     * TODO: Look into making this a proper iterator, not requiring preloading everything first                        // 1014\n     * @constructor                                                                                                    // 1015\n     */                                                                                                                // 1016\n    function RangeNodeIterator(range, nodeTypes, filter) {                                                             // 1017\n        this.nodes = getNodesInRange(range, nodeTypes, filter);                                                        // 1018\n        this._next = this.nodes[0];                                                                                    // 1019\n        this._position = 0;                                                                                            // 1020\n    }                                                                                                                  // 1021\n                                                                                                                       // 1022\n    RangeNodeIterator.prototype = {                                                                                    // 1023\n        _current: null,                                                                                                // 1024\n                                                                                                                       // 1025\n        hasNext: function() {                                                                                          // 1026\n            return !!this._next;                                                                                       // 1027\n        },                                                                                                             // 1028\n                                                                                                                       // 1029\n        next: function() {                                                                                             // 1030\n            this._current = this._next;                                                                                // 1031\n            this._next = this.nodes[ ++this._position ];                                                               // 1032\n            return this._current;                                                                                      // 1033\n        },                                                                                                             // 1034\n                                                                                                                       // 1035\n        detach: function() {                                                                                           // 1036\n            this._current = this._next = this.nodes = null;                                                            // 1037\n        }                                                                                                              // 1038\n    };                                                                                                                 // 1039\n                                                                                                                       // 1040\n    var beforeAfterNodeTypes = [1, 3, 4, 5, 7, 8, 10];                                                                 // 1041\n    var rootContainerNodeTypes = [2, 9, 11];                                                                           // 1042\n    var readonlyNodeTypes = [5, 6, 10, 12];                                                                            // 1043\n    var insertableNodeTypes = [1, 3, 4, 5, 7, 8, 10, 11];                                                              // 1044\n    var surroundNodeTypes = [1, 3, 4, 5, 7, 8];                                                                        // 1045\n                                                                                                                       // 1046\n    function createAncestorFinder(nodeTypes) {                                                                         // 1047\n        return function(node, selfIsAncestor) {                                                                        // 1048\n            var t, n = selfIsAncestor ? node : node.parentNode;                                                        // 1049\n            while (n) {                                                                                                // 1050\n                t = n.nodeType;                                                                                        // 1051\n                if (dom.arrayContains(nodeTypes, t)) {                                                                 // 1052\n                    return n;                                                                                          // 1053\n                }                                                                                                      // 1054\n                n = n.parentNode;                                                                                      // 1055\n            }                                                                                                          // 1056\n            return null;                                                                                               // 1057\n        };                                                                                                             // 1058\n    }                                                                                                                  // 1059\n                                                                                                                       // 1060\n    var getRootContainer = dom.getRootContainer;                                                                       // 1061\n    var getDocumentOrFragmentContainer = createAncestorFinder( [9, 11] );                                              // 1062\n    var getReadonlyAncestor = createAncestorFinder(readonlyNodeTypes);                                                 // 1063\n    var getDocTypeNotationEntityAncestor = createAncestorFinder( [6, 10, 12] );                                        // 1064\n                                                                                                                       // 1065\n    function assertNoDocTypeNotationEntityAncestor(node, allowSelf) {                                                  // 1066\n        if (getDocTypeNotationEntityAncestor(node, allowSelf)) {                                                       // 1067\n            throw new RangeException(\"INVALID_NODE_TYPE_ERR\");                                                         // 1068\n        }                                                                                                              // 1069\n    }                                                                                                                  // 1070\n                                                                                                                       // 1071\n    function assertNotDetached(range) {                                                                                // 1072\n        if (!range.startContainer) {                                                                                   // 1073\n            throw new DOMException(\"INVALID_STATE_ERR\");                                                               // 1074\n        }                                                                                                              // 1075\n    }                                                                                                                  // 1076\n                                                                                                                       // 1077\n    function assertValidNodeType(node, invalidTypes) {                                                                 // 1078\n        if (!dom.arrayContains(invalidTypes, node.nodeType)) {                                                         // 1079\n            throw new RangeException(\"INVALID_NODE_TYPE_ERR\");                                                         // 1080\n        }                                                                                                              // 1081\n    }                                                                                                                  // 1082\n                                                                                                                       // 1083\n    function assertValidOffset(node, offset) {                                                                         // 1084\n        if (offset < 0 || offset > (dom.isCharacterDataNode(node) ? node.length : node.childNodes.length)) {           // 1085\n            throw new DOMException(\"INDEX_SIZE_ERR\");                                                                  // 1086\n        }                                                                                                              // 1087\n    }                                                                                                                  // 1088\n                                                                                                                       // 1089\n    function assertSameDocumentOrFragment(node1, node2) {                                                              // 1090\n        if (getDocumentOrFragmentContainer(node1, true) !== getDocumentOrFragmentContainer(node2, true)) {             // 1091\n            throw new DOMException(\"WRONG_DOCUMENT_ERR\");                                                              // 1092\n        }                                                                                                              // 1093\n    }                                                                                                                  // 1094\n                                                                                                                       // 1095\n    function assertNodeNotReadOnly(node) {                                                                             // 1096\n        if (getReadonlyAncestor(node, true)) {                                                                         // 1097\n            throw new DOMException(\"NO_MODIFICATION_ALLOWED_ERR\");                                                     // 1098\n        }                                                                                                              // 1099\n    }                                                                                                                  // 1100\n                                                                                                                       // 1101\n    function assertNode(node, codeName) {                                                                              // 1102\n        if (!node) {                                                                                                   // 1103\n            throw new DOMException(codeName);                                                                          // 1104\n        }                                                                                                              // 1105\n    }                                                                                                                  // 1106\n                                                                                                                       // 1107\n    function isOrphan(node) {                                                                                          // 1108\n        return !dom.arrayContains(rootContainerNodeTypes, node.nodeType) && !getDocumentOrFragmentContainer(node, true);\n    }                                                                                                                  // 1110\n                                                                                                                       // 1111\n    function isValidOffset(node, offset) {                                                                             // 1112\n        return offset <= (dom.isCharacterDataNode(node) ? node.length : node.childNodes.length);                       // 1113\n    }                                                                                                                  // 1114\n                                                                                                                       // 1115\n    function assertRangeValid(range) {                                                                                 // 1116\n        assertNotDetached(range);                                                                                      // 1117\n        if (isOrphan(range.startContainer) || isOrphan(range.endContainer) ||                                          // 1118\n                !isValidOffset(range.startContainer, range.startOffset) ||                                             // 1119\n                !isValidOffset(range.endContainer, range.endOffset)) {                                                 // 1120\n            throw new Error(\"Range error: Range is no longer valid after DOM mutation (\" + range.inspect() + \")\");     // 1121\n        }                                                                                                              // 1122\n    }                                                                                                                  // 1123\n                                                                                                                       // 1124\n    /*----------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 1126\n    // Test the browser's innerHTML support to decide how to implement createContextualFragment                        // 1127\n    var styleEl = document.createElement(\"style\");                                                                     // 1128\n    var htmlParsingConforms = false;                                                                                   // 1129\n    try {                                                                                                              // 1130\n        styleEl.innerHTML = \"<b>x</b>\";                                                                                // 1131\n        htmlParsingConforms = (styleEl.firstChild.nodeType == 3); // Opera incorrectly creates an element node         // 1132\n    } catch (e) {                                                                                                      // 1133\n        // IE 6 and 7 throw                                                                                            // 1134\n    }                                                                                                                  // 1135\n                                                                                                                       // 1136\n    api.features.htmlParsingConforms = htmlParsingConforms;                                                            // 1137\n                                                                                                                       // 1138\n    var createContextualFragment = htmlParsingConforms ?                                                               // 1139\n                                                                                                                       // 1140\n        // Implementation as per HTML parsing spec, trusting in the browser's implementation of innerHTML. See         // 1141\n        // discussion and base code for this implementation at issue 67.                                               // 1142\n        // Spec: http://html5.org/specs/dom-parsing.html#extensions-to-the-range-interface                             // 1143\n        // Thanks to Aleks Williams.                                                                                   // 1144\n        function(fragmentStr) {                                                                                        // 1145\n            // \"Let node the context object's start's node.\"                                                           // 1146\n            var node = this.startContainer;                                                                            // 1147\n            var doc = dom.getDocument(node);                                                                           // 1148\n                                                                                                                       // 1149\n            // \"If the context object's start's node is null, raise an INVALID_STATE_ERR                               // 1150\n            // exception and abort these steps.\"                                                                       // 1151\n            if (!node) {                                                                                               // 1152\n                throw new DOMException(\"INVALID_STATE_ERR\");                                                           // 1153\n            }                                                                                                          // 1154\n                                                                                                                       // 1155\n            // \"Let element be as follows, depending on node's interface:\"                                             // 1156\n            // Document, Document Fragment: null                                                                       // 1157\n            var el = null;                                                                                             // 1158\n                                                                                                                       // 1159\n            // \"Element: node\"                                                                                         // 1160\n            if (node.nodeType == 1) {                                                                                  // 1161\n                el = node;                                                                                             // 1162\n                                                                                                                       // 1163\n            // \"Text, Comment: node's parentElement\"                                                                   // 1164\n            } else if (dom.isCharacterDataNode(node)) {                                                                // 1165\n                el = dom.parentElement(node);                                                                          // 1166\n            }                                                                                                          // 1167\n                                                                                                                       // 1168\n            // \"If either element is null or element's ownerDocument is an HTML document                               // 1169\n            // and element's local name is \"html\" and element's namespace is the HTML                                  // 1170\n            // namespace\"                                                                                              // 1171\n            if (el === null || (                                                                                       // 1172\n                el.nodeName == \"HTML\"                                                                                  // 1173\n                && dom.isHtmlNamespace(dom.getDocument(el).documentElement)                                            // 1174\n                && dom.isHtmlNamespace(el)                                                                             // 1175\n            )) {                                                                                                       // 1176\n                                                                                                                       // 1177\n            // \"let element be a new Element with \"body\" as its local name and the HTML                                // 1178\n            // namespace as its namespace.\"\"                                                                           // 1179\n                el = doc.createElement(\"body\");                                                                        // 1180\n            } else {                                                                                                   // 1181\n                el = el.cloneNode(false);                                                                              // 1182\n            }                                                                                                          // 1183\n                                                                                                                       // 1184\n            // \"If the node's document is an HTML document: Invoke the HTML fragment parsing algorithm.\"               // 1185\n            // \"If the node's document is an XML document: Invoke the XML fragment parsing algorithm.\"                 // 1186\n            // \"In either case, the algorithm must be invoked with fragment as the input                               // 1187\n            // and element as the context element.\"                                                                    // 1188\n            el.innerHTML = fragmentStr;                                                                                // 1189\n                                                                                                                       // 1190\n            // \"If this raises an exception, then abort these steps. Otherwise, let new                                // 1191\n            // children be the nodes returned.\"                                                                        // 1192\n                                                                                                                       // 1193\n            // \"Let fragment be a new DocumentFragment.\"                                                               // 1194\n            // \"Append all new children to fragment.\"                                                                  // 1195\n            // \"Return fragment.\"                                                                                      // 1196\n            return dom.fragmentFromNodeChildren(el);                                                                   // 1197\n        } :                                                                                                            // 1198\n                                                                                                                       // 1199\n        // In this case, innerHTML cannot be trusted, so fall back to a simpler, non-conformant implementation that    // 1200\n        // previous versions of Rangy used (with the exception of using a body element rather than a div)              // 1201\n        function(fragmentStr) {                                                                                        // 1202\n            assertNotDetached(this);                                                                                   // 1203\n            var doc = getRangeDocument(this);                                                                          // 1204\n            var el = doc.createElement(\"body\");                                                                        // 1205\n            el.innerHTML = fragmentStr;                                                                                // 1206\n                                                                                                                       // 1207\n            return dom.fragmentFromNodeChildren(el);                                                                   // 1208\n        };                                                                                                             // 1209\n                                                                                                                       // 1210\n    /*----------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 1212\n    var rangeProperties = [\"startContainer\", \"startOffset\", \"endContainer\", \"endOffset\", \"collapsed\",                  // 1213\n        \"commonAncestorContainer\"];                                                                                    // 1214\n                                                                                                                       // 1215\n    var s2s = 0, s2e = 1, e2e = 2, e2s = 3;                                                                            // 1216\n    var n_b = 0, n_a = 1, n_b_a = 2, n_i = 3;                                                                          // 1217\n                                                                                                                       // 1218\n    function RangePrototype() {}                                                                                       // 1219\n                                                                                                                       // 1220\n    RangePrototype.prototype = {                                                                                       // 1221\n        attachListener: function(type, listener) {                                                                     // 1222\n            this._listeners[type].push(listener);                                                                      // 1223\n        },                                                                                                             // 1224\n                                                                                                                       // 1225\n        compareBoundaryPoints: function(how, range) {                                                                  // 1226\n            assertRangeValid(this);                                                                                    // 1227\n            assertSameDocumentOrFragment(this.startContainer, range.startContainer);                                   // 1228\n                                                                                                                       // 1229\n            var nodeA, offsetA, nodeB, offsetB;                                                                        // 1230\n            var prefixA = (how == e2s || how == s2s) ? \"start\" : \"end\";                                                // 1231\n            var prefixB = (how == s2e || how == s2s) ? \"start\" : \"end\";                                                // 1232\n            nodeA = this[prefixA + \"Container\"];                                                                       // 1233\n            offsetA = this[prefixA + \"Offset\"];                                                                        // 1234\n            nodeB = range[prefixB + \"Container\"];                                                                      // 1235\n            offsetB = range[prefixB + \"Offset\"];                                                                       // 1236\n            return dom.comparePoints(nodeA, offsetA, nodeB, offsetB);                                                  // 1237\n        },                                                                                                             // 1238\n                                                                                                                       // 1239\n        insertNode: function(node) {                                                                                   // 1240\n            assertRangeValid(this);                                                                                    // 1241\n            assertValidNodeType(node, insertableNodeTypes);                                                            // 1242\n            assertNodeNotReadOnly(this.startContainer);                                                                // 1243\n                                                                                                                       // 1244\n            if (dom.isAncestorOf(node, this.startContainer, true)) {                                                   // 1245\n                throw new DOMException(\"HIERARCHY_REQUEST_ERR\");                                                       // 1246\n            }                                                                                                          // 1247\n                                                                                                                       // 1248\n            // No check for whether the container of the start of the Range is of a type that does not allow           // 1249\n            // children of the type of node: the browser's DOM implementation should do this for us when we attempt    // 1250\n            // to add the node                                                                                         // 1251\n                                                                                                                       // 1252\n            var firstNodeInserted = insertNodeAtPosition(node, this.startContainer, this.startOffset);                 // 1253\n            this.setStartBefore(firstNodeInserted);                                                                    // 1254\n        },                                                                                                             // 1255\n                                                                                                                       // 1256\n        cloneContents: function() {                                                                                    // 1257\n            assertRangeValid(this);                                                                                    // 1258\n                                                                                                                       // 1259\n            var clone, frag;                                                                                           // 1260\n            if (this.collapsed) {                                                                                      // 1261\n                return getRangeDocument(this).createDocumentFragment();                                                // 1262\n            } else {                                                                                                   // 1263\n                if (this.startContainer === this.endContainer && dom.isCharacterDataNode(this.startContainer)) {       // 1264\n                    clone = this.startContainer.cloneNode(true);                                                       // 1265\n                    clone.data = clone.data.slice(this.startOffset, this.endOffset);                                   // 1266\n                    frag = getRangeDocument(this).createDocumentFragment();                                            // 1267\n                    frag.appendChild(clone);                                                                           // 1268\n                    return frag;                                                                                       // 1269\n                } else {                                                                                               // 1270\n                    var iterator = new RangeIterator(this, true);                                                      // 1271\n                    clone = cloneSubtree(iterator);                                                                    // 1272\n                    iterator.detach();                                                                                 // 1273\n                }                                                                                                      // 1274\n                return clone;                                                                                          // 1275\n            }                                                                                                          // 1276\n        },                                                                                                             // 1277\n                                                                                                                       // 1278\n        canSurroundContents: function() {                                                                              // 1279\n            assertRangeValid(this);                                                                                    // 1280\n            assertNodeNotReadOnly(this.startContainer);                                                                // 1281\n            assertNodeNotReadOnly(this.endContainer);                                                                  // 1282\n                                                                                                                       // 1283\n            // Check if the contents can be surrounded. Specifically, this means whether the range partially selects   // 1284\n            // no non-text nodes.                                                                                      // 1285\n            var iterator = new RangeIterator(this, true);                                                              // 1286\n            var boundariesInvalid = (iterator._first && (isNonTextPartiallySelected(iterator._first, this)) ||         // 1287\n                    (iterator._last && isNonTextPartiallySelected(iterator._last, this)));                             // 1288\n            iterator.detach();                                                                                         // 1289\n            return !boundariesInvalid;                                                                                 // 1290\n        },                                                                                                             // 1291\n                                                                                                                       // 1292\n        surroundContents: function(node) {                                                                             // 1293\n            assertValidNodeType(node, surroundNodeTypes);                                                              // 1294\n                                                                                                                       // 1295\n            if (!this.canSurroundContents()) {                                                                         // 1296\n                throw new RangeException(\"BAD_BOUNDARYPOINTS_ERR\");                                                    // 1297\n            }                                                                                                          // 1298\n                                                                                                                       // 1299\n            // Extract the contents                                                                                    // 1300\n            var content = this.extractContents();                                                                      // 1301\n                                                                                                                       // 1302\n            // Clear the children of the node                                                                          // 1303\n            if (node.hasChildNodes()) {                                                                                // 1304\n                while (node.lastChild) {                                                                               // 1305\n                    node.removeChild(node.lastChild);                                                                  // 1306\n                }                                                                                                      // 1307\n            }                                                                                                          // 1308\n                                                                                                                       // 1309\n            // Insert the new node and add the extracted contents                                                      // 1310\n            insertNodeAtPosition(node, this.startContainer, this.startOffset);                                         // 1311\n            node.appendChild(content);                                                                                 // 1312\n                                                                                                                       // 1313\n            this.selectNode(node);                                                                                     // 1314\n        },                                                                                                             // 1315\n                                                                                                                       // 1316\n        cloneRange: function() {                                                                                       // 1317\n            assertRangeValid(this);                                                                                    // 1318\n            var range = new Range(getRangeDocument(this));                                                             // 1319\n            var i = rangeProperties.length, prop;                                                                      // 1320\n            while (i--) {                                                                                              // 1321\n                prop = rangeProperties[i];                                                                             // 1322\n                range[prop] = this[prop];                                                                              // 1323\n            }                                                                                                          // 1324\n            return range;                                                                                              // 1325\n        },                                                                                                             // 1326\n                                                                                                                       // 1327\n        toString: function() {                                                                                         // 1328\n            assertRangeValid(this);                                                                                    // 1329\n            var sc = this.startContainer;                                                                              // 1330\n            if (sc === this.endContainer && dom.isCharacterDataNode(sc)) {                                             // 1331\n                return (sc.nodeType == 3 || sc.nodeType == 4) ? sc.data.slice(this.startOffset, this.endOffset) : \"\";  // 1332\n            } else {                                                                                                   // 1333\n                var textBits = [], iterator = new RangeIterator(this, true);                                           // 1334\n                                                                                                                       // 1335\n                iterateSubtree(iterator, function(node) {                                                              // 1336\n                    // Accept only text or CDATA nodes, not comments                                                   // 1337\n                                                                                                                       // 1338\n                    if (node.nodeType == 3 || node.nodeType == 4) {                                                    // 1339\n                        textBits.push(node.data);                                                                      // 1340\n                    }                                                                                                  // 1341\n                });                                                                                                    // 1342\n                iterator.detach();                                                                                     // 1343\n                return textBits.join(\"\");                                                                              // 1344\n            }                                                                                                          // 1345\n        },                                                                                                             // 1346\n                                                                                                                       // 1347\n        // The methods below are all non-standard. The following batch were introduced by Mozilla but have since       // 1348\n        // been removed from Mozilla.                                                                                  // 1349\n                                                                                                                       // 1350\n        compareNode: function(node) {                                                                                  // 1351\n            assertRangeValid(this);                                                                                    // 1352\n                                                                                                                       // 1353\n            var parent = node.parentNode;                                                                              // 1354\n            var nodeIndex = dom.getNodeIndex(node);                                                                    // 1355\n                                                                                                                       // 1356\n            if (!parent) {                                                                                             // 1357\n                throw new DOMException(\"NOT_FOUND_ERR\");                                                               // 1358\n            }                                                                                                          // 1359\n                                                                                                                       // 1360\n            var startComparison = this.comparePoint(parent, nodeIndex),                                                // 1361\n                endComparison = this.comparePoint(parent, nodeIndex + 1);                                              // 1362\n                                                                                                                       // 1363\n            if (startComparison < 0) { // Node starts before                                                           // 1364\n                return (endComparison > 0) ? n_b_a : n_b;                                                              // 1365\n            } else {                                                                                                   // 1366\n                return (endComparison > 0) ? n_a : n_i;                                                                // 1367\n            }                                                                                                          // 1368\n        },                                                                                                             // 1369\n                                                                                                                       // 1370\n        comparePoint: function(node, offset) {                                                                         // 1371\n            assertRangeValid(this);                                                                                    // 1372\n            assertNode(node, \"HIERARCHY_REQUEST_ERR\");                                                                 // 1373\n            assertSameDocumentOrFragment(node, this.startContainer);                                                   // 1374\n                                                                                                                       // 1375\n            if (dom.comparePoints(node, offset, this.startContainer, this.startOffset) < 0) {                          // 1376\n                return -1;                                                                                             // 1377\n            } else if (dom.comparePoints(node, offset, this.endContainer, this.endOffset) > 0) {                       // 1378\n                return 1;                                                                                              // 1379\n            }                                                                                                          // 1380\n            return 0;                                                                                                  // 1381\n        },                                                                                                             // 1382\n                                                                                                                       // 1383\n        createContextualFragment: createContextualFragment,                                                            // 1384\n                                                                                                                       // 1385\n        toHtml: function() {                                                                                           // 1386\n            assertRangeValid(this);                                                                                    // 1387\n            var container = getRangeDocument(this).createElement(\"div\");                                               // 1388\n            container.appendChild(this.cloneContents());                                                               // 1389\n            return container.innerHTML;                                                                                // 1390\n        },                                                                                                             // 1391\n                                                                                                                       // 1392\n        // touchingIsIntersecting determines whether this method considers a node that borders a range intersects      // 1393\n        // with it (as in WebKit) or not (as in Gecko pre-1.9, and the default)                                        // 1394\n        intersectsNode: function(node, touchingIsIntersecting) {                                                       // 1395\n            assertRangeValid(this);                                                                                    // 1396\n            assertNode(node, \"NOT_FOUND_ERR\");                                                                         // 1397\n            if (dom.getDocument(node) !== getRangeDocument(this)) {                                                    // 1398\n                return false;                                                                                          // 1399\n            }                                                                                                          // 1400\n                                                                                                                       // 1401\n            var parent = node.parentNode, offset = dom.getNodeIndex(node);                                             // 1402\n            assertNode(parent, \"NOT_FOUND_ERR\");                                                                       // 1403\n                                                                                                                       // 1404\n            var startComparison = dom.comparePoints(parent, offset, this.endContainer, this.endOffset),                // 1405\n                endComparison = dom.comparePoints(parent, offset + 1, this.startContainer, this.startOffset);          // 1406\n                                                                                                                       // 1407\n            return touchingIsIntersecting ? startComparison <= 0 && endComparison >= 0 : startComparison < 0 && endComparison > 0;\n        },                                                                                                             // 1409\n                                                                                                                       // 1410\n                                                                                                                       // 1411\n        isPointInRange: function(node, offset) {                                                                       // 1412\n            assertRangeValid(this);                                                                                    // 1413\n            assertNode(node, \"HIERARCHY_REQUEST_ERR\");                                                                 // 1414\n            assertSameDocumentOrFragment(node, this.startContainer);                                                   // 1415\n                                                                                                                       // 1416\n            return (dom.comparePoints(node, offset, this.startContainer, this.startOffset) >= 0) &&                    // 1417\n                   (dom.comparePoints(node, offset, this.endContainer, this.endOffset) <= 0);                          // 1418\n        },                                                                                                             // 1419\n                                                                                                                       // 1420\n        // The methods below are non-standard and invented by me.                                                      // 1421\n                                                                                                                       // 1422\n        // Sharing a boundary start-to-end or end-to-start does not count as intersection.                             // 1423\n        intersectsRange: function(range, touchingIsIntersecting) {                                                     // 1424\n            assertRangeValid(this);                                                                                    // 1425\n                                                                                                                       // 1426\n            if (getRangeDocument(range) != getRangeDocument(this)) {                                                   // 1427\n                throw new DOMException(\"WRONG_DOCUMENT_ERR\");                                                          // 1428\n            }                                                                                                          // 1429\n                                                                                                                       // 1430\n            var startComparison = dom.comparePoints(this.startContainer, this.startOffset, range.endContainer, range.endOffset),\n                endComparison = dom.comparePoints(this.endContainer, this.endOffset, range.startContainer, range.startOffset);\n                                                                                                                       // 1433\n            return touchingIsIntersecting ? startComparison <= 0 && endComparison >= 0 : startComparison < 0 && endComparison > 0;\n        },                                                                                                             // 1435\n                                                                                                                       // 1436\n        intersection: function(range) {                                                                                // 1437\n            if (this.intersectsRange(range)) {                                                                         // 1438\n                var startComparison = dom.comparePoints(this.startContainer, this.startOffset, range.startContainer, range.startOffset),\n                    endComparison = dom.comparePoints(this.endContainer, this.endOffset, range.endContainer, range.endOffset);\n                                                                                                                       // 1441\n                var intersectionRange = this.cloneRange();                                                             // 1442\n                                                                                                                       // 1443\n                if (startComparison == -1) {                                                                           // 1444\n                    intersectionRange.setStart(range.startContainer, range.startOffset);                               // 1445\n                }                                                                                                      // 1446\n                if (endComparison == 1) {                                                                              // 1447\n                    intersectionRange.setEnd(range.endContainer, range.endOffset);                                     // 1448\n                }                                                                                                      // 1449\n                return intersectionRange;                                                                              // 1450\n            }                                                                                                          // 1451\n            return null;                                                                                               // 1452\n        },                                                                                                             // 1453\n                                                                                                                       // 1454\n        union: function(range) {                                                                                       // 1455\n            if (this.intersectsRange(range, true)) {                                                                   // 1456\n                var unionRange = this.cloneRange();                                                                    // 1457\n                if (dom.comparePoints(range.startContainer, range.startOffset, this.startContainer, this.startOffset) == -1) {\n                    unionRange.setStart(range.startContainer, range.startOffset);                                      // 1459\n                }                                                                                                      // 1460\n                if (dom.comparePoints(range.endContainer, range.endOffset, this.endContainer, this.endOffset) == 1) {  // 1461\n                    unionRange.setEnd(range.endContainer, range.endOffset);                                            // 1462\n                }                                                                                                      // 1463\n                return unionRange;                                                                                     // 1464\n            } else {                                                                                                   // 1465\n                throw new RangeException(\"Ranges do not intersect\");                                                   // 1466\n            }                                                                                                          // 1467\n        },                                                                                                             // 1468\n                                                                                                                       // 1469\n        containsNode: function(node, allowPartial) {                                                                   // 1470\n            if (allowPartial) {                                                                                        // 1471\n                return this.intersectsNode(node, false);                                                               // 1472\n            } else {                                                                                                   // 1473\n                return this.compareNode(node) == n_i;                                                                  // 1474\n            }                                                                                                          // 1475\n        },                                                                                                             // 1476\n                                                                                                                       // 1477\n        containsNodeContents: function(node) {                                                                         // 1478\n            return this.comparePoint(node, 0) >= 0 && this.comparePoint(node, dom.getNodeLength(node)) <= 0;           // 1479\n        },                                                                                                             // 1480\n                                                                                                                       // 1481\n        containsRange: function(range) {                                                                               // 1482\n            return this.intersection(range).equals(range);                                                             // 1483\n        },                                                                                                             // 1484\n                                                                                                                       // 1485\n        containsNodeText: function(node) {                                                                             // 1486\n            var nodeRange = this.cloneRange();                                                                         // 1487\n            nodeRange.selectNode(node);                                                                                // 1488\n            var textNodes = nodeRange.getNodes([3]);                                                                   // 1489\n            if (textNodes.length > 0) {                                                                                // 1490\n                nodeRange.setStart(textNodes[0], 0);                                                                   // 1491\n                var lastTextNode = textNodes.pop();                                                                    // 1492\n                nodeRange.setEnd(lastTextNode, lastTextNode.length);                                                   // 1493\n                var contains = this.containsRange(nodeRange);                                                          // 1494\n                nodeRange.detach();                                                                                    // 1495\n                return contains;                                                                                       // 1496\n            } else {                                                                                                   // 1497\n                return this.containsNodeContents(node);                                                                // 1498\n            }                                                                                                          // 1499\n        },                                                                                                             // 1500\n                                                                                                                       // 1501\n        createNodeIterator: function(nodeTypes, filter) {                                                              // 1502\n            assertRangeValid(this);                                                                                    // 1503\n            return new RangeNodeIterator(this, nodeTypes, filter);                                                     // 1504\n        },                                                                                                             // 1505\n                                                                                                                       // 1506\n        getNodes: function(nodeTypes, filter) {                                                                        // 1507\n            assertRangeValid(this);                                                                                    // 1508\n            return getNodesInRange(this, nodeTypes, filter);                                                           // 1509\n        },                                                                                                             // 1510\n                                                                                                                       // 1511\n        getDocument: function() {                                                                                      // 1512\n            return getRangeDocument(this);                                                                             // 1513\n        },                                                                                                             // 1514\n                                                                                                                       // 1515\n        collapseBefore: function(node) {                                                                               // 1516\n            assertNotDetached(this);                                                                                   // 1517\n                                                                                                                       // 1518\n            this.setEndBefore(node);                                                                                   // 1519\n            this.collapse(false);                                                                                      // 1520\n        },                                                                                                             // 1521\n                                                                                                                       // 1522\n        collapseAfter: function(node) {                                                                                // 1523\n            assertNotDetached(this);                                                                                   // 1524\n                                                                                                                       // 1525\n            this.setStartAfter(node);                                                                                  // 1526\n            this.collapse(true);                                                                                       // 1527\n        },                                                                                                             // 1528\n                                                                                                                       // 1529\n        getName: function() {                                                                                          // 1530\n            return \"DomRange\";                                                                                         // 1531\n        },                                                                                                             // 1532\n                                                                                                                       // 1533\n        equals: function(range) {                                                                                      // 1534\n            return Range.rangesEqual(this, range);                                                                     // 1535\n        },                                                                                                             // 1536\n                                                                                                                       // 1537\n        inspect: function() {                                                                                          // 1538\n            return inspect(this);                                                                                      // 1539\n        }                                                                                                              // 1540\n    };                                                                                                                 // 1541\n                                                                                                                       // 1542\n    function copyComparisonConstantsToObject(obj) {                                                                    // 1543\n        obj.START_TO_START = s2s;                                                                                      // 1544\n        obj.START_TO_END = s2e;                                                                                        // 1545\n        obj.END_TO_END = e2e;                                                                                          // 1546\n        obj.END_TO_START = e2s;                                                                                        // 1547\n                                                                                                                       // 1548\n        obj.NODE_BEFORE = n_b;                                                                                         // 1549\n        obj.NODE_AFTER = n_a;                                                                                          // 1550\n        obj.NODE_BEFORE_AND_AFTER = n_b_a;                                                                             // 1551\n        obj.NODE_INSIDE = n_i;                                                                                         // 1552\n    }                                                                                                                  // 1553\n                                                                                                                       // 1554\n    function copyComparisonConstants(constructor) {                                                                    // 1555\n        copyComparisonConstantsToObject(constructor);                                                                  // 1556\n        copyComparisonConstantsToObject(constructor.prototype);                                                        // 1557\n    }                                                                                                                  // 1558\n                                                                                                                       // 1559\n    function createRangeContentRemover(remover, boundaryUpdater) {                                                     // 1560\n        return function() {                                                                                            // 1561\n            assertRangeValid(this);                                                                                    // 1562\n                                                                                                                       // 1563\n            var sc = this.startContainer, so = this.startOffset, root = this.commonAncestorContainer;                  // 1564\n                                                                                                                       // 1565\n            var iterator = new RangeIterator(this, true);                                                              // 1566\n                                                                                                                       // 1567\n            // Work out where to position the range after content removal                                              // 1568\n            var node, boundary;                                                                                        // 1569\n            if (sc !== root) {                                                                                         // 1570\n                node = dom.getClosestAncestorIn(sc, root, true);                                                       // 1571\n                boundary = getBoundaryAfterNode(node);                                                                 // 1572\n                sc = boundary.node;                                                                                    // 1573\n                so = boundary.offset;                                                                                  // 1574\n            }                                                                                                          // 1575\n                                                                                                                       // 1576\n            // Check none of the range is read-only                                                                    // 1577\n            iterateSubtree(iterator, assertNodeNotReadOnly);                                                           // 1578\n                                                                                                                       // 1579\n            iterator.reset();                                                                                          // 1580\n                                                                                                                       // 1581\n            // Remove the content                                                                                      // 1582\n            var returnValue = remover(iterator);                                                                       // 1583\n            iterator.detach();                                                                                         // 1584\n                                                                                                                       // 1585\n            // Move to the new position                                                                                // 1586\n            boundaryUpdater(this, sc, so, sc, so);                                                                     // 1587\n                                                                                                                       // 1588\n            return returnValue;                                                                                        // 1589\n        };                                                                                                             // 1590\n    }                                                                                                                  // 1591\n                                                                                                                       // 1592\n    function createPrototypeRange(constructor, boundaryUpdater, detacher) {                                            // 1593\n        function createBeforeAfterNodeSetter(isBefore, isStart) {                                                      // 1594\n            return function(node) {                                                                                    // 1595\n                assertNotDetached(this);                                                                               // 1596\n                assertValidNodeType(node, beforeAfterNodeTypes);                                                       // 1597\n                assertValidNodeType(getRootContainer(node), rootContainerNodeTypes);                                   // 1598\n                                                                                                                       // 1599\n                var boundary = (isBefore ? getBoundaryBeforeNode : getBoundaryAfterNode)(node);                        // 1600\n                (isStart ? setRangeStart : setRangeEnd)(this, boundary.node, boundary.offset);                         // 1601\n            };                                                                                                         // 1602\n        }                                                                                                              // 1603\n                                                                                                                       // 1604\n        function setRangeStart(range, node, offset) {                                                                  // 1605\n            var ec = range.endContainer, eo = range.endOffset;                                                         // 1606\n            if (node !== range.startContainer || offset !== range.startOffset) {                                       // 1607\n                // Check the root containers of the range and the new boundary, and also check whether the new boundary\n                // is after the current end. In either case, collapse the range to the new position                    // 1609\n                if (getRootContainer(node) != getRootContainer(ec) || dom.comparePoints(node, offset, ec, eo) == 1) {  // 1610\n                    ec = node;                                                                                         // 1611\n                    eo = offset;                                                                                       // 1612\n                }                                                                                                      // 1613\n                boundaryUpdater(range, node, offset, ec, eo);                                                          // 1614\n            }                                                                                                          // 1615\n        }                                                                                                              // 1616\n                                                                                                                       // 1617\n        function setRangeEnd(range, node, offset) {                                                                    // 1618\n            var sc = range.startContainer, so = range.startOffset;                                                     // 1619\n            if (node !== range.endContainer || offset !== range.endOffset) {                                           // 1620\n                // Check the root containers of the range and the new boundary, and also check whether the new boundary\n                // is after the current end. In either case, collapse the range to the new position                    // 1622\n                if (getRootContainer(node) != getRootContainer(sc) || dom.comparePoints(node, offset, sc, so) == -1) {\n                    sc = node;                                                                                         // 1624\n                    so = offset;                                                                                       // 1625\n                }                                                                                                      // 1626\n                boundaryUpdater(range, sc, so, node, offset);                                                          // 1627\n            }                                                                                                          // 1628\n        }                                                                                                              // 1629\n                                                                                                                       // 1630\n        function setRangeStartAndEnd(range, node, offset) {                                                            // 1631\n            if (node !== range.startContainer || offset !== range.startOffset || node !== range.endContainer || offset !== range.endOffset) {\n                boundaryUpdater(range, node, offset, node, offset);                                                    // 1633\n            }                                                                                                          // 1634\n        }                                                                                                              // 1635\n                                                                                                                       // 1636\n        constructor.prototype = new RangePrototype();                                                                  // 1637\n                                                                                                                       // 1638\n        api.util.extend(constructor.prototype, {                                                                       // 1639\n            setStart: function(node, offset) {                                                                         // 1640\n                assertNotDetached(this);                                                                               // 1641\n                assertNoDocTypeNotationEntityAncestor(node, true);                                                     // 1642\n                assertValidOffset(node, offset);                                                                       // 1643\n                                                                                                                       // 1644\n                setRangeStart(this, node, offset);                                                                     // 1645\n            },                                                                                                         // 1646\n                                                                                                                       // 1647\n            setEnd: function(node, offset) {                                                                           // 1648\n                assertNotDetached(this);                                                                               // 1649\n                assertNoDocTypeNotationEntityAncestor(node, true);                                                     // 1650\n                assertValidOffset(node, offset);                                                                       // 1651\n                                                                                                                       // 1652\n                setRangeEnd(this, node, offset);                                                                       // 1653\n            },                                                                                                         // 1654\n                                                                                                                       // 1655\n            setStartBefore: createBeforeAfterNodeSetter(true, true),                                                   // 1656\n            setStartAfter: createBeforeAfterNodeSetter(false, true),                                                   // 1657\n            setEndBefore: createBeforeAfterNodeSetter(true, false),                                                    // 1658\n            setEndAfter: createBeforeAfterNodeSetter(false, false),                                                    // 1659\n                                                                                                                       // 1660\n            collapse: function(isStart) {                                                                              // 1661\n                assertRangeValid(this);                                                                                // 1662\n                if (isStart) {                                                                                         // 1663\n                    boundaryUpdater(this, this.startContainer, this.startOffset, this.startContainer, this.startOffset);\n                } else {                                                                                               // 1665\n                    boundaryUpdater(this, this.endContainer, this.endOffset, this.endContainer, this.endOffset);       // 1666\n                }                                                                                                      // 1667\n            },                                                                                                         // 1668\n                                                                                                                       // 1669\n            selectNodeContents: function(node) {                                                                       // 1670\n                // This doesn't seem well specified: the spec talks only about selecting the node's contents, which    // 1671\n                // could be taken to mean only its children. However, browsers implement this the same as selectNode for\n                // text nodes, so I shall do likewise                                                                  // 1673\n                assertNotDetached(this);                                                                               // 1674\n                assertNoDocTypeNotationEntityAncestor(node, true);                                                     // 1675\n                                                                                                                       // 1676\n                boundaryUpdater(this, node, 0, node, dom.getNodeLength(node));                                         // 1677\n            },                                                                                                         // 1678\n                                                                                                                       // 1679\n            selectNode: function(node) {                                                                               // 1680\n                assertNotDetached(this);                                                                               // 1681\n                assertNoDocTypeNotationEntityAncestor(node, false);                                                    // 1682\n                assertValidNodeType(node, beforeAfterNodeTypes);                                                       // 1683\n                                                                                                                       // 1684\n                var start = getBoundaryBeforeNode(node), end = getBoundaryAfterNode(node);                             // 1685\n                boundaryUpdater(this, start.node, start.offset, end.node, end.offset);                                 // 1686\n            },                                                                                                         // 1687\n                                                                                                                       // 1688\n            extractContents: createRangeContentRemover(extractSubtree, boundaryUpdater),                               // 1689\n                                                                                                                       // 1690\n            deleteContents: createRangeContentRemover(deleteSubtree, boundaryUpdater),                                 // 1691\n                                                                                                                       // 1692\n            canSurroundContents: function() {                                                                          // 1693\n                assertRangeValid(this);                                                                                // 1694\n                assertNodeNotReadOnly(this.startContainer);                                                            // 1695\n                assertNodeNotReadOnly(this.endContainer);                                                              // 1696\n                                                                                                                       // 1697\n                // Check if the contents can be surrounded. Specifically, this means whether the range partially selects\n                // no non-text nodes.                                                                                  // 1699\n                var iterator = new RangeIterator(this, true);                                                          // 1700\n                var boundariesInvalid = (iterator._first && (isNonTextPartiallySelected(iterator._first, this)) ||     // 1701\n                        (iterator._last && isNonTextPartiallySelected(iterator._last, this)));                         // 1702\n                iterator.detach();                                                                                     // 1703\n                return !boundariesInvalid;                                                                             // 1704\n            },                                                                                                         // 1705\n                                                                                                                       // 1706\n            detach: function() {                                                                                       // 1707\n                detacher(this);                                                                                        // 1708\n            },                                                                                                         // 1709\n                                                                                                                       // 1710\n            splitBoundaries: function() {                                                                              // 1711\n                assertRangeValid(this);                                                                                // 1712\n                                                                                                                       // 1713\n                                                                                                                       // 1714\n                var sc = this.startContainer, so = this.startOffset, ec = this.endContainer, eo = this.endOffset;      // 1715\n                var startEndSame = (sc === ec);                                                                        // 1716\n                                                                                                                       // 1717\n                if (dom.isCharacterDataNode(ec) && eo > 0 && eo < ec.length) {                                         // 1718\n                    dom.splitDataNode(ec, eo);                                                                         // 1719\n                                                                                                                       // 1720\n                }                                                                                                      // 1721\n                                                                                                                       // 1722\n                if (dom.isCharacterDataNode(sc) && so > 0 && so < sc.length) {                                         // 1723\n                                                                                                                       // 1724\n                    sc = dom.splitDataNode(sc, so);                                                                    // 1725\n                    if (startEndSame) {                                                                                // 1726\n                        eo -= so;                                                                                      // 1727\n                        ec = sc;                                                                                       // 1728\n                    } else if (ec == sc.parentNode && eo >= dom.getNodeIndex(sc)) {                                    // 1729\n                        eo++;                                                                                          // 1730\n                    }                                                                                                  // 1731\n                    so = 0;                                                                                            // 1732\n                                                                                                                       // 1733\n                }                                                                                                      // 1734\n                boundaryUpdater(this, sc, so, ec, eo);                                                                 // 1735\n            },                                                                                                         // 1736\n                                                                                                                       // 1737\n            normalizeBoundaries: function() {                                                                          // 1738\n                assertRangeValid(this);                                                                                // 1739\n                                                                                                                       // 1740\n                var sc = this.startContainer, so = this.startOffset, ec = this.endContainer, eo = this.endOffset;      // 1741\n                                                                                                                       // 1742\n                var mergeForward = function(node) {                                                                    // 1743\n                    var sibling = node.nextSibling;                                                                    // 1744\n                    if (sibling && sibling.nodeType == node.nodeType) {                                                // 1745\n                        ec = node;                                                                                     // 1746\n                        eo = node.length;                                                                              // 1747\n                        node.appendData(sibling.data);                                                                 // 1748\n                        sibling.parentNode.removeChild(sibling);                                                       // 1749\n                    }                                                                                                  // 1750\n                };                                                                                                     // 1751\n                                                                                                                       // 1752\n                var mergeBackward = function(node) {                                                                   // 1753\n                    var sibling = node.previousSibling;                                                                // 1754\n                    if (sibling && sibling.nodeType == node.nodeType) {                                                // 1755\n                        sc = node;                                                                                     // 1756\n                        var nodeLength = node.length;                                                                  // 1757\n                        so = sibling.length;                                                                           // 1758\n                        node.insertData(0, sibling.data);                                                              // 1759\n                        sibling.parentNode.removeChild(sibling);                                                       // 1760\n                        if (sc == ec) {                                                                                // 1761\n                            eo += so;                                                                                  // 1762\n                            ec = sc;                                                                                   // 1763\n                        } else if (ec == node.parentNode) {                                                            // 1764\n                            var nodeIndex = dom.getNodeIndex(node);                                                    // 1765\n                            if (eo == nodeIndex) {                                                                     // 1766\n                                ec = node;                                                                             // 1767\n                                eo = nodeLength;                                                                       // 1768\n                            } else if (eo > nodeIndex) {                                                               // 1769\n                                eo--;                                                                                  // 1770\n                            }                                                                                          // 1771\n                        }                                                                                              // 1772\n                    }                                                                                                  // 1773\n                };                                                                                                     // 1774\n                                                                                                                       // 1775\n                var normalizeStart = true;                                                                             // 1776\n                                                                                                                       // 1777\n                if (dom.isCharacterDataNode(ec)) {                                                                     // 1778\n                    if (ec.length == eo) {                                                                             // 1779\n                        mergeForward(ec);                                                                              // 1780\n                    }                                                                                                  // 1781\n                } else {                                                                                               // 1782\n                    if (eo > 0) {                                                                                      // 1783\n                        var endNode = ec.childNodes[eo - 1];                                                           // 1784\n                        if (endNode && dom.isCharacterDataNode(endNode)) {                                             // 1785\n                            mergeForward(endNode);                                                                     // 1786\n                        }                                                                                              // 1787\n                    }                                                                                                  // 1788\n                    normalizeStart = !this.collapsed;                                                                  // 1789\n                }                                                                                                      // 1790\n                                                                                                                       // 1791\n                if (normalizeStart) {                                                                                  // 1792\n                    if (dom.isCharacterDataNode(sc)) {                                                                 // 1793\n                        if (so == 0) {                                                                                 // 1794\n                            mergeBackward(sc);                                                                         // 1795\n                        }                                                                                              // 1796\n                    } else {                                                                                           // 1797\n                        if (so < sc.childNodes.length) {                                                               // 1798\n                            var startNode = sc.childNodes[so];                                                         // 1799\n                            if (startNode && dom.isCharacterDataNode(startNode)) {                                     // 1800\n                                mergeBackward(startNode);                                                              // 1801\n                            }                                                                                          // 1802\n                        }                                                                                              // 1803\n                    }                                                                                                  // 1804\n                } else {                                                                                               // 1805\n                    sc = ec;                                                                                           // 1806\n                    so = eo;                                                                                           // 1807\n                }                                                                                                      // 1808\n                                                                                                                       // 1809\n                boundaryUpdater(this, sc, so, ec, eo);                                                                 // 1810\n            },                                                                                                         // 1811\n                                                                                                                       // 1812\n            collapseToPoint: function(node, offset) {                                                                  // 1813\n                assertNotDetached(this);                                                                               // 1814\n                                                                                                                       // 1815\n                assertNoDocTypeNotationEntityAncestor(node, true);                                                     // 1816\n                assertValidOffset(node, offset);                                                                       // 1817\n                                                                                                                       // 1818\n                setRangeStartAndEnd(this, node, offset);                                                               // 1819\n            }                                                                                                          // 1820\n        });                                                                                                            // 1821\n                                                                                                                       // 1822\n        copyComparisonConstants(constructor);                                                                          // 1823\n    }                                                                                                                  // 1824\n                                                                                                                       // 1825\n    /*----------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 1827\n    // Updates commonAncestorContainer and collapsed after boundary change                                             // 1828\n    function updateCollapsedAndCommonAncestor(range) {                                                                 // 1829\n        range.collapsed = (range.startContainer === range.endContainer && range.startOffset === range.endOffset);      // 1830\n        range.commonAncestorContainer = range.collapsed ?                                                              // 1831\n            range.startContainer : dom.getCommonAncestor(range.startContainer, range.endContainer);                    // 1832\n    }                                                                                                                  // 1833\n                                                                                                                       // 1834\n    function updateBoundaries(range, startContainer, startOffset, endContainer, endOffset) {                           // 1835\n        var startMoved = (range.startContainer !== startContainer || range.startOffset !== startOffset);               // 1836\n        var endMoved = (range.endContainer !== endContainer || range.endOffset !== endOffset);                         // 1837\n                                                                                                                       // 1838\n        range.startContainer = startContainer;                                                                         // 1839\n        range.startOffset = startOffset;                                                                               // 1840\n        range.endContainer = endContainer;                                                                             // 1841\n        range.endOffset = endOffset;                                                                                   // 1842\n                                                                                                                       // 1843\n        updateCollapsedAndCommonAncestor(range);                                                                       // 1844\n        dispatchEvent(range, \"boundarychange\", {startMoved: startMoved, endMoved: endMoved});                          // 1845\n    }                                                                                                                  // 1846\n                                                                                                                       // 1847\n    function detach(range) {                                                                                           // 1848\n        assertNotDetached(range);                                                                                      // 1849\n        range.startContainer = range.startOffset = range.endContainer = range.endOffset = null;                        // 1850\n        range.collapsed = range.commonAncestorContainer = null;                                                        // 1851\n        dispatchEvent(range, \"detach\", null);                                                                          // 1852\n        range._listeners = null;                                                                                       // 1853\n    }                                                                                                                  // 1854\n                                                                                                                       // 1855\n    /**                                                                                                                // 1856\n     * @constructor                                                                                                    // 1857\n     */                                                                                                                // 1858\n    function Range(doc) {                                                                                              // 1859\n        this.startContainer = doc;                                                                                     // 1860\n        this.startOffset = 0;                                                                                          // 1861\n        this.endContainer = doc;                                                                                       // 1862\n        this.endOffset = 0;                                                                                            // 1863\n        this._listeners = {                                                                                            // 1864\n            boundarychange: [],                                                                                        // 1865\n            detach: []                                                                                                 // 1866\n        };                                                                                                             // 1867\n        updateCollapsedAndCommonAncestor(this);                                                                        // 1868\n    }                                                                                                                  // 1869\n                                                                                                                       // 1870\n    createPrototypeRange(Range, updateBoundaries, detach);                                                             // 1871\n                                                                                                                       // 1872\n    api.rangePrototype = RangePrototype.prototype;                                                                     // 1873\n                                                                                                                       // 1874\n    Range.rangeProperties = rangeProperties;                                                                           // 1875\n    Range.RangeIterator = RangeIterator;                                                                               // 1876\n    Range.copyComparisonConstants = copyComparisonConstants;                                                           // 1877\n    Range.createPrototypeRange = createPrototypeRange;                                                                 // 1878\n    Range.inspect = inspect;                                                                                           // 1879\n    Range.getRangeDocument = getRangeDocument;                                                                         // 1880\n    Range.rangesEqual = function(r1, r2) {                                                                             // 1881\n        return r1.startContainer === r2.startContainer &&                                                              // 1882\n               r1.startOffset === r2.startOffset &&                                                                    // 1883\n               r1.endContainer === r2.endContainer &&                                                                  // 1884\n               r1.endOffset === r2.endOffset;                                                                          // 1885\n    };                                                                                                                 // 1886\n                                                                                                                       // 1887\n    api.DomRange = Range;                                                                                              // 1888\n    api.RangeException = RangeException;                                                                               // 1889\n});rangy.createModule(\"WrappedRange\", function(api, module) {                                                          // 1890\n    api.requireModules( [\"DomUtil\", \"DomRange\"] );                                                                     // 1891\n                                                                                                                       // 1892\n    /**                                                                                                                // 1893\n     * @constructor                                                                                                    // 1894\n     */                                                                                                                // 1895\n    var WrappedRange;                                                                                                  // 1896\n    var dom = api.dom;                                                                                                 // 1897\n    var DomPosition = dom.DomPosition;                                                                                 // 1898\n    var DomRange = api.DomRange;                                                                                       // 1899\n                                                                                                                       // 1900\n                                                                                                                       // 1901\n                                                                                                                       // 1902\n    /*----------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 1904\n    /*                                                                                                                 // 1905\n    This is a workaround for a bug where IE returns the wrong container element from the TextRange's parentElement()   // 1906\n    method. For example, in the following (where pipes denote the selection boundaries):                               // 1907\n                                                                                                                       // 1908\n    <ul id=\"ul\"><li id=\"a\">| a </li><li id=\"b\"> b |</li></ul>                                                          // 1909\n                                                                                                                       // 1910\n    var range = document.selection.createRange();                                                                      // 1911\n    alert(range.parentElement().id); // Should alert \"ul\" but alerts \"b\"                                               // 1912\n                                                                                                                       // 1913\n    This method returns the common ancestor node of the following:                                                     // 1914\n    - the parentElement() of the textRange                                                                             // 1915\n    - the parentElement() of the textRange after calling collapse(true)                                                // 1916\n    - the parentElement() of the textRange after calling collapse(false)                                               // 1917\n     */                                                                                                                // 1918\n    function getTextRangeContainerElement(textRange) {                                                                 // 1919\n        var parentEl = textRange.parentElement();                                                                      // 1920\n                                                                                                                       // 1921\n        var range = textRange.duplicate();                                                                             // 1922\n        range.collapse(true);                                                                                          // 1923\n        var startEl = range.parentElement();                                                                           // 1924\n        range = textRange.duplicate();                                                                                 // 1925\n        range.collapse(false);                                                                                         // 1926\n        var endEl = range.parentElement();                                                                             // 1927\n        var startEndContainer = (startEl == endEl) ? startEl : dom.getCommonAncestor(startEl, endEl);                  // 1928\n                                                                                                                       // 1929\n        return startEndContainer == parentEl ? startEndContainer : dom.getCommonAncestor(parentEl, startEndContainer);\n    }                                                                                                                  // 1931\n                                                                                                                       // 1932\n    function textRangeIsCollapsed(textRange) {                                                                         // 1933\n        return textRange.compareEndPoints(\"StartToEnd\", textRange) == 0;                                               // 1934\n    }                                                                                                                  // 1935\n                                                                                                                       // 1936\n    // Gets the boundary of a TextRange expressed as a node and an offset within that node. This function started out as\n    // an improved version of code found in Tim Cameron Ryan's IERange (http://code.google.com/p/ierange/) but has     // 1938\n    // grown, fixing problems with line breaks in preformatted text, adding workaround for IE TextRange bugs, handling\n    // for inputs and images, plus optimizations.                                                                      // 1940\n    function getTextRangeBoundaryPosition(textRange, wholeRangeContainerElement, isStart, isCollapsed) {               // 1941\n        var workingRange = textRange.duplicate();                                                                      // 1942\n                                                                                                                       // 1943\n        workingRange.collapse(isStart);                                                                                // 1944\n        var containerElement = workingRange.parentElement();                                                           // 1945\n                                                                                                                       // 1946\n        // Sometimes collapsing a TextRange that's at the start of a text node can move it into the previous node, so  // 1947\n        // check for that                                                                                              // 1948\n        // TODO: Find out when. Workaround for wholeRangeContainerElement may break this                               // 1949\n        if (!dom.isAncestorOf(wholeRangeContainerElement, containerElement, true)) {                                   // 1950\n            containerElement = wholeRangeContainerElement;                                                             // 1951\n                                                                                                                       // 1952\n        }                                                                                                              // 1953\n                                                                                                                       // 1954\n                                                                                                                       // 1955\n                                                                                                                       // 1956\n        // Deal with nodes that cannot \"contain rich HTML markup\". In practice, this means form inputs, images and     // 1957\n        // similar. See http://msdn.microsoft.com/en-us/library/aa703950%28VS.85%29.aspx                               // 1958\n        if (!containerElement.canHaveHTML) {                                                                           // 1959\n            return new DomPosition(containerElement.parentNode, dom.getNodeIndex(containerElement));                   // 1960\n        }                                                                                                              // 1961\n                                                                                                                       // 1962\n        var workingNode = dom.getDocument(containerElement).createElement(\"span\");                                     // 1963\n        var comparison, workingComparisonType = isStart ? \"StartToStart\" : \"StartToEnd\";                               // 1964\n        var previousNode, nextNode, boundaryPosition, boundaryNode;                                                    // 1965\n                                                                                                                       // 1966\n        // Move the working range through the container's children, starting at the end and working backwards, until the\n        // working range reaches or goes past the boundary we're interested in                                         // 1968\n        do {                                                                                                           // 1969\n            containerElement.insertBefore(workingNode, workingNode.previousSibling);                                   // 1970\n            workingRange.moveToElementText(workingNode);                                                               // 1971\n        } while ( (comparison = workingRange.compareEndPoints(workingComparisonType, textRange)) > 0 &&                // 1972\n                workingNode.previousSibling);                                                                          // 1973\n                                                                                                                       // 1974\n        // We've now reached or gone past the boundary of the text range we're interested in                           // 1975\n        // so have identified the node we want                                                                         // 1976\n        boundaryNode = workingNode.nextSibling;                                                                        // 1977\n                                                                                                                       // 1978\n        if (comparison == -1 && boundaryNode && dom.isCharacterDataNode(boundaryNode)) {                               // 1979\n            // This is a character data node (text, comment, cdata). The working range is collapsed at the start of the\n            // node containing the text range's boundary, so we move the end of the working range to the boundary point\n            // and measure the length of its text to get the boundary's offset within the node.                        // 1982\n            workingRange.setEndPoint(isStart ? \"EndToStart\" : \"EndToEnd\", textRange);                                  // 1983\n                                                                                                                       // 1984\n                                                                                                                       // 1985\n            var offset;                                                                                                // 1986\n                                                                                                                       // 1987\n            if (/[\\r\\n]/.test(boundaryNode.data)) {                                                                    // 1988\n                /*                                                                                                     // 1989\n                For the particular case of a boundary within a text node containing line breaks (within a <pre> element,\n                for example), we need a slightly complicated approach to get the boundary's offset in IE. The facts:   // 1991\n                                                                                                                       // 1992\n                - Each line break is represented as \\r in the text node's data/nodeValue properties                    // 1993\n                - Each line break is represented as \\r\\n in the TextRange's 'text' property                            // 1994\n                - The 'text' property of the TextRange does not contain trailing line breaks                           // 1995\n                                                                                                                       // 1996\n                To get round the problem presented by the final fact above, we can use the fact that TextRange's       // 1997\n                moveStart() and moveEnd() methods return the actual number of characters moved, which is not necessarily\n                the same as the number of characters it was instructed to move. The simplest approach is to use this to\n                store the characters moved when moving both the start and end of the range to the start of the document\n                body and subtracting the start offset from the end offset (the \"move-negative-gazillion\" method).      // 2001\n                However, this is extremely slow when the document is large and the range is near the end of it. Clearly\n                doing the mirror image (i.e. moving the range boundaries to the end of the document) has the same      // 2003\n                problem.                                                                                               // 2004\n                                                                                                                       // 2005\n                Another approach that works is to use moveStart() to move the start boundary of the range up to the end\n                boundary one character at a time and incrementing a counter with the value returned by the moveStart()\n                call. However, the check for whether the start boundary has reached the end boundary is expensive, so  // 2008\n                this method is slow (although unlike \"move-negative-gazillion\" is largely unaffected by the location of\n                the range within the document).                                                                        // 2010\n                                                                                                                       // 2011\n                The method below is a hybrid of the two methods above. It uses the fact that a string containing the   // 2012\n                TextRange's 'text' property with each \\r\\n converted to a single \\r character cannot be longer than the\n                text of the TextRange, so the start of the range is moved that length initially and then a character at\n                a time to make up for any trailing line breaks not contained in the 'text' property. This has good     // 2015\n                performance in most situations compared to the previous two methods.                                   // 2016\n                */                                                                                                     // 2017\n                var tempRange = workingRange.duplicate();                                                              // 2018\n                var rangeLength = tempRange.text.replace(/\\r\\n/g, \"\\r\").length;                                        // 2019\n                                                                                                                       // 2020\n                offset = tempRange.moveStart(\"character\", rangeLength);                                                // 2021\n                while ( (comparison = tempRange.compareEndPoints(\"StartToEnd\", tempRange)) == -1) {                    // 2022\n                    offset++;                                                                                          // 2023\n                    tempRange.moveStart(\"character\", 1);                                                               // 2024\n                }                                                                                                      // 2025\n            } else {                                                                                                   // 2026\n                offset = workingRange.text.length;                                                                     // 2027\n            }                                                                                                          // 2028\n            boundaryPosition = new DomPosition(boundaryNode, offset);                                                  // 2029\n        } else {                                                                                                       // 2030\n                                                                                                                       // 2031\n                                                                                                                       // 2032\n            // If the boundary immediately follows a character data node and this is the end boundary, we should favour\n            // a position within that, and likewise for a start boundary preceding a character data node               // 2034\n            previousNode = (isCollapsed || !isStart) && workingNode.previousSibling;                                   // 2035\n            nextNode = (isCollapsed || isStart) && workingNode.nextSibling;                                            // 2036\n                                                                                                                       // 2037\n                                                                                                                       // 2038\n                                                                                                                       // 2039\n            if (nextNode && dom.isCharacterDataNode(nextNode)) {                                                       // 2040\n                boundaryPosition = new DomPosition(nextNode, 0);                                                       // 2041\n            } else if (previousNode && dom.isCharacterDataNode(previousNode)) {                                        // 2042\n                boundaryPosition = new DomPosition(previousNode, previousNode.length);                                 // 2043\n            } else {                                                                                                   // 2044\n                boundaryPosition = new DomPosition(containerElement, dom.getNodeIndex(workingNode));                   // 2045\n            }                                                                                                          // 2046\n        }                                                                                                              // 2047\n                                                                                                                       // 2048\n        // Clean up                                                                                                    // 2049\n        workingNode.parentNode.removeChild(workingNode);                                                               // 2050\n                                                                                                                       // 2051\n        return boundaryPosition;                                                                                       // 2052\n    }                                                                                                                  // 2053\n                                                                                                                       // 2054\n    // Returns a TextRange representing the boundary of a TextRange expressed as a node and an offset within that node.\n    // This function started out as an optimized version of code found in Tim Cameron Ryan's IERange                   // 2056\n    // (http://code.google.com/p/ierange/)                                                                             // 2057\n    function createBoundaryTextRange(boundaryPosition, isStart) {                                                      // 2058\n        var boundaryNode, boundaryParent, boundaryOffset = boundaryPosition.offset;                                    // 2059\n        var doc = dom.getDocument(boundaryPosition.node);                                                              // 2060\n        var workingNode, childNodes, workingRange = doc.body.createTextRange();                                        // 2061\n        var nodeIsDataNode = dom.isCharacterDataNode(boundaryPosition.node);                                           // 2062\n                                                                                                                       // 2063\n        if (nodeIsDataNode) {                                                                                          // 2064\n            boundaryNode = boundaryPosition.node;                                                                      // 2065\n            boundaryParent = boundaryNode.parentNode;                                                                  // 2066\n        } else {                                                                                                       // 2067\n            childNodes = boundaryPosition.node.childNodes;                                                             // 2068\n            boundaryNode = (boundaryOffset < childNodes.length) ? childNodes[boundaryOffset] : null;                   // 2069\n            boundaryParent = boundaryPosition.node;                                                                    // 2070\n        }                                                                                                              // 2071\n                                                                                                                       // 2072\n        // Position the range immediately before the node containing the boundary                                      // 2073\n        workingNode = doc.createElement(\"span\");                                                                       // 2074\n                                                                                                                       // 2075\n        // Making the working element non-empty element persuades IE to consider the TextRange boundary to be within the\n        // element rather than immediately before or after it, which is what we want                                   // 2077\n        workingNode.innerHTML = \"&#feff;\";                                                                             // 2078\n                                                                                                                       // 2079\n        // insertBefore is supposed to work like appendChild if the second parameter is null. However, a bug report    // 2080\n        // for IERange suggests that it can crash the browser: http://code.google.com/p/ierange/issues/detail?id=12    // 2081\n        if (boundaryNode) {                                                                                            // 2082\n            boundaryParent.insertBefore(workingNode, boundaryNode);                                                    // 2083\n        } else {                                                                                                       // 2084\n            boundaryParent.appendChild(workingNode);                                                                   // 2085\n        }                                                                                                              // 2086\n                                                                                                                       // 2087\n        workingRange.moveToElementText(workingNode);                                                                   // 2088\n        workingRange.collapse(!isStart);                                                                               // 2089\n                                                                                                                       // 2090\n        // Clean up                                                                                                    // 2091\n        boundaryParent.removeChild(workingNode);                                                                       // 2092\n                                                                                                                       // 2093\n        // Move the working range to the text offset, if required                                                      // 2094\n        if (nodeIsDataNode) {                                                                                          // 2095\n            workingRange[isStart ? \"moveStart\" : \"moveEnd\"](\"character\", boundaryOffset);                              // 2096\n        }                                                                                                              // 2097\n                                                                                                                       // 2098\n        return workingRange;                                                                                           // 2099\n    }                                                                                                                  // 2100\n                                                                                                                       // 2101\n    /*----------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 2103\n    if (api.features.implementsDomRange && (!api.features.implementsTextRange || !api.config.preferTextRange)) {       // 2104\n        // This is a wrapper around the browser's native DOM Range. It has two aims:                                   // 2105\n        // - Provide workarounds for specific browser bugs                                                             // 2106\n        // - provide convenient extensions, which are inherited from Rangy's DomRange                                  // 2107\n                                                                                                                       // 2108\n        (function() {                                                                                                  // 2109\n            var rangeProto;                                                                                            // 2110\n            var rangeProperties = DomRange.rangeProperties;                                                            // 2111\n            var canSetRangeStartAfterEnd;                                                                              // 2112\n                                                                                                                       // 2113\n            function updateRangeProperties(range) {                                                                    // 2114\n                var i = rangeProperties.length, prop;                                                                  // 2115\n                while (i--) {                                                                                          // 2116\n                    prop = rangeProperties[i];                                                                         // 2117\n                    range[prop] = range.nativeRange[prop];                                                             // 2118\n                }                                                                                                      // 2119\n            }                                                                                                          // 2120\n                                                                                                                       // 2121\n            function updateNativeRange(range, startContainer, startOffset, endContainer,endOffset) {                   // 2122\n                var startMoved = (range.startContainer !== startContainer || range.startOffset != startOffset);        // 2123\n                var endMoved = (range.endContainer !== endContainer || range.endOffset != endOffset);                  // 2124\n                                                                                                                       // 2125\n                // Always set both boundaries for the benefit of IE9 (see issue 35)                                    // 2126\n                if (startMoved || endMoved) {                                                                          // 2127\n                    range.setEnd(endContainer, endOffset);                                                             // 2128\n                    range.setStart(startContainer, startOffset);                                                       // 2129\n                }                                                                                                      // 2130\n            }                                                                                                          // 2131\n                                                                                                                       // 2132\n            function detach(range) {                                                                                   // 2133\n                range.nativeRange.detach();                                                                            // 2134\n                range.detached = true;                                                                                 // 2135\n                var i = rangeProperties.length, prop;                                                                  // 2136\n                while (i--) {                                                                                          // 2137\n                    prop = rangeProperties[i];                                                                         // 2138\n                    range[prop] = null;                                                                                // 2139\n                }                                                                                                      // 2140\n            }                                                                                                          // 2141\n                                                                                                                       // 2142\n            var createBeforeAfterNodeSetter;                                                                           // 2143\n                                                                                                                       // 2144\n            WrappedRange = function(range) {                                                                           // 2145\n                if (!range) {                                                                                          // 2146\n                    throw new Error(\"Range must be specified\");                                                        // 2147\n                }                                                                                                      // 2148\n                this.nativeRange = range;                                                                              // 2149\n                updateRangeProperties(this);                                                                           // 2150\n            };                                                                                                         // 2151\n                                                                                                                       // 2152\n            DomRange.createPrototypeRange(WrappedRange, updateNativeRange, detach);                                    // 2153\n                                                                                                                       // 2154\n            rangeProto = WrappedRange.prototype;                                                                       // 2155\n                                                                                                                       // 2156\n            rangeProto.selectNode = function(node) {                                                                   // 2157\n                this.nativeRange.selectNode(node);                                                                     // 2158\n                updateRangeProperties(this);                                                                           // 2159\n            };                                                                                                         // 2160\n                                                                                                                       // 2161\n            rangeProto.deleteContents = function() {                                                                   // 2162\n                this.nativeRange.deleteContents();                                                                     // 2163\n                updateRangeProperties(this);                                                                           // 2164\n            };                                                                                                         // 2165\n                                                                                                                       // 2166\n            rangeProto.extractContents = function() {                                                                  // 2167\n                var frag = this.nativeRange.extractContents();                                                         // 2168\n                updateRangeProperties(this);                                                                           // 2169\n                return frag;                                                                                           // 2170\n            };                                                                                                         // 2171\n                                                                                                                       // 2172\n            rangeProto.cloneContents = function() {                                                                    // 2173\n                return this.nativeRange.cloneContents();                                                               // 2174\n            };                                                                                                         // 2175\n                                                                                                                       // 2176\n            // TODO: Until I can find a way to programmatically trigger the Firefox bug (apparently long-standing, still\n            // present in 3.6.8) that throws \"Index or size is negative or greater than the allowed amount\" for        // 2178\n            // insertNode in some circumstances, all browsers will have to use the Rangy's own implementation of       // 2179\n            // insertNode, which works but is almost certainly slower than the native implementation.                  // 2180\n/*                                                                                                                     // 2181\n            rangeProto.insertNode = function(node) {                                                                   // 2182\n                this.nativeRange.insertNode(node);                                                                     // 2183\n                updateRangeProperties(this);                                                                           // 2184\n            };                                                                                                         // 2185\n*/                                                                                                                     // 2186\n                                                                                                                       // 2187\n            rangeProto.surroundContents = function(node) {                                                             // 2188\n                this.nativeRange.surroundContents(node);                                                               // 2189\n                updateRangeProperties(this);                                                                           // 2190\n            };                                                                                                         // 2191\n                                                                                                                       // 2192\n            rangeProto.collapse = function(isStart) {                                                                  // 2193\n                this.nativeRange.collapse(isStart);                                                                    // 2194\n                updateRangeProperties(this);                                                                           // 2195\n            };                                                                                                         // 2196\n                                                                                                                       // 2197\n            rangeProto.cloneRange = function() {                                                                       // 2198\n                return new WrappedRange(this.nativeRange.cloneRange());                                                // 2199\n            };                                                                                                         // 2200\n                                                                                                                       // 2201\n            rangeProto.refresh = function() {                                                                          // 2202\n                updateRangeProperties(this);                                                                           // 2203\n            };                                                                                                         // 2204\n                                                                                                                       // 2205\n            rangeProto.toString = function() {                                                                         // 2206\n                return this.nativeRange.toString();                                                                    // 2207\n            };                                                                                                         // 2208\n                                                                                                                       // 2209\n            // Create test range and node for feature detection                                                        // 2210\n                                                                                                                       // 2211\n            var testTextNode = document.createTextNode(\"test\");                                                        // 2212\n            dom.getBody(document).appendChild(testTextNode);                                                           // 2213\n            var range = document.createRange();                                                                        // 2214\n                                                                                                                       // 2215\n            /*--------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 2217\n            // Test for Firefox 2 bug that prevents moving the start of a Range to a point after its current end and   // 2218\n            // correct for it                                                                                          // 2219\n                                                                                                                       // 2220\n            range.setStart(testTextNode, 0);                                                                           // 2221\n            range.setEnd(testTextNode, 0);                                                                             // 2222\n                                                                                                                       // 2223\n            try {                                                                                                      // 2224\n                range.setStart(testTextNode, 1);                                                                       // 2225\n                canSetRangeStartAfterEnd = true;                                                                       // 2226\n                                                                                                                       // 2227\n                rangeProto.setStart = function(node, offset) {                                                         // 2228\n                    this.nativeRange.setStart(node, offset);                                                           // 2229\n                    updateRangeProperties(this);                                                                       // 2230\n                };                                                                                                     // 2231\n                                                                                                                       // 2232\n                rangeProto.setEnd = function(node, offset) {                                                           // 2233\n                    this.nativeRange.setEnd(node, offset);                                                             // 2234\n                    updateRangeProperties(this);                                                                       // 2235\n                };                                                                                                     // 2236\n                                                                                                                       // 2237\n                createBeforeAfterNodeSetter = function(name) {                                                         // 2238\n                    return function(node) {                                                                            // 2239\n                        this.nativeRange[name](node);                                                                  // 2240\n                        updateRangeProperties(this);                                                                   // 2241\n                    };                                                                                                 // 2242\n                };                                                                                                     // 2243\n                                                                                                                       // 2244\n            } catch(ex) {                                                                                              // 2245\n                                                                                                                       // 2246\n                                                                                                                       // 2247\n                canSetRangeStartAfterEnd = false;                                                                      // 2248\n                                                                                                                       // 2249\n                rangeProto.setStart = function(node, offset) {                                                         // 2250\n                    try {                                                                                              // 2251\n                        this.nativeRange.setStart(node, offset);                                                       // 2252\n                    } catch (ex) {                                                                                     // 2253\n                        this.nativeRange.setEnd(node, offset);                                                         // 2254\n                        this.nativeRange.setStart(node, offset);                                                       // 2255\n                    }                                                                                                  // 2256\n                    updateRangeProperties(this);                                                                       // 2257\n                };                                                                                                     // 2258\n                                                                                                                       // 2259\n                rangeProto.setEnd = function(node, offset) {                                                           // 2260\n                    try {                                                                                              // 2261\n                        this.nativeRange.setEnd(node, offset);                                                         // 2262\n                    } catch (ex) {                                                                                     // 2263\n                        this.nativeRange.setStart(node, offset);                                                       // 2264\n                        this.nativeRange.setEnd(node, offset);                                                         // 2265\n                    }                                                                                                  // 2266\n                    updateRangeProperties(this);                                                                       // 2267\n                };                                                                                                     // 2268\n                                                                                                                       // 2269\n                createBeforeAfterNodeSetter = function(name, oppositeName) {                                           // 2270\n                    return function(node) {                                                                            // 2271\n                        try {                                                                                          // 2272\n                            this.nativeRange[name](node);                                                              // 2273\n                        } catch (ex) {                                                                                 // 2274\n                            this.nativeRange[oppositeName](node);                                                      // 2275\n                            this.nativeRange[name](node);                                                              // 2276\n                        }                                                                                              // 2277\n                        updateRangeProperties(this);                                                                   // 2278\n                    };                                                                                                 // 2279\n                };                                                                                                     // 2280\n            }                                                                                                          // 2281\n                                                                                                                       // 2282\n            rangeProto.setStartBefore = createBeforeAfterNodeSetter(\"setStartBefore\", \"setEndBefore\");                 // 2283\n            rangeProto.setStartAfter = createBeforeAfterNodeSetter(\"setStartAfter\", \"setEndAfter\");                    // 2284\n            rangeProto.setEndBefore = createBeforeAfterNodeSetter(\"setEndBefore\", \"setStartBefore\");                   // 2285\n            rangeProto.setEndAfter = createBeforeAfterNodeSetter(\"setEndAfter\", \"setStartAfter\");                      // 2286\n                                                                                                                       // 2287\n            /*--------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 2289\n            // Test for and correct Firefox 2 behaviour with selectNodeContents on text nodes: it collapses the range to\n            // the 0th character of the text node                                                                      // 2291\n            range.selectNodeContents(testTextNode);                                                                    // 2292\n            if (range.startContainer == testTextNode && range.endContainer == testTextNode &&                          // 2293\n                    range.startOffset == 0 && range.endOffset == testTextNode.length) {                                // 2294\n                rangeProto.selectNodeContents = function(node) {                                                       // 2295\n                    this.nativeRange.selectNodeContents(node);                                                         // 2296\n                    updateRangeProperties(this);                                                                       // 2297\n                };                                                                                                     // 2298\n            } else {                                                                                                   // 2299\n                rangeProto.selectNodeContents = function(node) {                                                       // 2300\n                    this.setStart(node, 0);                                                                            // 2301\n                    this.setEnd(node, DomRange.getEndOffset(node));                                                    // 2302\n                };                                                                                                     // 2303\n            }                                                                                                          // 2304\n                                                                                                                       // 2305\n            /*--------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 2307\n            // Test for WebKit bug that has the beahviour of compareBoundaryPoints round the wrong way for constants   // 2308\n            // START_TO_END and END_TO_START: https://bugs.webkit.org/show_bug.cgi?id=20738                            // 2309\n                                                                                                                       // 2310\n            range.selectNodeContents(testTextNode);                                                                    // 2311\n            range.setEnd(testTextNode, 3);                                                                             // 2312\n                                                                                                                       // 2313\n            var range2 = document.createRange();                                                                       // 2314\n            range2.selectNodeContents(testTextNode);                                                                   // 2315\n            range2.setEnd(testTextNode, 4);                                                                            // 2316\n            range2.setStart(testTextNode, 2);                                                                          // 2317\n                                                                                                                       // 2318\n            if (range.compareBoundaryPoints(range.START_TO_END, range2) == -1 &                                        // 2319\n                    range.compareBoundaryPoints(range.END_TO_START, range2) == 1) {                                    // 2320\n                // This is the wrong way round, so correct for it                                                      // 2321\n                                                                                                                       // 2322\n                                                                                                                       // 2323\n                rangeProto.compareBoundaryPoints = function(type, range) {                                             // 2324\n                    range = range.nativeRange || range;                                                                // 2325\n                    if (type == range.START_TO_END) {                                                                  // 2326\n                        type = range.END_TO_START;                                                                     // 2327\n                    } else if (type == range.END_TO_START) {                                                           // 2328\n                        type = range.START_TO_END;                                                                     // 2329\n                    }                                                                                                  // 2330\n                    return this.nativeRange.compareBoundaryPoints(type, range);                                        // 2331\n                };                                                                                                     // 2332\n            } else {                                                                                                   // 2333\n                rangeProto.compareBoundaryPoints = function(type, range) {                                             // 2334\n                    return this.nativeRange.compareBoundaryPoints(type, range.nativeRange || range);                   // 2335\n                };                                                                                                     // 2336\n            }                                                                                                          // 2337\n                                                                                                                       // 2338\n            /*--------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 2340\n            // Test for existence of createContextualFragment and delegate to it if it exists                          // 2341\n            if (api.util.isHostMethod(range, \"createContextualFragment\")) {                                            // 2342\n                rangeProto.createContextualFragment = function(fragmentStr) {                                          // 2343\n                    return this.nativeRange.createContextualFragment(fragmentStr);                                     // 2344\n                };                                                                                                     // 2345\n            }                                                                                                          // 2346\n                                                                                                                       // 2347\n            /*--------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 2349\n            // Clean up                                                                                                // 2350\n            dom.getBody(document).removeChild(testTextNode);                                                           // 2351\n            range.detach();                                                                                            // 2352\n            range2.detach();                                                                                           // 2353\n        })();                                                                                                          // 2354\n                                                                                                                       // 2355\n        api.createNativeRange = function(doc) {                                                                        // 2356\n            doc = doc || document;                                                                                     // 2357\n            return doc.createRange();                                                                                  // 2358\n        };                                                                                                             // 2359\n    } else if (api.features.implementsTextRange) {                                                                     // 2360\n        // This is a wrapper around a TextRange, providing full DOM Range functionality using rangy's DomRange as a    // 2361\n        // prototype                                                                                                   // 2362\n                                                                                                                       // 2363\n        WrappedRange = function(textRange) {                                                                           // 2364\n            this.textRange = textRange;                                                                                // 2365\n            this.refresh();                                                                                            // 2366\n        };                                                                                                             // 2367\n                                                                                                                       // 2368\n        WrappedRange.prototype = new DomRange(document);                                                               // 2369\n                                                                                                                       // 2370\n        WrappedRange.prototype.refresh = function() {                                                                  // 2371\n            var start, end;                                                                                            // 2372\n                                                                                                                       // 2373\n            // TextRange's parentElement() method cannot be trusted. getTextRangeContainerElement() works around that.\n            var rangeContainerElement = getTextRangeContainerElement(this.textRange);                                  // 2375\n                                                                                                                       // 2376\n            if (textRangeIsCollapsed(this.textRange)) {                                                                // 2377\n                end = start = getTextRangeBoundaryPosition(this.textRange, rangeContainerElement, true, true);         // 2378\n            } else {                                                                                                   // 2379\n                                                                                                                       // 2380\n                start = getTextRangeBoundaryPosition(this.textRange, rangeContainerElement, true, false);              // 2381\n                end = getTextRangeBoundaryPosition(this.textRange, rangeContainerElement, false, false);               // 2382\n            }                                                                                                          // 2383\n                                                                                                                       // 2384\n            this.setStart(start.node, start.offset);                                                                   // 2385\n            this.setEnd(end.node, end.offset);                                                                         // 2386\n        };                                                                                                             // 2387\n                                                                                                                       // 2388\n        DomRange.copyComparisonConstants(WrappedRange);                                                                // 2389\n                                                                                                                       // 2390\n        // Add WrappedRange as the Range property of the global object to allow expression like Range.END_TO_END to work\n        var globalObj = (function() { return this; })();                                                               // 2392\n        if (typeof globalObj.Range == \"undefined\") {                                                                   // 2393\n            globalObj.Range = WrappedRange;                                                                            // 2394\n        }                                                                                                              // 2395\n                                                                                                                       // 2396\n        api.createNativeRange = function(doc) {                                                                        // 2397\n            doc = doc || document;                                                                                     // 2398\n            return doc.body.createTextRange();                                                                         // 2399\n        };                                                                                                             // 2400\n    }                                                                                                                  // 2401\n                                                                                                                       // 2402\n    if (api.features.implementsTextRange) {                                                                            // 2403\n        WrappedRange.rangeToTextRange = function(range) {                                                              // 2404\n            if (range.collapsed) {                                                                                     // 2405\n                var tr = createBoundaryTextRange(new DomPosition(range.startContainer, range.startOffset), true);      // 2406\n                                                                                                                       // 2407\n                                                                                                                       // 2408\n                                                                                                                       // 2409\n                return tr;                                                                                             // 2410\n                                                                                                                       // 2411\n                //return createBoundaryTextRange(new DomPosition(range.startContainer, range.startOffset), true);      // 2412\n            } else {                                                                                                   // 2413\n                var startRange = createBoundaryTextRange(new DomPosition(range.startContainer, range.startOffset), true);\n                var endRange = createBoundaryTextRange(new DomPosition(range.endContainer, range.endOffset), false);   // 2415\n                var textRange = dom.getDocument(range.startContainer).body.createTextRange();                          // 2416\n                textRange.setEndPoint(\"StartToStart\", startRange);                                                     // 2417\n                textRange.setEndPoint(\"EndToEnd\", endRange);                                                           // 2418\n                return textRange;                                                                                      // 2419\n            }                                                                                                          // 2420\n        };                                                                                                             // 2421\n    }                                                                                                                  // 2422\n                                                                                                                       // 2423\n    WrappedRange.prototype.getName = function() {                                                                      // 2424\n        return \"WrappedRange\";                                                                                         // 2425\n    };                                                                                                                 // 2426\n                                                                                                                       // 2427\n    api.WrappedRange = WrappedRange;                                                                                   // 2428\n                                                                                                                       // 2429\n    api.createRange = function(doc) {                                                                                  // 2430\n        doc = doc || document;                                                                                         // 2431\n        return new WrappedRange(api.createNativeRange(doc));                                                           // 2432\n    };                                                                                                                 // 2433\n                                                                                                                       // 2434\n    api.createRangyRange = function(doc) {                                                                             // 2435\n        doc = doc || document;                                                                                         // 2436\n        return new DomRange(doc);                                                                                      // 2437\n    };                                                                                                                 // 2438\n                                                                                                                       // 2439\n    api.createIframeRange = function(iframeEl) {                                                                       // 2440\n        return api.createRange(dom.getIframeDocument(iframeEl));                                                       // 2441\n    };                                                                                                                 // 2442\n                                                                                                                       // 2443\n    api.createIframeRangyRange = function(iframeEl) {                                                                  // 2444\n        return api.createRangyRange(dom.getIframeDocument(iframeEl));                                                  // 2445\n    };                                                                                                                 // 2446\n                                                                                                                       // 2447\n    api.addCreateMissingNativeApiListener(function(win) {                                                              // 2448\n        var doc = win.document;                                                                                        // 2449\n        if (typeof doc.createRange == \"undefined\") {                                                                   // 2450\n            doc.createRange = function() {                                                                             // 2451\n                return api.createRange(this);                                                                          // 2452\n            };                                                                                                         // 2453\n        }                                                                                                              // 2454\n        doc = win = null;                                                                                              // 2455\n    });                                                                                                                // 2456\n});rangy.createModule(\"WrappedSelection\", function(api, module) {                                                      // 2457\n    // This will create a selection object wrapper that follows the Selection object found in the WHATWG draft DOM Range\n    // spec (http://html5.org/specs/dom-range.html)                                                                    // 2459\n                                                                                                                       // 2460\n    api.requireModules( [\"DomUtil\", \"DomRange\", \"WrappedRange\"] );                                                     // 2461\n                                                                                                                       // 2462\n    api.config.checkSelectionRanges = true;                                                                            // 2463\n                                                                                                                       // 2464\n    var BOOLEAN = \"boolean\",                                                                                           // 2465\n        windowPropertyName = \"_rangySelection\",                                                                        // 2466\n        dom = api.dom,                                                                                                 // 2467\n        util = api.util,                                                                                               // 2468\n        DomRange = api.DomRange,                                                                                       // 2469\n        WrappedRange = api.WrappedRange,                                                                               // 2470\n        DOMException = api.DOMException,                                                                               // 2471\n        DomPosition = dom.DomPosition,                                                                                 // 2472\n        getSelection,                                                                                                  // 2473\n        selectionIsCollapsed,                                                                                          // 2474\n        CONTROL = \"Control\";                                                                                           // 2475\n                                                                                                                       // 2476\n                                                                                                                       // 2477\n                                                                                                                       // 2478\n    function getWinSelection(winParam) {                                                                               // 2479\n        return (winParam || window).getSelection();                                                                    // 2480\n    }                                                                                                                  // 2481\n                                                                                                                       // 2482\n    function getDocSelection(winParam) {                                                                               // 2483\n        return (winParam || window).document.selection;                                                                // 2484\n    }                                                                                                                  // 2485\n                                                                                                                       // 2486\n    // Test for the Range/TextRange and Selection features required                                                    // 2487\n    // Test for ability to retrieve selection                                                                          // 2488\n    var implementsWinGetSelection = api.util.isHostMethod(window, \"getSelection\"),                                     // 2489\n        implementsDocSelection = api.util.isHostObject(document, \"selection\");                                         // 2490\n                                                                                                                       // 2491\n    var useDocumentSelection = implementsDocSelection && (!implementsWinGetSelection || api.config.preferTextRange);   // 2492\n                                                                                                                       // 2493\n    if (useDocumentSelection) {                                                                                        // 2494\n        getSelection = getDocSelection;                                                                                // 2495\n        api.isSelectionValid = function(winParam) {                                                                    // 2496\n            var doc = (winParam || window).document, nativeSel = doc.selection;                                        // 2497\n                                                                                                                       // 2498\n            // Check whether the selection TextRange is actually contained within the correct document                 // 2499\n            return (nativeSel.type != \"None\" || dom.getDocument(nativeSel.createRange().parentElement()) == doc);      // 2500\n        };                                                                                                             // 2501\n    } else if (implementsWinGetSelection) {                                                                            // 2502\n        getSelection = getWinSelection;                                                                                // 2503\n        api.isSelectionValid = function() {                                                                            // 2504\n            return true;                                                                                               // 2505\n        };                                                                                                             // 2506\n    } else {                                                                                                           // 2507\n        module.fail(\"Neither document.selection or window.getSelection() detected.\");                                  // 2508\n    }                                                                                                                  // 2509\n                                                                                                                       // 2510\n    api.getNativeSelection = getSelection;                                                                             // 2511\n                                                                                                                       // 2512\n    var testSelection = getSelection();                                                                                // 2513\n    var testRange = api.createNativeRange(document);                                                                   // 2514\n    var body = dom.getBody(document);                                                                                  // 2515\n                                                                                                                       // 2516\n    // Obtaining a range from a selection                                                                              // 2517\n    var selectionHasAnchorAndFocus = util.areHostObjects(testSelection, [\"anchorNode\", \"focusNode\"] &&                 // 2518\n                                     util.areHostProperties(testSelection, [\"anchorOffset\", \"focusOffset\"]));          // 2519\n    api.features.selectionHasAnchorAndFocus = selectionHasAnchorAndFocus;                                              // 2520\n                                                                                                                       // 2521\n    // Test for existence of native selection extend() method                                                          // 2522\n    var selectionHasExtend = util.isHostMethod(testSelection, \"extend\");                                               // 2523\n    api.features.selectionHasExtend = selectionHasExtend;                                                              // 2524\n                                                                                                                       // 2525\n    // Test if rangeCount exists                                                                                       // 2526\n    var selectionHasRangeCount = (typeof testSelection.rangeCount == \"number\");                                        // 2527\n    api.features.selectionHasRangeCount = selectionHasRangeCount;                                                      // 2528\n                                                                                                                       // 2529\n    var selectionSupportsMultipleRanges = false;                                                                       // 2530\n    var collapsedNonEditableSelectionsSupported = true;                                                                // 2531\n                                                                                                                       // 2532\n    if (util.areHostMethods(testSelection, [\"addRange\", \"getRangeAt\", \"removeAllRanges\"]) &&                           // 2533\n            typeof testSelection.rangeCount == \"number\" && api.features.implementsDomRange) {                          // 2534\n                                                                                                                       // 2535\n        (function() {                                                                                                  // 2536\n            var iframe = document.createElement(\"iframe\");                                                             // 2537\n            body.appendChild(iframe);                                                                                  // 2538\n                                                                                                                       // 2539\n            var iframeDoc = dom.getIframeDocument(iframe);                                                             // 2540\n            iframeDoc.open();                                                                                          // 2541\n            iframeDoc.write(\"<html><head></head><body>12</body></html>\");                                              // 2542\n            iframeDoc.close();                                                                                         // 2543\n                                                                                                                       // 2544\n            var sel = dom.getIframeWindow(iframe).getSelection();                                                      // 2545\n            var docEl = iframeDoc.documentElement;                                                                     // 2546\n            var iframeBody = docEl.lastChild, textNode = iframeBody.firstChild;                                        // 2547\n                                                                                                                       // 2548\n            // Test whether the native selection will allow a collapsed selection within a non-editable element        // 2549\n            var r1 = iframeDoc.createRange();                                                                          // 2550\n            r1.setStart(textNode, 1);                                                                                  // 2551\n            r1.collapse(true);                                                                                         // 2552\n            sel.addRange(r1);                                                                                          // 2553\n            collapsedNonEditableSelectionsSupported = (sel.rangeCount == 1);                                           // 2554\n            sel.removeAllRanges();                                                                                     // 2555\n                                                                                                                       // 2556\n            // Test whether the native selection is capable of supporting multiple ranges                              // 2557\n            var r2 = r1.cloneRange();                                                                                  // 2558\n            r1.setStart(textNode, 0);                                                                                  // 2559\n            r2.setEnd(textNode, 2);                                                                                    // 2560\n            sel.addRange(r1);                                                                                          // 2561\n            sel.addRange(r2);                                                                                          // 2562\n                                                                                                                       // 2563\n            selectionSupportsMultipleRanges = (sel.rangeCount == 2);                                                   // 2564\n                                                                                                                       // 2565\n            // Clean up                                                                                                // 2566\n            r1.detach();                                                                                               // 2567\n            r2.detach();                                                                                               // 2568\n                                                                                                                       // 2569\n            body.removeChild(iframe);                                                                                  // 2570\n        })();                                                                                                          // 2571\n    }                                                                                                                  // 2572\n                                                                                                                       // 2573\n    api.features.selectionSupportsMultipleRanges = selectionSupportsMultipleRanges;                                    // 2574\n    api.features.collapsedNonEditableSelectionsSupported = collapsedNonEditableSelectionsSupported;                    // 2575\n                                                                                                                       // 2576\n    // ControlRanges                                                                                                   // 2577\n    var implementsControlRange = false, testControlRange;                                                              // 2578\n                                                                                                                       // 2579\n    if (body && util.isHostMethod(body, \"createControlRange\")) {                                                       // 2580\n        testControlRange = body.createControlRange();                                                                  // 2581\n        if (util.areHostProperties(testControlRange, [\"item\", \"add\"])) {                                               // 2582\n            implementsControlRange = true;                                                                             // 2583\n        }                                                                                                              // 2584\n    }                                                                                                                  // 2585\n    api.features.implementsControlRange = implementsControlRange;                                                      // 2586\n                                                                                                                       // 2587\n    // Selection collapsedness                                                                                         // 2588\n    if (selectionHasAnchorAndFocus) {                                                                                  // 2589\n        selectionIsCollapsed = function(sel) {                                                                         // 2590\n            return sel.anchorNode === sel.focusNode && sel.anchorOffset === sel.focusOffset;                           // 2591\n        };                                                                                                             // 2592\n    } else {                                                                                                           // 2593\n        selectionIsCollapsed = function(sel) {                                                                         // 2594\n            return sel.rangeCount ? sel.getRangeAt(sel.rangeCount - 1).collapsed : false;                              // 2595\n        };                                                                                                             // 2596\n    }                                                                                                                  // 2597\n                                                                                                                       // 2598\n    function updateAnchorAndFocusFromRange(sel, range, backwards) {                                                    // 2599\n        var anchorPrefix = backwards ? \"end\" : \"start\", focusPrefix = backwards ? \"start\" : \"end\";                     // 2600\n        sel.anchorNode = range[anchorPrefix + \"Container\"];                                                            // 2601\n        sel.anchorOffset = range[anchorPrefix + \"Offset\"];                                                             // 2602\n        sel.focusNode = range[focusPrefix + \"Container\"];                                                              // 2603\n        sel.focusOffset = range[focusPrefix + \"Offset\"];                                                               // 2604\n    }                                                                                                                  // 2605\n                                                                                                                       // 2606\n    function updateAnchorAndFocusFromNativeSelection(sel) {                                                            // 2607\n        var nativeSel = sel.nativeSelection;                                                                           // 2608\n        sel.anchorNode = nativeSel.anchorNode;                                                                         // 2609\n        sel.anchorOffset = nativeSel.anchorOffset;                                                                     // 2610\n        sel.focusNode = nativeSel.focusNode;                                                                           // 2611\n        sel.focusOffset = nativeSel.focusOffset;                                                                       // 2612\n    }                                                                                                                  // 2613\n                                                                                                                       // 2614\n    function updateEmptySelection(sel) {                                                                               // 2615\n        sel.anchorNode = sel.focusNode = null;                                                                         // 2616\n        sel.anchorOffset = sel.focusOffset = 0;                                                                        // 2617\n        sel.rangeCount = 0;                                                                                            // 2618\n        sel.isCollapsed = true;                                                                                        // 2619\n        sel._ranges.length = 0;                                                                                        // 2620\n    }                                                                                                                  // 2621\n                                                                                                                       // 2622\n    function getNativeRange(range) {                                                                                   // 2623\n        var nativeRange;                                                                                               // 2624\n        if (range instanceof DomRange) {                                                                               // 2625\n            nativeRange = range._selectionNativeRange;                                                                 // 2626\n            if (!nativeRange) {                                                                                        // 2627\n                nativeRange = api.createNativeRange(dom.getDocument(range.startContainer));                            // 2628\n                nativeRange.setEnd(range.endContainer, range.endOffset);                                               // 2629\n                nativeRange.setStart(range.startContainer, range.startOffset);                                         // 2630\n                range._selectionNativeRange = nativeRange;                                                             // 2631\n                range.attachListener(\"detach\", function() {                                                            // 2632\n                                                                                                                       // 2633\n                    this._selectionNativeRange = null;                                                                 // 2634\n                });                                                                                                    // 2635\n            }                                                                                                          // 2636\n        } else if (range instanceof WrappedRange) {                                                                    // 2637\n            nativeRange = range.nativeRange;                                                                           // 2638\n        } else if (api.features.implementsDomRange && (range instanceof dom.getWindow(range.startContainer).Range)) {  // 2639\n            nativeRange = range;                                                                                       // 2640\n        }                                                                                                              // 2641\n        return nativeRange;                                                                                            // 2642\n    }                                                                                                                  // 2643\n                                                                                                                       // 2644\n    function rangeContainsSingleElement(rangeNodes) {                                                                  // 2645\n        if (!rangeNodes.length || rangeNodes[0].nodeType != 1) {                                                       // 2646\n            return false;                                                                                              // 2647\n        }                                                                                                              // 2648\n        for (var i = 1, len = rangeNodes.length; i < len; ++i) {                                                       // 2649\n            if (!dom.isAncestorOf(rangeNodes[0], rangeNodes[i])) {                                                     // 2650\n                return false;                                                                                          // 2651\n            }                                                                                                          // 2652\n        }                                                                                                              // 2653\n        return true;                                                                                                   // 2654\n    }                                                                                                                  // 2655\n                                                                                                                       // 2656\n    function getSingleElementFromRange(range) {                                                                        // 2657\n        var nodes = range.getNodes();                                                                                  // 2658\n        if (!rangeContainsSingleElement(nodes)) {                                                                      // 2659\n            throw new Error(\"getSingleElementFromRange: range \" + range.inspect() + \" did not consist of a single element\");\n        }                                                                                                              // 2661\n        return nodes[0];                                                                                               // 2662\n    }                                                                                                                  // 2663\n                                                                                                                       // 2664\n    function isTextRange(range) {                                                                                      // 2665\n        return !!range && typeof range.text != \"undefined\";                                                            // 2666\n    }                                                                                                                  // 2667\n                                                                                                                       // 2668\n    function updateFromTextRange(sel, range) {                                                                         // 2669\n        // Create a Range from the selected TextRange                                                                  // 2670\n        var wrappedRange = new WrappedRange(range);                                                                    // 2671\n        sel._ranges = [wrappedRange];                                                                                  // 2672\n                                                                                                                       // 2673\n        updateAnchorAndFocusFromRange(sel, wrappedRange, false);                                                       // 2674\n        sel.rangeCount = 1;                                                                                            // 2675\n        sel.isCollapsed = wrappedRange.collapsed;                                                                      // 2676\n    }                                                                                                                  // 2677\n                                                                                                                       // 2678\n    function updateControlSelection(sel) {                                                                             // 2679\n        // Update the wrapped selection based on what's now in the native selection                                    // 2680\n        sel._ranges.length = 0;                                                                                        // 2681\n        if (sel.docSelection.type == \"None\") {                                                                         // 2682\n            updateEmptySelection(sel);                                                                                 // 2683\n        } else {                                                                                                       // 2684\n            var controlRange = sel.docSelection.createRange();                                                         // 2685\n            if (isTextRange(controlRange)) {                                                                           // 2686\n                // This case (where the selection type is \"Control\" and calling createRange() on the selection returns\n                // a TextRange) can happen in IE 9. It happens, for example, when all elements in the selected         // 2688\n                // ControlRange have been removed from the ControlRange and removed from the document.                 // 2689\n                updateFromTextRange(sel, controlRange);                                                                // 2690\n            } else {                                                                                                   // 2691\n                sel.rangeCount = controlRange.length;                                                                  // 2692\n                var range, doc = dom.getDocument(controlRange.item(0));                                                // 2693\n                for (var i = 0; i < sel.rangeCount; ++i) {                                                             // 2694\n                    range = api.createRange(doc);                                                                      // 2695\n                    range.selectNode(controlRange.item(i));                                                            // 2696\n                    sel._ranges.push(range);                                                                           // 2697\n                }                                                                                                      // 2698\n                sel.isCollapsed = sel.rangeCount == 1 && sel._ranges[0].collapsed;                                     // 2699\n                updateAnchorAndFocusFromRange(sel, sel._ranges[sel.rangeCount - 1], false);                            // 2700\n            }                                                                                                          // 2701\n        }                                                                                                              // 2702\n    }                                                                                                                  // 2703\n                                                                                                                       // 2704\n    function addRangeToControlSelection(sel, range) {                                                                  // 2705\n        var controlRange = sel.docSelection.createRange();                                                             // 2706\n        var rangeElement = getSingleElementFromRange(range);                                                           // 2707\n                                                                                                                       // 2708\n        // Create a new ControlRange containing all the elements in the selected ControlRange plus the element         // 2709\n        // contained by the supplied range                                                                             // 2710\n        var doc = dom.getDocument(controlRange.item(0));                                                               // 2711\n        var newControlRange = dom.getBody(doc).createControlRange();                                                   // 2712\n        for (var i = 0, len = controlRange.length; i < len; ++i) {                                                     // 2713\n            newControlRange.add(controlRange.item(i));                                                                 // 2714\n        }                                                                                                              // 2715\n        try {                                                                                                          // 2716\n            newControlRange.add(rangeElement);                                                                         // 2717\n        } catch (ex) {                                                                                                 // 2718\n            throw new Error(\"addRange(): Element within the specified Range could not be added to control selection (does it have layout?)\");\n        }                                                                                                              // 2720\n        newControlRange.select();                                                                                      // 2721\n                                                                                                                       // 2722\n        // Update the wrapped selection based on what's now in the native selection                                    // 2723\n        updateControlSelection(sel);                                                                                   // 2724\n    }                                                                                                                  // 2725\n                                                                                                                       // 2726\n    var getSelectionRangeAt;                                                                                           // 2727\n                                                                                                                       // 2728\n    if (util.isHostMethod(testSelection,  \"getRangeAt\")) {                                                             // 2729\n        getSelectionRangeAt = function(sel, index) {                                                                   // 2730\n            try {                                                                                                      // 2731\n                return sel.getRangeAt(index);                                                                          // 2732\n            } catch(ex) {                                                                                              // 2733\n                return null;                                                                                           // 2734\n            }                                                                                                          // 2735\n        };                                                                                                             // 2736\n    } else if (selectionHasAnchorAndFocus) {                                                                           // 2737\n        getSelectionRangeAt = function(sel) {                                                                          // 2738\n            var doc = dom.getDocument(sel.anchorNode);                                                                 // 2739\n            var range = api.createRange(doc);                                                                          // 2740\n            range.setStart(sel.anchorNode, sel.anchorOffset);                                                          // 2741\n            range.setEnd(sel.focusNode, sel.focusOffset);                                                              // 2742\n                                                                                                                       // 2743\n            // Handle the case when the selection was selected backwards (from the end to the start in the             // 2744\n            // document)                                                                                               // 2745\n            if (range.collapsed !== this.isCollapsed) {                                                                // 2746\n                range.setStart(sel.focusNode, sel.focusOffset);                                                        // 2747\n                range.setEnd(sel.anchorNode, sel.anchorOffset);                                                        // 2748\n            }                                                                                                          // 2749\n                                                                                                                       // 2750\n            return range;                                                                                              // 2751\n        };                                                                                                             // 2752\n    }                                                                                                                  // 2753\n                                                                                                                       // 2754\n    /**                                                                                                                // 2755\n     * @constructor                                                                                                    // 2756\n     */                                                                                                                // 2757\n    function WrappedSelection(selection, docSelection, win) {                                                          // 2758\n        this.nativeSelection = selection;                                                                              // 2759\n        this.docSelection = docSelection;                                                                              // 2760\n        this._ranges = [];                                                                                             // 2761\n        this.win = win;                                                                                                // 2762\n        this.refresh();                                                                                                // 2763\n    }                                                                                                                  // 2764\n                                                                                                                       // 2765\n    api.getSelection = function(win) {                                                                                 // 2766\n        win = win || window;                                                                                           // 2767\n        var sel = win[windowPropertyName];                                                                             // 2768\n        var nativeSel = getSelection(win), docSel = implementsDocSelection ? getDocSelection(win) : null;              // 2769\n        if (sel) {                                                                                                     // 2770\n            sel.nativeSelection = nativeSel;                                                                           // 2771\n            sel.docSelection = docSel;                                                                                 // 2772\n            sel.refresh(win);                                                                                          // 2773\n        } else {                                                                                                       // 2774\n            sel = new WrappedSelection(nativeSel, docSel, win);                                                        // 2775\n            win[windowPropertyName] = sel;                                                                             // 2776\n        }                                                                                                              // 2777\n        return sel;                                                                                                    // 2778\n    };                                                                                                                 // 2779\n                                                                                                                       // 2780\n    api.getIframeSelection = function(iframeEl) {                                                                      // 2781\n        return api.getSelection(dom.getIframeWindow(iframeEl));                                                        // 2782\n    };                                                                                                                 // 2783\n                                                                                                                       // 2784\n    var selProto = WrappedSelection.prototype;                                                                         // 2785\n                                                                                                                       // 2786\n    function createControlSelection(sel, ranges) {                                                                     // 2787\n        // Ensure that the selection becomes of type \"Control\"                                                         // 2788\n        var doc = dom.getDocument(ranges[0].startContainer);                                                           // 2789\n        var controlRange = dom.getBody(doc).createControlRange();                                                      // 2790\n        for (var i = 0, el; i < rangeCount; ++i) {                                                                     // 2791\n            el = getSingleElementFromRange(ranges[i]);                                                                 // 2792\n            try {                                                                                                      // 2793\n                controlRange.add(el);                                                                                  // 2794\n            } catch (ex) {                                                                                             // 2795\n                throw new Error(\"setRanges(): Element within the one of the specified Ranges could not be added to control selection (does it have layout?)\");\n            }                                                                                                          // 2797\n        }                                                                                                              // 2798\n        controlRange.select();                                                                                         // 2799\n                                                                                                                       // 2800\n        // Update the wrapped selection based on what's now in the native selection                                    // 2801\n        updateControlSelection(sel);                                                                                   // 2802\n    }                                                                                                                  // 2803\n                                                                                                                       // 2804\n    // Selecting a range                                                                                               // 2805\n    if (!useDocumentSelection && selectionHasAnchorAndFocus && util.areHostMethods(testSelection, [\"removeAllRanges\", \"addRange\"])) {\n        selProto.removeAllRanges = function() {                                                                        // 2807\n            this.nativeSelection.removeAllRanges();                                                                    // 2808\n            updateEmptySelection(this);                                                                                // 2809\n        };                                                                                                             // 2810\n                                                                                                                       // 2811\n        var addRangeBackwards = function(sel, range) {                                                                 // 2812\n            var doc = DomRange.getRangeDocument(range);                                                                // 2813\n            var endRange = api.createRange(doc);                                                                       // 2814\n            endRange.collapseToPoint(range.endContainer, range.endOffset);                                             // 2815\n            sel.nativeSelection.addRange(getNativeRange(endRange));                                                    // 2816\n            sel.nativeSelection.extend(range.startContainer, range.startOffset);                                       // 2817\n            sel.refresh();                                                                                             // 2818\n        };                                                                                                             // 2819\n                                                                                                                       // 2820\n        if (selectionHasRangeCount) {                                                                                  // 2821\n            selProto.addRange = function(range, backwards) {                                                           // 2822\n                if (implementsControlRange && implementsDocSelection && this.docSelection.type == CONTROL) {           // 2823\n                    addRangeToControlSelection(this, range);                                                           // 2824\n                } else {                                                                                               // 2825\n                    if (backwards && selectionHasExtend) {                                                             // 2826\n                        addRangeBackwards(this, range);                                                                // 2827\n                    } else {                                                                                           // 2828\n                        var previousRangeCount;                                                                        // 2829\n                        if (selectionSupportsMultipleRanges) {                                                         // 2830\n                            previousRangeCount = this.rangeCount;                                                      // 2831\n                        } else {                                                                                       // 2832\n                            this.removeAllRanges();                                                                    // 2833\n                            previousRangeCount = 0;                                                                    // 2834\n                        }                                                                                              // 2835\n                        this.nativeSelection.addRange(getNativeRange(range));                                          // 2836\n                                                                                                                       // 2837\n                        // Check whether adding the range was successful                                               // 2838\n                        this.rangeCount = this.nativeSelection.rangeCount;                                             // 2839\n                                                                                                                       // 2840\n                        if (this.rangeCount == previousRangeCount + 1) {                                               // 2841\n                            // The range was added successfully                                                        // 2842\n                                                                                                                       // 2843\n                            // Check whether the range that we added to the selection is reflected in the last range extracted from\n                            // the selection                                                                           // 2845\n                            if (api.config.checkSelectionRanges) {                                                     // 2846\n                                var nativeRange = getSelectionRangeAt(this.nativeSelection, this.rangeCount - 1);      // 2847\n                                if (nativeRange && !DomRange.rangesEqual(nativeRange, range)) {                        // 2848\n                                    // Happens in WebKit with, for example, a selection placed at the start of a text node\n                                    range = new WrappedRange(nativeRange);                                             // 2850\n                                }                                                                                      // 2851\n                            }                                                                                          // 2852\n                            this._ranges[this.rangeCount - 1] = range;                                                 // 2853\n                            updateAnchorAndFocusFromRange(this, range, selectionIsBackwards(this.nativeSelection));    // 2854\n                            this.isCollapsed = selectionIsCollapsed(this);                                             // 2855\n                        } else {                                                                                       // 2856\n                            // The range was not added successfully. The simplest thing is to refresh                  // 2857\n                            this.refresh();                                                                            // 2858\n                        }                                                                                              // 2859\n                    }                                                                                                  // 2860\n                }                                                                                                      // 2861\n            };                                                                                                         // 2862\n        } else {                                                                                                       // 2863\n            selProto.addRange = function(range, backwards) {                                                           // 2864\n                if (backwards && selectionHasExtend) {                                                                 // 2865\n                    addRangeBackwards(this, range);                                                                    // 2866\n                } else {                                                                                               // 2867\n                    this.nativeSelection.addRange(getNativeRange(range));                                              // 2868\n                    this.refresh();                                                                                    // 2869\n                }                                                                                                      // 2870\n            };                                                                                                         // 2871\n        }                                                                                                              // 2872\n                                                                                                                       // 2873\n        selProto.setRanges = function(ranges) {                                                                        // 2874\n            if (implementsControlRange && ranges.length > 1) {                                                         // 2875\n                createControlSelection(this, ranges);                                                                  // 2876\n            } else {                                                                                                   // 2877\n                this.removeAllRanges();                                                                                // 2878\n                for (var i = 0, len = ranges.length; i < len; ++i) {                                                   // 2879\n                    this.addRange(ranges[i]);                                                                          // 2880\n                }                                                                                                      // 2881\n            }                                                                                                          // 2882\n        };                                                                                                             // 2883\n    } else if (util.isHostMethod(testSelection, \"empty\") && util.isHostMethod(testRange, \"select\") &&                  // 2884\n               implementsControlRange && useDocumentSelection) {                                                       // 2885\n                                                                                                                       // 2886\n        selProto.removeAllRanges = function() {                                                                        // 2887\n            // Added try/catch as fix for issue #21                                                                    // 2888\n            try {                                                                                                      // 2889\n                this.docSelection.empty();                                                                             // 2890\n                                                                                                                       // 2891\n                // Check for empty() not working (issue #24)                                                           // 2892\n                if (this.docSelection.type != \"None\") {                                                                // 2893\n                    // Work around failure to empty a control selection by instead selecting a TextRange and then      // 2894\n                    // calling empty()                                                                                 // 2895\n                    var doc;                                                                                           // 2896\n                    if (this.anchorNode) {                                                                             // 2897\n                        doc = dom.getDocument(this.anchorNode);                                                        // 2898\n                    } else if (this.docSelection.type == CONTROL) {                                                    // 2899\n                        var controlRange = this.docSelection.createRange();                                            // 2900\n                        if (controlRange.length) {                                                                     // 2901\n                            doc = dom.getDocument(controlRange.item(0)).body.createTextRange();                        // 2902\n                        }                                                                                              // 2903\n                    }                                                                                                  // 2904\n                    if (doc) {                                                                                         // 2905\n                        var textRange = doc.body.createTextRange();                                                    // 2906\n                        textRange.select();                                                                            // 2907\n                        this.docSelection.empty();                                                                     // 2908\n                    }                                                                                                  // 2909\n                }                                                                                                      // 2910\n            } catch(ex) {}                                                                                             // 2911\n            updateEmptySelection(this);                                                                                // 2912\n        };                                                                                                             // 2913\n                                                                                                                       // 2914\n        selProto.addRange = function(range) {                                                                          // 2915\n            if (this.docSelection.type == CONTROL) {                                                                   // 2916\n                addRangeToControlSelection(this, range);                                                               // 2917\n            } else {                                                                                                   // 2918\n                WrappedRange.rangeToTextRange(range).select();                                                         // 2919\n                this._ranges[0] = range;                                                                               // 2920\n                this.rangeCount = 1;                                                                                   // 2921\n                this.isCollapsed = this._ranges[0].collapsed;                                                          // 2922\n                updateAnchorAndFocusFromRange(this, range, false);                                                     // 2923\n            }                                                                                                          // 2924\n        };                                                                                                             // 2925\n                                                                                                                       // 2926\n        selProto.setRanges = function(ranges) {                                                                        // 2927\n            this.removeAllRanges();                                                                                    // 2928\n            var rangeCount = ranges.length;                                                                            // 2929\n            if (rangeCount > 1) {                                                                                      // 2930\n                createControlSelection(this, ranges);                                                                  // 2931\n            } else if (rangeCount) {                                                                                   // 2932\n                this.addRange(ranges[0]);                                                                              // 2933\n            }                                                                                                          // 2934\n        };                                                                                                             // 2935\n    } else {                                                                                                           // 2936\n        module.fail(\"No means of selecting a Range or TextRange was found\");                                           // 2937\n        return false;                                                                                                  // 2938\n    }                                                                                                                  // 2939\n                                                                                                                       // 2940\n    selProto.getRangeAt = function(index) {                                                                            // 2941\n        if (index < 0 || index >= this.rangeCount) {                                                                   // 2942\n            throw new DOMException(\"INDEX_SIZE_ERR\");                                                                  // 2943\n        } else {                                                                                                       // 2944\n            return this._ranges[index];                                                                                // 2945\n        }                                                                                                              // 2946\n    };                                                                                                                 // 2947\n                                                                                                                       // 2948\n    var refreshSelection;                                                                                              // 2949\n                                                                                                                       // 2950\n    if (useDocumentSelection) {                                                                                        // 2951\n        refreshSelection = function(sel) {                                                                             // 2952\n            var range;                                                                                                 // 2953\n            if (api.isSelectionValid(sel.win)) {                                                                       // 2954\n                range = sel.docSelection.createRange();                                                                // 2955\n            } else {                                                                                                   // 2956\n                range = dom.getBody(sel.win.document).createTextRange();                                               // 2957\n                range.collapse(true);                                                                                  // 2958\n            }                                                                                                          // 2959\n                                                                                                                       // 2960\n                                                                                                                       // 2961\n            if (sel.docSelection.type == CONTROL) {                                                                    // 2962\n                updateControlSelection(sel);                                                                           // 2963\n            } else if (isTextRange(range)) {                                                                           // 2964\n                updateFromTextRange(sel, range);                                                                       // 2965\n            } else {                                                                                                   // 2966\n                updateEmptySelection(sel);                                                                             // 2967\n            }                                                                                                          // 2968\n        };                                                                                                             // 2969\n    } else if (util.isHostMethod(testSelection, \"getRangeAt\") && typeof testSelection.rangeCount == \"number\") {        // 2970\n        refreshSelection = function(sel) {                                                                             // 2971\n            if (implementsControlRange && implementsDocSelection && sel.docSelection.type == CONTROL) {                // 2972\n                updateControlSelection(sel);                                                                           // 2973\n            } else {                                                                                                   // 2974\n                sel._ranges.length = sel.rangeCount = sel.nativeSelection.rangeCount;                                  // 2975\n                if (sel.rangeCount) {                                                                                  // 2976\n                    for (var i = 0, len = sel.rangeCount; i < len; ++i) {                                              // 2977\n                        sel._ranges[i] = new api.WrappedRange(sel.nativeSelection.getRangeAt(i));                      // 2978\n                    }                                                                                                  // 2979\n                    updateAnchorAndFocusFromRange(sel, sel._ranges[sel.rangeCount - 1], selectionIsBackwards(sel.nativeSelection));\n                    sel.isCollapsed = selectionIsCollapsed(sel);                                                       // 2981\n                } else {                                                                                               // 2982\n                    updateEmptySelection(sel);                                                                         // 2983\n                }                                                                                                      // 2984\n            }                                                                                                          // 2985\n        };                                                                                                             // 2986\n    } else if (selectionHasAnchorAndFocus && typeof testSelection.isCollapsed == BOOLEAN && typeof testRange.collapsed == BOOLEAN && api.features.implementsDomRange) {\n        refreshSelection = function(sel) {                                                                             // 2988\n            var range, nativeSel = sel.nativeSelection;                                                                // 2989\n            if (nativeSel.anchorNode) {                                                                                // 2990\n                range = getSelectionRangeAt(nativeSel, 0);                                                             // 2991\n                sel._ranges = [range];                                                                                 // 2992\n                sel.rangeCount = 1;                                                                                    // 2993\n                updateAnchorAndFocusFromNativeSelection(sel);                                                          // 2994\n                sel.isCollapsed = selectionIsCollapsed(sel);                                                           // 2995\n            } else {                                                                                                   // 2996\n                updateEmptySelection(sel);                                                                             // 2997\n            }                                                                                                          // 2998\n        };                                                                                                             // 2999\n    } else {                                                                                                           // 3000\n        module.fail(\"No means of obtaining a Range or TextRange from the user's selection was found\");                 // 3001\n        return false;                                                                                                  // 3002\n    }                                                                                                                  // 3003\n                                                                                                                       // 3004\n    selProto.refresh = function(checkForChanges) {                                                                     // 3005\n        var oldRanges = checkForChanges ? this._ranges.slice(0) : null;                                                // 3006\n        refreshSelection(this);                                                                                        // 3007\n        if (checkForChanges) {                                                                                         // 3008\n            var i = oldRanges.length;                                                                                  // 3009\n            if (i != this._ranges.length) {                                                                            // 3010\n                return false;                                                                                          // 3011\n            }                                                                                                          // 3012\n            while (i--) {                                                                                              // 3013\n                if (!DomRange.rangesEqual(oldRanges[i], this._ranges[i])) {                                            // 3014\n                    return false;                                                                                      // 3015\n                }                                                                                                      // 3016\n            }                                                                                                          // 3017\n            return true;                                                                                               // 3018\n        }                                                                                                              // 3019\n    };                                                                                                                 // 3020\n                                                                                                                       // 3021\n    // Removal of a single range                                                                                       // 3022\n    var removeRangeManually = function(sel, range) {                                                                   // 3023\n        var ranges = sel.getAllRanges(), removed = false;                                                              // 3024\n        sel.removeAllRanges();                                                                                         // 3025\n        for (var i = 0, len = ranges.length; i < len; ++i) {                                                           // 3026\n            if (removed || range !== ranges[i]) {                                                                      // 3027\n                sel.addRange(ranges[i]);                                                                               // 3028\n            } else {                                                                                                   // 3029\n                // According to the draft WHATWG Range spec, the same range may be added to the selection multiple     // 3030\n                // times. removeRange should only remove the first instance, so the following ensures only the first   // 3031\n                // instance is removed                                                                                 // 3032\n                removed = true;                                                                                        // 3033\n            }                                                                                                          // 3034\n        }                                                                                                              // 3035\n        if (!sel.rangeCount) {                                                                                         // 3036\n            updateEmptySelection(sel);                                                                                 // 3037\n        }                                                                                                              // 3038\n    };                                                                                                                 // 3039\n                                                                                                                       // 3040\n    if (implementsControlRange) {                                                                                      // 3041\n        selProto.removeRange = function(range) {                                                                       // 3042\n            if (this.docSelection.type == CONTROL) {                                                                   // 3043\n                var controlRange = this.docSelection.createRange();                                                    // 3044\n                var rangeElement = getSingleElementFromRange(range);                                                   // 3045\n                                                                                                                       // 3046\n                // Create a new ControlRange containing all the elements in the selected ControlRange minus the        // 3047\n                // element contained by the supplied range                                                             // 3048\n                var doc = dom.getDocument(controlRange.item(0));                                                       // 3049\n                var newControlRange = dom.getBody(doc).createControlRange();                                           // 3050\n                var el, removed = false;                                                                               // 3051\n                for (var i = 0, len = controlRange.length; i < len; ++i) {                                             // 3052\n                    el = controlRange.item(i);                                                                         // 3053\n                    if (el !== rangeElement || removed) {                                                              // 3054\n                        newControlRange.add(controlRange.item(i));                                                     // 3055\n                    } else {                                                                                           // 3056\n                        removed = true;                                                                                // 3057\n                    }                                                                                                  // 3058\n                }                                                                                                      // 3059\n                newControlRange.select();                                                                              // 3060\n                                                                                                                       // 3061\n                // Update the wrapped selection based on what's now in the native selection                            // 3062\n                updateControlSelection(this);                                                                          // 3063\n            } else {                                                                                                   // 3064\n                removeRangeManually(this, range);                                                                      // 3065\n            }                                                                                                          // 3066\n        };                                                                                                             // 3067\n    } else {                                                                                                           // 3068\n        selProto.removeRange = function(range) {                                                                       // 3069\n            removeRangeManually(this, range);                                                                          // 3070\n        };                                                                                                             // 3071\n    }                                                                                                                  // 3072\n                                                                                                                       // 3073\n    // Detecting if a selection is backwards                                                                           // 3074\n    var selectionIsBackwards;                                                                                          // 3075\n    if (!useDocumentSelection && selectionHasAnchorAndFocus && api.features.implementsDomRange) {                      // 3076\n        selectionIsBackwards = function(sel) {                                                                         // 3077\n            var backwards = false;                                                                                     // 3078\n            if (sel.anchorNode) {                                                                                      // 3079\n                backwards = (dom.comparePoints(sel.anchorNode, sel.anchorOffset, sel.focusNode, sel.focusOffset) == 1);\n            }                                                                                                          // 3081\n            return backwards;                                                                                          // 3082\n        };                                                                                                             // 3083\n                                                                                                                       // 3084\n        selProto.isBackwards = function() {                                                                            // 3085\n            return selectionIsBackwards(this);                                                                         // 3086\n        };                                                                                                             // 3087\n    } else {                                                                                                           // 3088\n        selectionIsBackwards = selProto.isBackwards = function() {                                                     // 3089\n            return false;                                                                                              // 3090\n        };                                                                                                             // 3091\n    }                                                                                                                  // 3092\n                                                                                                                       // 3093\n    // Selection text                                                                                                  // 3094\n    // This is conformant to the new WHATWG DOM Range draft spec but differs from WebKit and Mozilla's implementation  // 3095\n    selProto.toString = function() {                                                                                   // 3096\n                                                                                                                       // 3097\n        var rangeTexts = [];                                                                                           // 3098\n        for (var i = 0, len = this.rangeCount; i < len; ++i) {                                                         // 3099\n            rangeTexts[i] = \"\" + this._ranges[i];                                                                      // 3100\n        }                                                                                                              // 3101\n        return rangeTexts.join(\"\");                                                                                    // 3102\n    };                                                                                                                 // 3103\n                                                                                                                       // 3104\n    function assertNodeInSameDocument(sel, node) {                                                                     // 3105\n        if (sel.anchorNode && (dom.getDocument(sel.anchorNode) !== dom.getDocument(node))) {                           // 3106\n            throw new DOMException(\"WRONG_DOCUMENT_ERR\");                                                              // 3107\n        }                                                                                                              // 3108\n    }                                                                                                                  // 3109\n                                                                                                                       // 3110\n    // No current browsers conform fully to the HTML 5 draft spec for this method, so Rangy's own method is always used\n    selProto.collapse = function(node, offset) {                                                                       // 3112\n        assertNodeInSameDocument(this, node);                                                                          // 3113\n        var range = api.createRange(dom.getDocument(node));                                                            // 3114\n        range.collapseToPoint(node, offset);                                                                           // 3115\n        this.removeAllRanges();                                                                                        // 3116\n        this.addRange(range);                                                                                          // 3117\n        this.isCollapsed = true;                                                                                       // 3118\n    };                                                                                                                 // 3119\n                                                                                                                       // 3120\n    selProto.collapseToStart = function() {                                                                            // 3121\n        if (this.rangeCount) {                                                                                         // 3122\n            var range = this._ranges[0];                                                                               // 3123\n            this.collapse(range.startContainer, range.startOffset);                                                    // 3124\n        } else {                                                                                                       // 3125\n            throw new DOMException(\"INVALID_STATE_ERR\");                                                               // 3126\n        }                                                                                                              // 3127\n    };                                                                                                                 // 3128\n                                                                                                                       // 3129\n    selProto.collapseToEnd = function() {                                                                              // 3130\n        if (this.rangeCount) {                                                                                         // 3131\n            var range = this._ranges[this.rangeCount - 1];                                                             // 3132\n            this.collapse(range.endContainer, range.endOffset);                                                        // 3133\n        } else {                                                                                                       // 3134\n            throw new DOMException(\"INVALID_STATE_ERR\");                                                               // 3135\n        }                                                                                                              // 3136\n    };                                                                                                                 // 3137\n                                                                                                                       // 3138\n    // The HTML 5 spec is very specific on how selectAllChildren should be implemented so the native implementation is\n    // never used by Rangy.                                                                                            // 3140\n    selProto.selectAllChildren = function(node) {                                                                      // 3141\n        assertNodeInSameDocument(this, node);                                                                          // 3142\n        var range = api.createRange(dom.getDocument(node));                                                            // 3143\n        range.selectNodeContents(node);                                                                                // 3144\n        this.removeAllRanges();                                                                                        // 3145\n        this.addRange(range);                                                                                          // 3146\n    };                                                                                                                 // 3147\n                                                                                                                       // 3148\n    selProto.deleteFromDocument = function() {                                                                         // 3149\n        // Sepcial behaviour required for Control selections                                                           // 3150\n        if (implementsControlRange && implementsDocSelection && this.docSelection.type == CONTROL) {                   // 3151\n            var controlRange = this.docSelection.createRange();                                                        // 3152\n            var element;                                                                                               // 3153\n            while (controlRange.length) {                                                                              // 3154\n                element = controlRange.item(0);                                                                        // 3155\n                controlRange.remove(element);                                                                          // 3156\n                element.parentNode.removeChild(element);                                                               // 3157\n            }                                                                                                          // 3158\n            this.refresh();                                                                                            // 3159\n        } else if (this.rangeCount) {                                                                                  // 3160\n            var ranges = this.getAllRanges();                                                                          // 3161\n            this.removeAllRanges();                                                                                    // 3162\n            for (var i = 0, len = ranges.length; i < len; ++i) {                                                       // 3163\n                ranges[i].deleteContents();                                                                            // 3164\n            }                                                                                                          // 3165\n            // The HTML5 spec says nothing about what the selection should contain after calling deleteContents on each\n            // range. Firefox moves the selection to where the final selected range was, so we emulate that            // 3167\n            this.addRange(ranges[len - 1]);                                                                            // 3168\n        }                                                                                                              // 3169\n    };                                                                                                                 // 3170\n                                                                                                                       // 3171\n    // The following are non-standard extensions                                                                       // 3172\n    selProto.getAllRanges = function() {                                                                               // 3173\n        return this._ranges.slice(0);                                                                                  // 3174\n    };                                                                                                                 // 3175\n                                                                                                                       // 3176\n    selProto.setSingleRange = function(range) {                                                                        // 3177\n        this.setRanges( [range] );                                                                                     // 3178\n    };                                                                                                                 // 3179\n                                                                                                                       // 3180\n    selProto.containsNode = function(node, allowPartial) {                                                             // 3181\n        for (var i = 0, len = this._ranges.length; i < len; ++i) {                                                     // 3182\n            if (this._ranges[i].containsNode(node, allowPartial)) {                                                    // 3183\n                return true;                                                                                           // 3184\n            }                                                                                                          // 3185\n        }                                                                                                              // 3186\n        return false;                                                                                                  // 3187\n    };                                                                                                                 // 3188\n                                                                                                                       // 3189\n    selProto.toHtml = function() {                                                                                     // 3190\n        var html = \"\";                                                                                                 // 3191\n        if (this.rangeCount) {                                                                                         // 3192\n            var container = DomRange.getRangeDocument(this._ranges[0]).createElement(\"div\");                           // 3193\n            for (var i = 0, len = this._ranges.length; i < len; ++i) {                                                 // 3194\n                container.appendChild(this._ranges[i].cloneContents());                                                // 3195\n            }                                                                                                          // 3196\n            html = container.innerHTML;                                                                                // 3197\n        }                                                                                                              // 3198\n        return html;                                                                                                   // 3199\n    };                                                                                                                 // 3200\n                                                                                                                       // 3201\n    function inspect(sel) {                                                                                            // 3202\n        var rangeInspects = [];                                                                                        // 3203\n        var anchor = new DomPosition(sel.anchorNode, sel.anchorOffset);                                                // 3204\n        var focus = new DomPosition(sel.focusNode, sel.focusOffset);                                                   // 3205\n        var name = (typeof sel.getName == \"function\") ? sel.getName() : \"Selection\";                                   // 3206\n                                                                                                                       // 3207\n        if (typeof sel.rangeCount != \"undefined\") {                                                                    // 3208\n            for (var i = 0, len = sel.rangeCount; i < len; ++i) {                                                      // 3209\n                rangeInspects[i] = DomRange.inspect(sel.getRangeAt(i));                                                // 3210\n            }                                                                                                          // 3211\n        }                                                                                                              // 3212\n        return \"[\" + name + \"(Ranges: \" + rangeInspects.join(\", \") +                                                   // 3213\n                \")(anchor: \" + anchor.inspect() + \", focus: \" + focus.inspect() + \"]\";                                 // 3214\n                                                                                                                       // 3215\n    }                                                                                                                  // 3216\n                                                                                                                       // 3217\n    selProto.getName = function() {                                                                                    // 3218\n        return \"WrappedSelection\";                                                                                     // 3219\n    };                                                                                                                 // 3220\n                                                                                                                       // 3221\n    selProto.inspect = function() {                                                                                    // 3222\n        return inspect(this);                                                                                          // 3223\n    };                                                                                                                 // 3224\n                                                                                                                       // 3225\n    selProto.detach = function() {                                                                                     // 3226\n        this.win[windowPropertyName] = null;                                                                           // 3227\n        this.win = this.anchorNode = this.focusNode = null;                                                            // 3228\n    };                                                                                                                 // 3229\n                                                                                                                       // 3230\n    WrappedSelection.inspect = inspect;                                                                                // 3231\n                                                                                                                       // 3232\n    api.Selection = WrappedSelection;                                                                                  // 3233\n                                                                                                                       // 3234\n    api.selectionPrototype = selProto;                                                                                 // 3235\n                                                                                                                       // 3236\n    api.addCreateMissingNativeApiListener(function(win) {                                                              // 3237\n        if (typeof win.getSelection == \"undefined\") {                                                                  // 3238\n            win.getSelection = function() {                                                                            // 3239\n                return api.getSelection(this);                                                                         // 3240\n            };                                                                                                         // 3241\n        }                                                                                                              // 3242\n        win = null;                                                                                                    // 3243\n    });                                                                                                                // 3244\n});                                                                                                                    // 3245\n/*                                                                                                                     // 3246\n\tBase.js, version 1.1a                                                                                                 // 3247\n\tCopyright 2006-2010, Dean Edwards                                                                                     // 3248\n\tLicense: http://www.opensource.org/licenses/mit-license.php                                                           // 3249\n*/                                                                                                                     // 3250\n                                                                                                                       // 3251\nvar Base = function() {                                                                                                // 3252\n\t// dummy                                                                                                              // 3253\n};                                                                                                                     // 3254\n                                                                                                                       // 3255\nBase.extend = function(_instance, _static) { // subclass                                                               // 3256\n\tvar extend = Base.prototype.extend;                                                                                   // 3257\n\t                                                                                                                      // 3258\n\t// build the prototype                                                                                                // 3259\n\tBase._prototyping = true;                                                                                             // 3260\n\tvar proto = new this;                                                                                                 // 3261\n\textend.call(proto, _instance);                                                                                        // 3262\n  proto.base = function() {                                                                                            // 3263\n    // call this method from any other method to invoke that method's ancestor                                         // 3264\n  };                                                                                                                   // 3265\n\tdelete Base._prototyping;                                                                                             // 3266\n\t                                                                                                                      // 3267\n\t// create the wrapper for the constructor function                                                                    // 3268\n\t//var constructor = proto.constructor.valueOf(); //-dean                                                              // 3269\n\tvar constructor = proto.constructor;                                                                                  // 3270\n\tvar klass = proto.constructor = function() {                                                                          // 3271\n\t\tif (!Base._prototyping) {                                                                                            // 3272\n\t\t\tif (this._constructing || this.constructor == klass) { // instantiation                                             // 3273\n\t\t\t\tthis._constructing = true;                                                                                         // 3274\n\t\t\t\tconstructor.apply(this, arguments);                                                                                // 3275\n\t\t\t\tdelete this._constructing;                                                                                         // 3276\n\t\t\t} else if (arguments[0] != null) { // casting                                                                       // 3277\n\t\t\t\treturn (arguments[0].extend || extend).call(arguments[0], proto);                                                  // 3278\n\t\t\t}                                                                                                                   // 3279\n\t\t}                                                                                                                    // 3280\n\t};                                                                                                                    // 3281\n\t                                                                                                                      // 3282\n\t// build the class interface                                                                                          // 3283\n\tklass.ancestor = this;                                                                                                // 3284\n\tklass.extend = this.extend;                                                                                           // 3285\n\tklass.forEach = this.forEach;                                                                                         // 3286\n\tklass.implement = this.implement;                                                                                     // 3287\n\tklass.prototype = proto;                                                                                              // 3288\n\tklass.toString = this.toString;                                                                                       // 3289\n\tklass.valueOf = function(type) {                                                                                      // 3290\n\t\t//return (type == \"object\") ? klass : constructor; //-dean                                                           // 3291\n\t\treturn (type == \"object\") ? klass : constructor.valueOf();                                                           // 3292\n\t};                                                                                                                    // 3293\n\textend.call(klass, _static);                                                                                          // 3294\n\t// class initialisation                                                                                               // 3295\n\tif (typeof klass.init == \"function\") klass.init();                                                                    // 3296\n\treturn klass;                                                                                                         // 3297\n};                                                                                                                     // 3298\n                                                                                                                       // 3299\nBase.prototype = {\t                                                                                                    // 3300\n\textend: function(source, value) {                                                                                     // 3301\n\t\tif (arguments.length > 1) { // extending with a name/value pair                                                      // 3302\n\t\t\tvar ancestor = this[source];                                                                                        // 3303\n\t\t\tif (ancestor && (typeof value == \"function\") && // overriding a method?                                             // 3304\n\t\t\t\t// the valueOf() comparison is to avoid circular references                                                        // 3305\n\t\t\t\t(!ancestor.valueOf || ancestor.valueOf() != value.valueOf()) &&                                                    // 3306\n\t\t\t\t/\\bbase\\b/.test(value)) {                                                                                          // 3307\n\t\t\t\t// get the underlying method                                                                                       // 3308\n\t\t\t\tvar method = value.valueOf();                                                                                      // 3309\n\t\t\t\t// override                                                                                                        // 3310\n\t\t\t\tvalue = function() {                                                                                               // 3311\n\t\t\t\t\tvar previous = this.base || Base.prototype.base;                                                                  // 3312\n\t\t\t\t\tthis.base = ancestor;                                                                                             // 3313\n\t\t\t\t\tvar returnValue = method.apply(this, arguments);                                                                  // 3314\n\t\t\t\t\tthis.base = previous;                                                                                             // 3315\n\t\t\t\t\treturn returnValue;                                                                                               // 3316\n\t\t\t\t};                                                                                                                 // 3317\n\t\t\t\t// point to the underlying method                                                                                  // 3318\n\t\t\t\tvalue.valueOf = function(type) {                                                                                   // 3319\n\t\t\t\t\treturn (type == \"object\") ? value : method;                                                                       // 3320\n\t\t\t\t};                                                                                                                 // 3321\n\t\t\t\tvalue.toString = Base.toString;                                                                                    // 3322\n\t\t\t}                                                                                                                   // 3323\n\t\t\tthis[source] = value;                                                                                               // 3324\n\t\t} else if (source) { // extending with an object literal                                                             // 3325\n\t\t\tvar extend = Base.prototype.extend;                                                                                 // 3326\n\t\t\t// if this object has a customised extend method then use it                                                        // 3327\n\t\t\tif (!Base._prototyping && typeof this != \"function\") {                                                              // 3328\n\t\t\t\textend = this.extend || extend;                                                                                    // 3329\n\t\t\t}                                                                                                                   // 3330\n\t\t\tvar proto = {toSource: null};                                                                                       // 3331\n\t\t\t// do the \"toString\" and other methods manually                                                                     // 3332\n\t\t\tvar hidden = [\"constructor\", \"toString\", \"valueOf\"];                                                                // 3333\n\t\t\t// if we are prototyping then include the constructor                                                               // 3334\n\t\t\tvar i = Base._prototyping ? 0 : 1;                                                                                  // 3335\n\t\t\twhile (key = hidden[i++]) {                                                                                         // 3336\n\t\t\t\tif (source[key] != proto[key]) {                                                                                   // 3337\n\t\t\t\t\textend.call(this, key, source[key]);                                                                              // 3338\n                                                                                                                       // 3339\n\t\t\t\t}                                                                                                                  // 3340\n\t\t\t}                                                                                                                   // 3341\n\t\t\t// copy each of the source object's properties to this object                                                       // 3342\n\t\t\tfor (var key in source) {                                                                                           // 3343\n\t\t\t\tif (!proto[key]) extend.call(this, key, source[key]);                                                              // 3344\n\t\t\t}                                                                                                                   // 3345\n\t\t}                                                                                                                    // 3346\n\t\treturn this;                                                                                                         // 3347\n\t}                                                                                                                     // 3348\n};                                                                                                                     // 3349\n                                                                                                                       // 3350\n// initialise                                                                                                          // 3351\nBase = Base.extend({                                                                                                   // 3352\n\tconstructor: function() {                                                                                             // 3353\n\t\tthis.extend(arguments[0]);                                                                                           // 3354\n\t}                                                                                                                     // 3355\n}, {                                                                                                                   // 3356\n\tancestor: Object,                                                                                                     // 3357\n\tversion: \"1.1\",                                                                                                       // 3358\n\t                                                                                                                      // 3359\n\tforEach: function(object, block, context) {                                                                           // 3360\n\t\tfor (var key in object) {                                                                                            // 3361\n\t\t\tif (this.prototype[key] === undefined) {                                                                            // 3362\n\t\t\t\tblock.call(context, object[key], key, object);                                                                     // 3363\n\t\t\t}                                                                                                                   // 3364\n\t\t}                                                                                                                    // 3365\n\t},                                                                                                                    // 3366\n\t\t                                                                                                                     // 3367\n\timplement: function() {                                                                                               // 3368\n\t\tfor (var i = 0; i < arguments.length; i++) {                                                                         // 3369\n\t\t\tif (typeof arguments[i] == \"function\") {                                                                            // 3370\n\t\t\t\t// if it's a function, call it                                                                                     // 3371\n\t\t\t\targuments[i](this.prototype);                                                                                      // 3372\n\t\t\t} else {                                                                                                            // 3373\n\t\t\t\t// add the interface using the extend method                                                                       // 3374\n\t\t\t\tthis.prototype.extend(arguments[i]);                                                                               // 3375\n\t\t\t}                                                                                                                   // 3376\n\t\t}                                                                                                                    // 3377\n\t\treturn this;                                                                                                         // 3378\n\t},                                                                                                                    // 3379\n\t                                                                                                                      // 3380\n\ttoString: function() {                                                                                                // 3381\n\t\treturn String(this.valueOf());                                                                                       // 3382\n\t}                                                                                                                     // 3383\n});/**                                                                                                                 // 3384\n * Detect browser support for specific features                                                                        // 3385\n */                                                                                                                    // 3386\nwysihtml5.browser = (function() {                                                                                      // 3387\n  var userAgent   = navigator.userAgent,                                                                               // 3388\n      testElement = document.createElement(\"div\"),                                                                     // 3389\n      // Browser sniffing is unfortunately needed since some behaviors are impossible to feature detect                // 3390\n      isIE        = userAgent.indexOf(\"MSIE\")         !== -1 && userAgent.indexOf(\"Opera\") === -1,                     // 3391\n      isGecko     = userAgent.indexOf(\"Gecko\")        !== -1 && userAgent.indexOf(\"KHTML\") === -1,                     // 3392\n      isWebKit    = userAgent.indexOf(\"AppleWebKit/\") !== -1,                                                          // 3393\n      isChrome    = userAgent.indexOf(\"Chrome/\")      !== -1,                                                          // 3394\n      isOpera     = userAgent.indexOf(\"Opera/\")       !== -1;                                                          // 3395\n                                                                                                                       // 3396\n  function iosVersion(userAgent) {                                                                                     // 3397\n    return ((/ipad|iphone|ipod/.test(userAgent) && userAgent.match(/ os (\\d+).+? like mac os x/)) || [, 0])[1];        // 3398\n  }                                                                                                                    // 3399\n                                                                                                                       // 3400\n  return {                                                                                                             // 3401\n    // Static variable needed, publicly accessible, to be able override it in unit tests                               // 3402\n    USER_AGENT: userAgent,                                                                                             // 3403\n                                                                                                                       // 3404\n    /**                                                                                                                // 3405\n     * Exclude browsers that are not capable of displaying and handling                                                // 3406\n     * contentEditable as desired:                                                                                     // 3407\n     *    - iPhone, iPad (tested iOS 4.2.2) and Android (tested 2.2) refuse to make contentEditables focusable         // 3408\n     *    - IE < 8 create invalid markup and crash randomly from time to time                                          // 3409\n     *                                                                                                                 // 3410\n     * @return {Boolean}                                                                                               // 3411\n     */                                                                                                                // 3412\n    supported: function() {                                                                                            // 3413\n      var userAgent                   = this.USER_AGENT.toLowerCase(),                                                 // 3414\n          // Essential for making html elements editable                                                               // 3415\n          hasContentEditableSupport   = \"contentEditable\" in testElement,                                              // 3416\n          // Following methods are needed in order to interact with the contentEditable area                           // 3417\n          hasEditingApiSupport        = document.execCommand && document.queryCommandSupported && document.queryCommandState,\n          // document selector apis are only supported by IE 8+, Safari 4+, Chrome and Firefox 3.5+                    // 3419\n          hasQuerySelectorSupport     = document.querySelector && document.querySelectorAll,                           // 3420\n          // contentEditable is unusable in mobile browsers (tested iOS 4.2.2, Android 2.2, Opera Mobile, WebOS 3.05)  // 3421\n          isIncompatibleMobileBrowser = (this.isIos() && iosVersion(userAgent) < 5) || userAgent.indexOf(\"opera mobi\") !== -1 || userAgent.indexOf(\"hpwos/\") !== -1;\n                                                                                                                       // 3423\n      return hasContentEditableSupport                                                                                 // 3424\n        && hasEditingApiSupport                                                                                        // 3425\n        && hasQuerySelectorSupport                                                                                     // 3426\n        && !isIncompatibleMobileBrowser;                                                                               // 3427\n    },                                                                                                                 // 3428\n                                                                                                                       // 3429\n    isTouchDevice: function() {                                                                                        // 3430\n      return this.supportsEvent(\"touchmove\");                                                                          // 3431\n    },                                                                                                                 // 3432\n                                                                                                                       // 3433\n    isIos: function() {                                                                                                // 3434\n      var userAgent = this.USER_AGENT.toLowerCase();                                                                   // 3435\n      return userAgent.indexOf(\"webkit\") !== -1 && userAgent.indexOf(\"mobile\") !== -1;                                 // 3436\n    },                                                                                                                 // 3437\n                                                                                                                       // 3438\n    /**                                                                                                                // 3439\n     * Whether the browser supports sandboxed iframes                                                                  // 3440\n     * Currently only IE 6+ offers such feature <iframe security=\"restricted\">                                         // 3441\n     *                                                                                                                 // 3442\n     * http://msdn.microsoft.com/en-us/library/ms534622(v=vs.85).aspx                                                  // 3443\n     * http://blogs.msdn.com/b/ie/archive/2008/01/18/using-frames-more-securely.aspx                                   // 3444\n     *                                                                                                                 // 3445\n     * HTML5 sandboxed iframes are still buggy and their DOM is not reachable from the outside (except when using postMessage)\n     */                                                                                                                // 3447\n    supportsSandboxedIframes: function() {                                                                             // 3448\n      return isIE;                                                                                                     // 3449\n    },                                                                                                                 // 3450\n                                                                                                                       // 3451\n    /**                                                                                                                // 3452\n     * IE6+7 throw a mixed content warning when the src of an iframe                                                   // 3453\n     * is empty/unset or about:blank                                                                                   // 3454\n     * window.querySelector is implemented as of IE8                                                                   // 3455\n     */                                                                                                                // 3456\n    throwsMixedContentWarningWhenIframeSrcIsEmpty: function() {                                                        // 3457\n      return !(\"querySelector\" in document);                                                                           // 3458\n    },                                                                                                                 // 3459\n                                                                                                                       // 3460\n    /**                                                                                                                // 3461\n     * Whether the caret is correctly displayed in contentEditable elements                                            // 3462\n     * Firefox sometimes shows a huge caret in the beginning after focusing                                            // 3463\n     */                                                                                                                // 3464\n    displaysCaretInEmptyContentEditableCorrectly: function() {                                                         // 3465\n      return !isGecko;                                                                                                 // 3466\n    },                                                                                                                 // 3467\n                                                                                                                       // 3468\n    /**                                                                                                                // 3469\n     * Opera and IE are the only browsers who offer the css value                                                      // 3470\n     * in the original unit, thx to the currentStyle object                                                            // 3471\n     * All other browsers provide the computed style in px via window.getComputedStyle                                 // 3472\n     */                                                                                                                // 3473\n    hasCurrentStyleProperty: function() {                                                                              // 3474\n      return \"currentStyle\" in testElement;                                                                            // 3475\n    },                                                                                                                 // 3476\n                                                                                                                       // 3477\n    /**                                                                                                                // 3478\n     * Whether the browser inserts a <br> when pressing enter in a contentEditable element                             // 3479\n     */                                                                                                                // 3480\n    insertsLineBreaksOnReturn: function() {                                                                            // 3481\n      return isGecko;                                                                                                  // 3482\n    },                                                                                                                 // 3483\n                                                                                                                       // 3484\n    supportsPlaceholderAttributeOn: function(element) {                                                                // 3485\n      return \"placeholder\" in element;                                                                                 // 3486\n    },                                                                                                                 // 3487\n                                                                                                                       // 3488\n    supportsEvent: function(eventName) {                                                                               // 3489\n      return \"on\" + eventName in testElement || (function() {                                                          // 3490\n        testElement.setAttribute(\"on\" + eventName, \"return;\");                                                         // 3491\n        return typeof(testElement[\"on\" + eventName]) === \"function\";                                                   // 3492\n      })();                                                                                                            // 3493\n    },                                                                                                                 // 3494\n                                                                                                                       // 3495\n    /**                                                                                                                // 3496\n     * Opera doesn't correctly fire focus/blur events when clicking in- and outside of iframe                          // 3497\n     */                                                                                                                // 3498\n    supportsEventsInIframeCorrectly: function() {                                                                      // 3499\n      return !isOpera;                                                                                                 // 3500\n    },                                                                                                                 // 3501\n                                                                                                                       // 3502\n    /**                                                                                                                // 3503\n     * Chrome & Safari only fire the ondrop/ondragend/... events when the ondragover event is cancelled                // 3504\n     * with event.preventDefault                                                                                       // 3505\n     * Firefox 3.6 fires those events anyway, but the mozilla doc says that the dragover/dragenter event needs         // 3506\n     * to be cancelled                                                                                                 // 3507\n     */                                                                                                                // 3508\n    firesOnDropOnlyWhenOnDragOverIsCancelled: function() {                                                             // 3509\n      return isWebKit || isGecko;                                                                                      // 3510\n    },                                                                                                                 // 3511\n                                                                                                                       // 3512\n    /**                                                                                                                // 3513\n     * Whether the browser supports the event.dataTransfer property in a proper way                                    // 3514\n     */                                                                                                                // 3515\n    supportsDataTransfer: function() {                                                                                 // 3516\n      try {                                                                                                            // 3517\n        // Firefox doesn't support dataTransfer in a safe way, it doesn't strip script code in the html payload (like Chrome does)\n        return isWebKit && (window.Clipboard || window.DataTransfer).prototype.getData;                                // 3519\n      } catch(e) {                                                                                                     // 3520\n        return false;                                                                                                  // 3521\n      }                                                                                                                // 3522\n    },                                                                                                                 // 3523\n                                                                                                                       // 3524\n    /**                                                                                                                // 3525\n     * Everything below IE9 doesn't know how to treat HTML5 tags                                                       // 3526\n     *                                                                                                                 // 3527\n     * @param {Object} context The document object on which to check HTML5 support                                     // 3528\n     *                                                                                                                 // 3529\n     * @example                                                                                                        // 3530\n     *    wysihtml5.browser.supportsHTML5Tags(document);                                                               // 3531\n     */                                                                                                                // 3532\n    supportsHTML5Tags: function(context) {                                                                             // 3533\n      var element = context.createElement(\"div\"),                                                                      // 3534\n          html5   = \"<article>foo</article>\";                                                                          // 3535\n      element.innerHTML = html5;                                                                                       // 3536\n      return element.innerHTML.toLowerCase() === html5;                                                                // 3537\n    },                                                                                                                 // 3538\n                                                                                                                       // 3539\n    /**                                                                                                                // 3540\n     * Checks whether a document supports a certain queryCommand                                                       // 3541\n     * In particular, Opera needs a reference to a document that has a contentEditable in it's dom tree                // 3542\n     * in oder to report correct results                                                                               // 3543\n     *                                                                                                                 // 3544\n     * @param {Object} doc Document object on which to check for a query command                                       // 3545\n     * @param {String} command The query command to check for                                                          // 3546\n     * @return {Boolean}                                                                                               // 3547\n     *                                                                                                                 // 3548\n     * @example                                                                                                        // 3549\n     *    wysihtml5.browser.supportsCommand(document, \"bold\");                                                         // 3550\n     */                                                                                                                // 3551\n    supportsCommand: (function() {                                                                                     // 3552\n      // Following commands are supported but contain bugs in some browsers                                            // 3553\n      var buggyCommands = {                                                                                            // 3554\n        // formatBlock fails with some tags (eg. <blockquote>)                                                         // 3555\n        \"formatBlock\":          isIE,                                                                                  // 3556\n         // When inserting unordered or ordered lists in Firefox, Chrome or Safari, the current selection or line gets\n         // converted into a list (<ul><li>...</li></ul>, <ol><li>...</li></ol>)                                       // 3558\n         // IE and Opera act a bit different here as they convert the entire content of the current block element into a list\n        \"insertUnorderedList\":  isIE || isOpera || isWebKit,                                                           // 3560\n        \"insertOrderedList\":    isIE || isOpera || isWebKit                                                            // 3561\n      };                                                                                                               // 3562\n                                                                                                                       // 3563\n      // Firefox throws errors for queryCommandSupported, so we have to build up our own object of supported commands  // 3564\n      var supported = {                                                                                                // 3565\n        \"insertHTML\": isGecko                                                                                          // 3566\n      };                                                                                                               // 3567\n                                                                                                                       // 3568\n      return function(doc, command) {                                                                                  // 3569\n        var isBuggy = buggyCommands[command];                                                                          // 3570\n        if (!isBuggy) {                                                                                                // 3571\n          // Firefox throws errors when invoking queryCommandSupported or queryCommandEnabled                          // 3572\n          try {                                                                                                        // 3573\n            return doc.queryCommandSupported(command);                                                                 // 3574\n          } catch(e1) {}                                                                                               // 3575\n                                                                                                                       // 3576\n          try {                                                                                                        // 3577\n            return doc.queryCommandEnabled(command);                                                                   // 3578\n          } catch(e2) {                                                                                                // 3579\n            return !!supported[command];                                                                               // 3580\n          }                                                                                                            // 3581\n        }                                                                                                              // 3582\n        return false;                                                                                                  // 3583\n      };                                                                                                               // 3584\n    })(),                                                                                                              // 3585\n                                                                                                                       // 3586\n    /**                                                                                                                // 3587\n     * IE: URLs starting with:                                                                                         // 3588\n     *    www., http://, https://, ftp://, gopher://, mailto:, new:, snews:, telnet:, wasis:, file://,                 // 3589\n     *    nntp://, newsrc:, ldap://, ldaps://, outlook:, mic:// and url:                                               // 3590\n     * will automatically be auto-linked when either the user inserts them via copy&paste or presses the               // 3591\n     * space bar when the caret is directly after such an url.                                                         // 3592\n     * This behavior cannot easily be avoided in IE < 9 since the logic is hardcoded in the mshtml.dll                 // 3593\n     * (related blog post on msdn                                                                                      // 3594\n     * http://blogs.msdn.com/b/ieinternals/archive/2009/09/17/prevent-automatic-hyperlinking-in-contenteditable-html.aspx).\n     */                                                                                                                // 3596\n    doesAutoLinkingInContentEditable: function() {                                                                     // 3597\n      return isIE;                                                                                                     // 3598\n    },                                                                                                                 // 3599\n                                                                                                                       // 3600\n    /**                                                                                                                // 3601\n     * As stated above, IE auto links urls typed into contentEditable elements                                         // 3602\n     * Since IE9 it's possible to prevent this behavior                                                                // 3603\n     */                                                                                                                // 3604\n    canDisableAutoLinking: function() {                                                                                // 3605\n      return this.supportsCommand(document, \"AutoUrlDetect\");                                                          // 3606\n    },                                                                                                                 // 3607\n                                                                                                                       // 3608\n    /**                                                                                                                // 3609\n     * IE leaves an empty paragraph in the contentEditable element after clearing it                                   // 3610\n     * Chrome/Safari sometimes an empty <div>                                                                          // 3611\n     */                                                                                                                // 3612\n    clearsContentEditableCorrectly: function() {                                                                       // 3613\n      return isGecko || isOpera || isWebKit;                                                                           // 3614\n    },                                                                                                                 // 3615\n                                                                                                                       // 3616\n    /**                                                                                                                // 3617\n     * IE gives wrong results for getAttribute                                                                         // 3618\n     */                                                                                                                // 3619\n    supportsGetAttributeCorrectly: function() {                                                                        // 3620\n      var td = document.createElement(\"td\");                                                                           // 3621\n      return td.getAttribute(\"rowspan\") != \"1\";                                                                        // 3622\n    },                                                                                                                 // 3623\n                                                                                                                       // 3624\n    /**                                                                                                                // 3625\n     * When clicking on images in IE, Opera and Firefox, they are selected, which makes it easy to interact with them.\n     * Chrome and Safari both don't support this                                                                       // 3627\n     */                                                                                                                // 3628\n    canSelectImagesInContentEditable: function() {                                                                     // 3629\n      return isGecko || isIE || isOpera;                                                                               // 3630\n    },                                                                                                                 // 3631\n                                                                                                                       // 3632\n    /**                                                                                                                // 3633\n     * When the caret is in an empty list (<ul><li>|</li></ul>) which is the first child in an contentEditable container\n     * pressing backspace doesn't remove the entire list as done in other browsers                                     // 3635\n     */                                                                                                                // 3636\n    clearsListsInContentEditableCorrectly: function() {                                                                // 3637\n      return isGecko || isIE || isWebKit;                                                                              // 3638\n    },                                                                                                                 // 3639\n                                                                                                                       // 3640\n    /**                                                                                                                // 3641\n     * All browsers except Safari and Chrome automatically scroll the range/caret position into view                   // 3642\n     */                                                                                                                // 3643\n    autoScrollsToCaret: function() {                                                                                   // 3644\n      return !isWebKit;                                                                                                // 3645\n    },                                                                                                                 // 3646\n                                                                                                                       // 3647\n    /**                                                                                                                // 3648\n     * Check whether the browser automatically closes tags that don't need to be opened                                // 3649\n     */                                                                                                                // 3650\n    autoClosesUnclosedTags: function() {                                                                               // 3651\n      var clonedTestElement = testElement.cloneNode(false),                                                            // 3652\n          returnValue,                                                                                                 // 3653\n          innerHTML;                                                                                                   // 3654\n                                                                                                                       // 3655\n      clonedTestElement.innerHTML = \"<p><div></div>\";                                                                  // 3656\n      innerHTML                   = clonedTestElement.innerHTML.toLowerCase();                                         // 3657\n      returnValue                 = innerHTML === \"<p></p><div></div>\" || innerHTML === \"<p><div></div></p>\";          // 3658\n                                                                                                                       // 3659\n      // Cache result by overwriting current function                                                                  // 3660\n      this.autoClosesUnclosedTags = function() { return returnValue; };                                                // 3661\n                                                                                                                       // 3662\n      return returnValue;                                                                                              // 3663\n    },                                                                                                                 // 3664\n                                                                                                                       // 3665\n    /**                                                                                                                // 3666\n     * Whether the browser supports the native document.getElementsByClassName which returns live NodeLists            // 3667\n     */                                                                                                                // 3668\n    supportsNativeGetElementsByClassName: function() {                                                                 // 3669\n      return String(document.getElementsByClassName).indexOf(\"[native code]\") !== -1;                                  // 3670\n    },                                                                                                                 // 3671\n                                                                                                                       // 3672\n    /**                                                                                                                // 3673\n     * As of now (19.04.2011) only supported by Firefox 4 and Chrome                                                   // 3674\n     * See https://developer.mozilla.org/en/DOM/Selection/modify                                                       // 3675\n     */                                                                                                                // 3676\n    supportsSelectionModify: function() {                                                                              // 3677\n      return \"getSelection\" in window && \"modify\" in window.getSelection();                                            // 3678\n    },                                                                                                                 // 3679\n                                                                                                                       // 3680\n    /**                                                                                                                // 3681\n     * Whether the browser supports the classList object for fast className manipulation                               // 3682\n     * See https://developer.mozilla.org/en/DOM/element.classList                                                      // 3683\n     */                                                                                                                // 3684\n    supportsClassList: function() {                                                                                    // 3685\n      return \"classList\" in testElement;                                                                               // 3686\n    },                                                                                                                 // 3687\n                                                                                                                       // 3688\n    /**                                                                                                                // 3689\n     * Opera needs a white space after a <br> in order to position the caret correctly                                 // 3690\n     */                                                                                                                // 3691\n    needsSpaceAfterLineBreak: function() {                                                                             // 3692\n      return isOpera;                                                                                                  // 3693\n    },                                                                                                                 // 3694\n                                                                                                                       // 3695\n    /**                                                                                                                // 3696\n     * Whether the browser supports the speech api on the given element                                                // 3697\n     * See http://mikepultz.com/2011/03/accessing-google-speech-api-chrome-11/                                         // 3698\n     *                                                                                                                 // 3699\n     * @example                                                                                                        // 3700\n     *    var input = document.createElement(\"input\");                                                                 // 3701\n     *    if (wysihtml5.browser.supportsSpeechApiOn(input)) {                                                          // 3702\n     *      // ...                                                                                                     // 3703\n     *    }                                                                                                            // 3704\n     */                                                                                                                // 3705\n    supportsSpeechApiOn: function(input) {                                                                             // 3706\n      var chromeVersion = userAgent.match(/Chrome\\/(\\d+)/) || [, 0];                                                   // 3707\n      return chromeVersion[1] >= 11 && (\"onwebkitspeechchange\" in input || \"speech\" in input);                         // 3708\n    },                                                                                                                 // 3709\n                                                                                                                       // 3710\n    /**                                                                                                                // 3711\n     * IE9 crashes when setting a getter via Object.defineProperty on XMLHttpRequest or XDomainRequest                 // 3712\n     * See https://connect.microsoft.com/ie/feedback/details/650112                                                    // 3713\n     * or try the POC http://tifftiff.de/ie9_crash/                                                                    // 3714\n     */                                                                                                                // 3715\n    crashesWhenDefineProperty: function(property) {                                                                    // 3716\n      return isIE && (property === \"XMLHttpRequest\" || property === \"XDomainRequest\");                                 // 3717\n    },                                                                                                                 // 3718\n                                                                                                                       // 3719\n    /**                                                                                                                // 3720\n     * IE is the only browser who fires the \"focus\" event not immediately when .focus() is called on an element        // 3721\n     */                                                                                                                // 3722\n    doesAsyncFocus: function() {                                                                                       // 3723\n      return isIE;                                                                                                     // 3724\n    },                                                                                                                 // 3725\n                                                                                                                       // 3726\n    /**                                                                                                                // 3727\n     * In IE it's impssible for the user and for the selection library to set the caret after an <img> when it's the lastChild in the document\n     */                                                                                                                // 3729\n    hasProblemsSettingCaretAfterImg: function() {                                                                      // 3730\n      return isIE;                                                                                                     // 3731\n    },                                                                                                                 // 3732\n                                                                                                                       // 3733\n    hasUndoInContextMenu: function() {                                                                                 // 3734\n      return isGecko || isChrome || isOpera;                                                                           // 3735\n    }                                                                                                                  // 3736\n  };                                                                                                                   // 3737\n})();wysihtml5.lang.array = function(arr) {                                                                            // 3738\n  return {                                                                                                             // 3739\n    /**                                                                                                                // 3740\n     * Check whether a given object exists in an array                                                                 // 3741\n     *                                                                                                                 // 3742\n     * @example                                                                                                        // 3743\n     *    wysihtml5.lang.array([1, 2]).contains(1);                                                                    // 3744\n     *    // => true                                                                                                   // 3745\n     */                                                                                                                // 3746\n    contains: function(needle) {                                                                                       // 3747\n      if (arr.indexOf) {                                                                                               // 3748\n        return arr.indexOf(needle) !== -1;                                                                             // 3749\n      } else {                                                                                                         // 3750\n        for (var i=0, length=arr.length; i<length; i++) {                                                              // 3751\n          if (arr[i] === needle) { return true; }                                                                      // 3752\n        }                                                                                                              // 3753\n        return false;                                                                                                  // 3754\n      }                                                                                                                // 3755\n    },                                                                                                                 // 3756\n                                                                                                                       // 3757\n    /**                                                                                                                // 3758\n     * Substract one array from another                                                                                // 3759\n     *                                                                                                                 // 3760\n     * @example                                                                                                        // 3761\n     *    wysihtml5.lang.array([1, 2, 3, 4]).without([3, 4]);                                                          // 3762\n     *    // => [1, 2]                                                                                                 // 3763\n     */                                                                                                                // 3764\n    without: function(arrayToSubstract) {                                                                              // 3765\n      arrayToSubstract = wysihtml5.lang.array(arrayToSubstract);                                                       // 3766\n      var newArr  = [],                                                                                                // 3767\n          i       = 0,                                                                                                 // 3768\n          length  = arr.length;                                                                                        // 3769\n      for (; i<length; i++) {                                                                                          // 3770\n        if (!arrayToSubstract.contains(arr[i])) {                                                                      // 3771\n          newArr.push(arr[i]);                                                                                         // 3772\n        }                                                                                                              // 3773\n      }                                                                                                                // 3774\n      return newArr;                                                                                                   // 3775\n    },                                                                                                                 // 3776\n                                                                                                                       // 3777\n    /**                                                                                                                // 3778\n     * Return a clean native array                                                                                     // 3779\n     *                                                                                                                 // 3780\n     * Following will convert a Live NodeList to a proper Array                                                        // 3781\n     * @example                                                                                                        // 3782\n     *    var childNodes = wysihtml5.lang.array(document.body.childNodes).get();                                       // 3783\n     */                                                                                                                // 3784\n    get: function() {                                                                                                  // 3785\n      var i        = 0,                                                                                                // 3786\n          length   = arr.length,                                                                                       // 3787\n          newArray = [];                                                                                               // 3788\n      for (; i<length; i++) {                                                                                          // 3789\n        newArray.push(arr[i]);                                                                                         // 3790\n      }                                                                                                                // 3791\n      return newArray;                                                                                                 // 3792\n    }                                                                                                                  // 3793\n  };                                                                                                                   // 3794\n};wysihtml5.lang.Dispatcher = Base.extend(                                                                             // 3795\n  /** @scope wysihtml5.lang.Dialog.prototype */ {                                                                      // 3796\n  observe: function(eventName, handler) {                                                                              // 3797\n    this.events = this.events || {};                                                                                   // 3798\n    this.events[eventName] = this.events[eventName] || [];                                                             // 3799\n    this.events[eventName].push(handler);                                                                              // 3800\n    return this;                                                                                                       // 3801\n  },                                                                                                                   // 3802\n                                                                                                                       // 3803\n  on: function() {                                                                                                     // 3804\n    return this.observe.apply(this, wysihtml5.lang.array(arguments).get());                                            // 3805\n  },                                                                                                                   // 3806\n                                                                                                                       // 3807\n  fire: function(eventName, payload) {                                                                                 // 3808\n    this.events = this.events || {};                                                                                   // 3809\n    var handlers = this.events[eventName] || [],                                                                       // 3810\n        i        = 0;                                                                                                  // 3811\n    for (; i<handlers.length; i++) {                                                                                   // 3812\n      handlers[i].call(this, payload);                                                                                 // 3813\n    }                                                                                                                  // 3814\n    return this;                                                                                                       // 3815\n  },                                                                                                                   // 3816\n                                                                                                                       // 3817\n  stopObserving: function(eventName, handler) {                                                                        // 3818\n    this.events = this.events || {};                                                                                   // 3819\n    var i = 0,                                                                                                         // 3820\n        handlers,                                                                                                      // 3821\n        newHandlers;                                                                                                   // 3822\n    if (eventName) {                                                                                                   // 3823\n      handlers    = this.events[eventName] || [],                                                                      // 3824\n      newHandlers = [];                                                                                                // 3825\n      for (; i<handlers.length; i++) {                                                                                 // 3826\n        if (handlers[i] !== handler && handler) {                                                                      // 3827\n          newHandlers.push(handlers[i]);                                                                               // 3828\n        }                                                                                                              // 3829\n      }                                                                                                                // 3830\n      this.events[eventName] = newHandlers;                                                                            // 3831\n    } else {                                                                                                           // 3832\n      // Clean up all events                                                                                           // 3833\n      this.events = {};                                                                                                // 3834\n    }                                                                                                                  // 3835\n    return this;                                                                                                       // 3836\n  }                                                                                                                    // 3837\n});wysihtml5.lang.object = function(obj) {                                                                             // 3838\n  return {                                                                                                             // 3839\n    /**                                                                                                                // 3840\n     * @example                                                                                                        // 3841\n     *    wysihtml5.lang.object({ foo: 1, bar: 1 }).merge({ bar: 2, baz: 3 }).get();                                   // 3842\n     *    // => { foo: 1, bar: 2, baz: 3 }                                                                             // 3843\n     */                                                                                                                // 3844\n    merge: function(otherObj) {                                                                                        // 3845\n      for (var i in otherObj) {                                                                                        // 3846\n        obj[i] = otherObj[i];                                                                                          // 3847\n      }                                                                                                                // 3848\n      return this;                                                                                                     // 3849\n    },                                                                                                                 // 3850\n                                                                                                                       // 3851\n    get: function() {                                                                                                  // 3852\n      return obj;                                                                                                      // 3853\n    },                                                                                                                 // 3854\n                                                                                                                       // 3855\n    /**                                                                                                                // 3856\n     * @example                                                                                                        // 3857\n     *    wysihtml5.lang.object({ foo: 1 }).clone();                                                                   // 3858\n     *    // => { foo: 1 }                                                                                             // 3859\n     */                                                                                                                // 3860\n    clone: function() {                                                                                                // 3861\n      var newObj = {},                                                                                                 // 3862\n          i;                                                                                                           // 3863\n      for (i in obj) {                                                                                                 // 3864\n        newObj[i] = obj[i];                                                                                            // 3865\n      }                                                                                                                // 3866\n      return newObj;                                                                                                   // 3867\n    },                                                                                                                 // 3868\n                                                                                                                       // 3869\n    /**                                                                                                                // 3870\n     * @example                                                                                                        // 3871\n     *    wysihtml5.lang.object([]).isArray();                                                                         // 3872\n     *    // => true                                                                                                   // 3873\n     */                                                                                                                // 3874\n    isArray: function() {                                                                                              // 3875\n      return Object.prototype.toString.call(obj) === \"[object Array]\";                                                 // 3876\n    }                                                                                                                  // 3877\n  };                                                                                                                   // 3878\n};(function() {                                                                                                        // 3879\n  var WHITE_SPACE_START = /^\\s+/,                                                                                      // 3880\n      WHITE_SPACE_END   = /\\s+$/;                                                                                      // 3881\n  wysihtml5.lang.string = function(str) {                                                                              // 3882\n    str = String(str);                                                                                                 // 3883\n    return {                                                                                                           // 3884\n      /**                                                                                                              // 3885\n       * @example                                                                                                      // 3886\n       *    wysihtml5.lang.string(\"   foo   \").trim();                                                                 // 3887\n       *    // => \"foo\"                                                                                                // 3888\n       */                                                                                                              // 3889\n      trim: function() {                                                                                               // 3890\n        return str.replace(WHITE_SPACE_START, \"\").replace(WHITE_SPACE_END, \"\");                                        // 3891\n      },                                                                                                               // 3892\n                                                                                                                       // 3893\n      /**                                                                                                              // 3894\n       * @example                                                                                                      // 3895\n       *    wysihtml5.lang.string(\"Hello #{name}\").interpolate({ name: \"Christopher\" });                               // 3896\n       *    // => \"Hello Christopher\"                                                                                  // 3897\n       */                                                                                                              // 3898\n      interpolate: function(vars) {                                                                                    // 3899\n        for (var i in vars) {                                                                                          // 3900\n          str = this.replace(\"#{\" + i + \"}\").by(vars[i]);                                                              // 3901\n        }                                                                                                              // 3902\n        return str;                                                                                                    // 3903\n      },                                                                                                               // 3904\n                                                                                                                       // 3905\n      /**                                                                                                              // 3906\n       * @example                                                                                                      // 3907\n       *    wysihtml5.lang.string(\"Hello Tom\").replace(\"Tom\").with(\"Hans\");                                            // 3908\n       *    // => \"Hello Hans\"                                                                                         // 3909\n       */                                                                                                              // 3910\n      replace: function(search) {                                                                                      // 3911\n        return {                                                                                                       // 3912\n          by: function(replace) {                                                                                      // 3913\n            return str.split(search).join(replace);                                                                    // 3914\n          }                                                                                                            // 3915\n        }                                                                                                              // 3916\n      }                                                                                                                // 3917\n    };                                                                                                                 // 3918\n  };                                                                                                                   // 3919\n})();/**                                                                                                               // 3920\n * Find urls in descendant text nodes of an element and auto-links them                                                // 3921\n * Inspired by http://james.padolsey.com/javascript/find-and-replace-text-with-javascript/                             // 3922\n *                                                                                                                     // 3923\n * @param {Element} element Container element in which to search for urls                                              // 3924\n *                                                                                                                     // 3925\n * @example                                                                                                            // 3926\n *    <div id=\"text-container\">Please click here: www.google.com</div>                                                 // 3927\n *    <script>wysihtml5.dom.autoLink(document.getElementById(\"text-container\"));</script>                              // 3928\n */                                                                                                                    // 3929\n(function(wysihtml5) {                                                                                                 // 3930\n  var /**                                                                                                              // 3931\n       * Don't auto-link urls that are contained in the following elements:                                            // 3932\n       */                                                                                                              // 3933\n      IGNORE_URLS_IN        = wysihtml5.lang.array([\"CODE\", \"PRE\", \"A\", \"SCRIPT\", \"HEAD\", \"TITLE\", \"STYLE\"]),          // 3934\n      /**                                                                                                              // 3935\n       * revision 1:                                                                                                   // 3936\n       *    /(\\S+\\.{1}[^\\s\\,\\.\\!]+)/g                                                                                  // 3937\n       *                                                                                                               // 3938\n       * revision 2:                                                                                                   // 3939\n       *    /(\\b(((https?|ftp):\\/\\/)|(www\\.))[-A-Z0-9+&@#\\/%?=~_|!:,.;\\[\\]]*[-A-Z0-9+&@#\\/%=~_|])/gim                  // 3940\n       *                                                                                                               // 3941\n       * put this in the beginning if you don't wan't to match within a word                                           // 3942\n       *    (^|[\\>\\(\\{\\[\\s\\>])                                                                                         // 3943\n       */                                                                                                              // 3944\n      URL_REG_EXP           = /((https?:\\/\\/|www\\.)[^\\s<]{3,})/gi,                                                     // 3945\n      TRAILING_CHAR_REG_EXP = /([^\\w\\/\\-](,?))$/i,                                                                     // 3946\n      MAX_DISPLAY_LENGTH    = 100,                                                                                     // 3947\n      BRACKETS              = { \")\": \"(\", \"]\": \"[\", \"}\": \"{\" };                                                        // 3948\n                                                                                                                       // 3949\n  function autoLink(element) {                                                                                         // 3950\n    if (_hasParentThatShouldBeIgnored(element)) {                                                                      // 3951\n      return element;                                                                                                  // 3952\n    }                                                                                                                  // 3953\n                                                                                                                       // 3954\n    if (element === element.ownerDocument.documentElement) {                                                           // 3955\n      element = element.ownerDocument.body;                                                                            // 3956\n    }                                                                                                                  // 3957\n                                                                                                                       // 3958\n    return _parseNode(element);                                                                                        // 3959\n  }                                                                                                                    // 3960\n                                                                                                                       // 3961\n  /**                                                                                                                  // 3962\n   * This is basically a rebuild of                                                                                    // 3963\n   * the rails auto_link_urls text helper                                                                              // 3964\n   */                                                                                                                  // 3965\n  function _convertUrlsToLinks(str) {                                                                                  // 3966\n    return str.replace(URL_REG_EXP, function(match, url) {                                                             // 3967\n      var punctuation = (url.match(TRAILING_CHAR_REG_EXP) || [])[1] || \"\",                                             // 3968\n          opening     = BRACKETS[punctuation];                                                                         // 3969\n      url = url.replace(TRAILING_CHAR_REG_EXP, \"\");                                                                    // 3970\n                                                                                                                       // 3971\n      if (url.split(opening).length > url.split(punctuation).length) {                                                 // 3972\n        url = url + punctuation;                                                                                       // 3973\n        punctuation = \"\";                                                                                              // 3974\n      }                                                                                                                // 3975\n      var realUrl    = url,                                                                                            // 3976\n          displayUrl = url;                                                                                            // 3977\n      if (url.length > MAX_DISPLAY_LENGTH) {                                                                           // 3978\n        displayUrl = displayUrl.substr(0, MAX_DISPLAY_LENGTH) + \"...\";                                                 // 3979\n      }                                                                                                                // 3980\n      // Add http prefix if necessary                                                                                  // 3981\n      if (realUrl.substr(0, 4) === \"www.\") {                                                                           // 3982\n        realUrl = \"http://\" + realUrl;                                                                                 // 3983\n      }                                                                                                                // 3984\n                                                                                                                       // 3985\n      return '<a href=\"' + realUrl + '\">' + displayUrl + '</a>' + punctuation;                                         // 3986\n    });                                                                                                                // 3987\n  }                                                                                                                    // 3988\n                                                                                                                       // 3989\n  /**                                                                                                                  // 3990\n   * Creates or (if already cached) returns a temp element                                                             // 3991\n   * for the given document object                                                                                     // 3992\n   */                                                                                                                  // 3993\n  function _getTempElement(context) {                                                                                  // 3994\n    var tempElement = context._wysihtml5_tempElement;                                                                  // 3995\n    if (!tempElement) {                                                                                                // 3996\n      tempElement = context._wysihtml5_tempElement = context.createElement(\"div\");                                     // 3997\n    }                                                                                                                  // 3998\n    return tempElement;                                                                                                // 3999\n  }                                                                                                                    // 4000\n                                                                                                                       // 4001\n  /**                                                                                                                  // 4002\n   * Replaces the original text nodes with the newly auto-linked dom tree                                              // 4003\n   */                                                                                                                  // 4004\n  function _wrapMatchesInNode(textNode) {                                                                              // 4005\n    var parentNode  = textNode.parentNode,                                                                             // 4006\n        tempElement = _getTempElement(parentNode.ownerDocument);                                                       // 4007\n                                                                                                                       // 4008\n    // We need to insert an empty/temporary <span /> to fix IE quirks                                                  // 4009\n    // Elsewise IE would strip white space in the beginning                                                            // 4010\n    tempElement.innerHTML = \"<span></span>\" + _convertUrlsToLinks(textNode.data);                                      // 4011\n    tempElement.removeChild(tempElement.firstChild);                                                                   // 4012\n                                                                                                                       // 4013\n    while (tempElement.firstChild) {                                                                                   // 4014\n      // inserts tempElement.firstChild before textNode                                                                // 4015\n      parentNode.insertBefore(tempElement.firstChild, textNode);                                                       // 4016\n    }                                                                                                                  // 4017\n    parentNode.removeChild(textNode);                                                                                  // 4018\n  }                                                                                                                    // 4019\n                                                                                                                       // 4020\n  function _hasParentThatShouldBeIgnored(node) {                                                                       // 4021\n    var nodeName;                                                                                                      // 4022\n    while (node.parentNode) {                                                                                          // 4023\n      node = node.parentNode;                                                                                          // 4024\n      nodeName = node.nodeName;                                                                                        // 4025\n      if (IGNORE_URLS_IN.contains(nodeName)) {                                                                         // 4026\n        return true;                                                                                                   // 4027\n      } else if (nodeName === \"body\") {                                                                                // 4028\n        return false;                                                                                                  // 4029\n      }                                                                                                                // 4030\n    }                                                                                                                  // 4031\n    return false;                                                                                                      // 4032\n  }                                                                                                                    // 4033\n                                                                                                                       // 4034\n  function _parseNode(element) {                                                                                       // 4035\n    if (IGNORE_URLS_IN.contains(element.nodeName)) {                                                                   // 4036\n      return;                                                                                                          // 4037\n    }                                                                                                                  // 4038\n                                                                                                                       // 4039\n    if (element.nodeType === wysihtml5.TEXT_NODE && element.data.match(URL_REG_EXP)) {                                 // 4040\n      _wrapMatchesInNode(element);                                                                                     // 4041\n      return;                                                                                                          // 4042\n    }                                                                                                                  // 4043\n                                                                                                                       // 4044\n    var childNodes        = wysihtml5.lang.array(element.childNodes).get(),                                            // 4045\n        childNodesLength  = childNodes.length,                                                                         // 4046\n        i                 = 0;                                                                                         // 4047\n                                                                                                                       // 4048\n    for (; i<childNodesLength; i++) {                                                                                  // 4049\n      _parseNode(childNodes[i]);                                                                                       // 4050\n    }                                                                                                                  // 4051\n                                                                                                                       // 4052\n    return element;                                                                                                    // 4053\n  }                                                                                                                    // 4054\n                                                                                                                       // 4055\n  wysihtml5.dom.autoLink = autoLink;                                                                                   // 4056\n                                                                                                                       // 4057\n  // Reveal url reg exp to the outside                                                                                 // 4058\n  wysihtml5.dom.autoLink.URL_REG_EXP = URL_REG_EXP;                                                                    // 4059\n})(wysihtml5);(function(wysihtml5) {                                                                                   // 4060\n  var supportsClassList = wysihtml5.browser.supportsClassList(),                                                       // 4061\n      api               = wysihtml5.dom;                                                                               // 4062\n                                                                                                                       // 4063\n  api.addClass = function(element, className) {                                                                        // 4064\n    if (supportsClassList) {                                                                                           // 4065\n      return element.classList.add(className);                                                                         // 4066\n    }                                                                                                                  // 4067\n    if (api.hasClass(element, className)) {                                                                            // 4068\n      return;                                                                                                          // 4069\n    }                                                                                                                  // 4070\n    element.className += \" \" + className;                                                                              // 4071\n  };                                                                                                                   // 4072\n                                                                                                                       // 4073\n  api.removeClass = function(element, className) {                                                                     // 4074\n    if (supportsClassList) {                                                                                           // 4075\n      return element.classList.remove(className);                                                                      // 4076\n    }                                                                                                                  // 4077\n                                                                                                                       // 4078\n    element.className = element.className.replace(new RegExp(\"(^|\\\\s+)\" + className + \"(\\\\s+|$)\"), \" \");               // 4079\n  };                                                                                                                   // 4080\n                                                                                                                       // 4081\n  api.hasClass = function(element, className) {                                                                        // 4082\n    if (supportsClassList) {                                                                                           // 4083\n      return element.classList.contains(className);                                                                    // 4084\n    }                                                                                                                  // 4085\n                                                                                                                       // 4086\n    var elementClassName = element.className;                                                                          // 4087\n    return (elementClassName.length > 0 && (elementClassName == className || new RegExp(\"(^|\\\\s)\" + className + \"(\\\\s|$)\").test(elementClassName)));\n  };                                                                                                                   // 4089\n})(wysihtml5);                                                                                                         // 4090\nwysihtml5.dom.contains = (function() {                                                                                 // 4091\n  var documentElement = document.documentElement;                                                                      // 4092\n  if (documentElement.contains) {                                                                                      // 4093\n    return function(container, element) {                                                                              // 4094\n      if (element.nodeType !== wysihtml5.ELEMENT_NODE) {                                                               // 4095\n        element = element.parentNode;                                                                                  // 4096\n      }                                                                                                                // 4097\n      return container !== element && container.contains(element);                                                     // 4098\n    };                                                                                                                 // 4099\n  } else if (documentElement.compareDocumentPosition) {                                                                // 4100\n    return function(container, element) {                                                                              // 4101\n      // https://developer.mozilla.org/en/DOM/Node.compareDocumentPosition                                             // 4102\n      return !!(container.compareDocumentPosition(element) & 16);                                                      // 4103\n    };                                                                                                                 // 4104\n  }                                                                                                                    // 4105\n})();/**                                                                                                               // 4106\n * Converts an HTML fragment/element into a unordered/ordered list                                                     // 4107\n *                                                                                                                     // 4108\n * @param {Element} element The element which should be turned into a list                                             // 4109\n * @param {String} listType The list type in which to convert the tree (either \"ul\" or \"ol\")                           // 4110\n * @return {Element} The created list                                                                                  // 4111\n *                                                                                                                     // 4112\n * @example                                                                                                            // 4113\n *    <!-- Assume the following dom: -->                                                                               // 4114\n *    <span id=\"pseudo-list\">                                                                                          // 4115\n *      eminem<br>                                                                                                     // 4116\n *      dr. dre                                                                                                        // 4117\n *      <div>50 Cent</div>                                                                                             // 4118\n *    </span>                                                                                                          // 4119\n *                                                                                                                     // 4120\n *    <script>                                                                                                         // 4121\n *      wysihtml5.dom.convertToList(document.getElementById(\"pseudo-list\"), \"ul\");                                     // 4122\n *    </script>                                                                                                        // 4123\n *                                                                                                                     // 4124\n *    <!-- Will result in: -->                                                                                         // 4125\n *    <ul>                                                                                                             // 4126\n *      <li>eminem</li>                                                                                                // 4127\n *      <li>dr. dre</li>                                                                                               // 4128\n *      <li>50 Cent</li>                                                                                               // 4129\n *    </ul>                                                                                                            // 4130\n */                                                                                                                    // 4131\nwysihtml5.dom.convertToList = (function() {                                                                            // 4132\n  function _createListItem(doc, list) {                                                                                // 4133\n    var listItem = doc.createElement(\"li\");                                                                            // 4134\n    list.appendChild(listItem);                                                                                        // 4135\n    return listItem;                                                                                                   // 4136\n  }                                                                                                                    // 4137\n                                                                                                                       // 4138\n  function _createList(doc, type) {                                                                                    // 4139\n    return doc.createElement(type);                                                                                    // 4140\n  }                                                                                                                    // 4141\n                                                                                                                       // 4142\n  function convertToList(element, listType) {                                                                          // 4143\n    if (element.nodeName === \"UL\" || element.nodeName === \"OL\" || element.nodeName === \"MENU\") {                       // 4144\n      // Already a list                                                                                                // 4145\n      return element;                                                                                                  // 4146\n    }                                                                                                                  // 4147\n                                                                                                                       // 4148\n    var doc               = element.ownerDocument,                                                                     // 4149\n        list              = _createList(doc, listType),                                                                // 4150\n        lineBreaks        = element.querySelectorAll(\"br\"),                                                            // 4151\n        lineBreaksLength  = lineBreaks.length,                                                                         // 4152\n        childNodes,                                                                                                    // 4153\n        childNodesLength,                                                                                              // 4154\n        childNode,                                                                                                     // 4155\n        lineBreak,                                                                                                     // 4156\n        parentNode,                                                                                                    // 4157\n        isBlockElement,                                                                                                // 4158\n        isLineBreak,                                                                                                   // 4159\n        currentListItem,                                                                                               // 4160\n        i;                                                                                                             // 4161\n                                                                                                                       // 4162\n    // First find <br> at the end of inline elements and move them behind them                                         // 4163\n    for (i=0; i<lineBreaksLength; i++) {                                                                               // 4164\n      lineBreak = lineBreaks[i];                                                                                       // 4165\n      while ((parentNode = lineBreak.parentNode) && parentNode !== element && parentNode.lastChild === lineBreak) {    // 4166\n        if (wysihtml5.dom.getStyle(\"display\").from(parentNode) === \"block\") {                                          // 4167\n          parentNode.removeChild(lineBreak);                                                                           // 4168\n          break;                                                                                                       // 4169\n        }                                                                                                              // 4170\n        wysihtml5.dom.insert(lineBreak).after(lineBreak.parentNode);                                                   // 4171\n      }                                                                                                                // 4172\n    }                                                                                                                  // 4173\n                                                                                                                       // 4174\n    childNodes        = wysihtml5.lang.array(element.childNodes).get();                                                // 4175\n    childNodesLength  = childNodes.length;                                                                             // 4176\n                                                                                                                       // 4177\n    for (i=0; i<childNodesLength; i++) {                                                                               // 4178\n      currentListItem   = currentListItem || _createListItem(doc, list);                                               // 4179\n      childNode         = childNodes[i];                                                                               // 4180\n      isBlockElement    = wysihtml5.dom.getStyle(\"display\").from(childNode) === \"block\";                               // 4181\n      isLineBreak       = childNode.nodeName === \"BR\";                                                                 // 4182\n                                                                                                                       // 4183\n      if (isBlockElement) {                                                                                            // 4184\n        // Append blockElement to current <li> if empty, otherwise create a new one                                    // 4185\n        currentListItem = currentListItem.firstChild ? _createListItem(doc, list) : currentListItem;                   // 4186\n        currentListItem.appendChild(childNode);                                                                        // 4187\n        currentListItem = null;                                                                                        // 4188\n        continue;                                                                                                      // 4189\n      }                                                                                                                // 4190\n                                                                                                                       // 4191\n      if (isLineBreak) {                                                                                               // 4192\n        // Only create a new list item in the next iteration when the current one has already content                  // 4193\n        currentListItem = currentListItem.firstChild ? null : currentListItem;                                         // 4194\n        continue;                                                                                                      // 4195\n      }                                                                                                                // 4196\n                                                                                                                       // 4197\n      currentListItem.appendChild(childNode);                                                                          // 4198\n    }                                                                                                                  // 4199\n                                                                                                                       // 4200\n    element.parentNode.replaceChild(list, element);                                                                    // 4201\n    return list;                                                                                                       // 4202\n  }                                                                                                                    // 4203\n                                                                                                                       // 4204\n  return convertToList;                                                                                                // 4205\n})();/**                                                                                                               // 4206\n * Copy a set of attributes from one element to another                                                                // 4207\n *                                                                                                                     // 4208\n * @param {Array} attributesToCopy List of attributes which should be copied                                           // 4209\n * @return {Object} Returns an object which offers the \"from\" method which can be invoked with the element where to    // 4210\n *    copy the attributes from., this again returns an object which provides a method named \"to\" which can be invoked \n *    with the element where to copy the attributes to (see example)                                                   // 4212\n *                                                                                                                     // 4213\n * @example                                                                                                            // 4214\n *    var textarea    = document.querySelector(\"textarea\"),                                                            // 4215\n *        div         = document.querySelector(\"div[contenteditable=true]\"),                                           // 4216\n *        anotherDiv  = document.querySelector(\"div.preview\");                                                         // 4217\n *    wysihtml5.dom.copyAttributes([\"spellcheck\", \"value\", \"placeholder\"]).from(textarea).to(div).andTo(anotherDiv);   // 4218\n *                                                                                                                     // 4219\n */                                                                                                                    // 4220\nwysihtml5.dom.copyAttributes = function(attributesToCopy) {                                                            // 4221\n  return {                                                                                                             // 4222\n    from: function(elementToCopyFrom) {                                                                                // 4223\n      return {                                                                                                         // 4224\n        to: function(elementToCopyTo) {                                                                                // 4225\n          var attribute,                                                                                               // 4226\n              i         = 0,                                                                                           // 4227\n              length    = attributesToCopy.length;                                                                     // 4228\n          for (; i<length; i++) {                                                                                      // 4229\n            attribute = attributesToCopy[i];                                                                           // 4230\n            if (typeof(elementToCopyFrom[attribute]) !== \"undefined\" && elementToCopyFrom[attribute] !== \"\") {         // 4231\n              elementToCopyTo[attribute] = elementToCopyFrom[attribute];                                               // 4232\n            }                                                                                                          // 4233\n          }                                                                                                            // 4234\n          return { andTo: arguments.callee };                                                                          // 4235\n        }                                                                                                              // 4236\n      };                                                                                                               // 4237\n    }                                                                                                                  // 4238\n  };                                                                                                                   // 4239\n};/**                                                                                                                  // 4240\n * Copy a set of styles from one element to another                                                                    // 4241\n * Please note that this only works properly across browsers when the element from which to copy the styles            // 4242\n * is in the dom                                                                                                       // 4243\n *                                                                                                                     // 4244\n * Interesting article on how to copy styles                                                                           // 4245\n *                                                                                                                     // 4246\n * @param {Array} stylesToCopy List of styles which should be copied                                                   // 4247\n * @return {Object} Returns an object which offers the \"from\" method which can be invoked with the element where to    // 4248\n *    copy the styles from., this again returns an object which provides a method named \"to\" which can be invoked      // 4249\n *    with the element where to copy the styles to (see example)                                                       // 4250\n *                                                                                                                     // 4251\n * @example                                                                                                            // 4252\n *    var textarea    = document.querySelector(\"textarea\"),                                                            // 4253\n *        div         = document.querySelector(\"div[contenteditable=true]\"),                                           // 4254\n *        anotherDiv  = document.querySelector(\"div.preview\");                                                         // 4255\n *    wysihtml5.dom.copyStyles([\"overflow-y\", \"width\", \"height\"]).from(textarea).to(div).andTo(anotherDiv);            // 4256\n *                                                                                                                     // 4257\n */                                                                                                                    // 4258\n(function(dom) {                                                                                                       // 4259\n                                                                                                                       // 4260\n  /**                                                                                                                  // 4261\n   * Mozilla, WebKit and Opera recalculate the computed width when box-sizing: boder-box; is set                       // 4262\n   * So if an element has \"width: 200px; -moz-box-sizing: border-box; border: 1px;\" then                               // 4263\n   * its computed css width will be 198px                                                                              // 4264\n   */                                                                                                                  // 4265\n  var BOX_SIZING_PROPERTIES = [\"-webkit-box-sizing\", \"-moz-box-sizing\", \"-ms-box-sizing\", \"box-sizing\"];               // 4266\n                                                                                                                       // 4267\n  var shouldIgnoreBoxSizingBorderBox = function(element) {                                                             // 4268\n    if (hasBoxSizingBorderBox(element)) {                                                                              // 4269\n       return parseInt(dom.getStyle(\"width\").from(element), 10) < element.offsetWidth;                                 // 4270\n    }                                                                                                                  // 4271\n    return false;                                                                                                      // 4272\n  };                                                                                                                   // 4273\n                                                                                                                       // 4274\n  var hasBoxSizingBorderBox = function(element) {                                                                      // 4275\n    var i       = 0,                                                                                                   // 4276\n        length  = BOX_SIZING_PROPERTIES.length;                                                                        // 4277\n    for (; i<length; i++) {                                                                                            // 4278\n      if (dom.getStyle(BOX_SIZING_PROPERTIES[i]).from(element) === \"border-box\") {                                     // 4279\n        return BOX_SIZING_PROPERTIES[i];                                                                               // 4280\n      }                                                                                                                // 4281\n    }                                                                                                                  // 4282\n  };                                                                                                                   // 4283\n                                                                                                                       // 4284\n  dom.copyStyles = function(stylesToCopy) {                                                                            // 4285\n    return {                                                                                                           // 4286\n      from: function(element) {                                                                                        // 4287\n        if (shouldIgnoreBoxSizingBorderBox(element)) {                                                                 // 4288\n          stylesToCopy = wysihtml5.lang.array(stylesToCopy).without(BOX_SIZING_PROPERTIES);                            // 4289\n        }                                                                                                              // 4290\n                                                                                                                       // 4291\n        var cssText = \"\",                                                                                              // 4292\n            length  = stylesToCopy.length,                                                                             // 4293\n            i       = 0,                                                                                               // 4294\n            property;                                                                                                  // 4295\n        for (; i<length; i++) {                                                                                        // 4296\n          property = stylesToCopy[i];                                                                                  // 4297\n          cssText += property + \":\" + dom.getStyle(property).from(element) + \";\";                                      // 4298\n        }                                                                                                              // 4299\n                                                                                                                       // 4300\n        return {                                                                                                       // 4301\n          to: function(element) {                                                                                      // 4302\n            dom.setStyles(cssText).on(element);                                                                        // 4303\n            return { andTo: arguments.callee };                                                                        // 4304\n          }                                                                                                            // 4305\n        };                                                                                                             // 4306\n      }                                                                                                                // 4307\n    };                                                                                                                 // 4308\n  };                                                                                                                   // 4309\n})(wysihtml5.dom);/**                                                                                                  // 4310\n * Event Delegation                                                                                                    // 4311\n *                                                                                                                     // 4312\n * @example                                                                                                            // 4313\n *    wysihtml5.dom.delegate(document.body, \"a\", \"click\", function() {                                                 // 4314\n *      // foo                                                                                                         // 4315\n *    });                                                                                                              // 4316\n */                                                                                                                    // 4317\n(function(wysihtml5) {                                                                                                 // 4318\n                                                                                                                       // 4319\n  wysihtml5.dom.delegate = function(container, selector, eventName, handler) {                                         // 4320\n    return wysihtml5.dom.observe(container, eventName, function(event) {                                               // 4321\n      var target    = event.target,                                                                                    // 4322\n          match     = wysihtml5.lang.array(container.querySelectorAll(selector));                                      // 4323\n                                                                                                                       // 4324\n      while (target && target !== container) {                                                                         // 4325\n        if (match.contains(target)) {                                                                                  // 4326\n          handler.call(target, event);                                                                                 // 4327\n          break;                                                                                                       // 4328\n        }                                                                                                              // 4329\n        target = target.parentNode;                                                                                    // 4330\n      }                                                                                                                // 4331\n    });                                                                                                                // 4332\n  };                                                                                                                   // 4333\n                                                                                                                       // 4334\n})(wysihtml5);/**                                                                                                      // 4335\n * Returns the given html wrapped in a div element                                                                     // 4336\n *                                                                                                                     // 4337\n * Fixing IE's inability to treat unknown elements (HTML5 section, article, ...) correctly                             // 4338\n * when inserted via innerHTML                                                                                         // 4339\n *                                                                                                                     // 4340\n * @param {String} html The html which should be wrapped in a dom element                                              // 4341\n * @param {Obejct} [context] Document object of the context the html belongs to                                        // 4342\n *                                                                                                                     // 4343\n * @example                                                                                                            // 4344\n *    wysihtml5.dom.getAsDom(\"<article>foo</article>\");                                                                // 4345\n */                                                                                                                    // 4346\nwysihtml5.dom.getAsDom = (function() {                                                                                 // 4347\n                                                                                                                       // 4348\n  var _innerHTMLShiv = function(html, context) {                                                                       // 4349\n    var tempElement = context.createElement(\"div\");                                                                    // 4350\n    tempElement.style.display = \"none\";                                                                                // 4351\n    context.body.appendChild(tempElement);                                                                             // 4352\n    // IE throws an exception when trying to insert <frameset></frameset> via innerHTML                                // 4353\n    try { tempElement.innerHTML = html; } catch(e) {}                                                                  // 4354\n    context.body.removeChild(tempElement);                                                                             // 4355\n    return tempElement;                                                                                                // 4356\n  };                                                                                                                   // 4357\n                                                                                                                       // 4358\n  /**                                                                                                                  // 4359\n   * Make sure IE supports HTML5 tags, which is accomplished by simply creating one instance of each element           // 4360\n   */                                                                                                                  // 4361\n  var _ensureHTML5Compatibility = function(context) {                                                                  // 4362\n    if (context._wysihtml5_supportsHTML5Tags) {                                                                        // 4363\n      return;                                                                                                          // 4364\n    }                                                                                                                  // 4365\n    for (var i=0, length=HTML5_ELEMENTS.length; i<length; i++) {                                                       // 4366\n      context.createElement(HTML5_ELEMENTS[i]);                                                                        // 4367\n    }                                                                                                                  // 4368\n    context._wysihtml5_supportsHTML5Tags = true;                                                                       // 4369\n  };                                                                                                                   // 4370\n                                                                                                                       // 4371\n                                                                                                                       // 4372\n  /**                                                                                                                  // 4373\n   * List of html5 tags                                                                                                // 4374\n   * taken from http://simon.html5.org/html5-elements                                                                  // 4375\n   */                                                                                                                  // 4376\n  var HTML5_ELEMENTS = [                                                                                               // 4377\n    \"abbr\", \"article\", \"aside\", \"audio\", \"bdi\", \"canvas\", \"command\", \"datalist\", \"details\", \"figcaption\",              // 4378\n    \"figure\", \"footer\", \"header\", \"hgroup\", \"keygen\", \"mark\", \"meter\", \"nav\", \"output\", \"progress\",                    // 4379\n    \"rp\", \"rt\", \"ruby\", \"svg\", \"section\", \"source\", \"summary\", \"time\", \"track\", \"video\", \"wbr\"                         // 4380\n  ];                                                                                                                   // 4381\n                                                                                                                       // 4382\n  return function(html, context) {                                                                                     // 4383\n    context = context || document;                                                                                     // 4384\n    var tempElement;                                                                                                   // 4385\n    if (typeof(html) === \"object\" && html.nodeType) {                                                                  // 4386\n      tempElement = context.createElement(\"div\");                                                                      // 4387\n      tempElement.appendChild(html);                                                                                   // 4388\n    } else if (wysihtml5.browser.supportsHTML5Tags(context)) {                                                         // 4389\n      tempElement = context.createElement(\"div\");                                                                      // 4390\n      tempElement.innerHTML = html;                                                                                    // 4391\n    } else {                                                                                                           // 4392\n      _ensureHTML5Compatibility(context);                                                                              // 4393\n      tempElement = _innerHTMLShiv(html, context);                                                                     // 4394\n    }                                                                                                                  // 4395\n    return tempElement;                                                                                                // 4396\n  };                                                                                                                   // 4397\n})();/**                                                                                                               // 4398\n * Walks the dom tree from the given node up until it finds a match                                                    // 4399\n * Designed for optimal performance.                                                                                   // 4400\n *                                                                                                                     // 4401\n * @param {Element} node The from which to check the parent nodes                                                      // 4402\n * @param {Object} matchingSet Object to match against (possible properties: nodeName, className, classRegExp)         // 4403\n * @param {Number} [levels] How many parents should the function check up from the current node (defaults to 50)       // 4404\n * @return {null|Element} Returns the first element that matched the desiredNodeName(s)                                // 4405\n * @example                                                                                                            // 4406\n *    var listElement = wysihtml5.dom.getParentElement(document.querySelector(\"li\"), { nodeName: [\"MENU\", \"UL\", \"OL\"] });\n *    // ... or ...                                                                                                    // 4408\n *    var unorderedListElement = wysihtml5.dom.getParentElement(document.querySelector(\"li\"), { nodeName: \"UL\" });     // 4409\n *    // ... or ...                                                                                                    // 4410\n *    var coloredElement = wysihtml5.dom.getParentElement(myTextNode, { nodeName: \"SPAN\", className: \"wysiwyg-color-red\", classRegExp: /wysiwyg-color-[a-z]/g });\n */                                                                                                                    // 4412\nwysihtml5.dom.getParentElement = (function() {                                                                         // 4413\n                                                                                                                       // 4414\n  function _isSameNodeName(nodeName, desiredNodeNames) {                                                               // 4415\n    if (!desiredNodeNames || !desiredNodeNames.length) {                                                               // 4416\n      return true;                                                                                                     // 4417\n    }                                                                                                                  // 4418\n                                                                                                                       // 4419\n    if (typeof(desiredNodeNames) === \"string\") {                                                                       // 4420\n      return nodeName === desiredNodeNames;                                                                            // 4421\n    } else {                                                                                                           // 4422\n      return wysihtml5.lang.array(desiredNodeNames).contains(nodeName);                                                // 4423\n    }                                                                                                                  // 4424\n  }                                                                                                                    // 4425\n                                                                                                                       // 4426\n  function _isElement(node) {                                                                                          // 4427\n    return node.nodeType === wysihtml5.ELEMENT_NODE;                                                                   // 4428\n  }                                                                                                                    // 4429\n                                                                                                                       // 4430\n  function _hasClassName(element, className, classRegExp) {                                                            // 4431\n    var classNames = (element.className || \"\").match(classRegExp) || [];                                               // 4432\n    if (!className) {                                                                                                  // 4433\n      return !!classNames.length;                                                                                      // 4434\n    }                                                                                                                  // 4435\n    return classNames[classNames.length - 1] === className;                                                            // 4436\n  }                                                                                                                    // 4437\n                                                                                                                       // 4438\n  function _getParentElementWithNodeName(node, nodeName, levels) {                                                     // 4439\n    while (levels-- && node && node.nodeName !== \"BODY\") {                                                             // 4440\n      if (_isSameNodeName(node.nodeName, nodeName)) {                                                                  // 4441\n        return node;                                                                                                   // 4442\n      }                                                                                                                // 4443\n      node = node.parentNode;                                                                                          // 4444\n    }                                                                                                                  // 4445\n    return null;                                                                                                       // 4446\n  }                                                                                                                    // 4447\n                                                                                                                       // 4448\n  function _getParentElementWithNodeNameAndClassName(node, nodeName, className, classRegExp, levels) {                 // 4449\n    while (levels-- && node && node.nodeName !== \"BODY\") {                                                             // 4450\n      if (_isElement(node) &&                                                                                          // 4451\n          _isSameNodeName(node.nodeName, nodeName) &&                                                                  // 4452\n          _hasClassName(node, className, classRegExp)) {                                                               // 4453\n        return node;                                                                                                   // 4454\n      }                                                                                                                // 4455\n      node = node.parentNode;                                                                                          // 4456\n    }                                                                                                                  // 4457\n    return null;                                                                                                       // 4458\n  }                                                                                                                    // 4459\n                                                                                                                       // 4460\n  return function(node, matchingSet, levels) {                                                                         // 4461\n    levels = levels || 50; // Go max 50 nodes upwards from current node                                                // 4462\n    if (matchingSet.className || matchingSet.classRegExp) {                                                            // 4463\n      return _getParentElementWithNodeNameAndClassName(                                                                // 4464\n        node, matchingSet.nodeName, matchingSet.className, matchingSet.classRegExp, levels                             // 4465\n      );                                                                                                               // 4466\n    } else {                                                                                                           // 4467\n      return _getParentElementWithNodeName(                                                                            // 4468\n        node, matchingSet.nodeName, levels                                                                             // 4469\n      );                                                                                                               // 4470\n    }                                                                                                                  // 4471\n  };                                                                                                                   // 4472\n})();                                                                                                                  // 4473\n/**                                                                                                                    // 4474\n * Get element's style for a specific css property                                                                     // 4475\n *                                                                                                                     // 4476\n * @param {Element} element The element on which to retrieve the style                                                 // 4477\n * @param {String} property The CSS property to retrieve (\"float\", \"display\", \"text-align\", ...)                       // 4478\n *                                                                                                                     // 4479\n * @example                                                                                                            // 4480\n *    wysihtml5.dom.getStyle(\"display\").from(document.body);                                                           // 4481\n *    // => \"block\"                                                                                                    // 4482\n */                                                                                                                    // 4483\nwysihtml5.dom.getStyle = (function() {                                                                                 // 4484\n  var stylePropertyMapping = {                                                                                         // 4485\n        \"float\": (\"styleFloat\" in document.createElement(\"div\").style) ? \"styleFloat\" : \"cssFloat\"                     // 4486\n      },                                                                                                               // 4487\n      REG_EXP_CAMELIZE = /\\-[a-z]/g;                                                                                   // 4488\n                                                                                                                       // 4489\n  function camelize(str) {                                                                                             // 4490\n    return str.replace(REG_EXP_CAMELIZE, function(match) {                                                             // 4491\n      return match.charAt(1).toUpperCase();                                                                            // 4492\n    });                                                                                                                // 4493\n  }                                                                                                                    // 4494\n                                                                                                                       // 4495\n  return function(property) {                                                                                          // 4496\n    return {                                                                                                           // 4497\n      from: function(element) {                                                                                        // 4498\n        if (element.nodeType !== wysihtml5.ELEMENT_NODE) {                                                             // 4499\n          return;                                                                                                      // 4500\n        }                                                                                                              // 4501\n                                                                                                                       // 4502\n        var doc               = element.ownerDocument,                                                                 // 4503\n            camelizedProperty = stylePropertyMapping[property] || camelize(property),                                  // 4504\n            style             = element.style,                                                                         // 4505\n            currentStyle      = element.currentStyle,                                                                  // 4506\n            styleValue        = style[camelizedProperty];                                                              // 4507\n        if (styleValue) {                                                                                              // 4508\n          return styleValue;                                                                                           // 4509\n        }                                                                                                              // 4510\n                                                                                                                       // 4511\n        // currentStyle is no standard and only supported by Opera and IE but it has one important advantage over the standard-compliant\n        // window.getComputedStyle, since it returns css property values in their original unit:                       // 4513\n        // If you set an elements width to \"50%\", window.getComputedStyle will give you it's current width in px while currentStyle\n        // gives you the original \"50%\".                                                                               // 4515\n        // Opera supports both, currentStyle and window.getComputedStyle, that's why checking for currentStyle should have higher prio\n        if (currentStyle) {                                                                                            // 4517\n          try {                                                                                                        // 4518\n                return currentStyle[camelizedProperty];                                                                // 4519\n          } catch(e) {                                                                                                 // 4520\n            //ie will occasionally fail for unknown reasons. swallowing exception                                      // 4521\n          }                                                                                                            // 4522\n        }                                                                                                              // 4523\n                                                                                                                       // 4524\n        var win                 = doc.defaultView || doc.parentWindow,                                                 // 4525\n            needsOverflowReset  = (property === \"height\" || property === \"width\") && element.nodeName === \"TEXTAREA\",  // 4526\n            originalOverflow,                                                                                          // 4527\n            returnValue;                                                                                               // 4528\n                                                                                                                       // 4529\n        if (win.getComputedStyle) {                                                                                    // 4530\n          // Chrome and Safari both calculate a wrong width and height for textareas when they have scroll bars        // 4531\n          // therfore we remove and restore the scrollbar and calculate the value in between                           // 4532\n          if (needsOverflowReset) {                                                                                    // 4533\n            originalOverflow = style.overflow;                                                                         // 4534\n            style.overflow = \"hidden\";                                                                                 // 4535\n          }                                                                                                            // 4536\n          returnValue = win.getComputedStyle(element, null).getPropertyValue(property);                                // 4537\n          if (needsOverflowReset) {                                                                                    // 4538\n            style.overflow = originalOverflow || \"\";                                                                   // 4539\n          }                                                                                                            // 4540\n          return returnValue;                                                                                          // 4541\n        }                                                                                                              // 4542\n      }                                                                                                                // 4543\n    };                                                                                                                 // 4544\n  };                                                                                                                   // 4545\n})();/**                                                                                                               // 4546\n * High performant way to check whether an element with a specific tag name is in the given document                   // 4547\n * Optimized for being heavily executed                                                                                // 4548\n * Unleashes the power of live node lists                                                                              // 4549\n *                                                                                                                     // 4550\n * @param {Object} doc The document object of the context where to check                                               // 4551\n * @param {String} tagName Upper cased tag name                                                                        // 4552\n * @example                                                                                                            // 4553\n *    wysihtml5.dom.hasElementWithTagName(document, \"IMG\");                                                            // 4554\n */                                                                                                                    // 4555\nwysihtml5.dom.hasElementWithTagName = (function() {                                                                    // 4556\n  var LIVE_CACHE          = {},                                                                                        // 4557\n      DOCUMENT_IDENTIFIER = 1;                                                                                         // 4558\n                                                                                                                       // 4559\n  function _getDocumentIdentifier(doc) {                                                                               // 4560\n    return doc._wysihtml5_identifier || (doc._wysihtml5_identifier = DOCUMENT_IDENTIFIER++);                           // 4561\n  }                                                                                                                    // 4562\n                                                                                                                       // 4563\n  return function(doc, tagName) {                                                                                      // 4564\n    var key         = _getDocumentIdentifier(doc) + \":\" + tagName,                                                     // 4565\n        cacheEntry  = LIVE_CACHE[key];                                                                                 // 4566\n    if (!cacheEntry) {                                                                                                 // 4567\n      cacheEntry = LIVE_CACHE[key] = doc.getElementsByTagName(tagName);                                                // 4568\n    }                                                                                                                  // 4569\n                                                                                                                       // 4570\n    return cacheEntry.length > 0;                                                                                      // 4571\n  };                                                                                                                   // 4572\n})();/**                                                                                                               // 4573\n * High performant way to check whether an element with a specific class name is in the given document                 // 4574\n * Optimized for being heavily executed                                                                                // 4575\n * Unleashes the power of live node lists                                                                              // 4576\n *                                                                                                                     // 4577\n * @param {Object} doc The document object of the context where to check                                               // 4578\n * @param {String} tagName Upper cased tag name                                                                        // 4579\n * @example                                                                                                            // 4580\n *    wysihtml5.dom.hasElementWithClassName(document, \"foobar\");                                                       // 4581\n */                                                                                                                    // 4582\n(function(wysihtml5) {                                                                                                 // 4583\n  var LIVE_CACHE          = {},                                                                                        // 4584\n      DOCUMENT_IDENTIFIER = 1;                                                                                         // 4585\n                                                                                                                       // 4586\n  function _getDocumentIdentifier(doc) {                                                                               // 4587\n    return doc._wysihtml5_identifier || (doc._wysihtml5_identifier = DOCUMENT_IDENTIFIER++);                           // 4588\n  }                                                                                                                    // 4589\n                                                                                                                       // 4590\n  wysihtml5.dom.hasElementWithClassName = function(doc, className) {                                                   // 4591\n    // getElementsByClassName is not supported by IE<9                                                                 // 4592\n    // but is sometimes mocked via library code (which then doesn't return live node lists)                            // 4593\n    if (!wysihtml5.browser.supportsNativeGetElementsByClassName()) {                                                   // 4594\n      return !!doc.querySelector(\".\" + className);                                                                     // 4595\n    }                                                                                                                  // 4596\n                                                                                                                       // 4597\n    var key         = _getDocumentIdentifier(doc) + \":\" + className,                                                   // 4598\n        cacheEntry  = LIVE_CACHE[key];                                                                                 // 4599\n    if (!cacheEntry) {                                                                                                 // 4600\n      cacheEntry = LIVE_CACHE[key] = doc.getElementsByClassName(className);                                            // 4601\n    }                                                                                                                  // 4602\n                                                                                                                       // 4603\n    return cacheEntry.length > 0;                                                                                      // 4604\n  };                                                                                                                   // 4605\n})(wysihtml5);                                                                                                         // 4606\nwysihtml5.dom.insert = function(elementToInsert) {                                                                     // 4607\n  return {                                                                                                             // 4608\n    after: function(element) {                                                                                         // 4609\n      element.parentNode.insertBefore(elementToInsert, element.nextSibling);                                           // 4610\n    },                                                                                                                 // 4611\n                                                                                                                       // 4612\n    before: function(element) {                                                                                        // 4613\n      element.parentNode.insertBefore(elementToInsert, element);                                                       // 4614\n    },                                                                                                                 // 4615\n                                                                                                                       // 4616\n    into: function(element) {                                                                                          // 4617\n      element.appendChild(elementToInsert);                                                                            // 4618\n    }                                                                                                                  // 4619\n  };                                                                                                                   // 4620\n};wysihtml5.dom.insertCSS = function(rules) {                                                                          // 4621\n  rules = rules.join(\"\\n\");                                                                                            // 4622\n                                                                                                                       // 4623\n  return {                                                                                                             // 4624\n    into: function(doc) {                                                                                              // 4625\n      var head         = doc.head || doc.getElementsByTagName(\"head\")[0],                                              // 4626\n          styleElement = doc.createElement(\"style\");                                                                   // 4627\n                                                                                                                       // 4628\n      styleElement.type = \"text/css\";                                                                                  // 4629\n                                                                                                                       // 4630\n      if (styleElement.styleSheet) {                                                                                   // 4631\n        styleElement.styleSheet.cssText = rules;                                                                       // 4632\n      } else {                                                                                                         // 4633\n        styleElement.appendChild(doc.createTextNode(rules));                                                           // 4634\n      }                                                                                                                // 4635\n                                                                                                                       // 4636\n      if (head) {                                                                                                      // 4637\n        head.appendChild(styleElement);                                                                                // 4638\n      }                                                                                                                // 4639\n    }                                                                                                                  // 4640\n  };                                                                                                                   // 4641\n};/**                                                                                                                  // 4642\n * Method to set dom events                                                                                            // 4643\n *                                                                                                                     // 4644\n * @example                                                                                                            // 4645\n *    wysihtml5.dom.observe(iframe.contentWindow.document.body, [\"focus\", \"blur\"], function() { ... });                // 4646\n */                                                                                                                    // 4647\nwysihtml5.dom.observe = function(element, eventNames, handler) {                                                       // 4648\n  eventNames = typeof(eventNames) === \"string\" ? [eventNames] : eventNames;                                            // 4649\n                                                                                                                       // 4650\n  var handlerWrapper,                                                                                                  // 4651\n      eventName,                                                                                                       // 4652\n      i       = 0,                                                                                                     // 4653\n      length  = eventNames.length;                                                                                     // 4654\n                                                                                                                       // 4655\n  for (; i<length; i++) {                                                                                              // 4656\n    eventName = eventNames[i];                                                                                         // 4657\n    if (element.addEventListener) {                                                                                    // 4658\n      element.addEventListener(eventName, handler, false);                                                             // 4659\n    } else {                                                                                                           // 4660\n      handlerWrapper = function(event) {                                                                               // 4661\n        if (!(\"target\" in event)) {                                                                                    // 4662\n          event.target = event.srcElement;                                                                             // 4663\n        }                                                                                                              // 4664\n        event.preventDefault = event.preventDefault || function() {                                                    // 4665\n          this.returnValue = false;                                                                                    // 4666\n        };                                                                                                             // 4667\n        event.stopPropagation = event.stopPropagation || function() {                                                  // 4668\n          this.cancelBubble = true;                                                                                    // 4669\n        };                                                                                                             // 4670\n        handler.call(element, event);                                                                                  // 4671\n      };                                                                                                               // 4672\n      element.attachEvent(\"on\" + eventName, handlerWrapper);                                                           // 4673\n    }                                                                                                                  // 4674\n  }                                                                                                                    // 4675\n                                                                                                                       // 4676\n  return {                                                                                                             // 4677\n    stop: function() {                                                                                                 // 4678\n      var eventName,                                                                                                   // 4679\n          i       = 0,                                                                                                 // 4680\n          length  = eventNames.length;                                                                                 // 4681\n      for (; i<length; i++) {                                                                                          // 4682\n        eventName = eventNames[i];                                                                                     // 4683\n        if (element.removeEventListener) {                                                                             // 4684\n          element.removeEventListener(eventName, handler, false);                                                      // 4685\n        } else {                                                                                                       // 4686\n          element.detachEvent(\"on\" + eventName, handlerWrapper);                                                       // 4687\n        }                                                                                                              // 4688\n      }                                                                                                                // 4689\n    }                                                                                                                  // 4690\n  };                                                                                                                   // 4691\n};                                                                                                                     // 4692\n/**                                                                                                                    // 4693\n * HTML Sanitizer                                                                                                      // 4694\n * Rewrites the HTML based on given rules                                                                              // 4695\n *                                                                                                                     // 4696\n * @param {Element|String} elementOrHtml HTML String to be sanitized OR element whose content should be sanitized      // 4697\n * @param {Object} [rules] List of rules for rewriting the HTML, if there's no rule for an element it will             // 4698\n *    be converted to a \"span\". Each rule is a key/value pair where key is the tag to convert, and value the           // 4699\n *    desired substitution.                                                                                            // 4700\n * @param {Object} context Document object in which to parse the html, needed to sandbox the parsing                   // 4701\n *                                                                                                                     // 4702\n * @return {Element|String} Depends on the elementOrHtml parameter. When html then the sanitized html as string elsewise the element.\n *                                                                                                                     // 4704\n * @example                                                                                                            // 4705\n *    var userHTML = '<div id=\"foo\" onclick=\"alert(1);\"><p><font color=\"red\">foo</font><script>alert(1);</script></p></div>';\n *    wysihtml5.dom.parse(userHTML, {                                                                                  // 4707\n *      tags {                                                                                                         // 4708\n *        p:      \"div\",      // Rename p tags to div tags                                                             // 4709\n *        font:   \"span\"      // Rename font tags to span tags                                                         // 4710\n *        div:    true,       // Keep them, also possible (same result when passing: \"div\" or true)                    // 4711\n *        script: undefined   // Remove script elements                                                                // 4712\n *      }                                                                                                              // 4713\n *    });                                                                                                              // 4714\n *    // => <div><div><span>foo bar</span></div></div>                                                                 // 4715\n *                                                                                                                     // 4716\n *    var userHTML = '<table><tbody><tr><td>I'm a table!</td></tr></tbody></table>';                                   // 4717\n *    wysihtml5.dom.parse(userHTML);                                                                                   // 4718\n *    // => '<span><span><span><span>I'm a table!</span></span></span></span>'                                         // 4719\n *                                                                                                                     // 4720\n *    var userHTML = '<div>foobar<br>foobar</div>';                                                                    // 4721\n *    wysihtml5.dom.parse(userHTML, {                                                                                  // 4722\n *      tags: {                                                                                                        // 4723\n *        div: undefined,                                                                                              // 4724\n *        br:  true                                                                                                    // 4725\n *      }                                                                                                              // 4726\n *    });                                                                                                              // 4727\n *    // => ''                                                                                                         // 4728\n *                                                                                                                     // 4729\n *    var userHTML = '<div class=\"red\">foo</div><div class=\"pink\">bar</div>';                                          // 4730\n *    wysihtml5.dom.parse(userHTML, {                                                                                  // 4731\n *      classes: {                                                                                                     // 4732\n *        red:    1,                                                                                                   // 4733\n *        green:  1                                                                                                    // 4734\n *      },                                                                                                             // 4735\n *      tags: {                                                                                                        // 4736\n *        div: {                                                                                                       // 4737\n *          rename_tag:     \"p\"                                                                                        // 4738\n *        }                                                                                                            // 4739\n *      }                                                                                                              // 4740\n *    });                                                                                                              // 4741\n *    // => '<p class=\"red\">foo</p><p>bar</p>'                                                                         // 4742\n */                                                                                                                    // 4743\nwysihtml5.dom.parse = (function() {                                                                                    // 4744\n                                                                                                                       // 4745\n  /**                                                                                                                  // 4746\n   * It's not possible to use a XMLParser/DOMParser as HTML5 is not always well-formed XML                             // 4747\n   * new DOMParser().parseFromString('<img src=\"foo.gif\">') will cause a parseError since the                          // 4748\n   * node isn't closed                                                                                                 // 4749\n   *                                                                                                                   // 4750\n   * Therefore we've to use the browser's ordinary HTML parser invoked by setting innerHTML.                           // 4751\n   */                                                                                                                  // 4752\n  var NODE_TYPE_MAPPING = {                                                                                            // 4753\n        \"1\": _handleElement,                                                                                           // 4754\n        \"3\": _handleText                                                                                               // 4755\n      },                                                                                                               // 4756\n      // Rename unknown tags to this                                                                                   // 4757\n      DEFAULT_NODE_NAME   = \"span\",                                                                                    // 4758\n      WHITE_SPACE_REG_EXP = /\\s+/,                                                                                     // 4759\n      defaultRules        = { tags: {}, classes: {} },                                                                 // 4760\n      currentRules        = {};                                                                                        // 4761\n                                                                                                                       // 4762\n  /**                                                                                                                  // 4763\n   * Iterates over all childs of the element, recreates them, appends them into a document fragment                    // 4764\n   * which later replaces the entire body content                                                                      // 4765\n   */                                                                                                                  // 4766\n  function parse(elementOrHtml, rules, context, cleanUp) {                                                             // 4767\n    wysihtml5.lang.object(currentRules).merge(defaultRules).merge(rules).get();                                        // 4768\n                                                                                                                       // 4769\n    context           = context || elementOrHtml.ownerDocument || document;                                            // 4770\n    var fragment      = context.createDocumentFragment(),                                                              // 4771\n        isString      = typeof(elementOrHtml) === \"string\",                                                            // 4772\n        element,                                                                                                       // 4773\n        newNode,                                                                                                       // 4774\n        firstChild;                                                                                                    // 4775\n                                                                                                                       // 4776\n    if (isString) {                                                                                                    // 4777\n      element = wysihtml5.dom.getAsDom(elementOrHtml, context);                                                        // 4778\n    } else {                                                                                                           // 4779\n      element = elementOrHtml;                                                                                         // 4780\n    }                                                                                                                  // 4781\n                                                                                                                       // 4782\n    while (element.firstChild) {                                                                                       // 4783\n      firstChild  = element.firstChild;                                                                                // 4784\n      element.removeChild(firstChild);                                                                                 // 4785\n      newNode = _convert(firstChild, cleanUp);                                                                         // 4786\n      if (newNode) {                                                                                                   // 4787\n        fragment.appendChild(newNode);                                                                                 // 4788\n      }                                                                                                                // 4789\n    }                                                                                                                  // 4790\n                                                                                                                       // 4791\n    // Clear element contents                                                                                          // 4792\n    element.innerHTML = \"\";                                                                                            // 4793\n                                                                                                                       // 4794\n    // Insert new DOM tree                                                                                             // 4795\n    element.appendChild(fragment);                                                                                     // 4796\n                                                                                                                       // 4797\n    return isString ? wysihtml5.quirks.getCorrectInnerHTML(element) : element;                                         // 4798\n  }                                                                                                                    // 4799\n                                                                                                                       // 4800\n  function _convert(oldNode, cleanUp) {                                                                                // 4801\n    var oldNodeType     = oldNode.nodeType,                                                                            // 4802\n        oldChilds       = oldNode.childNodes,                                                                          // 4803\n        oldChildsLength = oldChilds.length,                                                                            // 4804\n        newNode,                                                                                                       // 4805\n        method          = NODE_TYPE_MAPPING[oldNodeType],                                                              // 4806\n        i               = 0;                                                                                           // 4807\n                                                                                                                       // 4808\n    newNode = method && method(oldNode);                                                                               // 4809\n                                                                                                                       // 4810\n    if (!newNode) {                                                                                                    // 4811\n      return null;                                                                                                     // 4812\n    }                                                                                                                  // 4813\n                                                                                                                       // 4814\n    for (i=0; i<oldChildsLength; i++) {                                                                                // 4815\n      newChild = _convert(oldChilds[i], cleanUp);                                                                      // 4816\n      if (newChild) {                                                                                                  // 4817\n        newNode.appendChild(newChild);                                                                                 // 4818\n      }                                                                                                                // 4819\n    }                                                                                                                  // 4820\n                                                                                                                       // 4821\n    // Cleanup senseless <span> elements                                                                               // 4822\n    if (cleanUp &&                                                                                                     // 4823\n        newNode.childNodes.length <= 1 &&                                                                              // 4824\n        newNode.nodeName.toLowerCase() === DEFAULT_NODE_NAME &&                                                        // 4825\n        !newNode.attributes.length) {                                                                                  // 4826\n      return newNode.firstChild;                                                                                       // 4827\n    }                                                                                                                  // 4828\n                                                                                                                       // 4829\n    return newNode;                                                                                                    // 4830\n  }                                                                                                                    // 4831\n                                                                                                                       // 4832\n  function _handleElement(oldNode) {                                                                                   // 4833\n    var rule,                                                                                                          // 4834\n        newNode,                                                                                                       // 4835\n        endTag,                                                                                                        // 4836\n        tagRules    = currentRules.tags,                                                                               // 4837\n        nodeName    = oldNode.nodeName.toLowerCase(),                                                                  // 4838\n        scopeName   = oldNode.scopeName;                                                                               // 4839\n                                                                                                                       // 4840\n    /**                                                                                                                // 4841\n     * We already parsed that element                                                                                  // 4842\n     * ignore it! (yes, this sometimes happens in IE8 when the html is invalid)                                        // 4843\n     */                                                                                                                // 4844\n    if (oldNode._wysihtml5) {                                                                                          // 4845\n      return null;                                                                                                     // 4846\n    }                                                                                                                  // 4847\n    oldNode._wysihtml5 = 1;                                                                                            // 4848\n                                                                                                                       // 4849\n    if (oldNode.className === \"wysihtml5-temp\") {                                                                      // 4850\n      return null;                                                                                                     // 4851\n    }                                                                                                                  // 4852\n                                                                                                                       // 4853\n    /**                                                                                                                // 4854\n     * IE is the only browser who doesn't include the namespace in the                                                 // 4855\n     * nodeName, that's why we have to prepend it by ourselves                                                         // 4856\n     * scopeName is a proprietary IE feature                                                                           // 4857\n     * read more here http://msdn.microsoft.com/en-us/library/ms534388(v=vs.85).aspx                                   // 4858\n     */                                                                                                                // 4859\n    if (scopeName && scopeName != \"HTML\") {                                                                            // 4860\n      nodeName = scopeName + \":\" + nodeName;                                                                           // 4861\n    }                                                                                                                  // 4862\n                                                                                                                       // 4863\n    /**                                                                                                                // 4864\n     * Repair node                                                                                                     // 4865\n     * IE is a bit bitchy when it comes to invalid nested markup which includes unclosed tags                          // 4866\n     * A <p> doesn't need to be closed according HTML4-5 spec, we simply replace it with a <div> to preserve its content and layout\n     */                                                                                                                // 4868\n    if (\"outerHTML\" in oldNode) {                                                                                      // 4869\n      if (!wysihtml5.browser.autoClosesUnclosedTags() &&                                                               // 4870\n          oldNode.nodeName === \"P\" &&                                                                                  // 4871\n          oldNode.outerHTML.slice(-4).toLowerCase() !== \"</p>\") {                                                      // 4872\n        nodeName = \"div\";                                                                                              // 4873\n      }                                                                                                                // 4874\n    }                                                                                                                  // 4875\n                                                                                                                       // 4876\n    if (nodeName in tagRules) {                                                                                        // 4877\n      rule = tagRules[nodeName];                                                                                       // 4878\n      if (!rule || rule.remove) {                                                                                      // 4879\n        return null;                                                                                                   // 4880\n      }                                                                                                                // 4881\n                                                                                                                       // 4882\n      rule = typeof(rule) === \"string\" ? { rename_tag: rule } : rule;                                                  // 4883\n    } else if (oldNode.firstChild) {                                                                                   // 4884\n      rule = { rename_tag: DEFAULT_NODE_NAME };                                                                        // 4885\n    } else {                                                                                                           // 4886\n      // Remove empty unknown elements                                                                                 // 4887\n      return null;                                                                                                     // 4888\n    }                                                                                                                  // 4889\n                                                                                                                       // 4890\n    newNode = oldNode.ownerDocument.createElement(rule.rename_tag || nodeName);                                        // 4891\n    _handleAttributes(oldNode, newNode, rule);                                                                         // 4892\n                                                                                                                       // 4893\n    oldNode = null;                                                                                                    // 4894\n    return newNode;                                                                                                    // 4895\n  }                                                                                                                    // 4896\n                                                                                                                       // 4897\n  function _handleAttributes(oldNode, newNode, rule) {                                                                 // 4898\n    var attributes          = {},                         // fresh new set of attributes to set on newNode             // 4899\n        setClass            = rule.set_class,             // classes to set                                            // 4900\n        addClass            = rule.add_class,             // add classes based on existing attributes                  // 4901\n        setAttributes       = rule.set_attributes,        // attributes to set on the current node                     // 4902\n        checkAttributes     = rule.check_attributes,      // check/convert values of attributes                        // 4903\n        allowedClasses      = currentRules.classes,                                                                    // 4904\n        i                   = 0,                                                                                       // 4905\n        classes             = [],                                                                                      // 4906\n        newClasses          = [],                                                                                      // 4907\n        newUniqueClasses    = [],                                                                                      // 4908\n        oldClasses          = [],                                                                                      // 4909\n        classesLength,                                                                                                 // 4910\n        newClassesLength,                                                                                              // 4911\n        currentClass,                                                                                                  // 4912\n        newClass,                                                                                                      // 4913\n        attributeName,                                                                                                 // 4914\n        newAttributeValue,                                                                                             // 4915\n        method;                                                                                                        // 4916\n                                                                                                                       // 4917\n    if (setAttributes) {                                                                                               // 4918\n      attributes = wysihtml5.lang.object(setAttributes).clone();                                                       // 4919\n    }                                                                                                                  // 4920\n                                                                                                                       // 4921\n    if (checkAttributes) {                                                                                             // 4922\n      for (attributeName in checkAttributes) {                                                                         // 4923\n        method = attributeCheckMethods[checkAttributes[attributeName]];                                                // 4924\n        if (!method) {                                                                                                 // 4925\n          continue;                                                                                                    // 4926\n        }                                                                                                              // 4927\n        newAttributeValue = method(_getAttribute(oldNode, attributeName));                                             // 4928\n        if (typeof(newAttributeValue) === \"string\") {                                                                  // 4929\n          attributes[attributeName] = newAttributeValue;                                                               // 4930\n        }                                                                                                              // 4931\n      }                                                                                                                // 4932\n    }                                                                                                                  // 4933\n                                                                                                                       // 4934\n    if (setClass) {                                                                                                    // 4935\n      classes.push(setClass);                                                                                          // 4936\n    }                                                                                                                  // 4937\n                                                                                                                       // 4938\n    if (addClass) {                                                                                                    // 4939\n      for (attributeName in addClass) {                                                                                // 4940\n        method = addClassMethods[addClass[attributeName]];                                                             // 4941\n        if (!method) {                                                                                                 // 4942\n          continue;                                                                                                    // 4943\n        }                                                                                                              // 4944\n        newClass = method(_getAttribute(oldNode, attributeName));                                                      // 4945\n        if (typeof(newClass) === \"string\") {                                                                           // 4946\n          classes.push(newClass);                                                                                      // 4947\n        }                                                                                                              // 4948\n      }                                                                                                                // 4949\n    }                                                                                                                  // 4950\n                                                                                                                       // 4951\n    // make sure that wysihtml5 temp class doesn't get stripped out                                                    // 4952\n    allowedClasses[\"_wysihtml5-temp-placeholder\"] = 1;                                                                 // 4953\n                                                                                                                       // 4954\n    // add old classes last                                                                                            // 4955\n    oldClasses = oldNode.getAttribute(\"class\");                                                                        // 4956\n    if (oldClasses) {                                                                                                  // 4957\n      classes = classes.concat(oldClasses.split(WHITE_SPACE_REG_EXP));                                                 // 4958\n    }                                                                                                                  // 4959\n    classesLength = classes.length;                                                                                    // 4960\n    for (; i<classesLength; i++) {                                                                                     // 4961\n      currentClass = classes[i];                                                                                       // 4962\n      if (allowedClasses[currentClass]) {                                                                              // 4963\n        newClasses.push(currentClass);                                                                                 // 4964\n      }                                                                                                                // 4965\n    }                                                                                                                  // 4966\n                                                                                                                       // 4967\n    // remove duplicate entries and preserve class specificity                                                         // 4968\n    newClassesLength = newClasses.length;                                                                              // 4969\n    while (newClassesLength--) {                                                                                       // 4970\n      currentClass = newClasses[newClassesLength];                                                                     // 4971\n      if (!wysihtml5.lang.array(newUniqueClasses).contains(currentClass)) {                                            // 4972\n        newUniqueClasses.unshift(currentClass);                                                                        // 4973\n      }                                                                                                                // 4974\n    }                                                                                                                  // 4975\n                                                                                                                       // 4976\n    if (newUniqueClasses.length) {                                                                                     // 4977\n      attributes[\"class\"] = newUniqueClasses.join(\" \");                                                                // 4978\n    }                                                                                                                  // 4979\n                                                                                                                       // 4980\n    // set attributes on newNode                                                                                       // 4981\n    for (attributeName in attributes) {                                                                                // 4982\n      // Setting attributes can cause a js error in IE under certain circumstances                                     // 4983\n      // eg. on a <img> under https when it's new attribute value is non-https                                         // 4984\n      // TODO: Investigate this further and check for smarter handling                                                 // 4985\n      try {                                                                                                            // 4986\n        newNode.setAttribute(attributeName, attributes[attributeName]);                                                // 4987\n      } catch(e) {}                                                                                                    // 4988\n    }                                                                                                                  // 4989\n                                                                                                                       // 4990\n    // IE8 sometimes loses the width/height attributes when those are set before the \"src\"                             // 4991\n    // so we make sure to set them again                                                                               // 4992\n    if (attributes.src) {                                                                                              // 4993\n      if (typeof(attributes.width) !== \"undefined\") {                                                                  // 4994\n        newNode.setAttribute(\"width\", attributes.width);                                                               // 4995\n      }                                                                                                                // 4996\n      if (typeof(attributes.height) !== \"undefined\") {                                                                 // 4997\n        newNode.setAttribute(\"height\", attributes.height);                                                             // 4998\n      }                                                                                                                // 4999\n    }                                                                                                                  // 5000\n  }                                                                                                                    // 5001\n                                                                                                                       // 5002\n  /**                                                                                                                  // 5003\n   * IE gives wrong results for hasAttribute/getAttribute, for example:                                                // 5004\n   *    var td = document.createElement(\"td\");                                                                         // 5005\n   *    td.getAttribute(\"rowspan\"); // => \"1\" in IE                                                                    // 5006\n   *                                                                                                                   // 5007\n   * Therefore we have to check the element's outerHTML for the attribute                                              // 5008\n   */                                                                                                                  // 5009\n  var HAS_GET_ATTRIBUTE_BUG = !wysihtml5.browser.supportsGetAttributeCorrectly();                                      // 5010\n  function _getAttribute(node, attributeName) {                                                                        // 5011\n    attributeName = attributeName.toLowerCase();                                                                       // 5012\n    var nodeName = node.nodeName;                                                                                      // 5013\n    if (nodeName == \"IMG\" && attributeName == \"src\" && _isLoadedImage(node) === true) {                                // 5014\n      // Get 'src' attribute value via object property since this will always contain the                              // 5015\n      // full absolute url (http://...)                                                                                // 5016\n      // this fixes a very annoying bug in firefox (ver 3.6 & 4) and IE 8 where images copied from the same host       // 5017\n      // will have relative paths, which the sanitizer strips out (see attributeCheckMethods.url)                      // 5018\n      return node.src;                                                                                                 // 5019\n    } else if (HAS_GET_ATTRIBUTE_BUG && \"outerHTML\" in node) {                                                         // 5020\n      // Don't trust getAttribute/hasAttribute in IE 6-8, instead check the element's outerHTML                        // 5021\n      var outerHTML      = node.outerHTML.toLowerCase(),                                                               // 5022\n          // TODO: This might not work for attributes without value: <input disabled>                                  // 5023\n          hasAttribute   = outerHTML.indexOf(\" \" + attributeName +  \"=\") != -1;                                        // 5024\n                                                                                                                       // 5025\n      return hasAttribute ? node.getAttribute(attributeName) : null;                                                   // 5026\n    } else{                                                                                                            // 5027\n      return node.getAttribute(attributeName);                                                                         // 5028\n    }                                                                                                                  // 5029\n  }                                                                                                                    // 5030\n                                                                                                                       // 5031\n  /**                                                                                                                  // 5032\n   * Check whether the given node is a proper loaded image                                                             // 5033\n   * FIXME: Returns undefined when unknown (Chrome, Safari)                                                            // 5034\n   */                                                                                                                  // 5035\n  function _isLoadedImage(node) {                                                                                      // 5036\n    try {                                                                                                              // 5037\n      return node.complete && !node.mozMatchesSelector(\":-moz-broken\");                                                // 5038\n    } catch(e) {                                                                                                       // 5039\n      if (node.complete && node.readyState === \"complete\") {                                                           // 5040\n        return true;                                                                                                   // 5041\n      }                                                                                                                // 5042\n    }                                                                                                                  // 5043\n  }                                                                                                                    // 5044\n                                                                                                                       // 5045\n  function _handleText(oldNode) {                                                                                      // 5046\n    return oldNode.ownerDocument.createTextNode(oldNode.data);                                                         // 5047\n  }                                                                                                                    // 5048\n                                                                                                                       // 5049\n                                                                                                                       // 5050\n  // ------------ attribute checks ------------ \\\\\n  var attributeCheckMethods = {                                                                                        // 5052\n    url: (function() {                                                                                                 // 5053\n      var REG_EXP = /^https?:\\/\\//i;                                                                                   // 5054\n      return function(attributeValue) {                                                                                // 5055\n        if (!attributeValue || !attributeValue.match(REG_EXP)) {                                                       // 5056\n          return null;                                                                                                 // 5057\n        }                                                                                                              // 5058\n        return attributeValue.replace(REG_EXP, function(match) {                                                       // 5059\n          return match.toLowerCase();                                                                                  // 5060\n        });                                                                                                            // 5061\n      };                                                                                                               // 5062\n    })(),                                                                                                              // 5063\n                                                                                                                       // 5064\n    alt: (function() {                                                                                                 // 5065\n      var REG_EXP = /[^ a-z0-9_\\-]/gi;                                                                                 // 5066\n      return function(attributeValue) {                                                                                // 5067\n        if (!attributeValue) {                                                                                         // 5068\n          return \"\";                                                                                                   // 5069\n        }                                                                                                              // 5070\n        return attributeValue.replace(REG_EXP, \"\");                                                                    // 5071\n      };                                                                                                               // 5072\n    })(),                                                                                                              // 5073\n                                                                                                                       // 5074\n    numbers: (function() {                                                                                             // 5075\n      var REG_EXP = /\\D/g;                                                                                             // 5076\n      return function(attributeValue) {                                                                                // 5077\n        attributeValue = (attributeValue || \"\").replace(REG_EXP, \"\");                                                  // 5078\n        return attributeValue || null;                                                                                 // 5079\n      };                                                                                                               // 5080\n    })()                                                                                                               // 5081\n  };                                                                                                                   // 5082\n                                                                                                                       // 5083\n  // ------------ class converter (converts an html attribute to a class name) ------------ \\\\\n  var addClassMethods = {                                                                                              // 5085\n    align_img: (function() {                                                                                           // 5086\n      var mapping = {                                                                                                  // 5087\n        left:   \"wysiwyg-float-left\",                                                                                  // 5088\n        right:  \"wysiwyg-float-right\"                                                                                  // 5089\n      };                                                                                                               // 5090\n      return function(attributeValue) {                                                                                // 5091\n        return mapping[String(attributeValue).toLowerCase()];                                                          // 5092\n      };                                                                                                               // 5093\n    })(),                                                                                                              // 5094\n                                                                                                                       // 5095\n    align_text: (function() {                                                                                          // 5096\n      var mapping = {                                                                                                  // 5097\n        left:     \"wysiwyg-text-align-left\",                                                                           // 5098\n        right:    \"wysiwyg-text-align-right\",                                                                          // 5099\n        center:   \"wysiwyg-text-align-center\",                                                                         // 5100\n        justify:  \"wysiwyg-text-align-justify\"                                                                         // 5101\n      };                                                                                                               // 5102\n      return function(attributeValue) {                                                                                // 5103\n        return mapping[String(attributeValue).toLowerCase()];                                                          // 5104\n      };                                                                                                               // 5105\n    })(),                                                                                                              // 5106\n                                                                                                                       // 5107\n    clear_br: (function() {                                                                                            // 5108\n      var mapping = {                                                                                                  // 5109\n        left:   \"wysiwyg-clear-left\",                                                                                  // 5110\n        right:  \"wysiwyg-clear-right\",                                                                                 // 5111\n        both:   \"wysiwyg-clear-both\",                                                                                  // 5112\n        all:    \"wysiwyg-clear-both\"                                                                                   // 5113\n      };                                                                                                               // 5114\n      return function(attributeValue) {                                                                                // 5115\n        return mapping[String(attributeValue).toLowerCase()];                                                          // 5116\n      };                                                                                                               // 5117\n    })(),                                                                                                              // 5118\n                                                                                                                       // 5119\n    size_font: (function() {                                                                                           // 5120\n      var mapping = {                                                                                                  // 5121\n        \"1\": \"wysiwyg-font-size-xx-small\",                                                                             // 5122\n        \"2\": \"wysiwyg-font-size-small\",                                                                                // 5123\n        \"3\": \"wysiwyg-font-size-medium\",                                                                               // 5124\n        \"4\": \"wysiwyg-font-size-large\",                                                                                // 5125\n        \"5\": \"wysiwyg-font-size-x-large\",                                                                              // 5126\n        \"6\": \"wysiwyg-font-size-xx-large\",                                                                             // 5127\n        \"7\": \"wysiwyg-font-size-xx-large\",                                                                             // 5128\n        \"-\": \"wysiwyg-font-size-smaller\",                                                                              // 5129\n        \"+\": \"wysiwyg-font-size-larger\"                                                                                // 5130\n      };                                                                                                               // 5131\n      return function(attributeValue) {                                                                                // 5132\n        return mapping[String(attributeValue).charAt(0)];                                                              // 5133\n      };                                                                                                               // 5134\n    })()                                                                                                               // 5135\n  };                                                                                                                   // 5136\n                                                                                                                       // 5137\n  return parse;                                                                                                        // 5138\n})();/**                                                                                                               // 5139\n * Checks for empty text node childs and removes them                                                                  // 5140\n *                                                                                                                     // 5141\n * @param {Element} node The element in which to cleanup                                                               // 5142\n * @example                                                                                                            // 5143\n *    wysihtml5.dom.removeEmptyTextNodes(element);                                                                     // 5144\n */                                                                                                                    // 5145\nwysihtml5.dom.removeEmptyTextNodes = function(node) {                                                                  // 5146\n  var childNode,                                                                                                       // 5147\n      childNodes        = wysihtml5.lang.array(node.childNodes).get(),                                                 // 5148\n      childNodesLength  = childNodes.length,                                                                           // 5149\n      i                 = 0;                                                                                           // 5150\n  for (; i<childNodesLength; i++) {                                                                                    // 5151\n    childNode = childNodes[i];                                                                                         // 5152\n    if (childNode.nodeType === wysihtml5.TEXT_NODE && childNode.data === \"\") {                                         // 5153\n      childNode.parentNode.removeChild(childNode);                                                                     // 5154\n    }                                                                                                                  // 5155\n  }                                                                                                                    // 5156\n};                                                                                                                     // 5157\n/**                                                                                                                    // 5158\n * Renames an element (eg. a <div> to a <p>) and keeps its childs                                                      // 5159\n *                                                                                                                     // 5160\n * @param {Element} element The list element which should be renamed                                                   // 5161\n * @param {Element} newNodeName The desired tag name                                                                   // 5162\n *                                                                                                                     // 5163\n * @example                                                                                                            // 5164\n *    <!-- Assume the following dom: -->                                                                               // 5165\n *    <ul id=\"list\">                                                                                                   // 5166\n *      <li>eminem</li>                                                                                                // 5167\n *      <li>dr. dre</li>                                                                                               // 5168\n *      <li>50 Cent</li>                                                                                               // 5169\n *    </ul>                                                                                                            // 5170\n *                                                                                                                     // 5171\n *    <script>                                                                                                         // 5172\n *      wysihtml5.dom.renameElement(document.getElementById(\"list\"), \"ol\");                                            // 5173\n *    </script>                                                                                                        // 5174\n *                                                                                                                     // 5175\n *    <!-- Will result in: -->                                                                                         // 5176\n *    <ol>                                                                                                             // 5177\n *      <li>eminem</li>                                                                                                // 5178\n *      <li>dr. dre</li>                                                                                               // 5179\n *      <li>50 Cent</li>                                                                                               // 5180\n *    </ol>                                                                                                            // 5181\n */                                                                                                                    // 5182\nwysihtml5.dom.renameElement = function(element, newNodeName) {                                                         // 5183\n  var newElement = element.ownerDocument.createElement(newNodeName),                                                   // 5184\n      firstChild;                                                                                                      // 5185\n  while (firstChild = element.firstChild) {                                                                            // 5186\n    newElement.appendChild(firstChild);                                                                                // 5187\n  }                                                                                                                    // 5188\n  wysihtml5.dom.copyAttributes([\"align\", \"className\"]).from(element).to(newElement);                                   // 5189\n  element.parentNode.replaceChild(newElement, element);                                                                // 5190\n  return newElement;                                                                                                   // 5191\n};/**                                                                                                                  // 5192\n * Takes an element, removes it and replaces it with it's childs                                                       // 5193\n *                                                                                                                     // 5194\n * @param {Object} node The node which to replace with it's child nodes                                                // 5195\n * @example                                                                                                            // 5196\n *    <div id=\"foo\">                                                                                                   // 5197\n *      <span>hello</span>                                                                                             // 5198\n *    </div>                                                                                                           // 5199\n *    <script>                                                                                                         // 5200\n *      // Remove #foo and replace with it's children                                                                  // 5201\n *      wysihtml5.dom.replaceWithChildNodes(document.getElementById(\"foo\"));                                           // 5202\n *    </script>                                                                                                        // 5203\n */                                                                                                                    // 5204\nwysihtml5.dom.replaceWithChildNodes = function(node) {                                                                 // 5205\n  if (!node.parentNode) {                                                                                              // 5206\n    return;                                                                                                            // 5207\n  }                                                                                                                    // 5208\n                                                                                                                       // 5209\n  if (!node.firstChild) {                                                                                              // 5210\n    node.parentNode.removeChild(node);                                                                                 // 5211\n    return;                                                                                                            // 5212\n  }                                                                                                                    // 5213\n                                                                                                                       // 5214\n  var fragment = node.ownerDocument.createDocumentFragment();                                                          // 5215\n  while (node.firstChild) {                                                                                            // 5216\n    fragment.appendChild(node.firstChild);                                                                             // 5217\n  }                                                                                                                    // 5218\n  node.parentNode.replaceChild(fragment, node);                                                                        // 5219\n  node = fragment = null;                                                                                              // 5220\n};                                                                                                                     // 5221\n/**                                                                                                                    // 5222\n * Unwraps an unordered/ordered list                                                                                   // 5223\n *                                                                                                                     // 5224\n * @param {Element} element The list element which should be unwrapped                                                 // 5225\n *                                                                                                                     // 5226\n * @example                                                                                                            // 5227\n *    <!-- Assume the following dom: -->                                                                               // 5228\n *    <ul id=\"list\">                                                                                                   // 5229\n *      <li>eminem</li>                                                                                                // 5230\n *      <li>dr. dre</li>                                                                                               // 5231\n *      <li>50 Cent</li>                                                                                               // 5232\n *    </ul>                                                                                                            // 5233\n *                                                                                                                     // 5234\n *    <script>                                                                                                         // 5235\n *      wysihtml5.dom.resolveList(document.getElementById(\"list\"));                                                    // 5236\n *    </script>                                                                                                        // 5237\n *                                                                                                                     // 5238\n *    <!-- Will result in: -->                                                                                         // 5239\n *    eminem<br>                                                                                                       // 5240\n *    dr. dre<br>                                                                                                      // 5241\n *    50 Cent<br>                                                                                                      // 5242\n */                                                                                                                    // 5243\n(function(dom) {                                                                                                       // 5244\n  function _isBlockElement(node) {                                                                                     // 5245\n    return dom.getStyle(\"display\").from(node) === \"block\";                                                             // 5246\n  }                                                                                                                    // 5247\n                                                                                                                       // 5248\n  function _isLineBreak(node) {                                                                                        // 5249\n    return node.nodeName === \"BR\";                                                                                     // 5250\n  }                                                                                                                    // 5251\n                                                                                                                       // 5252\n  function _appendLineBreak(element) {                                                                                 // 5253\n    var lineBreak = element.ownerDocument.createElement(\"br\");                                                         // 5254\n    element.appendChild(lineBreak);                                                                                    // 5255\n  }                                                                                                                    // 5256\n                                                                                                                       // 5257\n  function resolveList(list) {                                                                                         // 5258\n    if (list.nodeName !== \"MENU\" && list.nodeName !== \"UL\" && list.nodeName !== \"OL\") {                                // 5259\n      return;                                                                                                          // 5260\n    }                                                                                                                  // 5261\n                                                                                                                       // 5262\n    var doc             = list.ownerDocument,                                                                          // 5263\n        fragment        = doc.createDocumentFragment(),                                                                // 5264\n        previousSibling = list.previousElementSibling || list.previousSibling,                                         // 5265\n        firstChild,                                                                                                    // 5266\n        lastChild,                                                                                                     // 5267\n        isLastChild,                                                                                                   // 5268\n        shouldAppendLineBreak,                                                                                         // 5269\n        listItem;                                                                                                      // 5270\n                                                                                                                       // 5271\n    if (previousSibling && !_isBlockElement(previousSibling)) {                                                        // 5272\n      _appendLineBreak(fragment);                                                                                      // 5273\n    }                                                                                                                  // 5274\n                                                                                                                       // 5275\n    while (listItem = list.firstChild) {                                                                               // 5276\n      lastChild = listItem.lastChild;                                                                                  // 5277\n      while (firstChild = listItem.firstChild) {                                                                       // 5278\n        isLastChild           = firstChild === lastChild;                                                              // 5279\n        // This needs to be done before appending it to the fragment, as it otherwise will loose style information     // 5280\n        shouldAppendLineBreak = isLastChild && !_isBlockElement(firstChild) && !_isLineBreak(firstChild);              // 5281\n        fragment.appendChild(firstChild);                                                                              // 5282\n        if (shouldAppendLineBreak) {                                                                                   // 5283\n          _appendLineBreak(fragment);                                                                                  // 5284\n        }                                                                                                              // 5285\n      }                                                                                                                // 5286\n                                                                                                                       // 5287\n      listItem.parentNode.removeChild(listItem);                                                                       // 5288\n    }                                                                                                                  // 5289\n    list.parentNode.replaceChild(fragment, list);                                                                      // 5290\n  }                                                                                                                    // 5291\n                                                                                                                       // 5292\n  dom.resolveList = resolveList;                                                                                       // 5293\n})(wysihtml5.dom);/**                                                                                                  // 5294\n * Sandbox for executing javascript, parsing css styles and doing dom operations in a secure way                       // 5295\n *                                                                                                                     // 5296\n * Browser Compatibility:                                                                                              // 5297\n *  - Secure in MSIE 6+, but only when the user hasn't made changes to his security level \"restricted\"                 // 5298\n *  - Partially secure in other browsers (Firefox, Opera, Safari, Chrome, ...)                                         // 5299\n *                                                                                                                     // 5300\n * Please note that this class can't benefit from the HTML5 sandbox attribute for the following reasons:               // 5301\n *    - sandboxing doesn't work correctly with inlined content (src=\"javascript:'<html>...</html>'\")                   // 5302\n *    - sandboxing of physical documents causes that the dom isn't accessible anymore from the outside (iframe.contentWindow, ...)\n *    - setting the \"allow-same-origin\" flag would fix that, but then still javascript and dom events refuse to fire   // 5304\n *    - therefore the \"allow-scripts\" flag is needed, which then would deactivate any security, as the js executed inside the iframe\n *      can do anything as if the sandbox attribute wasn't set                                                         // 5306\n *                                                                                                                     // 5307\n * @param {Function} [readyCallback] Method that gets invoked when the sandbox is ready                                // 5308\n * @param {Object} [config] Optional parameters                                                                        // 5309\n *                                                                                                                     // 5310\n * @example                                                                                                            // 5311\n *    new wysihtml5.dom.Sandbox(function(sandbox) {                                                                    // 5312\n *      sandbox.getWindow().document.body.innerHTML = '<img src=foo.gif onerror=\"alert(document.cookie)\">';            // 5313\n *    });                                                                                                              // 5314\n */                                                                                                                    // 5315\n(function(wysihtml5) {                                                                                                 // 5316\n  var /**                                                                                                              // 5317\n       * Default configuration                                                                                         // 5318\n       */                                                                                                              // 5319\n      doc                 = document,                                                                                  // 5320\n      /**                                                                                                              // 5321\n       * Properties to unset/protect on the window object                                                              // 5322\n       */                                                                                                              // 5323\n      windowProperties    = [                                                                                          // 5324\n        \"parent\", \"top\", \"opener\", \"frameElement\", \"frames\",                                                           // 5325\n        \"localStorage\", \"globalStorage\", \"sessionStorage\", \"indexedDB\"                                                 // 5326\n      ],                                                                                                               // 5327\n      /**                                                                                                              // 5328\n       * Properties on the window object which are set to an empty function                                            // 5329\n       */                                                                                                              // 5330\n      windowProperties2   = [                                                                                          // 5331\n        \"open\", \"close\", \"openDialog\", \"showModalDialog\",                                                              // 5332\n        \"alert\", \"confirm\", \"prompt\",                                                                                  // 5333\n        \"openDatabase\", \"postMessage\",                                                                                 // 5334\n        \"XMLHttpRequest\", \"XDomainRequest\"                                                                             // 5335\n      ],                                                                                                               // 5336\n      /**                                                                                                              // 5337\n       * Properties to unset/protect on the document object                                                            // 5338\n       */                                                                                                              // 5339\n      documentProperties  = [                                                                                          // 5340\n        \"referrer\",                                                                                                    // 5341\n        \"write\", \"open\", \"close\"                                                                                       // 5342\n      ];                                                                                                               // 5343\n                                                                                                                       // 5344\n  wysihtml5.dom.Sandbox = Base.extend(                                                                                 // 5345\n    /** @scope wysihtml5.dom.Sandbox.prototype */ {                                                                    // 5346\n                                                                                                                       // 5347\n    constructor: function(readyCallback, config) {                                                                     // 5348\n      this.callback = readyCallback || wysihtml5.EMPTY_FUNCTION;                                                       // 5349\n      this.config   = wysihtml5.lang.object({}).merge(config).get();                                                   // 5350\n      this.iframe   = this._createIframe();                                                                            // 5351\n    },                                                                                                                 // 5352\n                                                                                                                       // 5353\n    insertInto: function(element) {                                                                                    // 5354\n      if (typeof(element) === \"string\") {                                                                              // 5355\n        element = doc.getElementById(element);                                                                         // 5356\n      }                                                                                                                // 5357\n                                                                                                                       // 5358\n      element.appendChild(this.iframe);                                                                                // 5359\n    },                                                                                                                 // 5360\n                                                                                                                       // 5361\n    getIframe: function() {                                                                                            // 5362\n      return this.iframe;                                                                                              // 5363\n    },                                                                                                                 // 5364\n                                                                                                                       // 5365\n    getWindow: function() {                                                                                            // 5366\n      this._readyError();                                                                                              // 5367\n    },                                                                                                                 // 5368\n                                                                                                                       // 5369\n    getDocument: function() {                                                                                          // 5370\n      this._readyError();                                                                                              // 5371\n    },                                                                                                                 // 5372\n                                                                                                                       // 5373\n    destroy: function() {                                                                                              // 5374\n      var iframe = this.getIframe();                                                                                   // 5375\n      iframe.parentNode.removeChild(iframe);                                                                           // 5376\n    },                                                                                                                 // 5377\n                                                                                                                       // 5378\n    _readyError: function() {                                                                                          // 5379\n      throw new Error(\"wysihtml5.Sandbox: Sandbox iframe isn't loaded yet\");                                           // 5380\n    },                                                                                                                 // 5381\n                                                                                                                       // 5382\n    /**                                                                                                                // 5383\n     * Creates the sandbox iframe                                                                                      // 5384\n     *                                                                                                                 // 5385\n     * Some important notes:                                                                                           // 5386\n     *  - We can't use HTML5 sandbox for now:                                                                          // 5387\n     *    setting it causes that the iframe's dom can't be accessed from the outside                                   // 5388\n     *    Therefore we need to set the \"allow-same-origin\" flag which enables accessing the iframe's dom               // 5389\n     *    But then there's another problem, DOM events (focus, blur, change, keypress, ...) aren't fired.              // 5390\n     *    In order to make this happen we need to set the \"allow-scripts\" flag.                                        // 5391\n     *    A combination of allow-scripts and allow-same-origin is almost the same as setting no sandbox attribute at all.\n     *  - Chrome & Safari, doesn't seem to support sandboxing correctly when the iframe's html is inlined (no physical document)\n     *  - IE needs to have the security=\"restricted\" attribute set before the iframe is                                // 5394\n     *    inserted into the dom tree                                                                                   // 5395\n     *  - Believe it or not but in IE \"security\" in document.createElement(\"iframe\") is false, even                    // 5396\n     *    though it supports it                                                                                        // 5397\n     *  - When an iframe has security=\"restricted\", in IE eval() & execScript() don't work anymore                     // 5398\n     *  - IE doesn't fire the onload event when the content is inlined in the src attribute, therefore we rely         // 5399\n     *    on the onreadystatechange event                                                                              // 5400\n     */                                                                                                                // 5401\n    _createIframe: function() {                                                                                        // 5402\n      var that   = this,                                                                                               // 5403\n          iframe = doc.createElement(\"iframe\");                                                                        // 5404\n      iframe.className = \"wysihtml5-sandbox\";                                                                          // 5405\n      wysihtml5.dom.setAttributes({                                                                                    // 5406\n        \"security\":           \"restricted\",                                                                            // 5407\n        \"allowtransparency\":  \"true\",                                                                                  // 5408\n        \"frameborder\":        0,                                                                                       // 5409\n        \"width\":              0,                                                                                       // 5410\n        \"height\":             0,                                                                                       // 5411\n        \"marginwidth\":        0,                                                                                       // 5412\n        \"marginheight\":       0                                                                                        // 5413\n      }).on(iframe);                                                                                                   // 5414\n                                                                                                                       // 5415\n      // Setting the src like this prevents ssl warnings in IE6                                                        // 5416\n      if (wysihtml5.browser.throwsMixedContentWarningWhenIframeSrcIsEmpty()) {                                         // 5417\n        iframe.src = \"javascript:'<html></html>'\";                                                                     // 5418\n      }                                                                                                                // 5419\n                                                                                                                       // 5420\n      iframe.onload = function() {                                                                                     // 5421\n        iframe.onreadystatechange = iframe.onload = null;                                                              // 5422\n        that._onLoadIframe(iframe);                                                                                    // 5423\n      };                                                                                                               // 5424\n                                                                                                                       // 5425\n      iframe.onreadystatechange = function() {                                                                         // 5426\n        if (/loaded|complete/.test(iframe.readyState)) {                                                               // 5427\n          iframe.onreadystatechange = iframe.onload = null;                                                            // 5428\n          that._onLoadIframe(iframe);                                                                                  // 5429\n        }                                                                                                              // 5430\n      };                                                                                                               // 5431\n                                                                                                                       // 5432\n      return iframe;                                                                                                   // 5433\n    },                                                                                                                 // 5434\n                                                                                                                       // 5435\n    /**                                                                                                                // 5436\n     * Callback for when the iframe has finished loading                                                               // 5437\n     */                                                                                                                // 5438\n    _onLoadIframe: function(iframe) {                                                                                  // 5439\n      // don't resume when the iframe got unloaded (eg. by removing it from the dom)                                   // 5440\n      if (!wysihtml5.dom.contains(doc.documentElement, iframe)) {                                                      // 5441\n        return;                                                                                                        // 5442\n      }                                                                                                                // 5443\n                                                                                                                       // 5444\n      var that           = this,                                                                                       // 5445\n          iframeWindow   = iframe.contentWindow,                                                                       // 5446\n          iframeDocument = iframe.contentWindow.document,                                                              // 5447\n          charset        = doc.characterSet || doc.charset || \"utf-8\",                                                 // 5448\n          sandboxHtml    = this._getHtml({                                                                             // 5449\n            charset:      charset,                                                                                     // 5450\n            stylesheets:  this.config.stylesheets                                                                      // 5451\n          });                                                                                                          // 5452\n                                                                                                                       // 5453\n      // Create the basic dom tree including proper DOCTYPE and charset                                                // 5454\n      iframeDocument.open(\"text/html\", \"replace\");                                                                     // 5455\n      iframeDocument.write(sandboxHtml);                                                                               // 5456\n      iframeDocument.close();                                                                                          // 5457\n                                                                                                                       // 5458\n      this.getWindow = function() { return iframe.contentWindow; };                                                    // 5459\n      this.getDocument = function() { return iframe.contentWindow.document; };                                         // 5460\n                                                                                                                       // 5461\n      // Catch js errors and pass them to the parent's onerror event                                                   // 5462\n      // addEventListener(\"error\") doesn't work properly in some browsers                                              // 5463\n      // TODO: apparently this doesn't work in IE9!                                                                    // 5464\n      iframeWindow.onerror = function(errorMessage, fileName, lineNumber) {                                            // 5465\n        throw new Error(\"wysihtml5.Sandbox: \" + errorMessage, fileName, lineNumber);                                   // 5466\n      };                                                                                                               // 5467\n                                                                                                                       // 5468\n      if (!wysihtml5.browser.supportsSandboxedIframes()) {                                                             // 5469\n        // Unset a bunch of sensitive variables                                                                        // 5470\n        // Please note: This isn't hack safe!                                                                          // 5471\n        // It more or less just takes care of basic attacks and prevents accidental theft of sensitive information     // 5472\n        // IE is secure though, which is the most important thing, since IE is the only browser, who                   // 5473\n        // takes over scripts & styles into contentEditable elements when copied from external websites                // 5474\n        // or applications (Microsoft Word, ...)                                                                       // 5475\n        var i, length;                                                                                                 // 5476\n        for (i=0, length=windowProperties.length; i<length; i++) {                                                     // 5477\n          this._unset(iframeWindow, windowProperties[i]);                                                              // 5478\n        }                                                                                                              // 5479\n        for (i=0, length=windowProperties2.length; i<length; i++) {                                                    // 5480\n          this._unset(iframeWindow, windowProperties2[i], wysihtml5.EMPTY_FUNCTION);                                   // 5481\n        }                                                                                                              // 5482\n        for (i=0, length=documentProperties.length; i<length; i++) {                                                   // 5483\n          this._unset(iframeDocument, documentProperties[i]);                                                          // 5484\n        }                                                                                                              // 5485\n        // This doesn't work in Safari 5                                                                               // 5486\n        // See http://stackoverflow.com/questions/992461/is-it-possible-to-override-document-cookie-in-webkit          // 5487\n        this._unset(iframeDocument, \"cookie\", \"\", true);                                                               // 5488\n      }                                                                                                                // 5489\n                                                                                                                       // 5490\n      this.loaded = true;                                                                                              // 5491\n                                                                                                                       // 5492\n      // Trigger the callback                                                                                          // 5493\n      setTimeout(function() { that.callback(that); }, 0);                                                              // 5494\n    },                                                                                                                 // 5495\n                                                                                                                       // 5496\n    _getHtml: function(templateVars) {                                                                                 // 5497\n      var stylesheets = templateVars.stylesheets,                                                                      // 5498\n          html        = \"\",                                                                                            // 5499\n          i           = 0,                                                                                             // 5500\n          length;                                                                                                      // 5501\n      stylesheets = typeof(stylesheets) === \"string\" ? [stylesheets] : stylesheets;                                    // 5502\n      if (stylesheets) {                                                                                               // 5503\n        length = stylesheets.length;                                                                                   // 5504\n        for (; i<length; i++) {                                                                                        // 5505\n          html += '<link rel=\"stylesheet\" href=\"' + stylesheets[i] + '\">';                                             // 5506\n        }                                                                                                              // 5507\n      }                                                                                                                // 5508\n      templateVars.stylesheets = html;                                                                                 // 5509\n                                                                                                                       // 5510\n      return wysihtml5.lang.string(                                                                                    // 5511\n        '<!DOCTYPE html><html><head>'                                                                                  // 5512\n        + '<meta charset=\"#{charset}\">#{stylesheets}</head>'                                                           // 5513\n        + '<body></body></html>'                                                                                       // 5514\n      ).interpolate(templateVars);                                                                                     // 5515\n    },                                                                                                                 // 5516\n                                                                                                                       // 5517\n    /**                                                                                                                // 5518\n     * Method to unset/override existing variables                                                                     // 5519\n     * @example                                                                                                        // 5520\n     *    // Make cookie unreadable and unwritable                                                                     // 5521\n     *    this._unset(document, \"cookie\", \"\", true);                                                                   // 5522\n     */                                                                                                                // 5523\n    _unset: function(object, property, value, setter) {                                                                // 5524\n      try { object[property] = value; } catch(e) {}                                                                    // 5525\n                                                                                                                       // 5526\n      try { object.__defineGetter__(property, function() { return value; }); } catch(e) {}                             // 5527\n      if (setter) {                                                                                                    // 5528\n        try { object.__defineSetter__(property, function() {}); } catch(e) {}                                          // 5529\n      }                                                                                                                // 5530\n                                                                                                                       // 5531\n      if (!wysihtml5.browser.crashesWhenDefineProperty(property)) {                                                    // 5532\n        try {                                                                                                          // 5533\n          var config = {                                                                                               // 5534\n            get: function() { return value; }                                                                          // 5535\n          };                                                                                                           // 5536\n          if (setter) {                                                                                                // 5537\n            config.set = function() {};                                                                                // 5538\n          }                                                                                                            // 5539\n          Object.defineProperty(object, property, config);                                                             // 5540\n        } catch(e) {}                                                                                                  // 5541\n      }                                                                                                                // 5542\n    }                                                                                                                  // 5543\n  });                                                                                                                  // 5544\n})(wysihtml5);                                                                                                         // 5545\n(function() {                                                                                                          // 5546\n  var mapping = {                                                                                                      // 5547\n    \"className\": \"class\"                                                                                               // 5548\n  };                                                                                                                   // 5549\n  wysihtml5.dom.setAttributes = function(attributes) {                                                                 // 5550\n    return {                                                                                                           // 5551\n      on: function(element) {                                                                                          // 5552\n        for (var i in attributes) {                                                                                    // 5553\n          element.setAttribute(mapping[i] || i, attributes[i]);                                                        // 5554\n        }                                                                                                              // 5555\n      }                                                                                                                // 5556\n    }                                                                                                                  // 5557\n  };                                                                                                                   // 5558\n})();wysihtml5.dom.setStyles = function(styles) {                                                                      // 5559\n  return {                                                                                                             // 5560\n    on: function(element) {                                                                                            // 5561\n      var style = element.style;                                                                                       // 5562\n      if (typeof(styles) === \"string\") {                                                                               // 5563\n        style.cssText += \";\" + styles;                                                                                 // 5564\n        return;                                                                                                        // 5565\n      }                                                                                                                // 5566\n      for (var i in styles) {                                                                                          // 5567\n        if (i === \"float\") {                                                                                           // 5568\n          style.cssFloat = styles[i];                                                                                  // 5569\n          style.styleFloat = styles[i];                                                                                // 5570\n        } else {                                                                                                       // 5571\n          style[i] = styles[i];                                                                                        // 5572\n        }                                                                                                              // 5573\n      }                                                                                                                // 5574\n    }                                                                                                                  // 5575\n  };                                                                                                                   // 5576\n};/**                                                                                                                  // 5577\n * Simulate HTML5 placeholder attribute                                                                                // 5578\n *                                                                                                                     // 5579\n * Needed since                                                                                                        // 5580\n *    - div[contentEditable] elements don't support it                                                                 // 5581\n *    - older browsers (such as IE8 and Firefox 3.6) don't support it at all                                           // 5582\n *                                                                                                                     // 5583\n * @param {Object} parent Instance of main wysihtml5.Editor class                                                      // 5584\n * @param {Element} view Instance of wysihtml5.views.* class                                                           // 5585\n * @param {String} placeholderText                                                                                     // 5586\n *                                                                                                                     // 5587\n * @example                                                                                                            // 5588\n *    wysihtml.dom.simulatePlaceholder(this, composer, \"Foobar\");                                                      // 5589\n */                                                                                                                    // 5590\n(function(dom) {                                                                                                       // 5591\n  dom.simulatePlaceholder = function(editor, view, placeholderText) {                                                  // 5592\n    var CLASS_NAME = \"placeholder\",                                                                                    // 5593\n        unset = function() {                                                                                           // 5594\n          if (view.hasPlaceholderSet()) {                                                                              // 5595\n            view.clear();                                                                                              // 5596\n          }                                                                                                            // 5597\n          dom.removeClass(view.element, CLASS_NAME);                                                                   // 5598\n        },                                                                                                             // 5599\n        set = function() {                                                                                             // 5600\n          if (view.isEmpty()) {                                                                                        // 5601\n            view.setValue(placeholderText);                                                                            // 5602\n            dom.addClass(view.element, CLASS_NAME);                                                                    // 5603\n          }                                                                                                            // 5604\n        };                                                                                                             // 5605\n                                                                                                                       // 5606\n    editor                                                                                                             // 5607\n      .observe(\"set_placeholder\", set)                                                                                 // 5608\n      .observe(\"unset_placeholder\", unset)                                                                             // 5609\n      .observe(\"focus:composer\", unset)                                                                                // 5610\n      .observe(\"paste:composer\", unset)                                                                                // 5611\n      .observe(\"blur:composer\", set);                                                                                  // 5612\n                                                                                                                       // 5613\n    set();                                                                                                             // 5614\n  };                                                                                                                   // 5615\n})(wysihtml5.dom);                                                                                                     // 5616\n(function(dom) {                                                                                                       // 5617\n  var documentElement = document.documentElement;                                                                      // 5618\n  if (\"textContent\" in documentElement) {                                                                              // 5619\n    dom.setTextContent = function(element, text) {                                                                     // 5620\n      element.textContent = text;                                                                                      // 5621\n    };                                                                                                                 // 5622\n                                                                                                                       // 5623\n    dom.getTextContent = function(element) {                                                                           // 5624\n      return element.textContent;                                                                                      // 5625\n    };                                                                                                                 // 5626\n  } else if (\"innerText\" in documentElement) {                                                                         // 5627\n    dom.setTextContent = function(element, text) {                                                                     // 5628\n      element.innerText = text;                                                                                        // 5629\n    };                                                                                                                 // 5630\n                                                                                                                       // 5631\n    dom.getTextContent = function(element) {                                                                           // 5632\n      return element.innerText;                                                                                        // 5633\n    };                                                                                                                 // 5634\n  } else {                                                                                                             // 5635\n    dom.setTextContent = function(element, text) {                                                                     // 5636\n      element.nodeValue = text;                                                                                        // 5637\n    };                                                                                                                 // 5638\n                                                                                                                       // 5639\n    dom.getTextContent = function(element) {                                                                           // 5640\n      return element.nodeValue;                                                                                        // 5641\n    };                                                                                                                 // 5642\n  }                                                                                                                    // 5643\n})(wysihtml5.dom);                                                                                                     // 5644\n                                                                                                                       // 5645\n/**                                                                                                                    // 5646\n * Fix most common html formatting misbehaviors of browsers implementation when inserting                              // 5647\n * content via copy & paste contentEditable                                                                            // 5648\n *                                                                                                                     // 5649\n * @author Christopher Blum                                                                                            // 5650\n */                                                                                                                    // 5651\nwysihtml5.quirks.cleanPastedHTML = (function() {                                                                       // 5652\n  // TODO: We probably need more rules here                                                                            // 5653\n  var defaultRules = {                                                                                                 // 5654\n    // When pasting underlined links <a> into a contentEditable, IE thinks, it has to insert <u> to keep the styling   // 5655\n    \"a u\": wysihtml5.dom.replaceWithChildNodes                                                                         // 5656\n  };                                                                                                                   // 5657\n                                                                                                                       // 5658\n  function cleanPastedHTML(elementOrHtml, rules, context) {                                                            // 5659\n    rules   = rules || defaultRules;                                                                                   // 5660\n    context = context || elementOrHtml.ownerDocument || document;                                                      // 5661\n                                                                                                                       // 5662\n    var element,                                                                                                       // 5663\n        isString = typeof(elementOrHtml) === \"string\",                                                                 // 5664\n        method,                                                                                                        // 5665\n        matches,                                                                                                       // 5666\n        matchesLength,                                                                                                 // 5667\n        i,                                                                                                             // 5668\n        j = 0;                                                                                                         // 5669\n    if (isString) {                                                                                                    // 5670\n      element = wysihtml5.dom.getAsDom(elementOrHtml, context);                                                        // 5671\n    } else {                                                                                                           // 5672\n      element = elementOrHtml;                                                                                         // 5673\n    }                                                                                                                  // 5674\n                                                                                                                       // 5675\n    for (i in rules) {                                                                                                 // 5676\n      matches       = element.querySelectorAll(i);                                                                     // 5677\n      method        = rules[i];                                                                                        // 5678\n      matchesLength = matches.length;                                                                                  // 5679\n      for (; j<matchesLength; j++) {                                                                                   // 5680\n        method(matches[j]);                                                                                            // 5681\n      }                                                                                                                // 5682\n    }                                                                                                                  // 5683\n                                                                                                                       // 5684\n    matches = elementOrHtml = rules = null;                                                                            // 5685\n                                                                                                                       // 5686\n    return isString ? element.innerHTML : element;                                                                     // 5687\n  }                                                                                                                    // 5688\n                                                                                                                       // 5689\n  return cleanPastedHTML;                                                                                              // 5690\n})();/**                                                                                                               // 5691\n * IE and Opera leave an empty paragraph in the contentEditable element after clearing it                              // 5692\n *                                                                                                                     // 5693\n * @param {Object} contentEditableElement The contentEditable element to observe for clearing events                   // 5694\n * @exaple                                                                                                             // 5695\n *    wysihtml5.quirks.ensureProperClearing(myContentEditableElement);                                                 // 5696\n */                                                                                                                    // 5697\n(function(wysihtml5) {                                                                                                 // 5698\n  var dom = wysihtml5.dom;                                                                                             // 5699\n                                                                                                                       // 5700\n  wysihtml5.quirks.ensureProperClearing = (function() {                                                                // 5701\n    var clearIfNecessary = function(event) {                                                                           // 5702\n      var element = this;                                                                                              // 5703\n      setTimeout(function() {                                                                                          // 5704\n        var innerHTML = element.innerHTML.toLowerCase();                                                               // 5705\n        if (innerHTML == \"<p>&nbsp;</p>\" ||                                                                            // 5706\n            innerHTML == \"<p>&nbsp;</p><p>&nbsp;</p>\") {                                                               // 5707\n          element.innerHTML = \"\";                                                                                      // 5708\n        }                                                                                                              // 5709\n      }, 0);                                                                                                           // 5710\n    };                                                                                                                 // 5711\n                                                                                                                       // 5712\n    return function(composer) {                                                                                        // 5713\n      dom.observe(composer.element, [\"cut\", \"keydown\"], clearIfNecessary);                                             // 5714\n    };                                                                                                                 // 5715\n  })();                                                                                                                // 5716\n                                                                                                                       // 5717\n                                                                                                                       // 5718\n                                                                                                                       // 5719\n  /**                                                                                                                  // 5720\n   * In Opera when the caret is in the first and only item of a list (<ul><li>|</li></ul>) and the list is the first child of the contentEditable element, it's impossible to delete the list by hitting backspace\n   *                                                                                                                   // 5722\n   * @param {Object} contentEditableElement The contentEditable element to observe for clearing events                 // 5723\n   * @exaple                                                                                                           // 5724\n   *    wysihtml5.quirks.ensureProperClearing(myContentEditableElement);                                               // 5725\n   */                                                                                                                  // 5726\n  wysihtml5.quirks.ensureProperClearingOfLists = (function() {                                                         // 5727\n    var ELEMENTS_THAT_CONTAIN_LI = [\"OL\", \"UL\", \"MENU\"];                                                               // 5728\n                                                                                                                       // 5729\n    var clearIfNecessary = function(element, contentEditableElement) {                                                 // 5730\n      if (!contentEditableElement.firstChild || !wysihtml5.lang.array(ELEMENTS_THAT_CONTAIN_LI).contains(contentEditableElement.firstChild.nodeName)) {\n        return;                                                                                                        // 5732\n      }                                                                                                                // 5733\n                                                                                                                       // 5734\n      var list = dom.getParentElement(element, { nodeName: ELEMENTS_THAT_CONTAIN_LI });                                // 5735\n      if (!list) {                                                                                                     // 5736\n        return;                                                                                                        // 5737\n      }                                                                                                                // 5738\n                                                                                                                       // 5739\n      var listIsFirstChildOfContentEditable = list == contentEditableElement.firstChild;                               // 5740\n      if (!listIsFirstChildOfContentEditable) {                                                                        // 5741\n        return;                                                                                                        // 5742\n      }                                                                                                                // 5743\n                                                                                                                       // 5744\n      var hasOnlyOneListItem = list.childNodes.length <= 1;                                                            // 5745\n      if (!hasOnlyOneListItem) {                                                                                       // 5746\n        return;                                                                                                        // 5747\n      }                                                                                                                // 5748\n                                                                                                                       // 5749\n      var onlyListItemIsEmpty = list.firstChild ? list.firstChild.innerHTML === \"\" : true;                             // 5750\n      if (!onlyListItemIsEmpty) {                                                                                      // 5751\n        return;                                                                                                        // 5752\n      }                                                                                                                // 5753\n                                                                                                                       // 5754\n      list.parentNode.removeChild(list);                                                                               // 5755\n    };                                                                                                                 // 5756\n                                                                                                                       // 5757\n    return function(composer) {                                                                                        // 5758\n      dom.observe(composer.element, \"keydown\", function(event) {                                                       // 5759\n        if (event.keyCode !== wysihtml5.BACKSPACE_KEY) {                                                               // 5760\n          return;                                                                                                      // 5761\n        }                                                                                                              // 5762\n                                                                                                                       // 5763\n        var element = composer.selection.getSelectedNode();                                                            // 5764\n        clearIfNecessary(element, composer.element);                                                                   // 5765\n      });                                                                                                              // 5766\n    };                                                                                                                 // 5767\n  })();                                                                                                                // 5768\n                                                                                                                       // 5769\n})(wysihtml5);                                                                                                         // 5770\n// See https://bugzilla.mozilla.org/show_bug.cgi?id=664398                                                             // 5771\n//                                                                                                                     // 5772\n// In Firefox this:                                                                                                    // 5773\n//      var d = document.createElement(\"div\");                                                                         // 5774\n//      d.innerHTML ='<a href=\"~\"></a>';                                                                               // 5775\n//      d.innerHTML;                                                                                                   // 5776\n// will result in:                                                                                                     // 5777\n//      <a href=\"%7E\"></a>                                                                                             // 5778\n// which is wrong                                                                                                      // 5779\n(function(wysihtml5) {                                                                                                 // 5780\n  var TILDE_ESCAPED = \"%7E\";                                                                                           // 5781\n  wysihtml5.quirks.getCorrectInnerHTML = function(element) {                                                           // 5782\n    var innerHTML = element.innerHTML;                                                                                 // 5783\n    if (innerHTML.indexOf(TILDE_ESCAPED) === -1) {                                                                     // 5784\n      return innerHTML;                                                                                                // 5785\n    }                                                                                                                  // 5786\n                                                                                                                       // 5787\n    var elementsWithTilde = element.querySelectorAll(\"[href*='~'], [src*='~']\"),                                       // 5788\n        url,                                                                                                           // 5789\n        urlToSearch,                                                                                                   // 5790\n        length,                                                                                                        // 5791\n        i;                                                                                                             // 5792\n    for (i=0, length=elementsWithTilde.length; i<length; i++) {                                                        // 5793\n      url         = elementsWithTilde[i].href || elementsWithTilde[i].src;                                             // 5794\n      urlToSearch = wysihtml5.lang.string(url).replace(\"~\").by(TILDE_ESCAPED);                                         // 5795\n      innerHTML   = wysihtml5.lang.string(innerHTML).replace(urlToSearch).by(url);                                     // 5796\n    }                                                                                                                  // 5797\n    return innerHTML;                                                                                                  // 5798\n  };                                                                                                                   // 5799\n})(wysihtml5);/**                                                                                                      // 5800\n * Some browsers don't insert line breaks when hitting return in a contentEditable element                             // 5801\n *    - Opera & IE insert new <p> on return                                                                            // 5802\n *    - Chrome & Safari insert new <div> on return                                                                     // 5803\n *    - Firefox inserts <br> on return (yippie!)                                                                       // 5804\n *                                                                                                                     // 5805\n * @param {Element} element                                                                                            // 5806\n *                                                                                                                     // 5807\n * @example                                                                                                            // 5808\n *    wysihtml5.quirks.insertLineBreakOnReturn(element);                                                               // 5809\n */                                                                                                                    // 5810\n(function(wysihtml5) {                                                                                                 // 5811\n  var dom                                           = wysihtml5.dom,                                                   // 5812\n      USE_NATIVE_LINE_BREAK_WHEN_CARET_INSIDE_TAGS  = [\"LI\", \"P\", \"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\"],                 // 5813\n      LIST_TAGS                                     = [\"UL\", \"OL\", \"MENU\"];                                            // 5814\n                                                                                                                       // 5815\n  wysihtml5.quirks.insertLineBreakOnReturn = function(composer) {                                                      // 5816\n    function unwrap(selectedNode) {                                                                                    // 5817\n      var parentElement = dom.getParentElement(selectedNode, { nodeName: [\"P\", \"DIV\"] }, 2);                           // 5818\n      if (!parentElement) {                                                                                            // 5819\n        return;                                                                                                        // 5820\n      }                                                                                                                // 5821\n                                                                                                                       // 5822\n      var invisibleSpace = document.createTextNode(wysihtml5.INVISIBLE_SPACE);                                         // 5823\n      dom.insert(invisibleSpace).before(parentElement);                                                                // 5824\n      dom.replaceWithChildNodes(parentElement);                                                                        // 5825\n      composer.selection.selectNode(invisibleSpace);                                                                   // 5826\n    }                                                                                                                  // 5827\n                                                                                                                       // 5828\n    function keyDown(event) {                                                                                          // 5829\n      var keyCode = event.keyCode;                                                                                     // 5830\n      if (event.shiftKey || (keyCode !== wysihtml5.ENTER_KEY && keyCode !== wysihtml5.BACKSPACE_KEY)) {                // 5831\n        return;                                                                                                        // 5832\n      }                                                                                                                // 5833\n                                                                                                                       // 5834\n      var element         = event.target,                                                                              // 5835\n          selectedNode    = composer.selection.getSelectedNode(),                                                      // 5836\n          blockElement    = dom.getParentElement(selectedNode, { nodeName: USE_NATIVE_LINE_BREAK_WHEN_CARET_INSIDE_TAGS }, 4);\n      if (blockElement) {                                                                                              // 5838\n        // Some browsers create <p> elements after leaving a list                                                      // 5839\n        // check after keydown of backspace and return whether a <p> got inserted and unwrap it                        // 5840\n        if (blockElement.nodeName === \"LI\" && (keyCode === wysihtml5.ENTER_KEY || keyCode === wysihtml5.BACKSPACE_KEY)) {\n          setTimeout(function() {                                                                                      // 5842\n            var selectedNode = composer.selection.getSelectedNode(),                                                   // 5843\n                list,                                                                                                  // 5844\n                div;                                                                                                   // 5845\n            if (!selectedNode) {                                                                                       // 5846\n              return;                                                                                                  // 5847\n            }                                                                                                          // 5848\n                                                                                                                       // 5849\n            list = dom.getParentElement(selectedNode, {                                                                // 5850\n              nodeName: LIST_TAGS                                                                                      // 5851\n            }, 2);                                                                                                     // 5852\n                                                                                                                       // 5853\n            if (list) {                                                                                                // 5854\n              return;                                                                                                  // 5855\n            }                                                                                                          // 5856\n                                                                                                                       // 5857\n            unwrap(selectedNode);                                                                                      // 5858\n          }, 0);                                                                                                       // 5859\n        } else if (blockElement.nodeName.match(/H[1-6]/) && keyCode === wysihtml5.ENTER_KEY) {                         // 5860\n          setTimeout(function() {                                                                                      // 5861\n            unwrap(composer.selection.getSelectedNode());                                                              // 5862\n          }, 0);                                                                                                       // 5863\n        }                                                                                                              // 5864\n        return;                                                                                                        // 5865\n      }                                                                                                                // 5866\n                                                                                                                       // 5867\n      if (keyCode === wysihtml5.ENTER_KEY && !wysihtml5.browser.insertsLineBreaksOnReturn()) {                         // 5868\n        composer.commands.exec(\"insertLineBreak\");                                                                     // 5869\n        event.preventDefault();                                                                                        // 5870\n      }                                                                                                                // 5871\n    }                                                                                                                  // 5872\n                                                                                                                       // 5873\n    // keypress doesn't fire when you hit backspace                                                                    // 5874\n    dom.observe(composer.element.ownerDocument, \"keydown\", keyDown);                                                   // 5875\n  };                                                                                                                   // 5876\n})(wysihtml5);/**                                                                                                      // 5877\n * Force rerendering of a given element                                                                                // 5878\n * Needed to fix display misbehaviors of IE                                                                            // 5879\n *                                                                                                                     // 5880\n * @param {Element} element The element object which needs to be rerendered                                            // 5881\n * @example                                                                                                            // 5882\n *    wysihtml5.quirks.redraw(document.body);                                                                          // 5883\n */                                                                                                                    // 5884\n(function(wysihtml5) {                                                                                                 // 5885\n  var CLASS_NAME = \"wysihtml5-quirks-redraw\";                                                                          // 5886\n                                                                                                                       // 5887\n  wysihtml5.quirks.redraw = function(element) {                                                                        // 5888\n    wysihtml5.dom.addClass(element, CLASS_NAME);                                                                       // 5889\n    wysihtml5.dom.removeClass(element, CLASS_NAME);                                                                    // 5890\n                                                                                                                       // 5891\n    // Following hack is needed for firefox to make sure that image resize handles are properly removed                // 5892\n    try {                                                                                                              // 5893\n      var doc = element.ownerDocument;                                                                                 // 5894\n      doc.execCommand(\"italic\", false, null);                                                                          // 5895\n      doc.execCommand(\"italic\", false, null);                                                                          // 5896\n    } catch(e) {}                                                                                                      // 5897\n  };                                                                                                                   // 5898\n})(wysihtml5);/**                                                                                                      // 5899\n * Selection API                                                                                                       // 5900\n *                                                                                                                     // 5901\n * @example                                                                                                            // 5902\n *    var selection = new wysihtml5.Selection(editor);                                                                 // 5903\n */                                                                                                                    // 5904\n(function(wysihtml5) {                                                                                                 // 5905\n  var dom = wysihtml5.dom;                                                                                             // 5906\n                                                                                                                       // 5907\n  function _getCumulativeOffsetTop(element) {                                                                          // 5908\n    var top = 0;                                                                                                       // 5909\n    if (element.parentNode) {                                                                                          // 5910\n      do {                                                                                                             // 5911\n        top += element.offsetTop || 0;                                                                                 // 5912\n        element = element.offsetParent;                                                                                // 5913\n      } while (element);                                                                                               // 5914\n    }                                                                                                                  // 5915\n    return top;                                                                                                        // 5916\n  }                                                                                                                    // 5917\n                                                                                                                       // 5918\n  wysihtml5.Selection = Base.extend(                                                                                   // 5919\n    /** @scope wysihtml5.Selection.prototype */ {                                                                      // 5920\n    constructor: function(editor) {                                                                                    // 5921\n      // Make sure that our external range library is initialized                                                      // 5922\n      window.rangy.init();                                                                                             // 5923\n                                                                                                                       // 5924\n      this.editor   = editor;                                                                                          // 5925\n      this.composer = editor.composer;                                                                                 // 5926\n      this.doc      = this.composer.doc;                                                                               // 5927\n    },                                                                                                                 // 5928\n                                                                                                                       // 5929\n    /**                                                                                                                // 5930\n     * Get the current selection as a bookmark to be able to later restore it                                          // 5931\n     *                                                                                                                 // 5932\n     * @return {Object} An object that represents the current selection                                                // 5933\n     */                                                                                                                // 5934\n    getBookmark: function() {                                                                                          // 5935\n      var range = this.getRange();                                                                                     // 5936\n      return range && range.cloneRange();                                                                              // 5937\n    },                                                                                                                 // 5938\n                                                                                                                       // 5939\n    /**                                                                                                                // 5940\n     * Restore a selection retrieved via wysihtml5.Selection.prototype.getBookmark                                     // 5941\n     *                                                                                                                 // 5942\n     * @param {Object} bookmark An object that represents the current selection                                        // 5943\n     */                                                                                                                // 5944\n    setBookmark: function(bookmark) {                                                                                  // 5945\n      if (!bookmark) {                                                                                                 // 5946\n        return;                                                                                                        // 5947\n      }                                                                                                                // 5948\n                                                                                                                       // 5949\n      this.setSelection(bookmark);                                                                                     // 5950\n    },                                                                                                                 // 5951\n                                                                                                                       // 5952\n    /**                                                                                                                // 5953\n     * Set the caret in front of the given node                                                                        // 5954\n     *                                                                                                                 // 5955\n     * @param {Object} node The element or text node where to position the caret in front of                           // 5956\n     * @example                                                                                                        // 5957\n     *    selection.setBefore(myElement);                                                                              // 5958\n     */                                                                                                                // 5959\n    setBefore: function(node) {                                                                                        // 5960\n      var range = rangy.createRange(this.doc);                                                                         // 5961\n      range.setStartBefore(node);                                                                                      // 5962\n      range.setEndBefore(node);                                                                                        // 5963\n      return this.setSelection(range);                                                                                 // 5964\n    },                                                                                                                 // 5965\n                                                                                                                       // 5966\n    /**                                                                                                                // 5967\n     * Set the caret after the given node                                                                              // 5968\n     *                                                                                                                 // 5969\n     * @param {Object} node The element or text node where to position the caret in front of                           // 5970\n     * @example                                                                                                        // 5971\n     *    selection.setBefore(myElement);                                                                              // 5972\n     */                                                                                                                // 5973\n    setAfter: function(node) {                                                                                         // 5974\n      var range = rangy.createRange(this.doc);                                                                         // 5975\n      range.setStartAfter(node);                                                                                       // 5976\n      range.setEndAfter(node);                                                                                         // 5977\n      return this.setSelection(range);                                                                                 // 5978\n    },                                                                                                                 // 5979\n                                                                                                                       // 5980\n    /**                                                                                                                // 5981\n     * Ability to select/mark nodes                                                                                    // 5982\n     *                                                                                                                 // 5983\n     * @param {Element} node The node/element to select                                                                // 5984\n     * @example                                                                                                        // 5985\n     *    selection.selectNode(document.getElementById(\"my-image\"));                                                   // 5986\n     */                                                                                                                // 5987\n    selectNode: function(node) {                                                                                       // 5988\n      var range           = rangy.createRange(this.doc),                                                               // 5989\n          isElement       = node.nodeType === wysihtml5.ELEMENT_NODE,                                                  // 5990\n          canHaveHTML     = \"canHaveHTML\" in node ? node.canHaveHTML : (node.nodeName !== \"IMG\"),                      // 5991\n          content         = isElement ? node.innerHTML : node.data,                                                    // 5992\n          isEmpty         = (content === \"\" || content === wysihtml5.INVISIBLE_SPACE),                                 // 5993\n          displayStyle    = dom.getStyle(\"display\").from(node),                                                        // 5994\n          isBlockElement  = (displayStyle === \"block\" || displayStyle === \"list-item\");                                // 5995\n                                                                                                                       // 5996\n      if (isEmpty && isElement && canHaveHTML) {                                                                       // 5997\n        // Make sure that caret is visible in node by inserting a zero width no breaking space                         // 5998\n        try { node.innerHTML = wysihtml5.INVISIBLE_SPACE; } catch(e) {}                                                // 5999\n      }                                                                                                                // 6000\n                                                                                                                       // 6001\n      if (canHaveHTML) {                                                                                               // 6002\n        range.selectNodeContents(node);                                                                                // 6003\n      } else {                                                                                                         // 6004\n        range.selectNode(node);                                                                                        // 6005\n      }                                                                                                                // 6006\n                                                                                                                       // 6007\n      if (canHaveHTML && isEmpty && isElement) {                                                                       // 6008\n        range.collapse(isBlockElement);                                                                                // 6009\n      } else if (canHaveHTML && isEmpty) {                                                                             // 6010\n        range.setStartAfter(node);                                                                                     // 6011\n        range.setEndAfter(node);                                                                                       // 6012\n      }                                                                                                                // 6013\n                                                                                                                       // 6014\n      this.setSelection(range);                                                                                        // 6015\n    },                                                                                                                 // 6016\n                                                                                                                       // 6017\n    /**                                                                                                                // 6018\n     * Get the node which contains the selection                                                                       // 6019\n     *                                                                                                                 // 6020\n     * @param {Boolean} [controlRange] (only IE) Whether it should return the selected ControlRange element when the selection type is a \"ControlRange\"\n     * @return {Object} The node that contains the caret                                                               // 6022\n     * @example                                                                                                        // 6023\n     *    var nodeThatContainsCaret = selection.getSelectedNode();                                                     // 6024\n     */                                                                                                                // 6025\n    getSelectedNode: function(controlRange) {                                                                          // 6026\n      var selection,                                                                                                   // 6027\n          range;                                                                                                       // 6028\n                                                                                                                       // 6029\n      if (controlRange && this.doc.selection && this.doc.selection.type === \"Control\") {                               // 6030\n        range = this.doc.selection.createRange();                                                                      // 6031\n        if (range && range.length) {                                                                                   // 6032\n          return range.item(0);                                                                                        // 6033\n        }                                                                                                              // 6034\n      }                                                                                                                // 6035\n                                                                                                                       // 6036\n      selection = this.getSelection(this.doc);                                                                         // 6037\n      if (selection.focusNode === selection.anchorNode) {                                                              // 6038\n        return selection.focusNode;                                                                                    // 6039\n      } else {                                                                                                         // 6040\n        range = this.getRange(this.doc);                                                                               // 6041\n        return range ? range.commonAncestorContainer : this.doc.body;                                                  // 6042\n      }                                                                                                                // 6043\n    },                                                                                                                 // 6044\n                                                                                                                       // 6045\n    executeAndRestore: function(method, restoreScrollPosition) {                                                       // 6046\n      var body                  = this.doc.body,                                                                       // 6047\n          oldScrollTop          = restoreScrollPosition && body.scrollTop,                                             // 6048\n          oldScrollLeft         = restoreScrollPosition && body.scrollLeft,                                            // 6049\n          className             = \"_wysihtml5-temp-placeholder\",                                                       // 6050\n          placeholderHTML       = '<span class=\"' + className + '\">' + wysihtml5.INVISIBLE_SPACE + '</span>',          // 6051\n          range                 = this.getRange(this.doc),                                                             // 6052\n          newRange;                                                                                                    // 6053\n                                                                                                                       // 6054\n      // Nothing selected, execute and say goodbye                                                                     // 6055\n      if (!range) {                                                                                                    // 6056\n        method(body, body);                                                                                            // 6057\n        return;                                                                                                        // 6058\n      }                                                                                                                // 6059\n                                                                                                                       // 6060\n      var node = range.createContextualFragment(placeholderHTML);                                                      // 6061\n      range.insertNode(node);                                                                                          // 6062\n                                                                                                                       // 6063\n      // Make sure that a potential error doesn't cause our placeholder element to be left as a placeholder            // 6064\n      try {                                                                                                            // 6065\n        method(range.startContainer, range.endContainer);                                                              // 6066\n      } catch(e3) {                                                                                                    // 6067\n        setTimeout(function() { throw e3; }, 0);                                                                       // 6068\n      }                                                                                                                // 6069\n                                                                                                                       // 6070\n      caretPlaceholder = this.doc.querySelector(\".\" + className);                                                      // 6071\n      if (caretPlaceholder) {                                                                                          // 6072\n        newRange = rangy.createRange(this.doc);                                                                        // 6073\n        newRange.selectNode(caretPlaceholder);                                                                         // 6074\n        newRange.deleteContents();                                                                                     // 6075\n        this.setSelection(newRange);                                                                                   // 6076\n      } else {                                                                                                         // 6077\n        // fallback for when all hell breaks loose                                                                     // 6078\n        body.focus();                                                                                                  // 6079\n      }                                                                                                                // 6080\n                                                                                                                       // 6081\n      if (restoreScrollPosition) {                                                                                     // 6082\n        body.scrollTop  = oldScrollTop;                                                                                // 6083\n        body.scrollLeft = oldScrollLeft;                                                                               // 6084\n      }                                                                                                                // 6085\n                                                                                                                       // 6086\n      // Remove it again, just to make sure that the placeholder is definitely out of the dom tree                     // 6087\n      try {                                                                                                            // 6088\n        caretPlaceholder.parentNode.removeChild(caretPlaceholder);                                                     // 6089\n      } catch(e4) {}                                                                                                   // 6090\n    },                                                                                                                 // 6091\n                                                                                                                       // 6092\n    /**                                                                                                                // 6093\n     * Different approach of preserving the selection (doesn't modify the dom)                                         // 6094\n     * Takes all text nodes in the selection and saves the selection position in the first and last one                // 6095\n     */                                                                                                                // 6096\n    executeAndRestoreSimple: function(method) {                                                                        // 6097\n      var range = this.getRange(),                                                                                     // 6098\n          body  = this.doc.body,                                                                                       // 6099\n          newRange,                                                                                                    // 6100\n          firstNode,                                                                                                   // 6101\n          lastNode,                                                                                                    // 6102\n          textNodes,                                                                                                   // 6103\n          rangeBackup;                                                                                                 // 6104\n                                                                                                                       // 6105\n      // Nothing selected, execute and say goodbye                                                                     // 6106\n      if (!range) {                                                                                                    // 6107\n        method(body, body);                                                                                            // 6108\n        return;                                                                                                        // 6109\n      }                                                                                                                // 6110\n                                                                                                                       // 6111\n      textNodes = range.getNodes([3]);                                                                                 // 6112\n      firstNode = textNodes[0] || range.startContainer;                                                                // 6113\n      lastNode  = textNodes[textNodes.length - 1] || range.endContainer;                                               // 6114\n                                                                                                                       // 6115\n      rangeBackup = {                                                                                                  // 6116\n        collapsed:      range.collapsed,                                                                               // 6117\n        startContainer: firstNode,                                                                                     // 6118\n        startOffset:    firstNode === range.startContainer ? range.startOffset : 0,                                    // 6119\n        endContainer:   lastNode,                                                                                      // 6120\n        endOffset:      lastNode === range.endContainer ? range.endOffset : lastNode.length                            // 6121\n      };                                                                                                               // 6122\n                                                                                                                       // 6123\n      try {                                                                                                            // 6124\n        method(range.startContainer, range.endContainer);                                                              // 6125\n      } catch(e) {                                                                                                     // 6126\n        setTimeout(function() { throw e; }, 0);                                                                        // 6127\n      }                                                                                                                // 6128\n                                                                                                                       // 6129\n      newRange = rangy.createRange(this.doc);                                                                          // 6130\n      try { newRange.setStart(rangeBackup.startContainer, rangeBackup.startOffset); } catch(e1) {}                     // 6131\n      try { newRange.setEnd(rangeBackup.endContainer, rangeBackup.endOffset); } catch(e2) {}                           // 6132\n      try { this.setSelection(newRange); } catch(e3) {}                                                                // 6133\n    },                                                                                                                 // 6134\n                                                                                                                       // 6135\n    /**                                                                                                                // 6136\n     * Insert html at the caret position and move the cursor after the inserted html                                   // 6137\n     *                                                                                                                 // 6138\n     * @param {String} html HTML string to insert                                                                      // 6139\n     * @example                                                                                                        // 6140\n     *    selection.insertHTML(\"<p>foobar</p>\");                                                                       // 6141\n     */                                                                                                                // 6142\n    insertHTML: function(html) {                                                                                       // 6143\n      var range     = rangy.createRange(this.doc),                                                                     // 6144\n          node      = range.createContextualFragment(html),                                                            // 6145\n          lastChild = node.lastChild;                                                                                  // 6146\n      this.insertNode(node);                                                                                           // 6147\n      if (lastChild) {                                                                                                 // 6148\n        this.setAfter(lastChild);                                                                                      // 6149\n      }                                                                                                                // 6150\n    },                                                                                                                 // 6151\n                                                                                                                       // 6152\n    /**                                                                                                                // 6153\n     * Insert a node at the caret position and move the cursor behind it                                               // 6154\n     *                                                                                                                 // 6155\n     * @param {Object} node HTML string to insert                                                                      // 6156\n     * @example                                                                                                        // 6157\n     *    selection.insertNode(document.createTextNode(\"foobar\"));                                                     // 6158\n     */                                                                                                                // 6159\n    insertNode: function(node) {                                                                                       // 6160\n      var range = this.getRange();                                                                                     // 6161\n      if (range) {                                                                                                     // 6162\n        range.insertNode(node);                                                                                        // 6163\n      }                                                                                                                // 6164\n    },                                                                                                                 // 6165\n                                                                                                                       // 6166\n    /**                                                                                                                // 6167\n     * Wraps current selection with the given node                                                                     // 6168\n     *                                                                                                                 // 6169\n     * @param {Object} node The node to surround the selected elements with                                            // 6170\n     */                                                                                                                // 6171\n    surround: function(node) {                                                                                         // 6172\n      var range = this.getRange();                                                                                     // 6173\n      if (!range) {                                                                                                    // 6174\n        return;                                                                                                        // 6175\n      }                                                                                                                // 6176\n                                                                                                                       // 6177\n      try {                                                                                                            // 6178\n        // This only works when the range boundaries are not overlapping other elements                                // 6179\n        range.surroundContents(node);                                                                                  // 6180\n        this.selectNode(node);                                                                                         // 6181\n      } catch(e) {                                                                                                     // 6182\n        // fallback                                                                                                    // 6183\n        node.appendChild(range.extractContents());                                                                     // 6184\n        range.insertNode(node);                                                                                        // 6185\n      }                                                                                                                // 6186\n    },                                                                                                                 // 6187\n                                                                                                                       // 6188\n    /**                                                                                                                // 6189\n     * Scroll the current caret position into the view                                                                 // 6190\n     * FIXME: This is a bit hacky, there might be a smarter way of doing this                                          // 6191\n     *                                                                                                                 // 6192\n     * @example                                                                                                        // 6193\n     *    selection.scrollIntoView();                                                                                  // 6194\n     */                                                                                                                // 6195\n    scrollIntoView: function() {                                                                                       // 6196\n      var doc           = this.doc,                                                                                    // 6197\n          hasScrollBars = doc.documentElement.scrollHeight > doc.documentElement.offsetHeight,                         // 6198\n          tempElement   = doc._wysihtml5ScrollIntoViewElement = doc._wysihtml5ScrollIntoViewElement || (function() {   // 6199\n            var element = doc.createElement(\"span\");                                                                   // 6200\n            // The element needs content in order to be able to calculate it's position properly                       // 6201\n            element.innerHTML = wysihtml5.INVISIBLE_SPACE;                                                             // 6202\n            return element;                                                                                            // 6203\n          })(),                                                                                                        // 6204\n          offsetTop;                                                                                                   // 6205\n                                                                                                                       // 6206\n      if (hasScrollBars) {                                                                                             // 6207\n        this.insertNode(tempElement);                                                                                  // 6208\n        offsetTop = _getCumulativeOffsetTop(tempElement);                                                              // 6209\n        tempElement.parentNode.removeChild(tempElement);                                                               // 6210\n        if (offsetTop > doc.body.scrollTop) {                                                                          // 6211\n          doc.body.scrollTop = offsetTop;                                                                              // 6212\n        }                                                                                                              // 6213\n      }                                                                                                                // 6214\n    },                                                                                                                 // 6215\n                                                                                                                       // 6216\n    /**                                                                                                                // 6217\n     * Select line where the caret is in                                                                               // 6218\n     */                                                                                                                // 6219\n    selectLine: function() {                                                                                           // 6220\n      if (wysihtml5.browser.supportsSelectionModify()) {                                                               // 6221\n        this._selectLine_W3C();                                                                                        // 6222\n      } else if (this.doc.selection) {                                                                                 // 6223\n        this._selectLine_MSIE();                                                                                       // 6224\n      }                                                                                                                // 6225\n    },                                                                                                                 // 6226\n                                                                                                                       // 6227\n    /**                                                                                                                // 6228\n     * See https://developer.mozilla.org/en/DOM/Selection/modify                                                       // 6229\n     */                                                                                                                // 6230\n    _selectLine_W3C: function() {                                                                                      // 6231\n      var win       = this.doc.defaultView,                                                                            // 6232\n          selection = win.getSelection();                                                                              // 6233\n      selection.modify(\"extend\", \"left\", \"lineboundary\");                                                              // 6234\n      selection.modify(\"extend\", \"right\", \"lineboundary\");                                                             // 6235\n    },                                                                                                                 // 6236\n                                                                                                                       // 6237\n    _selectLine_MSIE: function() {                                                                                     // 6238\n      var range       = this.doc.selection.createRange(),                                                              // 6239\n          rangeTop    = range.boundingTop,                                                                             // 6240\n          rangeHeight = range.boundingHeight,                                                                          // 6241\n          scrollWidth = this.doc.body.scrollWidth,                                                                     // 6242\n          rangeBottom,                                                                                                 // 6243\n          rangeEnd,                                                                                                    // 6244\n          measureNode,                                                                                                 // 6245\n          i,                                                                                                           // 6246\n          j;                                                                                                           // 6247\n                                                                                                                       // 6248\n      if (!range.moveToPoint) {                                                                                        // 6249\n        return;                                                                                                        // 6250\n      }                                                                                                                // 6251\n                                                                                                                       // 6252\n      if (rangeTop === 0) {                                                                                            // 6253\n        // Don't know why, but when the selection ends at the end of a line                                            // 6254\n        // range.boundingTop is 0                                                                                      // 6255\n        measureNode = this.doc.createElement(\"span\");                                                                  // 6256\n        this.insertNode(measureNode);                                                                                  // 6257\n        rangeTop = measureNode.offsetTop;                                                                              // 6258\n        measureNode.parentNode.removeChild(measureNode);                                                               // 6259\n      }                                                                                                                // 6260\n                                                                                                                       // 6261\n      rangeTop += 1;                                                                                                   // 6262\n                                                                                                                       // 6263\n      for (i=-10; i<scrollWidth; i+=2) {                                                                               // 6264\n        try {                                                                                                          // 6265\n          range.moveToPoint(i, rangeTop);                                                                              // 6266\n          break;                                                                                                       // 6267\n        } catch(e1) {}                                                                                                 // 6268\n      }                                                                                                                // 6269\n                                                                                                                       // 6270\n      // Investigate the following in order to handle multi line selections                                            // 6271\n      // rangeBottom = rangeTop + (rangeHeight ? (rangeHeight - 1) : 0);                                               // 6272\n      rangeBottom = rangeTop;                                                                                          // 6273\n      rangeEnd = this.doc.selection.createRange();                                                                     // 6274\n      for (j=scrollWidth; j>=0; j--) {                                                                                 // 6275\n        try {                                                                                                          // 6276\n          rangeEnd.moveToPoint(j, rangeBottom);                                                                        // 6277\n          break;                                                                                                       // 6278\n        } catch(e2) {}                                                                                                 // 6279\n      }                                                                                                                // 6280\n                                                                                                                       // 6281\n      range.setEndPoint(\"EndToEnd\", rangeEnd);                                                                         // 6282\n      range.select();                                                                                                  // 6283\n    },                                                                                                                 // 6284\n                                                                                                                       // 6285\n    getText: function() {                                                                                              // 6286\n      var selection = this.getSelection();                                                                             // 6287\n      return selection ? selection.toString() : \"\";                                                                    // 6288\n    },                                                                                                                 // 6289\n                                                                                                                       // 6290\n    getNodes: function(nodeType, filter) {                                                                             // 6291\n      var range = this.getRange();                                                                                     // 6292\n      if (range) {                                                                                                     // 6293\n        return range.getNodes([nodeType], filter);                                                                     // 6294\n      } else {                                                                                                         // 6295\n        return [];                                                                                                     // 6296\n      }                                                                                                                // 6297\n    },                                                                                                                 // 6298\n                                                                                                                       // 6299\n    getRange: function() {                                                                                             // 6300\n      var selection = this.getSelection();                                                                             // 6301\n      return selection && selection.rangeCount && selection.getRangeAt(0);                                             // 6302\n    },                                                                                                                 // 6303\n                                                                                                                       // 6304\n    getSelection: function() {                                                                                         // 6305\n      return rangy.getSelection(this.doc.defaultView || this.doc.parentWindow);                                        // 6306\n    },                                                                                                                 // 6307\n                                                                                                                       // 6308\n    setSelection: function(range) {                                                                                    // 6309\n      var win       = this.doc.defaultView || this.doc.parentWindow,                                                   // 6310\n          selection = rangy.getSelection(win);                                                                         // 6311\n      return selection.setSingleRange(range);                                                                          // 6312\n    }                                                                                                                  // 6313\n  });                                                                                                                  // 6314\n                                                                                                                       // 6315\n})(wysihtml5);                                                                                                         // 6316\n/**                                                                                                                    // 6317\n * Inspired by the rangy CSS Applier module written by Tim Down and licensed under the MIT license.                    // 6318\n * http://code.google.com/p/rangy/                                                                                     // 6319\n *                                                                                                                     // 6320\n * changed in order to be able ...                                                                                     // 6321\n *    - to use custom tags                                                                                             // 6322\n *    - to detect and replace similar css classes via reg exp                                                          // 6323\n */                                                                                                                    // 6324\n(function(wysihtml5, rangy) {                                                                                          // 6325\n  var defaultTagName = \"span\";                                                                                         // 6326\n                                                                                                                       // 6327\n  var REG_EXP_WHITE_SPACE = /\\s+/g;                                                                                    // 6328\n                                                                                                                       // 6329\n  function hasClass(el, cssClass, regExp) {                                                                            // 6330\n    if (!el.className) {                                                                                               // 6331\n      return false;                                                                                                    // 6332\n    }                                                                                                                  // 6333\n                                                                                                                       // 6334\n    var matchingClassNames = el.className.match(regExp) || [];                                                         // 6335\n    return matchingClassNames[matchingClassNames.length - 1] === cssClass;                                             // 6336\n  }                                                                                                                    // 6337\n                                                                                                                       // 6338\n  function addClass(el, cssClass, regExp) {                                                                            // 6339\n    if (el.className) {                                                                                                // 6340\n      removeClass(el, regExp);                                                                                         // 6341\n      el.className += \" \" + cssClass;                                                                                  // 6342\n    } else {                                                                                                           // 6343\n      el.className = cssClass;                                                                                         // 6344\n    }                                                                                                                  // 6345\n  }                                                                                                                    // 6346\n                                                                                                                       // 6347\n  function removeClass(el, regExp) {                                                                                   // 6348\n    if (el.className) {                                                                                                // 6349\n      el.className = el.className.replace(regExp, \"\");                                                                 // 6350\n    }                                                                                                                  // 6351\n  }                                                                                                                    // 6352\n                                                                                                                       // 6353\n  function hasSameClasses(el1, el2) {                                                                                  // 6354\n    return el1.className.replace(REG_EXP_WHITE_SPACE, \" \") == el2.className.replace(REG_EXP_WHITE_SPACE, \" \");         // 6355\n  }                                                                                                                    // 6356\n                                                                                                                       // 6357\n  function replaceWithOwnChildren(el) {                                                                                // 6358\n    var parent = el.parentNode;                                                                                        // 6359\n    while (el.firstChild) {                                                                                            // 6360\n      parent.insertBefore(el.firstChild, el);                                                                          // 6361\n    }                                                                                                                  // 6362\n    parent.removeChild(el);                                                                                            // 6363\n  }                                                                                                                    // 6364\n                                                                                                                       // 6365\n  function elementsHaveSameNonClassAttributes(el1, el2) {                                                              // 6366\n    if (el1.attributes.length != el2.attributes.length) {                                                              // 6367\n      return false;                                                                                                    // 6368\n    }                                                                                                                  // 6369\n    for (var i = 0, len = el1.attributes.length, attr1, attr2, name; i < len; ++i) {                                   // 6370\n      attr1 = el1.attributes[i];                                                                                       // 6371\n      name = attr1.name;                                                                                               // 6372\n      if (name != \"class\") {                                                                                           // 6373\n        attr2 = el2.attributes.getNamedItem(name);                                                                     // 6374\n        if (attr1.specified != attr2.specified) {                                                                      // 6375\n          return false;                                                                                                // 6376\n        }                                                                                                              // 6377\n        if (attr1.specified && attr1.nodeValue !== attr2.nodeValue) {                                                  // 6378\n          return false;                                                                                                // 6379\n        }                                                                                                              // 6380\n      }                                                                                                                // 6381\n    }                                                                                                                  // 6382\n    return true;                                                                                                       // 6383\n  }                                                                                                                    // 6384\n                                                                                                                       // 6385\n  function isSplitPoint(node, offset) {                                                                                // 6386\n    if (rangy.dom.isCharacterDataNode(node)) {                                                                         // 6387\n      if (offset == 0) {                                                                                               // 6388\n        return !!node.previousSibling;                                                                                 // 6389\n      } else if (offset == node.length) {                                                                              // 6390\n        return !!node.nextSibling;                                                                                     // 6391\n      } else {                                                                                                         // 6392\n        return true;                                                                                                   // 6393\n      }                                                                                                                // 6394\n    }                                                                                                                  // 6395\n                                                                                                                       // 6396\n    return offset > 0 && offset < node.childNodes.length;                                                              // 6397\n  }                                                                                                                    // 6398\n                                                                                                                       // 6399\n  function splitNodeAt(node, descendantNode, descendantOffset) {                                                       // 6400\n    var newNode;                                                                                                       // 6401\n    if (rangy.dom.isCharacterDataNode(descendantNode)) {                                                               // 6402\n      if (descendantOffset == 0) {                                                                                     // 6403\n        descendantOffset = rangy.dom.getNodeIndex(descendantNode);                                                     // 6404\n        descendantNode = descendantNode.parentNode;                                                                    // 6405\n      } else if (descendantOffset == descendantNode.length) {                                                          // 6406\n        descendantOffset = rangy.dom.getNodeIndex(descendantNode) + 1;                                                 // 6407\n        descendantNode = descendantNode.parentNode;                                                                    // 6408\n      } else {                                                                                                         // 6409\n        newNode = rangy.dom.splitDataNode(descendantNode, descendantOffset);                                           // 6410\n      }                                                                                                                // 6411\n    }                                                                                                                  // 6412\n    if (!newNode) {                                                                                                    // 6413\n      newNode = descendantNode.cloneNode(false);                                                                       // 6414\n      if (newNode.id) {                                                                                                // 6415\n        newNode.removeAttribute(\"id\");                                                                                 // 6416\n      }                                                                                                                // 6417\n      var child;                                                                                                       // 6418\n      while ((child = descendantNode.childNodes[descendantOffset])) {                                                  // 6419\n        newNode.appendChild(child);                                                                                    // 6420\n      }                                                                                                                // 6421\n      rangy.dom.insertAfter(newNode, descendantNode);                                                                  // 6422\n    }                                                                                                                  // 6423\n    return (descendantNode == node) ? newNode : splitNodeAt(node, newNode.parentNode, rangy.dom.getNodeIndex(newNode));\n  }                                                                                                                    // 6425\n                                                                                                                       // 6426\n  function Merge(firstNode) {                                                                                          // 6427\n    this.isElementMerge = (firstNode.nodeType == wysihtml5.ELEMENT_NODE);                                              // 6428\n    this.firstTextNode = this.isElementMerge ? firstNode.lastChild : firstNode;                                        // 6429\n    this.textNodes = [this.firstTextNode];                                                                             // 6430\n  }                                                                                                                    // 6431\n                                                                                                                       // 6432\n  Merge.prototype = {                                                                                                  // 6433\n    doMerge: function() {                                                                                              // 6434\n      var textBits = [], textNode, parent, text;                                                                       // 6435\n      for (var i = 0, len = this.textNodes.length; i < len; ++i) {                                                     // 6436\n        textNode = this.textNodes[i];                                                                                  // 6437\n        parent = textNode.parentNode;                                                                                  // 6438\n        textBits[i] = textNode.data;                                                                                   // 6439\n        if (i) {                                                                                                       // 6440\n          parent.removeChild(textNode);                                                                                // 6441\n          if (!parent.hasChildNodes()) {                                                                               // 6442\n            parent.parentNode.removeChild(parent);                                                                     // 6443\n          }                                                                                                            // 6444\n        }                                                                                                              // 6445\n      }                                                                                                                // 6446\n      this.firstTextNode.data = text = textBits.join(\"\");                                                              // 6447\n      return text;                                                                                                     // 6448\n    },                                                                                                                 // 6449\n                                                                                                                       // 6450\n    getLength: function() {                                                                                            // 6451\n      var i = this.textNodes.length, len = 0;                                                                          // 6452\n      while (i--) {                                                                                                    // 6453\n        len += this.textNodes[i].length;                                                                               // 6454\n      }                                                                                                                // 6455\n      return len;                                                                                                      // 6456\n    },                                                                                                                 // 6457\n                                                                                                                       // 6458\n    toString: function() {                                                                                             // 6459\n      var textBits = [];                                                                                               // 6460\n      for (var i = 0, len = this.textNodes.length; i < len; ++i) {                                                     // 6461\n        textBits[i] = \"'\" + this.textNodes[i].data + \"'\";                                                              // 6462\n      }                                                                                                                // 6463\n      return \"[Merge(\" + textBits.join(\",\") + \")]\";                                                                    // 6464\n    }                                                                                                                  // 6465\n  };                                                                                                                   // 6466\n                                                                                                                       // 6467\n  function HTMLApplier(tagNames, cssClass, similarClassRegExp, normalize) {                                            // 6468\n    this.tagNames = tagNames || [defaultTagName];                                                                      // 6469\n    this.cssClass = cssClass || \"\";                                                                                    // 6470\n    this.similarClassRegExp = similarClassRegExp;                                                                      // 6471\n    this.normalize = normalize;                                                                                        // 6472\n    this.applyToAnyTagName = false;                                                                                    // 6473\n  }                                                                                                                    // 6474\n                                                                                                                       // 6475\n  HTMLApplier.prototype = {                                                                                            // 6476\n    getAncestorWithClass: function(node) {                                                                             // 6477\n      var cssClassMatch;                                                                                               // 6478\n      while (node) {                                                                                                   // 6479\n        cssClassMatch = this.cssClass ? hasClass(node, this.cssClass, this.similarClassRegExp) : true;                 // 6480\n        if (node.nodeType == wysihtml5.ELEMENT_NODE && rangy.dom.arrayContains(this.tagNames, node.tagName.toLowerCase()) && cssClassMatch) {\n          return node;                                                                                                 // 6482\n        }                                                                                                              // 6483\n        node = node.parentNode;                                                                                        // 6484\n      }                                                                                                                // 6485\n      return false;                                                                                                    // 6486\n    },                                                                                                                 // 6487\n                                                                                                                       // 6488\n    // Normalizes nodes after applying a CSS class to a Range.                                                         // 6489\n    postApply: function(textNodes, range) {                                                                            // 6490\n      var firstNode = textNodes[0], lastNode = textNodes[textNodes.length - 1];                                        // 6491\n                                                                                                                       // 6492\n      var merges = [], currentMerge;                                                                                   // 6493\n                                                                                                                       // 6494\n      var rangeStartNode = firstNode, rangeEndNode = lastNode;                                                         // 6495\n      var rangeStartOffset = 0, rangeEndOffset = lastNode.length;                                                      // 6496\n                                                                                                                       // 6497\n      var textNode, precedingTextNode;                                                                                 // 6498\n                                                                                                                       // 6499\n      for (var i = 0, len = textNodes.length; i < len; ++i) {                                                          // 6500\n        textNode = textNodes[i];                                                                                       // 6501\n        precedingTextNode = this.getAdjacentMergeableTextNode(textNode.parentNode, false);                             // 6502\n        if (precedingTextNode) {                                                                                       // 6503\n          if (!currentMerge) {                                                                                         // 6504\n            currentMerge = new Merge(precedingTextNode);                                                               // 6505\n            merges.push(currentMerge);                                                                                 // 6506\n          }                                                                                                            // 6507\n          currentMerge.textNodes.push(textNode);                                                                       // 6508\n          if (textNode === firstNode) {                                                                                // 6509\n            rangeStartNode = currentMerge.firstTextNode;                                                               // 6510\n            rangeStartOffset = rangeStartNode.length;                                                                  // 6511\n          }                                                                                                            // 6512\n          if (textNode === lastNode) {                                                                                 // 6513\n            rangeEndNode = currentMerge.firstTextNode;                                                                 // 6514\n            rangeEndOffset = currentMerge.getLength();                                                                 // 6515\n          }                                                                                                            // 6516\n        } else {                                                                                                       // 6517\n          currentMerge = null;                                                                                         // 6518\n        }                                                                                                              // 6519\n      }                                                                                                                // 6520\n                                                                                                                       // 6521\n      // Test whether the first node after the range needs merging                                                     // 6522\n      var nextTextNode = this.getAdjacentMergeableTextNode(lastNode.parentNode, true);                                 // 6523\n      if (nextTextNode) {                                                                                              // 6524\n        if (!currentMerge) {                                                                                           // 6525\n          currentMerge = new Merge(lastNode);                                                                          // 6526\n          merges.push(currentMerge);                                                                                   // 6527\n        }                                                                                                              // 6528\n        currentMerge.textNodes.push(nextTextNode);                                                                     // 6529\n      }                                                                                                                // 6530\n                                                                                                                       // 6531\n      // Do the merges                                                                                                 // 6532\n      if (merges.length) {                                                                                             // 6533\n        for (i = 0, len = merges.length; i < len; ++i) {                                                               // 6534\n          merges[i].doMerge();                                                                                         // 6535\n        }                                                                                                              // 6536\n        // Set the range boundaries                                                                                    // 6537\n        range.setStart(rangeStartNode, rangeStartOffset);                                                              // 6538\n        range.setEnd(rangeEndNode, rangeEndOffset);                                                                    // 6539\n      }                                                                                                                // 6540\n    },                                                                                                                 // 6541\n                                                                                                                       // 6542\n    getAdjacentMergeableTextNode: function(node, forward) {                                                            // 6543\n        var isTextNode = (node.nodeType == wysihtml5.TEXT_NODE);                                                       // 6544\n        var el = isTextNode ? node.parentNode : node;                                                                  // 6545\n        var adjacentNode;                                                                                              // 6546\n        var propName = forward ? \"nextSibling\" : \"previousSibling\";                                                    // 6547\n        if (isTextNode) {                                                                                              // 6548\n          // Can merge if the node's previous/next sibling is a text node                                              // 6549\n          adjacentNode = node[propName];                                                                               // 6550\n          if (adjacentNode && adjacentNode.nodeType == wysihtml5.TEXT_NODE) {                                          // 6551\n            return adjacentNode;                                                                                       // 6552\n          }                                                                                                            // 6553\n        } else {                                                                                                       // 6554\n          // Compare element with its sibling                                                                          // 6555\n          adjacentNode = el[propName];                                                                                 // 6556\n          if (adjacentNode && this.areElementsMergeable(node, adjacentNode)) {                                         // 6557\n            return adjacentNode[forward ? \"firstChild\" : \"lastChild\"];                                                 // 6558\n          }                                                                                                            // 6559\n        }                                                                                                              // 6560\n        return null;                                                                                                   // 6561\n    },                                                                                                                 // 6562\n                                                                                                                       // 6563\n    areElementsMergeable: function(el1, el2) {                                                                         // 6564\n      return rangy.dom.arrayContains(this.tagNames, (el1.tagName || \"\").toLowerCase())                                 // 6565\n        && rangy.dom.arrayContains(this.tagNames, (el2.tagName || \"\").toLowerCase())                                   // 6566\n        && hasSameClasses(el1, el2)                                                                                    // 6567\n        && elementsHaveSameNonClassAttributes(el1, el2);                                                               // 6568\n    },                                                                                                                 // 6569\n                                                                                                                       // 6570\n    createContainer: function(doc) {                                                                                   // 6571\n      var el = doc.createElement(this.tagNames[0]);                                                                    // 6572\n      if (this.cssClass) {                                                                                             // 6573\n        el.className = this.cssClass;                                                                                  // 6574\n      }                                                                                                                // 6575\n      return el;                                                                                                       // 6576\n    },                                                                                                                 // 6577\n                                                                                                                       // 6578\n    applyToTextNode: function(textNode) {                                                                              // 6579\n      var parent = textNode.parentNode;                                                                                // 6580\n      if (parent.childNodes.length == 1 && rangy.dom.arrayContains(this.tagNames, parent.tagName.toLowerCase())) {     // 6581\n        if (this.cssClass) {                                                                                           // 6582\n          addClass(parent, this.cssClass, this.similarClassRegExp);                                                    // 6583\n        }                                                                                                              // 6584\n      } else {                                                                                                         // 6585\n        var el = this.createContainer(rangy.dom.getDocument(textNode));                                                // 6586\n        textNode.parentNode.insertBefore(el, textNode);                                                                // 6587\n        el.appendChild(textNode);                                                                                      // 6588\n      }                                                                                                                // 6589\n    },                                                                                                                 // 6590\n                                                                                                                       // 6591\n    isRemovable: function(el) {                                                                                        // 6592\n      return rangy.dom.arrayContains(this.tagNames, el.tagName.toLowerCase()) && wysihtml5.lang.string(el.className).trim() == this.cssClass;\n    },                                                                                                                 // 6594\n                                                                                                                       // 6595\n    undoToTextNode: function(textNode, range, ancestorWithClass) {                                                     // 6596\n      if (!range.containsNode(ancestorWithClass)) {                                                                    // 6597\n        // Split out the portion of the ancestor from which we can remove the CSS class                                // 6598\n        var ancestorRange = range.cloneRange();                                                                        // 6599\n        ancestorRange.selectNode(ancestorWithClass);                                                                   // 6600\n                                                                                                                       // 6601\n        if (ancestorRange.isPointInRange(range.endContainer, range.endOffset) && isSplitPoint(range.endContainer, range.endOffset)) {\n          splitNodeAt(ancestorWithClass, range.endContainer, range.endOffset);                                         // 6603\n          range.setEndAfter(ancestorWithClass);                                                                        // 6604\n        }                                                                                                              // 6605\n        if (ancestorRange.isPointInRange(range.startContainer, range.startOffset) && isSplitPoint(range.startContainer, range.startOffset)) {\n          ancestorWithClass = splitNodeAt(ancestorWithClass, range.startContainer, range.startOffset);                 // 6607\n        }                                                                                                              // 6608\n      }                                                                                                                // 6609\n                                                                                                                       // 6610\n      if (this.similarClassRegExp) {                                                                                   // 6611\n        removeClass(ancestorWithClass, this.similarClassRegExp);                                                       // 6612\n      }                                                                                                                // 6613\n      if (this.isRemovable(ancestorWithClass)) {                                                                       // 6614\n        replaceWithOwnChildren(ancestorWithClass);                                                                     // 6615\n      }                                                                                                                // 6616\n    },                                                                                                                 // 6617\n                                                                                                                       // 6618\n    applyToRange: function(range) {                                                                                    // 6619\n        var textNodes = range.getNodes([wysihtml5.TEXT_NODE]);                                                         // 6620\n        if (!textNodes.length) {                                                                                       // 6621\n          try {                                                                                                        // 6622\n            var node = this.createContainer(range.endContainer.ownerDocument);                                         // 6623\n            range.surroundContents(node);                                                                              // 6624\n            this.selectNode(range, node);                                                                              // 6625\n            return;                                                                                                    // 6626\n          } catch(e) {}                                                                                                // 6627\n        }                                                                                                              // 6628\n                                                                                                                       // 6629\n        range.splitBoundaries();                                                                                       // 6630\n        textNodes = range.getNodes([wysihtml5.TEXT_NODE]);                                                             // 6631\n                                                                                                                       // 6632\n        if (textNodes.length) {                                                                                        // 6633\n          var textNode;                                                                                                // 6634\n                                                                                                                       // 6635\n          for (var i = 0, len = textNodes.length; i < len; ++i) {                                                      // 6636\n            textNode = textNodes[i];                                                                                   // 6637\n            if (!this.getAncestorWithClass(textNode)) {                                                                // 6638\n              this.applyToTextNode(textNode);                                                                          // 6639\n            }                                                                                                          // 6640\n          }                                                                                                            // 6641\n                                                                                                                       // 6642\n          range.setStart(textNodes[0], 0);                                                                             // 6643\n          textNode = textNodes[textNodes.length - 1];                                                                  // 6644\n          range.setEnd(textNode, textNode.length);                                                                     // 6645\n                                                                                                                       // 6646\n          if (this.normalize) {                                                                                        // 6647\n            this.postApply(textNodes, range);                                                                          // 6648\n          }                                                                                                            // 6649\n        }                                                                                                              // 6650\n    },                                                                                                                 // 6651\n                                                                                                                       // 6652\n    undoToRange: function(range) {                                                                                     // 6653\n      var textNodes = range.getNodes([wysihtml5.TEXT_NODE]), textNode, ancestorWithClass;                              // 6654\n      if (textNodes.length) {                                                                                          // 6655\n        range.splitBoundaries();                                                                                       // 6656\n        textNodes = range.getNodes([wysihtml5.TEXT_NODE]);                                                             // 6657\n      } else {                                                                                                         // 6658\n        var doc = range.endContainer.ownerDocument,                                                                    // 6659\n            node = doc.createTextNode(wysihtml5.INVISIBLE_SPACE);                                                      // 6660\n        range.insertNode(node);                                                                                        // 6661\n        range.selectNode(node);                                                                                        // 6662\n        textNodes = [node];                                                                                            // 6663\n      }                                                                                                                // 6664\n                                                                                                                       // 6665\n      for (var i = 0, len = textNodes.length; i < len; ++i) {                                                          // 6666\n        textNode = textNodes[i];                                                                                       // 6667\n        ancestorWithClass = this.getAncestorWithClass(textNode);                                                       // 6668\n        if (ancestorWithClass) {                                                                                       // 6669\n          this.undoToTextNode(textNode, range, ancestorWithClass);                                                     // 6670\n        }                                                                                                              // 6671\n      }                                                                                                                // 6672\n                                                                                                                       // 6673\n      if (len == 1) {                                                                                                  // 6674\n        this.selectNode(range, textNodes[0]);                                                                          // 6675\n      } else {                                                                                                         // 6676\n        range.setStart(textNodes[0], 0);                                                                               // 6677\n        textNode = textNodes[textNodes.length - 1];                                                                    // 6678\n        range.setEnd(textNode, textNode.length);                                                                       // 6679\n                                                                                                                       // 6680\n        if (this.normalize) {                                                                                          // 6681\n          this.postApply(textNodes, range);                                                                            // 6682\n        }                                                                                                              // 6683\n      }                                                                                                                // 6684\n    },                                                                                                                 // 6685\n                                                                                                                       // 6686\n    selectNode: function(range, node) {                                                                                // 6687\n      var isElement       = node.nodeType === wysihtml5.ELEMENT_NODE,                                                  // 6688\n          canHaveHTML     = \"canHaveHTML\" in node ? node.canHaveHTML : true,                                           // 6689\n          content         = isElement ? node.innerHTML : node.data,                                                    // 6690\n          isEmpty         = (content === \"\" || content === wysihtml5.INVISIBLE_SPACE);                                 // 6691\n                                                                                                                       // 6692\n      if (isEmpty && isElement && canHaveHTML) {                                                                       // 6693\n        // Make sure that caret is visible in node by inserting a zero width no breaking space                         // 6694\n        try { node.innerHTML = wysihtml5.INVISIBLE_SPACE; } catch(e) {}                                                // 6695\n      }                                                                                                                // 6696\n      range.selectNodeContents(node);                                                                                  // 6697\n      if (isEmpty && isElement) {                                                                                      // 6698\n        range.collapse(false);                                                                                         // 6699\n      } else if (isEmpty) {                                                                                            // 6700\n        range.setStartAfter(node);                                                                                     // 6701\n        range.setEndAfter(node);                                                                                       // 6702\n      }                                                                                                                // 6703\n    },                                                                                                                 // 6704\n                                                                                                                       // 6705\n    getTextSelectedByRange: function(textNode, range) {                                                                // 6706\n      var textRange = range.cloneRange();                                                                              // 6707\n      textRange.selectNodeContents(textNode);                                                                          // 6708\n                                                                                                                       // 6709\n      var intersectionRange = textRange.intersection(range);                                                           // 6710\n      var text = intersectionRange ? intersectionRange.toString() : \"\";                                                // 6711\n      textRange.detach();                                                                                              // 6712\n                                                                                                                       // 6713\n      return text;                                                                                                     // 6714\n    },                                                                                                                 // 6715\n                                                                                                                       // 6716\n    isAppliedToRange: function(range) {                                                                                // 6717\n      var ancestors = [],                                                                                              // 6718\n          ancestor,                                                                                                    // 6719\n          textNodes = range.getNodes([wysihtml5.TEXT_NODE]);                                                           // 6720\n      if (!textNodes.length) {                                                                                         // 6721\n        ancestor = this.getAncestorWithClass(range.startContainer);                                                    // 6722\n        return ancestor ? [ancestor] : false;                                                                          // 6723\n      }                                                                                                                // 6724\n                                                                                                                       // 6725\n      for (var i = 0, len = textNodes.length, selectedText; i < len; ++i) {                                            // 6726\n        selectedText = this.getTextSelectedByRange(textNodes[i], range);                                               // 6727\n        ancestor = this.getAncestorWithClass(textNodes[i]);                                                            // 6728\n        if (selectedText != \"\" && !ancestor) {                                                                         // 6729\n          return false;                                                                                                // 6730\n        } else {                                                                                                       // 6731\n          ancestors.push(ancestor);                                                                                    // 6732\n        }                                                                                                              // 6733\n      }                                                                                                                // 6734\n      return ancestors;                                                                                                // 6735\n    },                                                                                                                 // 6736\n                                                                                                                       // 6737\n    toggleRange: function(range) {                                                                                     // 6738\n      if (this.isAppliedToRange(range)) {                                                                              // 6739\n        this.undoToRange(range);                                                                                       // 6740\n      } else {                                                                                                         // 6741\n        this.applyToRange(range);                                                                                      // 6742\n      }                                                                                                                // 6743\n    }                                                                                                                  // 6744\n  };                                                                                                                   // 6745\n                                                                                                                       // 6746\n  wysihtml5.selection.HTMLApplier = HTMLApplier;                                                                       // 6747\n                                                                                                                       // 6748\n})(wysihtml5, rangy);/**                                                                                               // 6749\n * Rich Text Query/Formatting Commands                                                                                 // 6750\n *                                                                                                                     // 6751\n * @example                                                                                                            // 6752\n *    var commands = new wysihtml5.Commands(editor);                                                                   // 6753\n */                                                                                                                    // 6754\nwysihtml5.Commands = Base.extend(                                                                                      // 6755\n  /** @scope wysihtml5.Commands.prototype */ {                                                                         // 6756\n  constructor: function(editor) {                                                                                      // 6757\n    this.editor   = editor;                                                                                            // 6758\n    this.composer = editor.composer;                                                                                   // 6759\n    this.doc      = this.composer.doc;                                                                                 // 6760\n  },                                                                                                                   // 6761\n                                                                                                                       // 6762\n  /**                                                                                                                  // 6763\n   * Check whether the browser supports the given command                                                              // 6764\n   *                                                                                                                   // 6765\n   * @param {String} command The command string which to check (eg. \"bold\", \"italic\", \"insertUnorderedList\")           // 6766\n   * @example                                                                                                          // 6767\n   *    commands.supports(\"createLink\");                                                                               // 6768\n   */                                                                                                                  // 6769\n  support: function(command) {                                                                                         // 6770\n    return wysihtml5.browser.supportsCommand(this.doc, command);                                                       // 6771\n  },                                                                                                                   // 6772\n                                                                                                                       // 6773\n  /**                                                                                                                  // 6774\n   * Check whether the browser supports the given command                                                              // 6775\n   *                                                                                                                   // 6776\n   * @param {String} command The command string which to execute (eg. \"bold\", \"italic\", \"insertUnorderedList\")         // 6777\n   * @param {String} [value] The command value parameter, needed for some commands (\"createLink\", \"insertImage\", ...), optional for commands that don't require one (\"bold\", \"underline\", ...)\n   * @example                                                                                                          // 6779\n   *    commands.exec(\"insertImage\", \"http://a1.twimg.com/profile_images/113868655/schrei_twitter_reasonably_small.jpg\");\n   */                                                                                                                  // 6781\n  exec: function(command, value) {                                                                                     // 6782\n    var obj     = wysihtml5.commands[command],                                                                         // 6783\n        args    = wysihtml5.lang.array(arguments).get(),                                                               // 6784\n        method  = obj && obj.exec,                                                                                     // 6785\n        result  = null;                                                                                                // 6786\n                                                                                                                       // 6787\n    this.editor.fire(\"beforecommand:composer\");                                                                        // 6788\n                                                                                                                       // 6789\n    if (method) {                                                                                                      // 6790\n      args.unshift(this.composer);                                                                                     // 6791\n      result = method.apply(obj, args);                                                                                // 6792\n    } else {                                                                                                           // 6793\n      try {                                                                                                            // 6794\n        // try/catch for buggy firefox                                                                                 // 6795\n        result = this.doc.execCommand(command, false, value);                                                          // 6796\n      } catch(e) {}                                                                                                    // 6797\n    }                                                                                                                  // 6798\n                                                                                                                       // 6799\n    this.editor.fire(\"aftercommand:composer\");                                                                         // 6800\n    return result;                                                                                                     // 6801\n  },                                                                                                                   // 6802\n                                                                                                                       // 6803\n  /**                                                                                                                  // 6804\n   * Check whether the current command is active                                                                       // 6805\n   * If the caret is within a bold text, then calling this with command \"bold\" should return true                      // 6806\n   *                                                                                                                   // 6807\n   * @param {String} command The command string which to check (eg. \"bold\", \"italic\", \"insertUnorderedList\")           // 6808\n   * @param {String} [commandValue] The command value parameter (eg. for \"insertImage\" the image src)                  // 6809\n   * @return {Boolean} Whether the command is active                                                                   // 6810\n   * @example                                                                                                          // 6811\n   *    var isCurrentSelectionBold = commands.state(\"bold\");                                                           // 6812\n   */                                                                                                                  // 6813\n  state: function(command, commandValue) {                                                                             // 6814\n    var obj     = wysihtml5.commands[command],                                                                         // 6815\n        args    = wysihtml5.lang.array(arguments).get(),                                                               // 6816\n        method  = obj && obj.state;                                                                                    // 6817\n    if (method) {                                                                                                      // 6818\n      args.unshift(this.composer);                                                                                     // 6819\n      return method.apply(obj, args);                                                                                  // 6820\n    } else {                                                                                                           // 6821\n      try {                                                                                                            // 6822\n        // try/catch for buggy firefox                                                                                 // 6823\n        return this.doc.queryCommandState(command);                                                                    // 6824\n      } catch(e) {                                                                                                     // 6825\n        return false;                                                                                                  // 6826\n      }                                                                                                                // 6827\n    }                                                                                                                  // 6828\n  },                                                                                                                   // 6829\n                                                                                                                       // 6830\n  /**                                                                                                                  // 6831\n   * Get the current command's value                                                                                   // 6832\n   *                                                                                                                   // 6833\n   * @param {String} command The command string which to check (eg. \"formatBlock\")                                     // 6834\n   * @return {String} The command value                                                                                // 6835\n   * @example                                                                                                          // 6836\n   *    var currentBlockElement = commands.value(\"formatBlock\");                                                       // 6837\n   */                                                                                                                  // 6838\n  value: function(command) {                                                                                           // 6839\n    var obj     = wysihtml5.commands[command],                                                                         // 6840\n        method  = obj && obj.value;                                                                                    // 6841\n    if (method) {                                                                                                      // 6842\n      return method.call(obj, this.composer, command);                                                                 // 6843\n    } else {                                                                                                           // 6844\n      try {                                                                                                            // 6845\n        // try/catch for buggy firefox                                                                                 // 6846\n        return this.doc.queryCommandValue(command);                                                                    // 6847\n      } catch(e) {                                                                                                     // 6848\n        return null;                                                                                                   // 6849\n      }                                                                                                                // 6850\n    }                                                                                                                  // 6851\n  }                                                                                                                    // 6852\n});                                                                                                                    // 6853\n(function(wysihtml5) {                                                                                                 // 6854\n  var undef;                                                                                                           // 6855\n                                                                                                                       // 6856\n  wysihtml5.commands.bold = {                                                                                          // 6857\n    exec: function(composer, command) {                                                                                // 6858\n      return wysihtml5.commands.formatInline.exec(composer, command, \"b\");                                             // 6859\n    },                                                                                                                 // 6860\n                                                                                                                       // 6861\n    state: function(composer, command, color) {                                                                        // 6862\n      // element.ownerDocument.queryCommandState(\"bold\") results:                                                      // 6863\n      // firefox: only <b>                                                                                             // 6864\n      // chrome:  <b>, <strong>, <h1>, <h2>, ...                                                                       // 6865\n      // ie:      <b>, <strong>                                                                                        // 6866\n      // opera:   <b>, <strong>                                                                                        // 6867\n      return wysihtml5.commands.formatInline.state(composer, command, \"b\");                                            // 6868\n    },                                                                                                                 // 6869\n                                                                                                                       // 6870\n    value: function() {                                                                                                // 6871\n      return undef;                                                                                                    // 6872\n    }                                                                                                                  // 6873\n  };                                                                                                                   // 6874\n})(wysihtml5);                                                                                                         // 6875\n                                                                                                                       // 6876\n(function(wysihtml5) {                                                                                                 // 6877\n  var undef,                                                                                                           // 6878\n      NODE_NAME = \"A\",                                                                                                 // 6879\n      dom       = wysihtml5.dom;                                                                                       // 6880\n                                                                                                                       // 6881\n  function _removeFormat(composer, anchors) {                                                                          // 6882\n    var length  = anchors.length,                                                                                      // 6883\n        i       = 0,                                                                                                   // 6884\n        anchor,                                                                                                        // 6885\n        codeElement,                                                                                                   // 6886\n        textContent;                                                                                                   // 6887\n    for (; i<length; i++) {                                                                                            // 6888\n      anchor      = anchors[i];                                                                                        // 6889\n      codeElement = dom.getParentElement(anchor, { nodeName: \"code\" });                                                // 6890\n      textContent = dom.getTextContent(anchor);                                                                        // 6891\n                                                                                                                       // 6892\n      // if <a> contains url-like text content, rename it to <code> to prevent re-autolinking                          // 6893\n      // else replace <a> with its childNodes                                                                          // 6894\n      if (textContent.match(dom.autoLink.URL_REG_EXP) && !codeElement) {                                               // 6895\n        // <code> element is used to prevent later auto-linking of the content                                         // 6896\n        codeElement = dom.renameElement(anchor, \"code\");                                                               // 6897\n      } else {                                                                                                         // 6898\n        dom.replaceWithChildNodes(anchor);                                                                             // 6899\n      }                                                                                                                // 6900\n    }                                                                                                                  // 6901\n  }                                                                                                                    // 6902\n                                                                                                                       // 6903\n  function _format(composer, attributes) {                                                                             // 6904\n    var doc             = composer.doc,                                                                                // 6905\n        tempClass       = \"_wysihtml5-temp-\" + (+new Date()),                                                          // 6906\n        tempClassRegExp = /non-matching-class/g,                                                                       // 6907\n        i               = 0,                                                                                           // 6908\n        length,                                                                                                        // 6909\n        anchors,                                                                                                       // 6910\n        anchor,                                                                                                        // 6911\n        hasElementChild,                                                                                               // 6912\n        isEmpty,                                                                                                       // 6913\n        elementToSetCaretAfter,                                                                                        // 6914\n        textContent,                                                                                                   // 6915\n        whiteSpace,                                                                                                    // 6916\n        j;                                                                                                             // 6917\n    wysihtml5.commands.formatInline.exec(composer, undef, NODE_NAME, tempClass, tempClassRegExp);                      // 6918\n    anchors = doc.querySelectorAll(NODE_NAME + \".\" + tempClass);                                                       // 6919\n    length  = anchors.length;                                                                                          // 6920\n    for (; i<length; i++) {                                                                                            // 6921\n      anchor = anchors[i];                                                                                             // 6922\n      anchor.removeAttribute(\"class\");                                                                                 // 6923\n      for (j in attributes) {                                                                                          // 6924\n        anchor.setAttribute(j, attributes[j]);                                                                         // 6925\n      }                                                                                                                // 6926\n    }                                                                                                                  // 6927\n                                                                                                                       // 6928\n    elementToSetCaretAfter = anchor;                                                                                   // 6929\n    if (length === 1) {                                                                                                // 6930\n      textContent = dom.getTextContent(anchor);                                                                        // 6931\n      hasElementChild = !!anchor.querySelector(\"*\");                                                                   // 6932\n      isEmpty = textContent === \"\" || textContent === wysihtml5.INVISIBLE_SPACE;                                       // 6933\n      if (!hasElementChild && isEmpty) {                                                                               // 6934\n        dom.setTextContent(anchor, attributes.text || anchor.href);                                                    // 6935\n        whiteSpace = doc.createTextNode(\" \");                                                                          // 6936\n        composer.selection.setAfter(anchor);                                                                           // 6937\n        composer.selection.insertNode(whiteSpace);                                                                     // 6938\n        elementToSetCaretAfter = whiteSpace;                                                                           // 6939\n      }                                                                                                                // 6940\n    }                                                                                                                  // 6941\n    composer.selection.setAfter(elementToSetCaretAfter);                                                               // 6942\n  }                                                                                                                    // 6943\n                                                                                                                       // 6944\n  wysihtml5.commands.createLink = {                                                                                    // 6945\n    /**                                                                                                                // 6946\n     * TODO: Use HTMLApplier or formatInline here                                                                      // 6947\n     *                                                                                                                 // 6948\n     * Turns selection into a link                                                                                     // 6949\n     * If selection is already a link, it removes the link and wraps it with a <code> element                          // 6950\n     * The <code> element is needed to avoid auto linking                                                              // 6951\n     *                                                                                                                 // 6952\n     * @example                                                                                                        // 6953\n     *    // either ...                                                                                                // 6954\n     *    wysihtml5.commands.createLink.exec(composer, \"createLink\", \"http://www.google.de\");                          // 6955\n     *    // ... or ...                                                                                                // 6956\n     *    wysihtml5.commands.createLink.exec(composer, \"createLink\", { href: \"http://www.google.de\", target: \"_blank\" });\n     */                                                                                                                // 6958\n    exec: function(composer, command, value) {                                                                         // 6959\n      var anchors = this.state(composer, command);                                                                     // 6960\n      if (anchors) {                                                                                                   // 6961\n        // Selection contains links                                                                                    // 6962\n        composer.selection.executeAndRestore(function() {                                                              // 6963\n          _removeFormat(composer, anchors);                                                                            // 6964\n        });                                                                                                            // 6965\n      } else {                                                                                                         // 6966\n        // Create links                                                                                                // 6967\n        value = typeof(value) === \"object\" ? value : { href: value };                                                  // 6968\n        _format(composer, value);                                                                                      // 6969\n      }                                                                                                                // 6970\n    },                                                                                                                 // 6971\n                                                                                                                       // 6972\n    state: function(composer, command) {                                                                               // 6973\n      return wysihtml5.commands.formatInline.state(composer, command, \"A\");                                            // 6974\n    },                                                                                                                 // 6975\n                                                                                                                       // 6976\n    value: function() {                                                                                                // 6977\n      return undef;                                                                                                    // 6978\n    }                                                                                                                  // 6979\n  };                                                                                                                   // 6980\n})(wysihtml5);/**                                                                                                      // 6981\n * document.execCommand(\"fontSize\") will create either inline styles (firefox, chrome) or use font tags                // 6982\n * which we don't want                                                                                                 // 6983\n * Instead we set a css class                                                                                          // 6984\n */                                                                                                                    // 6985\n(function(wysihtml5) {                                                                                                 // 6986\n  var undef,                                                                                                           // 6987\n      REG_EXP = /wysiwyg-font-size-[a-z\\-]+/g;                                                                         // 6988\n                                                                                                                       // 6989\n  wysihtml5.commands.fontSize = {                                                                                      // 6990\n    exec: function(composer, command, size) {                                                                          // 6991\n      return wysihtml5.commands.formatInline.exec(composer, command, \"span\", \"wysiwyg-font-size-\" + size, REG_EXP);    // 6992\n    },                                                                                                                 // 6993\n                                                                                                                       // 6994\n    state: function(composer, command, size) {                                                                         // 6995\n      return wysihtml5.commands.formatInline.state(composer, command, \"span\", \"wysiwyg-font-size-\" + size, REG_EXP);   // 6996\n    },                                                                                                                 // 6997\n                                                                                                                       // 6998\n    value: function() {                                                                                                // 6999\n      return undef;                                                                                                    // 7000\n    }                                                                                                                  // 7001\n  };                                                                                                                   // 7002\n})(wysihtml5);                                                                                                         // 7003\n/**                                                                                                                    // 7004\n * document.execCommand(\"foreColor\") will create either inline styles (firefox, chrome) or use font tags               // 7005\n * which we don't want                                                                                                 // 7006\n * Instead we set a css class                                                                                          // 7007\n */                                                                                                                    // 7008\n(function(wysihtml5) {                                                                                                 // 7009\n  var undef,                                                                                                           // 7010\n      REG_EXP = /wysiwyg-color-[a-z]+/g;                                                                               // 7011\n                                                                                                                       // 7012\n  wysihtml5.commands.foreColor = {                                                                                     // 7013\n    exec: function(composer, command, color) {                                                                         // 7014\n      return wysihtml5.commands.formatInline.exec(composer, command, \"span\", \"wysiwyg-color-\" + color, REG_EXP);       // 7015\n    },                                                                                                                 // 7016\n                                                                                                                       // 7017\n    state: function(composer, command, color) {                                                                        // 7018\n      return wysihtml5.commands.formatInline.state(composer, command, \"span\", \"wysiwyg-color-\" + color, REG_EXP);      // 7019\n    },                                                                                                                 // 7020\n                                                                                                                       // 7021\n    value: function() {                                                                                                // 7022\n      return undef;                                                                                                    // 7023\n    }                                                                                                                  // 7024\n  };                                                                                                                   // 7025\n})(wysihtml5);(function(wysihtml5) {                                                                                   // 7026\n  var undef,                                                                                                           // 7027\n      dom                     = wysihtml5.dom,                                                                         // 7028\n      DEFAULT_NODE_NAME       = \"DIV\",                                                                                 // 7029\n      // Following elements are grouped                                                                                // 7030\n      // when the caret is within a H1 and the H4 is invoked, the H1 should turn into H4                               // 7031\n      // instead of creating a H4 within a H1 which would result in semantically invalid html                          // 7032\n      BLOCK_ELEMENTS_GROUP    = [\"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\", \"P\", \"BLOCKQUOTE\", DEFAULT_NODE_NAME];            // 7033\n                                                                                                                       // 7034\n  /**                                                                                                                  // 7035\n   * Remove similiar classes (based on classRegExp)                                                                    // 7036\n   * and add the desired class name                                                                                    // 7037\n   */                                                                                                                  // 7038\n  function _addClass(element, className, classRegExp) {                                                                // 7039\n    if (element.className) {                                                                                           // 7040\n      _removeClass(element, classRegExp);                                                                              // 7041\n      element.className += \" \" + className;                                                                            // 7042\n    } else {                                                                                                           // 7043\n      element.className = className;                                                                                   // 7044\n    }                                                                                                                  // 7045\n  }                                                                                                                    // 7046\n                                                                                                                       // 7047\n  function _removeClass(element, classRegExp) {                                                                        // 7048\n    element.className = element.className.replace(classRegExp, \"\");                                                    // 7049\n  }                                                                                                                    // 7050\n                                                                                                                       // 7051\n  /**                                                                                                                  // 7052\n   * Check whether given node is a text node and whether it's empty                                                    // 7053\n   */                                                                                                                  // 7054\n  function _isBlankTextNode(node) {                                                                                    // 7055\n    return node.nodeType === wysihtml5.TEXT_NODE && !wysihtml5.lang.string(node.data).trim();                          // 7056\n  }                                                                                                                    // 7057\n                                                                                                                       // 7058\n  /**                                                                                                                  // 7059\n   * Returns previous sibling node that is not a blank text node                                                       // 7060\n   */                                                                                                                  // 7061\n  function _getPreviousSiblingThatIsNotBlank(node) {                                                                   // 7062\n    var previousSibling = node.previousSibling;                                                                        // 7063\n    while (previousSibling && _isBlankTextNode(previousSibling)) {                                                     // 7064\n      previousSibling = previousSibling.previousSibling;                                                               // 7065\n    }                                                                                                                  // 7066\n    return previousSibling;                                                                                            // 7067\n  }                                                                                                                    // 7068\n                                                                                                                       // 7069\n  /**                                                                                                                  // 7070\n   * Returns next sibling node that is not a blank text node                                                           // 7071\n   */                                                                                                                  // 7072\n  function _getNextSiblingThatIsNotBlank(node) {                                                                       // 7073\n    var nextSibling = node.nextSibling;                                                                                // 7074\n    while (nextSibling && _isBlankTextNode(nextSibling)) {                                                             // 7075\n      nextSibling = nextSibling.nextSibling;                                                                           // 7076\n    }                                                                                                                  // 7077\n    return nextSibling;                                                                                                // 7078\n  }                                                                                                                    // 7079\n                                                                                                                       // 7080\n  /**                                                                                                                  // 7081\n   * Adds line breaks before and after the given node if the previous and next siblings                                // 7082\n   * aren't already causing a visual line break (block element or <br>)                                                // 7083\n   */                                                                                                                  // 7084\n  function _addLineBreakBeforeAndAfter(node) {                                                                         // 7085\n    var doc             = node.ownerDocument,                                                                          // 7086\n        nextSibling     = _getNextSiblingThatIsNotBlank(node),                                                         // 7087\n        previousSibling = _getPreviousSiblingThatIsNotBlank(node);                                                     // 7088\n                                                                                                                       // 7089\n    if (nextSibling && !_isLineBreakOrBlockElement(nextSibling)) {                                                     // 7090\n      node.parentNode.insertBefore(doc.createElement(\"br\"), nextSibling);                                              // 7091\n    }                                                                                                                  // 7092\n    if (previousSibling && !_isLineBreakOrBlockElement(previousSibling)) {                                             // 7093\n      node.parentNode.insertBefore(doc.createElement(\"br\"), node);                                                     // 7094\n    }                                                                                                                  // 7095\n  }                                                                                                                    // 7096\n                                                                                                                       // 7097\n  /**                                                                                                                  // 7098\n   * Removes line breaks before and after the given node                                                               // 7099\n   */                                                                                                                  // 7100\n  function _removeLineBreakBeforeAndAfter(node) {                                                                      // 7101\n    var nextSibling     = _getNextSiblingThatIsNotBlank(node),                                                         // 7102\n        previousSibling = _getPreviousSiblingThatIsNotBlank(node);                                                     // 7103\n                                                                                                                       // 7104\n    if (nextSibling && _isLineBreak(nextSibling)) {                                                                    // 7105\n      nextSibling.parentNode.removeChild(nextSibling);                                                                 // 7106\n    }                                                                                                                  // 7107\n    if (previousSibling && _isLineBreak(previousSibling)) {                                                            // 7108\n      previousSibling.parentNode.removeChild(previousSibling);                                                         // 7109\n    }                                                                                                                  // 7110\n  }                                                                                                                    // 7111\n                                                                                                                       // 7112\n  function _removeLastChildIfLineBreak(node) {                                                                         // 7113\n    var lastChild = node.lastChild;                                                                                    // 7114\n    if (lastChild && _isLineBreak(lastChild)) {                                                                        // 7115\n      lastChild.parentNode.removeChild(lastChild);                                                                     // 7116\n    }                                                                                                                  // 7117\n  }                                                                                                                    // 7118\n                                                                                                                       // 7119\n  function _isLineBreak(node) {                                                                                        // 7120\n    return node.nodeName === \"BR\";                                                                                     // 7121\n  }                                                                                                                    // 7122\n                                                                                                                       // 7123\n  /**                                                                                                                  // 7124\n   * Checks whether the elment causes a visual line break                                                              // 7125\n   * (<br> or block elements)                                                                                          // 7126\n   */                                                                                                                  // 7127\n  function _isLineBreakOrBlockElement(element) {                                                                       // 7128\n    if (_isLineBreak(element)) {                                                                                       // 7129\n      return true;                                                                                                     // 7130\n    }                                                                                                                  // 7131\n                                                                                                                       // 7132\n    if (dom.getStyle(\"display\").from(element) === \"block\") {                                                           // 7133\n      return true;                                                                                                     // 7134\n    }                                                                                                                  // 7135\n                                                                                                                       // 7136\n    return false;                                                                                                      // 7137\n  }                                                                                                                    // 7138\n                                                                                                                       // 7139\n  /**                                                                                                                  // 7140\n   * Execute native query command                                                                                      // 7141\n   * and if necessary modify the inserted node's className                                                             // 7142\n   */                                                                                                                  // 7143\n  function _execCommand(doc, command, nodeName, className) {                                                           // 7144\n    if (className) {                                                                                                   // 7145\n      var eventListener = dom.observe(doc, \"DOMNodeInserted\", function(event) {                                        // 7146\n        var target = event.target,                                                                                     // 7147\n            displayStyle;                                                                                              // 7148\n        if (target.nodeType !== wysihtml5.ELEMENT_NODE) {                                                              // 7149\n          return;                                                                                                      // 7150\n        }                                                                                                              // 7151\n        displayStyle = dom.getStyle(\"display\").from(target);                                                           // 7152\n        if (displayStyle.substr(0, 6) !== \"inline\") {                                                                  // 7153\n          // Make sure that only block elements receive the given class                                                // 7154\n          target.className += \" \" + className;                                                                         // 7155\n        }                                                                                                              // 7156\n      });                                                                                                              // 7157\n    }                                                                                                                  // 7158\n    doc.execCommand(command, false, nodeName);                                                                         // 7159\n    if (eventListener) {                                                                                               // 7160\n      eventListener.stop();                                                                                            // 7161\n    }                                                                                                                  // 7162\n  }                                                                                                                    // 7163\n                                                                                                                       // 7164\n  function _selectLineAndWrap(composer, element) {                                                                     // 7165\n    composer.selection.selectLine();                                                                                   // 7166\n    composer.selection.surround(element);                                                                              // 7167\n    _removeLineBreakBeforeAndAfter(element);                                                                           // 7168\n    _removeLastChildIfLineBreak(element);                                                                              // 7169\n    composer.selection.selectNode(element);                                                                            // 7170\n  }                                                                                                                    // 7171\n                                                                                                                       // 7172\n  function _hasClasses(element) {                                                                                      // 7173\n    return !!wysihtml5.lang.string(element.className).trim();                                                          // 7174\n  }                                                                                                                    // 7175\n                                                                                                                       // 7176\n  wysihtml5.commands.formatBlock = {                                                                                   // 7177\n    exec: function(composer, command, nodeName, className, classRegExp) {                                              // 7178\n      var doc          = composer.doc,                                                                                 // 7179\n          blockElement = this.state(composer, command, nodeName, className, classRegExp),                              // 7180\n          selectedNode;                                                                                                // 7181\n                                                                                                                       // 7182\n      nodeName = typeof(nodeName) === \"string\" ? nodeName.toUpperCase() : nodeName;                                    // 7183\n                                                                                                                       // 7184\n      if (blockElement) {                                                                                              // 7185\n        composer.selection.executeAndRestoreSimple(function() {                                                        // 7186\n          if (classRegExp) {                                                                                           // 7187\n            _removeClass(blockElement, classRegExp);                                                                   // 7188\n          }                                                                                                            // 7189\n          var hasClasses = _hasClasses(blockElement);                                                                  // 7190\n          if (!hasClasses && blockElement.nodeName === (nodeName || DEFAULT_NODE_NAME)) {                              // 7191\n            // Insert a line break afterwards and beforewards when there are siblings                                  // 7192\n            // that are not of type line break or block element                                                        // 7193\n            _addLineBreakBeforeAndAfter(blockElement);                                                                 // 7194\n            dom.replaceWithChildNodes(blockElement);                                                                   // 7195\n          } else if (hasClasses) {                                                                                     // 7196\n            // Make sure that styling is kept by renaming the element to <div> and copying over the class name         // 7197\n            dom.renameElement(blockElement, DEFAULT_NODE_NAME);                                                        // 7198\n          }                                                                                                            // 7199\n        });                                                                                                            // 7200\n        return;                                                                                                        // 7201\n      }                                                                                                                // 7202\n                                                                                                                       // 7203\n      // Find similiar block element and rename it (<h2 class=\"foo\"></h2>  =>  <h1 class=\"foo\"></h1>)                  // 7204\n      if (nodeName === null || wysihtml5.lang.array(BLOCK_ELEMENTS_GROUP).contains(nodeName)) {                        // 7205\n        selectedNode = composer.selection.getSelectedNode();                                                           // 7206\n        blockElement = dom.getParentElement(selectedNode, {                                                            // 7207\n          nodeName: BLOCK_ELEMENTS_GROUP                                                                               // 7208\n        });                                                                                                            // 7209\n                                                                                                                       // 7210\n        if (blockElement) {                                                                                            // 7211\n          composer.selection.executeAndRestoreSimple(function() {                                                      // 7212\n            // Rename current block element to new block element and add class                                         // 7213\n            if (nodeName) {                                                                                            // 7214\n              blockElement = dom.renameElement(blockElement, nodeName);                                                // 7215\n            }                                                                                                          // 7216\n            if (className) {                                                                                           // 7217\n              _addClass(blockElement, className, classRegExp);                                                         // 7218\n            }                                                                                                          // 7219\n          });                                                                                                          // 7220\n          return;                                                                                                      // 7221\n        }                                                                                                              // 7222\n      }                                                                                                                // 7223\n                                                                                                                       // 7224\n      if (composer.commands.support(command)) {                                                                        // 7225\n        _execCommand(doc, command, nodeName || DEFAULT_NODE_NAME, className);                                          // 7226\n        return;                                                                                                        // 7227\n      }                                                                                                                // 7228\n                                                                                                                       // 7229\n      blockElement = doc.createElement(nodeName || DEFAULT_NODE_NAME);                                                 // 7230\n      if (className) {                                                                                                 // 7231\n        blockElement.className = className;                                                                            // 7232\n      }                                                                                                                // 7233\n      _selectLineAndWrap(composer, blockElement);                                                                      // 7234\n    },                                                                                                                 // 7235\n                                                                                                                       // 7236\n    state: function(composer, command, nodeName, className, classRegExp) {                                             // 7237\n      nodeName = typeof(nodeName) === \"string\" ? nodeName.toUpperCase() : nodeName;                                    // 7238\n      var selectedNode = composer.selection.getSelectedNode();                                                         // 7239\n      return dom.getParentElement(selectedNode, {                                                                      // 7240\n        nodeName:     nodeName,                                                                                        // 7241\n        className:    className,                                                                                       // 7242\n        classRegExp:  classRegExp                                                                                      // 7243\n      });                                                                                                              // 7244\n    },                                                                                                                 // 7245\n                                                                                                                       // 7246\n    value: function() {                                                                                                // 7247\n      return undef;                                                                                                    // 7248\n    }                                                                                                                  // 7249\n  };                                                                                                                   // 7250\n})(wysihtml5);/**                                                                                                      // 7251\n * formatInline scenarios for tag \"B\" (| = caret, |foo| = selected text)                                               // 7252\n *                                                                                                                     // 7253\n *   #1 caret in unformatted text:                                                                                     // 7254\n *      abcdefg|                                                                                                       // 7255\n *   output:                                                                                                           // 7256\n *      abcdefg<b>|</b>                                                                                                // 7257\n *                                                                                                                     // 7258\n *   #2 unformatted text selected:                                                                                     // 7259\n *      abc|deg|h                                                                                                      // 7260\n *   output:                                                                                                           // 7261\n *      abc<b>|deg|</b>h                                                                                               // 7262\n *                                                                                                                     // 7263\n *   #3 unformatted text selected across boundaries:                                                                   // 7264\n *      ab|c <span>defg|h</span>                                                                                       // 7265\n *   output:                                                                                                           // 7266\n *      ab<b>|c </b><span><b>defg</b>|h</span>                                                                         // 7267\n *                                                                                                                     // 7268\n *   #4 formatted text entirely selected                                                                               // 7269\n *      <b>|abc|</b>                                                                                                   // 7270\n *   output:                                                                                                           // 7271\n *      |abc|                                                                                                          // 7272\n *                                                                                                                     // 7273\n *   #5 formatted text partially selected                                                                              // 7274\n *      <b>ab|c|</b>                                                                                                   // 7275\n *   output:                                                                                                           // 7276\n *      <b>ab</b>|c|                                                                                                   // 7277\n *                                                                                                                     // 7278\n *   #6 formatted text selected across boundaries                                                                      // 7279\n *      <span>ab|c</span> <b>de|fgh</b>                                                                                // 7280\n *   output:                                                                                                           // 7281\n *      <span>ab|c</span> de|<b>fgh</b>                                                                                // 7282\n */                                                                                                                    // 7283\n(function(wysihtml5) {                                                                                                 // 7284\n  var undef,                                                                                                           // 7285\n      // Treat <b> as <strong> and vice versa                                                                          // 7286\n      ALIAS_MAPPING = {                                                                                                // 7287\n        \"strong\": \"b\",                                                                                                 // 7288\n        \"em\":     \"i\",                                                                                                 // 7289\n        \"b\":      \"strong\",                                                                                            // 7290\n        \"i\":      \"em\"                                                                                                 // 7291\n      },                                                                                                               // 7292\n      htmlApplier = {};                                                                                                // 7293\n                                                                                                                       // 7294\n  function _getTagNames(tagName) {                                                                                     // 7295\n    var alias = ALIAS_MAPPING[tagName];                                                                                // 7296\n    return alias ? [tagName.toLowerCase(), alias.toLowerCase()] : [tagName.toLowerCase()];                             // 7297\n  }                                                                                                                    // 7298\n                                                                                                                       // 7299\n  function _getApplier(tagName, className, classRegExp) {                                                              // 7300\n    var identifier = tagName + \":\" + className;                                                                        // 7301\n    if (!htmlApplier[identifier]) {                                                                                    // 7302\n      htmlApplier[identifier] = new wysihtml5.selection.HTMLApplier(_getTagNames(tagName), className, classRegExp, true);\n    }                                                                                                                  // 7304\n    return htmlApplier[identifier];                                                                                    // 7305\n  }                                                                                                                    // 7306\n                                                                                                                       // 7307\n  wysihtml5.commands.formatInline = {                                                                                  // 7308\n    exec: function(composer, command, tagName, className, classRegExp) {                                               // 7309\n      var range = composer.selection.getRange();                                                                       // 7310\n      if (!range) {                                                                                                    // 7311\n        return false;                                                                                                  // 7312\n      }                                                                                                                // 7313\n      _getApplier(tagName, className, classRegExp).toggleRange(range);                                                 // 7314\n      composer.selection.setSelection(range);                                                                          // 7315\n    },                                                                                                                 // 7316\n                                                                                                                       // 7317\n    state: function(composer, command, tagName, className, classRegExp) {                                              // 7318\n      var doc           = composer.doc,                                                                                // 7319\n          aliasTagName  = ALIAS_MAPPING[tagName] || tagName,                                                           // 7320\n          range;                                                                                                       // 7321\n                                                                                                                       // 7322\n      // Check whether the document contains a node with the desired tagName                                           // 7323\n      if (!wysihtml5.dom.hasElementWithTagName(doc, tagName) &&                                                        // 7324\n          !wysihtml5.dom.hasElementWithTagName(doc, aliasTagName)) {                                                   // 7325\n        return false;                                                                                                  // 7326\n      }                                                                                                                // 7327\n                                                                                                                       // 7328\n       // Check whether the document contains a node with the desired className                                        // 7329\n      if (className && !wysihtml5.dom.hasElementWithClassName(doc, className)) {                                       // 7330\n         return false;                                                                                                 // 7331\n      }                                                                                                                // 7332\n                                                                                                                       // 7333\n      range = composer.selection.getRange();                                                                           // 7334\n      if (!range) {                                                                                                    // 7335\n        return false;                                                                                                  // 7336\n      }                                                                                                                // 7337\n                                                                                                                       // 7338\n      return _getApplier(tagName, className, classRegExp).isAppliedToRange(range);                                     // 7339\n    },                                                                                                                 // 7340\n                                                                                                                       // 7341\n    value: function() {                                                                                                // 7342\n      return undef;                                                                                                    // 7343\n    }                                                                                                                  // 7344\n  };                                                                                                                   // 7345\n})(wysihtml5);(function(wysihtml5) {                                                                                   // 7346\n  var undef;                                                                                                           // 7347\n                                                                                                                       // 7348\n  wysihtml5.commands.insertHTML = {                                                                                    // 7349\n    exec: function(composer, command, html) {                                                                          // 7350\n      if (composer.commands.support(command)) {                                                                        // 7351\n        composer.doc.execCommand(command, false, html);                                                                // 7352\n      } else {                                                                                                         // 7353\n        composer.selection.insertHTML(html);                                                                           // 7354\n      }                                                                                                                // 7355\n    },                                                                                                                 // 7356\n                                                                                                                       // 7357\n    state: function() {                                                                                                // 7358\n      return false;                                                                                                    // 7359\n    },                                                                                                                 // 7360\n                                                                                                                       // 7361\n    value: function() {                                                                                                // 7362\n      return undef;                                                                                                    // 7363\n    }                                                                                                                  // 7364\n  };                                                                                                                   // 7365\n})(wysihtml5);(function(wysihtml5) {                                                                                   // 7366\n  var NODE_NAME = \"IMG\";                                                                                               // 7367\n                                                                                                                       // 7368\n  wysihtml5.commands.insertImage = {                                                                                   // 7369\n    /**                                                                                                                // 7370\n     * Inserts an <img>                                                                                                // 7371\n     * If selection is already an image link, it removes it                                                            // 7372\n     *                                                                                                                 // 7373\n     * @example                                                                                                        // 7374\n     *    // either ...                                                                                                // 7375\n     *    wysihtml5.commands.insertImage.exec(composer, \"insertImage\", \"http://www.google.de/logo.jpg\");               // 7376\n     *    // ... or ...                                                                                                // 7377\n     *    wysihtml5.commands.insertImage.exec(composer, \"insertImage\", { src: \"http://www.google.de/logo.jpg\", title: \"foo\" });\n     */                                                                                                                // 7379\n    exec: function(composer, command, value) {                                                                         // 7380\n      value = typeof(value) === \"object\" ? value : { src: value };                                                     // 7381\n                                                                                                                       // 7382\n      var doc     = composer.doc,                                                                                      // 7383\n          image   = this.state(composer),                                                                              // 7384\n          textNode,                                                                                                    // 7385\n          i,                                                                                                           // 7386\n          parent;                                                                                                      // 7387\n                                                                                                                       // 7388\n      if (image) {                                                                                                     // 7389\n        // Image already selected, set the caret before it and delete it                                               // 7390\n        composer.selection.setBefore(image);                                                                           // 7391\n        parent = image.parentNode;                                                                                     // 7392\n        parent.removeChild(image);                                                                                     // 7393\n                                                                                                                       // 7394\n        // and it's parent <a> too if it hasn't got any other relevant child nodes                                     // 7395\n        wysihtml5.dom.removeEmptyTextNodes(parent);                                                                    // 7396\n        if (parent.nodeName === \"A\" && !parent.firstChild) {                                                           // 7397\n          composer.selection.setAfter(parent);                                                                         // 7398\n          parent.parentNode.removeChild(parent);                                                                       // 7399\n        }                                                                                                              // 7400\n                                                                                                                       // 7401\n        // firefox and ie sometimes don't remove the image handles, even though the image got removed                  // 7402\n        wysihtml5.quirks.redraw(composer.element);                                                                     // 7403\n        return;                                                                                                        // 7404\n      }                                                                                                                // 7405\n                                                                                                                       // 7406\n      image = doc.createElement(NODE_NAME);                                                                            // 7407\n                                                                                                                       // 7408\n      for (i in value) {                                                                                               // 7409\n        image[i] = value[i];                                                                                           // 7410\n      }                                                                                                                // 7411\n                                                                                                                       // 7412\n      composer.selection.insertNode(image);                                                                            // 7413\n      if (wysihtml5.browser.hasProblemsSettingCaretAfterImg()) {                                                       // 7414\n        textNode = doc.createTextNode(wysihtml5.INVISIBLE_SPACE);                                                      // 7415\n        composer.selection.insertNode(textNode);                                                                       // 7416\n        composer.selection.setAfter(textNode);                                                                         // 7417\n      } else {                                                                                                         // 7418\n        composer.selection.setAfter(image);                                                                            // 7419\n      }                                                                                                                // 7420\n    },                                                                                                                 // 7421\n                                                                                                                       // 7422\n    state: function(composer) {                                                                                        // 7423\n      var doc = composer.doc,                                                                                          // 7424\n          selectedNode,                                                                                                // 7425\n          text,                                                                                                        // 7426\n          imagesInSelection;                                                                                           // 7427\n                                                                                                                       // 7428\n      if (!wysihtml5.dom.hasElementWithTagName(doc, NODE_NAME)) {                                                      // 7429\n        return false;                                                                                                  // 7430\n      }                                                                                                                // 7431\n                                                                                                                       // 7432\n      selectedNode = composer.selection.getSelectedNode();                                                             // 7433\n      if (!selectedNode) {                                                                                             // 7434\n        return false;                                                                                                  // 7435\n      }                                                                                                                // 7436\n                                                                                                                       // 7437\n      if (selectedNode.nodeName === NODE_NAME) {                                                                       // 7438\n        // This works perfectly in IE                                                                                  // 7439\n        return selectedNode;                                                                                           // 7440\n      }                                                                                                                // 7441\n                                                                                                                       // 7442\n      if (selectedNode.nodeType !== wysihtml5.ELEMENT_NODE) {                                                          // 7443\n        return false;                                                                                                  // 7444\n      }                                                                                                                // 7445\n                                                                                                                       // 7446\n      text = composer.selection.getText();                                                                             // 7447\n      text = wysihtml5.lang.string(text).trim();                                                                       // 7448\n      if (text) {                                                                                                      // 7449\n        return false;                                                                                                  // 7450\n      }                                                                                                                // 7451\n                                                                                                                       // 7452\n      imagesInSelection = composer.selection.getNodes(wysihtml5.ELEMENT_NODE, function(node) {                         // 7453\n        return node.nodeName === \"IMG\";                                                                                // 7454\n      });                                                                                                              // 7455\n                                                                                                                       // 7456\n      if (imagesInSelection.length !== 1) {                                                                            // 7457\n        return false;                                                                                                  // 7458\n      }                                                                                                                // 7459\n                                                                                                                       // 7460\n      return imagesInSelection[0];                                                                                     // 7461\n    },                                                                                                                 // 7462\n                                                                                                                       // 7463\n    value: function(composer) {                                                                                        // 7464\n      var image = this.state(composer);                                                                                // 7465\n      return image && image.src;                                                                                       // 7466\n    }                                                                                                                  // 7467\n  };                                                                                                                   // 7468\n})(wysihtml5);(function(wysihtml5) {                                                                                   // 7469\n  var undef,                                                                                                           // 7470\n      LINE_BREAK = \"<br>\" + (wysihtml5.browser.needsSpaceAfterLineBreak() ? \" \" : \"\");                                 // 7471\n                                                                                                                       // 7472\n  wysihtml5.commands.insertLineBreak = {                                                                               // 7473\n    exec: function(composer, command) {                                                                                // 7474\n      if (composer.commands.support(command)) {                                                                        // 7475\n        composer.doc.execCommand(command, false, null);                                                                // 7476\n        if (!wysihtml5.browser.autoScrollsToCaret()) {                                                                 // 7477\n          composer.selection.scrollIntoView();                                                                         // 7478\n        }                                                                                                              // 7479\n      } else {                                                                                                         // 7480\n        composer.commands.exec(\"insertHTML\", LINE_BREAK);                                                              // 7481\n      }                                                                                                                // 7482\n    },                                                                                                                 // 7483\n                                                                                                                       // 7484\n    state: function() {                                                                                                // 7485\n      return false;                                                                                                    // 7486\n    },                                                                                                                 // 7487\n                                                                                                                       // 7488\n    value: function() {                                                                                                // 7489\n      return undef;                                                                                                    // 7490\n    }                                                                                                                  // 7491\n  };                                                                                                                   // 7492\n})(wysihtml5);(function(wysihtml5) {                                                                                   // 7493\n  var undef;                                                                                                           // 7494\n                                                                                                                       // 7495\n  wysihtml5.commands.insertOrderedList = {                                                                             // 7496\n    exec: function(composer, command) {                                                                                // 7497\n      var doc           = composer.doc,                                                                                // 7498\n          selectedNode  = composer.selection.getSelectedNode(),                                                        // 7499\n          list          = wysihtml5.dom.getParentElement(selectedNode, { nodeName: \"OL\" }),                            // 7500\n          otherList     = wysihtml5.dom.getParentElement(selectedNode, { nodeName: \"UL\" }),                            // 7501\n          tempClassName =  \"_wysihtml5-temp-\" + new Date().getTime(),                                                  // 7502\n          isEmpty,                                                                                                     // 7503\n          tempElement;                                                                                                 // 7504\n                                                                                                                       // 7505\n      if (composer.commands.support(command)) {                                                                        // 7506\n        doc.execCommand(command, false, null);                                                                         // 7507\n        return;                                                                                                        // 7508\n      }                                                                                                                // 7509\n                                                                                                                       // 7510\n      if (list) {                                                                                                      // 7511\n        // Unwrap list                                                                                                 // 7512\n        // <ol><li>foo</li><li>bar</li></ol>                                                                           // 7513\n        // becomes:                                                                                                    // 7514\n        // foo<br>bar<br>                                                                                              // 7515\n        composer.selection.executeAndRestoreSimple(function() {                                                        // 7516\n          wysihtml5.dom.resolveList(list);                                                                             // 7517\n        });                                                                                                            // 7518\n      } else if (otherList) {                                                                                          // 7519\n        // Turn an unordered list into an ordered list                                                                 // 7520\n        // <ul><li>foo</li><li>bar</li></ul>                                                                           // 7521\n        // becomes:                                                                                                    // 7522\n        // <ol><li>foo</li><li>bar</li></ol>                                                                           // 7523\n        composer.selection.executeAndRestoreSimple(function() {                                                        // 7524\n          wysihtml5.dom.renameElement(otherList, \"ol\");                                                                // 7525\n        });                                                                                                            // 7526\n      } else {                                                                                                         // 7527\n        // Create list                                                                                                 // 7528\n        composer.commands.exec(\"formatBlock\", \"div\", tempClassName);                                                   // 7529\n        tempElement = doc.querySelector(\".\" + tempClassName);                                                          // 7530\n        isEmpty = tempElement.innerHTML === \"\" || tempElement.innerHTML === wysihtml5.INVISIBLE_SPACE;                 // 7531\n        composer.selection.executeAndRestoreSimple(function() {                                                        // 7532\n          list = wysihtml5.dom.convertToList(tempElement, \"ol\");                                                       // 7533\n        });                                                                                                            // 7534\n        if (isEmpty) {                                                                                                 // 7535\n          composer.selection.selectNode(list.querySelector(\"li\"));                                                     // 7536\n        }                                                                                                              // 7537\n      }                                                                                                                // 7538\n    },                                                                                                                 // 7539\n                                                                                                                       // 7540\n    state: function(composer) {                                                                                        // 7541\n      var selectedNode = composer.selection.getSelectedNode();                                                         // 7542\n      return wysihtml5.dom.getParentElement(selectedNode, { nodeName: \"OL\" });                                         // 7543\n    },                                                                                                                 // 7544\n                                                                                                                       // 7545\n    value: function() {                                                                                                // 7546\n      return undef;                                                                                                    // 7547\n    }                                                                                                                  // 7548\n  };                                                                                                                   // 7549\n})(wysihtml5);(function(wysihtml5) {                                                                                   // 7550\n  var undef;                                                                                                           // 7551\n                                                                                                                       // 7552\n  wysihtml5.commands.insertUnorderedList = {                                                                           // 7553\n    exec: function(composer, command) {                                                                                // 7554\n      var doc           = composer.doc,                                                                                // 7555\n          selectedNode  = composer.selection.getSelectedNode(),                                                        // 7556\n          list          = wysihtml5.dom.getParentElement(selectedNode, { nodeName: \"UL\" }),                            // 7557\n          otherList     = wysihtml5.dom.getParentElement(selectedNode, { nodeName: \"OL\" }),                            // 7558\n          tempClassName =  \"_wysihtml5-temp-\" + new Date().getTime(),                                                  // 7559\n          isEmpty,                                                                                                     // 7560\n          tempElement;                                                                                                 // 7561\n                                                                                                                       // 7562\n      if (composer.commands.support(command)) {                                                                        // 7563\n        doc.execCommand(command, false, null);                                                                         // 7564\n        return;                                                                                                        // 7565\n      }                                                                                                                // 7566\n                                                                                                                       // 7567\n      if (list) {                                                                                                      // 7568\n        // Unwrap list                                                                                                 // 7569\n        // <ul><li>foo</li><li>bar</li></ul>                                                                           // 7570\n        // becomes:                                                                                                    // 7571\n        // foo<br>bar<br>                                                                                              // 7572\n        composer.selection.executeAndRestoreSimple(function() {                                                        // 7573\n          wysihtml5.dom.resolveList(list);                                                                             // 7574\n        });                                                                                                            // 7575\n      } else if (otherList) {                                                                                          // 7576\n        // Turn an ordered list into an unordered list                                                                 // 7577\n        // <ol><li>foo</li><li>bar</li></ol>                                                                           // 7578\n        // becomes:                                                                                                    // 7579\n        // <ul><li>foo</li><li>bar</li></ul>                                                                           // 7580\n        composer.selection.executeAndRestoreSimple(function() {                                                        // 7581\n          wysihtml5.dom.renameElement(otherList, \"ul\");                                                                // 7582\n        });                                                                                                            // 7583\n      } else {                                                                                                         // 7584\n        // Create list                                                                                                 // 7585\n        composer.commands.exec(\"formatBlock\", \"div\", tempClassName);                                                   // 7586\n        tempElement = doc.querySelector(\".\" + tempClassName);                                                          // 7587\n        isEmpty = tempElement.innerHTML === \"\" || tempElement.innerHTML === wysihtml5.INVISIBLE_SPACE;                 // 7588\n        composer.selection.executeAndRestoreSimple(function() {                                                        // 7589\n          list = wysihtml5.dom.convertToList(tempElement, \"ul\");                                                       // 7590\n        });                                                                                                            // 7591\n        if (isEmpty) {                                                                                                 // 7592\n          composer.selection.selectNode(list.querySelector(\"li\"));                                                     // 7593\n        }                                                                                                              // 7594\n      }                                                                                                                // 7595\n    },                                                                                                                 // 7596\n                                                                                                                       // 7597\n    state: function(composer) {                                                                                        // 7598\n      var selectedNode = composer.selection.getSelectedNode();                                                         // 7599\n      return wysihtml5.dom.getParentElement(selectedNode, { nodeName: \"UL\" });                                         // 7600\n    },                                                                                                                 // 7601\n                                                                                                                       // 7602\n    value: function() {                                                                                                // 7603\n      return undef;                                                                                                    // 7604\n    }                                                                                                                  // 7605\n  };                                                                                                                   // 7606\n})(wysihtml5);(function(wysihtml5) {                                                                                   // 7607\n  var undef;                                                                                                           // 7608\n                                                                                                                       // 7609\n  wysihtml5.commands.italic = {                                                                                        // 7610\n    exec: function(composer, command) {                                                                                // 7611\n      return wysihtml5.commands.formatInline.exec(composer, command, \"i\");                                             // 7612\n    },                                                                                                                 // 7613\n                                                                                                                       // 7614\n    state: function(composer, command, color) {                                                                        // 7615\n      // element.ownerDocument.queryCommandState(\"italic\") results:                                                    // 7616\n      // firefox: only <i>                                                                                             // 7617\n      // chrome:  <i>, <em>, <blockquote>, ...                                                                         // 7618\n      // ie:      <i>, <em>                                                                                            // 7619\n      // opera:   only <i>                                                                                             // 7620\n      return wysihtml5.commands.formatInline.state(composer, command, \"i\");                                            // 7621\n    },                                                                                                                 // 7622\n                                                                                                                       // 7623\n    value: function() {                                                                                                // 7624\n      return undef;                                                                                                    // 7625\n    }                                                                                                                  // 7626\n  };                                                                                                                   // 7627\n})(wysihtml5);(function(wysihtml5) {                                                                                   // 7628\n  var undef,                                                                                                           // 7629\n      CLASS_NAME  = \"wysiwyg-text-align-center\",                                                                       // 7630\n      REG_EXP     = /wysiwyg-text-align-[a-z]+/g;                                                                      // 7631\n                                                                                                                       // 7632\n  wysihtml5.commands.justifyCenter = {                                                                                 // 7633\n    exec: function(composer, command) {                                                                                // 7634\n      return wysihtml5.commands.formatBlock.exec(composer, \"formatBlock\", null, CLASS_NAME, REG_EXP);                  // 7635\n    },                                                                                                                 // 7636\n                                                                                                                       // 7637\n    state: function(composer, command) {                                                                               // 7638\n      return wysihtml5.commands.formatBlock.state(composer, \"formatBlock\", null, CLASS_NAME, REG_EXP);                 // 7639\n    },                                                                                                                 // 7640\n                                                                                                                       // 7641\n    value: function() {                                                                                                // 7642\n      return undef;                                                                                                    // 7643\n    }                                                                                                                  // 7644\n  };                                                                                                                   // 7645\n})(wysihtml5);(function(wysihtml5) {                                                                                   // 7646\n  var undef,                                                                                                           // 7647\n      CLASS_NAME  = \"wysiwyg-text-align-left\",                                                                         // 7648\n      REG_EXP     = /wysiwyg-text-align-[a-z]+/g;                                                                      // 7649\n                                                                                                                       // 7650\n  wysihtml5.commands.justifyLeft = {                                                                                   // 7651\n    exec: function(composer, command) {                                                                                // 7652\n      return wysihtml5.commands.formatBlock.exec(composer, \"formatBlock\", null, CLASS_NAME, REG_EXP);                  // 7653\n    },                                                                                                                 // 7654\n                                                                                                                       // 7655\n    state: function(composer, command) {                                                                               // 7656\n      return wysihtml5.commands.formatBlock.state(composer, \"formatBlock\", null, CLASS_NAME, REG_EXP);                 // 7657\n    },                                                                                                                 // 7658\n                                                                                                                       // 7659\n    value: function() {                                                                                                // 7660\n      return undef;                                                                                                    // 7661\n    }                                                                                                                  // 7662\n  };                                                                                                                   // 7663\n})(wysihtml5);(function(wysihtml5) {                                                                                   // 7664\n  var undef,                                                                                                           // 7665\n      CLASS_NAME  = \"wysiwyg-text-align-right\",                                                                        // 7666\n      REG_EXP     = /wysiwyg-text-align-[a-z]+/g;                                                                      // 7667\n                                                                                                                       // 7668\n  wysihtml5.commands.justifyRight = {                                                                                  // 7669\n    exec: function(composer, command) {                                                                                // 7670\n      return wysihtml5.commands.formatBlock.exec(composer, \"formatBlock\", null, CLASS_NAME, REG_EXP);                  // 7671\n    },                                                                                                                 // 7672\n                                                                                                                       // 7673\n    state: function(composer, command) {                                                                               // 7674\n      return wysihtml5.commands.formatBlock.state(composer, \"formatBlock\", null, CLASS_NAME, REG_EXP);                 // 7675\n    },                                                                                                                 // 7676\n                                                                                                                       // 7677\n    value: function() {                                                                                                // 7678\n      return undef;                                                                                                    // 7679\n    }                                                                                                                  // 7680\n  };                                                                                                                   // 7681\n})(wysihtml5);(function(wysihtml5) {                                                                                   // 7682\n  var undef;                                                                                                           // 7683\n  wysihtml5.commands.underline = {                                                                                     // 7684\n    exec: function(composer, command) {                                                                                // 7685\n      return wysihtml5.commands.formatInline.exec(composer, command, \"u\");                                             // 7686\n    },                                                                                                                 // 7687\n                                                                                                                       // 7688\n    state: function(composer, command) {                                                                               // 7689\n      return wysihtml5.commands.formatInline.state(composer, command, \"u\");                                            // 7690\n    },                                                                                                                 // 7691\n                                                                                                                       // 7692\n    value: function() {                                                                                                // 7693\n      return undef;                                                                                                    // 7694\n    }                                                                                                                  // 7695\n  };                                                                                                                   // 7696\n})(wysihtml5);/**                                                                                                      // 7697\n * Undo Manager for wysihtml5                                                                                          // 7698\n * slightly inspired by http://rniwa.com/editing/undomanager.html#the-undomanager-interface                            // 7699\n */                                                                                                                    // 7700\n(function(wysihtml5) {                                                                                                 // 7701\n  var Z_KEY               = 90,                                                                                        // 7702\n      Y_KEY               = 89,                                                                                        // 7703\n      BACKSPACE_KEY       = 8,                                                                                         // 7704\n      DELETE_KEY          = 46,                                                                                        // 7705\n      MAX_HISTORY_ENTRIES = 40,                                                                                        // 7706\n      UNDO_HTML           = '<span id=\"_wysihtml5-undo\" class=\"_wysihtml5-temp\">' + wysihtml5.INVISIBLE_SPACE + '</span>',\n      REDO_HTML           = '<span id=\"_wysihtml5-redo\" class=\"_wysihtml5-temp\">' + wysihtml5.INVISIBLE_SPACE + '</span>',\n      dom                 = wysihtml5.dom;                                                                             // 7709\n                                                                                                                       // 7710\n  function cleanTempElements(doc) {                                                                                    // 7711\n    var tempElement;                                                                                                   // 7712\n    while (tempElement = doc.querySelector(\"._wysihtml5-temp\")) {                                                      // 7713\n      tempElement.parentNode.removeChild(tempElement);                                                                 // 7714\n    }                                                                                                                  // 7715\n  }                                                                                                                    // 7716\n                                                                                                                       // 7717\n  wysihtml5.UndoManager = wysihtml5.lang.Dispatcher.extend(                                                            // 7718\n    /** @scope wysihtml5.UndoManager.prototype */ {                                                                    // 7719\n    constructor: function(editor) {                                                                                    // 7720\n      this.editor = editor;                                                                                            // 7721\n      this.composer = editor.composer;                                                                                 // 7722\n      this.element = this.composer.element;                                                                            // 7723\n      this.history = [this.composer.getValue()];                                                                       // 7724\n      this.position = 1;                                                                                               // 7725\n                                                                                                                       // 7726\n      // Undo manager currently only supported in browsers who have the insertHTML command (not IE)                    // 7727\n      if (this.composer.commands.support(\"insertHTML\")) {                                                              // 7728\n        this._observe();                                                                                               // 7729\n      }                                                                                                                // 7730\n    },                                                                                                                 // 7731\n                                                                                                                       // 7732\n    _observe: function() {                                                                                             // 7733\n      var that      = this,                                                                                            // 7734\n          doc       = this.composer.sandbox.getDocument(),                                                             // 7735\n          lastKey;                                                                                                     // 7736\n                                                                                                                       // 7737\n      // Catch CTRL+Z and CTRL+Y                                                                                       // 7738\n      dom.observe(this.element, \"keydown\", function(event) {                                                           // 7739\n        if (event.altKey || (!event.ctrlKey && !event.metaKey)) {                                                      // 7740\n          return;                                                                                                      // 7741\n        }                                                                                                              // 7742\n                                                                                                                       // 7743\n        var keyCode = event.keyCode,                                                                                   // 7744\n            isUndo = keyCode === Z_KEY && !event.shiftKey,                                                             // 7745\n            isRedo = (keyCode === Z_KEY && event.shiftKey) || (keyCode === Y_KEY);                                     // 7746\n                                                                                                                       // 7747\n        if (isUndo) {                                                                                                  // 7748\n          that.undo();                                                                                                 // 7749\n          event.preventDefault();                                                                                      // 7750\n        } else if (isRedo) {                                                                                           // 7751\n          that.redo();                                                                                                 // 7752\n          event.preventDefault();                                                                                      // 7753\n        }                                                                                                              // 7754\n      });                                                                                                              // 7755\n                                                                                                                       // 7756\n      // Catch delete and backspace                                                                                    // 7757\n      dom.observe(this.element, \"keydown\", function(event) {                                                           // 7758\n        var keyCode = event.keyCode;                                                                                   // 7759\n        if (keyCode === lastKey) {                                                                                     // 7760\n          return;                                                                                                      // 7761\n        }                                                                                                              // 7762\n                                                                                                                       // 7763\n        lastKey = keyCode;                                                                                             // 7764\n                                                                                                                       // 7765\n        if (keyCode === BACKSPACE_KEY || keyCode === DELETE_KEY) {                                                     // 7766\n          that.transact();                                                                                             // 7767\n        }                                                                                                              // 7768\n      });                                                                                                              // 7769\n                                                                                                                       // 7770\n      // Now this is very hacky:                                                                                       // 7771\n      // These days browsers don't offer a undo/redo event which we could hook into                                    // 7772\n      // to be notified when the user hits undo/redo in the contextmenu.                                               // 7773\n      // Therefore we simply insert two elements as soon as the contextmenu gets opened.                               // 7774\n      // The last element being inserted will be immediately be removed again by a exexCommand(\"undo\")                 // 7775\n      //  => When the second element appears in the dom tree then we know the user clicked \"redo\" in the context menu  // 7776\n      //  => When the first element disappears from the dom tree then we know the user clicked \"undo\" in the context menu\n      if (wysihtml5.browser.hasUndoInContextMenu()) {                                                                  // 7778\n        var interval, observed, cleanUp = function() {                                                                 // 7779\n          cleanTempElements(doc);                                                                                      // 7780\n          clearInterval(interval);                                                                                     // 7781\n        };                                                                                                             // 7782\n                                                                                                                       // 7783\n        dom.observe(this.element, \"contextmenu\", function() {                                                          // 7784\n          cleanUp();                                                                                                   // 7785\n          that.composer.selection.executeAndRestoreSimple(function() {                                                 // 7786\n            if (that.element.lastChild) {                                                                              // 7787\n              that.composer.selection.setAfter(that.element.lastChild);                                                // 7788\n            }                                                                                                          // 7789\n                                                                                                                       // 7790\n            // enable undo button in context menu                                                                      // 7791\n            doc.execCommand(\"insertHTML\", false, UNDO_HTML);                                                           // 7792\n            // enable redo button in context menu                                                                      // 7793\n            doc.execCommand(\"insertHTML\", false, REDO_HTML);                                                           // 7794\n            doc.execCommand(\"undo\", false, null);                                                                      // 7795\n          });                                                                                                          // 7796\n                                                                                                                       // 7797\n          interval = setInterval(function() {                                                                          // 7798\n            if (doc.getElementById(\"_wysihtml5-redo\")) {                                                               // 7799\n              cleanUp();                                                                                               // 7800\n              that.redo();                                                                                             // 7801\n            } else if (!doc.getElementById(\"_wysihtml5-undo\")) {                                                       // 7802\n              cleanUp();                                                                                               // 7803\n              that.undo();                                                                                             // 7804\n            }                                                                                                          // 7805\n          }, 400);                                                                                                     // 7806\n                                                                                                                       // 7807\n          if (!observed) {                                                                                             // 7808\n            observed = true;                                                                                           // 7809\n            dom.observe(document, \"mousedown\", cleanUp);                                                               // 7810\n            dom.observe(doc, [\"mousedown\", \"paste\", \"cut\", \"copy\"], cleanUp);                                          // 7811\n          }                                                                                                            // 7812\n        });                                                                                                            // 7813\n      }                                                                                                                // 7814\n                                                                                                                       // 7815\n      this.editor                                                                                                      // 7816\n        .observe(\"newword:composer\", function() {                                                                      // 7817\n          that.transact();                                                                                             // 7818\n        })                                                                                                             // 7819\n                                                                                                                       // 7820\n        .observe(\"beforecommand:composer\", function() {                                                                // 7821\n          that.transact();                                                                                             // 7822\n        });                                                                                                            // 7823\n    },                                                                                                                 // 7824\n                                                                                                                       // 7825\n    transact: function() {                                                                                             // 7826\n      var previousHtml  = this.history[this.position - 1],                                                             // 7827\n          currentHtml   = this.composer.getValue();                                                                    // 7828\n                                                                                                                       // 7829\n      if (currentHtml == previousHtml) {                                                                               // 7830\n        return;                                                                                                        // 7831\n      }                                                                                                                // 7832\n                                                                                                                       // 7833\n      var length = this.history.length = this.position;                                                                // 7834\n      if (length > MAX_HISTORY_ENTRIES) {                                                                              // 7835\n        this.history.shift();                                                                                          // 7836\n        this.position--;                                                                                               // 7837\n      }                                                                                                                // 7838\n                                                                                                                       // 7839\n      this.position++;                                                                                                 // 7840\n      this.history.push(currentHtml);                                                                                  // 7841\n    },                                                                                                                 // 7842\n                                                                                                                       // 7843\n    undo: function() {                                                                                                 // 7844\n      this.transact();                                                                                                 // 7845\n                                                                                                                       // 7846\n      if (this.position <= 1) {                                                                                        // 7847\n        return;                                                                                                        // 7848\n      }                                                                                                                // 7849\n                                                                                                                       // 7850\n      this.set(this.history[--this.position - 1]);                                                                     // 7851\n      this.editor.fire(\"undo:composer\");                                                                               // 7852\n    },                                                                                                                 // 7853\n                                                                                                                       // 7854\n    redo: function() {                                                                                                 // 7855\n      if (this.position >= this.history.length) {                                                                      // 7856\n        return;                                                                                                        // 7857\n      }                                                                                                                // 7858\n                                                                                                                       // 7859\n      this.set(this.history[++this.position - 1]);                                                                     // 7860\n      this.editor.fire(\"redo:composer\");                                                                               // 7861\n    },                                                                                                                 // 7862\n                                                                                                                       // 7863\n    set: function(html) {                                                                                              // 7864\n      this.composer.setValue(html);                                                                                    // 7865\n      this.editor.focus(true);                                                                                         // 7866\n    }                                                                                                                  // 7867\n  });                                                                                                                  // 7868\n})(wysihtml5);                                                                                                         // 7869\n/**                                                                                                                    // 7870\n * TODO: the following methods still need unit test coverage                                                           // 7871\n */                                                                                                                    // 7872\nwysihtml5.views.View = Base.extend(                                                                                    // 7873\n  /** @scope wysihtml5.views.View.prototype */ {                                                                       // 7874\n  constructor: function(parent, textareaElement, config) {                                                             // 7875\n    this.parent   = parent;                                                                                            // 7876\n    this.element  = textareaElement;                                                                                   // 7877\n    this.config   = config;                                                                                            // 7878\n                                                                                                                       // 7879\n    this._observeViewChange();                                                                                         // 7880\n  },                                                                                                                   // 7881\n                                                                                                                       // 7882\n  _observeViewChange: function() {                                                                                     // 7883\n    var that = this;                                                                                                   // 7884\n    this.parent.observe(\"beforeload\", function() {                                                                     // 7885\n      that.parent.observe(\"change_view\", function(view) {                                                              // 7886\n        if (view === that.name) {                                                                                      // 7887\n          that.parent.currentView = that;                                                                              // 7888\n          that.show();                                                                                                 // 7889\n          // Using tiny delay here to make sure that the placeholder is set before focusing                            // 7890\n          setTimeout(function() { that.focus(); }, 0);                                                                 // 7891\n        } else {                                                                                                       // 7892\n          that.hide();                                                                                                 // 7893\n        }                                                                                                              // 7894\n      });                                                                                                              // 7895\n    });                                                                                                                // 7896\n  },                                                                                                                   // 7897\n                                                                                                                       // 7898\n  focus: function() {                                                                                                  // 7899\n    if (this.element.ownerDocument.querySelector(\":focus\") === this.element) {                                         // 7900\n      return;                                                                                                          // 7901\n    }                                                                                                                  // 7902\n                                                                                                                       // 7903\n    try { this.element.focus(); } catch(e) {}                                                                          // 7904\n  },                                                                                                                   // 7905\n                                                                                                                       // 7906\n  hide: function() {                                                                                                   // 7907\n    this.element.style.display = \"none\";                                                                               // 7908\n  },                                                                                                                   // 7909\n                                                                                                                       // 7910\n  show: function() {                                                                                                   // 7911\n    this.element.style.display = \"\";                                                                                   // 7912\n  },                                                                                                                   // 7913\n                                                                                                                       // 7914\n  disable: function() {                                                                                                // 7915\n    this.element.setAttribute(\"disabled\", \"disabled\");                                                                 // 7916\n  },                                                                                                                   // 7917\n                                                                                                                       // 7918\n  enable: function() {                                                                                                 // 7919\n    this.element.removeAttribute(\"disabled\");                                                                          // 7920\n  }                                                                                                                    // 7921\n});(function(wysihtml5) {                                                                                              // 7922\n  var dom       = wysihtml5.dom,                                                                                       // 7923\n      browser   = wysihtml5.browser;                                                                                   // 7924\n                                                                                                                       // 7925\n  wysihtml5.views.Composer = wysihtml5.views.View.extend(                                                              // 7926\n    /** @scope wysihtml5.views.Composer.prototype */ {                                                                 // 7927\n    name: \"composer\",                                                                                                  // 7928\n                                                                                                                       // 7929\n    // Needed for firefox in order to display a proper caret in an empty contentEditable                               // 7930\n    CARET_HACK: \"<br>\",                                                                                                // 7931\n                                                                                                                       // 7932\n    constructor: function(parent, textareaElement, config) {                                                           // 7933\n      this.base(parent, textareaElement, config);                                                                      // 7934\n      this.textarea = this.parent.textarea;                                                                            // 7935\n      this._initSandbox();                                                                                             // 7936\n    },                                                                                                                 // 7937\n                                                                                                                       // 7938\n    clear: function() {                                                                                                // 7939\n      this.element.innerHTML = browser.displaysCaretInEmptyContentEditableCorrectly() ? \"\" : this.CARET_HACK;          // 7940\n    },                                                                                                                 // 7941\n                                                                                                                       // 7942\n    getValue: function(parse) {                                                                                        // 7943\n      var value = this.isEmpty() ? \"\" : wysihtml5.quirks.getCorrectInnerHTML(this.element);                            // 7944\n                                                                                                                       // 7945\n      if (parse) {                                                                                                     // 7946\n        value = this.parent.parse(value);                                                                              // 7947\n      }                                                                                                                // 7948\n                                                                                                                       // 7949\n      // Replace all \"zero width no breaking space\" chars                                                              // 7950\n      // which are used as hacks to enable some functionalities                                                        // 7951\n      // Also remove all CARET hacks that somehow got left                                                             // 7952\n      value = wysihtml5.lang.string(value).replace(wysihtml5.INVISIBLE_SPACE).by(\"\");                                  // 7953\n                                                                                                                       // 7954\n      return value;                                                                                                    // 7955\n    },                                                                                                                 // 7956\n                                                                                                                       // 7957\n    setValue: function(html, parse) {                                                                                  // 7958\n      if (parse) {                                                                                                     // 7959\n        html = this.parent.parse(html);                                                                                // 7960\n      }                                                                                                                // 7961\n      this.element.innerHTML = html;                                                                                   // 7962\n    },                                                                                                                 // 7963\n                                                                                                                       // 7964\n    show: function() {                                                                                                 // 7965\n      this.iframe.style.display = this._displayStyle || \"\";                                                            // 7966\n                                                                                                                       // 7967\n      // Firefox needs this, otherwise contentEditable becomes uneditable                                              // 7968\n      this.disable();                                                                                                  // 7969\n      this.enable();                                                                                                   // 7970\n    },                                                                                                                 // 7971\n                                                                                                                       // 7972\n    hide: function() {                                                                                                 // 7973\n      this._displayStyle = dom.getStyle(\"display\").from(this.iframe);                                                  // 7974\n      if (this._displayStyle === \"none\") {                                                                             // 7975\n        this._displayStyle = null;                                                                                     // 7976\n      }                                                                                                                // 7977\n      this.iframe.style.display = \"none\";                                                                              // 7978\n    },                                                                                                                 // 7979\n                                                                                                                       // 7980\n    disable: function() {                                                                                              // 7981\n      this.element.removeAttribute(\"contentEditable\");                                                                 // 7982\n      this.base();                                                                                                     // 7983\n    },                                                                                                                 // 7984\n                                                                                                                       // 7985\n    enable: function() {                                                                                               // 7986\n      this.element.setAttribute(\"contentEditable\", \"true\");                                                            // 7987\n      this.base();                                                                                                     // 7988\n    },                                                                                                                 // 7989\n                                                                                                                       // 7990\n    focus: function(setToEnd) {                                                                                        // 7991\n      // IE 8 fires the focus event after .focus()                                                                     // 7992\n      // This is needed by our simulate_placeholder.js to work                                                         // 7993\n      // therefore we clear it ourselves this time                                                                     // 7994\n      if (wysihtml5.browser.doesAsyncFocus() && this.hasPlaceholderSet()) {                                            // 7995\n        this.clear();                                                                                                  // 7996\n      }                                                                                                                // 7997\n                                                                                                                       // 7998\n      this.base();                                                                                                     // 7999\n                                                                                                                       // 8000\n      var lastChild = this.element.lastChild;                                                                          // 8001\n      if (setToEnd && lastChild) {                                                                                     // 8002\n        if (lastChild.nodeName === \"BR\") {                                                                             // 8003\n          this.selection.setBefore(this.element.lastChild);                                                            // 8004\n        } else {                                                                                                       // 8005\n          this.selection.setAfter(this.element.lastChild);                                                             // 8006\n        }                                                                                                              // 8007\n      }                                                                                                                // 8008\n    },                                                                                                                 // 8009\n                                                                                                                       // 8010\n    getTextContent: function() {                                                                                       // 8011\n      return dom.getTextContent(this.element);                                                                         // 8012\n    },                                                                                                                 // 8013\n                                                                                                                       // 8014\n    hasPlaceholderSet: function() {                                                                                    // 8015\n      return this.getTextContent() == this.textarea.element.getAttribute(\"placeholder\");                               // 8016\n    },                                                                                                                 // 8017\n                                                                                                                       // 8018\n    isEmpty: function() {                                                                                              // 8019\n      var innerHTML               = this.element.innerHTML,                                                            // 8020\n          elementsWithVisualValue = \"blockquote, ul, ol, img, embed, object, table, iframe, svg, video, audio, button, input, select, textarea\";\n      return innerHTML === \"\"              ||                                                                          // 8022\n             innerHTML === this.CARET_HACK ||                                                                          // 8023\n             this.hasPlaceholderSet()      ||                                                                          // 8024\n             (this.getTextContent() === \"\" && !this.element.querySelector(elementsWithVisualValue));                   // 8025\n    },                                                                                                                 // 8026\n                                                                                                                       // 8027\n    _initSandbox: function() {                                                                                         // 8028\n      var that = this;                                                                                                 // 8029\n                                                                                                                       // 8030\n      this.sandbox = new dom.Sandbox(function() {                                                                      // 8031\n        that._create();                                                                                                // 8032\n      }, {                                                                                                             // 8033\n        stylesheets:  this.config.stylesheets                                                                          // 8034\n      });                                                                                                              // 8035\n      this.iframe  = this.sandbox.getIframe();                                                                         // 8036\n                                                                                                                       // 8037\n      // Create hidden field which tells the server after submit, that the user used an wysiwyg editor                 // 8038\n      var hiddenField = document.createElement(\"input\");                                                               // 8039\n      hiddenField.type   = \"hidden\";                                                                                   // 8040\n      hiddenField.name   = \"_wysihtml5_mode\";                                                                          // 8041\n      hiddenField.value  = 1;                                                                                          // 8042\n                                                                                                                       // 8043\n      // Store reference to current wysihtml5 instance on the textarea element                                         // 8044\n      var textareaElement = this.textarea.element;                                                                     // 8045\n      dom.insert(this.iframe).after(textareaElement);                                                                  // 8046\n      dom.insert(hiddenField).after(textareaElement);                                                                  // 8047\n    },                                                                                                                 // 8048\n                                                                                                                       // 8049\n    _create: function() {                                                                                              // 8050\n      var that = this;                                                                                                 // 8051\n                                                                                                                       // 8052\n      this.doc                = this.sandbox.getDocument();                                                            // 8053\n      this.element            = this.doc.body;                                                                         // 8054\n      this.textarea           = this.parent.textarea;                                                                  // 8055\n      this.element.innerHTML  = this.textarea.getValue(true);                                                          // 8056\n      this.enable();                                                                                                   // 8057\n                                                                                                                       // 8058\n      // Make sure our selection handler is ready                                                                      // 8059\n      this.selection = new wysihtml5.Selection(this.parent);                                                           // 8060\n                                                                                                                       // 8061\n      // Make sure commands dispatcher is ready                                                                        // 8062\n      this.commands  = new wysihtml5.Commands(this.parent);                                                            // 8063\n                                                                                                                       // 8064\n      dom.copyAttributes([                                                                                             // 8065\n        \"className\", \"spellcheck\", \"title\", \"lang\", \"dir\", \"accessKey\"                                                 // 8066\n      ]).from(this.textarea.element).to(this.element);                                                                 // 8067\n                                                                                                                       // 8068\n      dom.addClass(this.element, this.config.composerClassName);                                                       // 8069\n                                                                                                                       // 8070\n      // Make the editor look like the original textarea, by syncing styles                                            // 8071\n      if (this.config.style) {                                                                                         // 8072\n        this.style();                                                                                                  // 8073\n      }                                                                                                                // 8074\n                                                                                                                       // 8075\n      this.observe();                                                                                                  // 8076\n                                                                                                                       // 8077\n      var name = this.config.name;                                                                                     // 8078\n      if (name) {                                                                                                      // 8079\n        dom.addClass(this.element, name);                                                                              // 8080\n        dom.addClass(this.iframe, name);                                                                               // 8081\n      }                                                                                                                // 8082\n                                                                                                                       // 8083\n      // Simulate html5 placeholder attribute on contentEditable element                                               // 8084\n      var placeholderText = typeof(this.config.placeholder) === \"string\"                                               // 8085\n        ? this.config.placeholder                                                                                      // 8086\n        : this.textarea.element.getAttribute(\"placeholder\");                                                           // 8087\n      if (placeholderText) {                                                                                           // 8088\n        dom.simulatePlaceholder(this.parent, this, placeholderText);                                                   // 8089\n      }                                                                                                                // 8090\n                                                                                                                       // 8091\n      // Make sure that the browser avoids using inline styles whenever possible                                       // 8092\n      this.commands.exec(\"styleWithCSS\", false);                                                                       // 8093\n                                                                                                                       // 8094\n      this._initAutoLinking();                                                                                         // 8095\n      this._initObjectResizing();                                                                                      // 8096\n      this._initUndoManager();                                                                                         // 8097\n                                                                                                                       // 8098\n      // Simulate html5 autofocus on contentEditable element                                                           // 8099\n      if (this.textarea.element.hasAttribute(\"autofocus\") || document.querySelector(\":focus\") == this.textarea.element) {\n        setTimeout(function() { that.focus(); }, 100);                                                                 // 8101\n      }                                                                                                                // 8102\n                                                                                                                       // 8103\n      wysihtml5.quirks.insertLineBreakOnReturn(this);                                                                  // 8104\n                                                                                                                       // 8105\n      // IE sometimes leaves a single paragraph, which can't be removed by the user                                    // 8106\n      if (!browser.clearsContentEditableCorrectly()) {                                                                 // 8107\n        wysihtml5.quirks.ensureProperClearing(this);                                                                   // 8108\n      }                                                                                                                // 8109\n                                                                                                                       // 8110\n      if (!browser.clearsListsInContentEditableCorrectly()) {                                                          // 8111\n        wysihtml5.quirks.ensureProperClearingOfLists(this);                                                            // 8112\n      }                                                                                                                // 8113\n                                                                                                                       // 8114\n      // Set up a sync that makes sure that textarea and editor have the same content                                  // 8115\n      if (this.initSync && this.config.sync) {                                                                         // 8116\n        this.initSync();                                                                                               // 8117\n      }                                                                                                                // 8118\n                                                                                                                       // 8119\n      // Okay hide the textarea, we are ready to go                                                                    // 8120\n      this.textarea.hide();                                                                                            // 8121\n                                                                                                                       // 8122\n      // Fire global (before-)load event                                                                               // 8123\n      this.parent.fire(\"beforeload\").fire(\"load\");                                                                     // 8124\n    },                                                                                                                 // 8125\n                                                                                                                       // 8126\n    _initAutoLinking: function() {                                                                                     // 8127\n      var that                           = this,                                                                       // 8128\n          supportsDisablingOfAutoLinking = browser.canDisableAutoLinking(),                                            // 8129\n          supportsAutoLinking            = browser.doesAutoLinkingInContentEditable();                                 // 8130\n      if (supportsDisablingOfAutoLinking) {                                                                            // 8131\n        this.commands.exec(\"autoUrlDetect\", false);                                                                    // 8132\n      }                                                                                                                // 8133\n                                                                                                                       // 8134\n      if (!this.config.autoLink) {                                                                                     // 8135\n        return;                                                                                                        // 8136\n      }                                                                                                                // 8137\n                                                                                                                       // 8138\n      // Only do the auto linking by ourselves when the browser doesn't support auto linking                           // 8139\n      // OR when he supports auto linking but we were able to turn it off (IE9+)                                       // 8140\n      if (!supportsAutoLinking || (supportsAutoLinking && supportsDisablingOfAutoLinking)) {                           // 8141\n        this.parent.observe(\"newword:composer\", function() {                                                           // 8142\n          that.selection.executeAndRestore(function(startContainer, endContainer) {                                    // 8143\n            dom.autoLink(endContainer.parentNode);                                                                     // 8144\n          });                                                                                                          // 8145\n        });                                                                                                            // 8146\n      }                                                                                                                // 8147\n                                                                                                                       // 8148\n      // Assuming we have the following:                                                                               // 8149\n      //  <a href=\"http://www.google.de\">http://www.google.de</a>                                                      // 8150\n      // If a user now changes the url in the innerHTML we want to make sure that                                      // 8151\n      // it's synchronized with the href attribute (as long as the innerHTML is still a url)                           // 8152\n      var // Use a live NodeList to check whether there are any links in the document                                  // 8153\n          links           = this.sandbox.getDocument().getElementsByTagName(\"a\"),                                      // 8154\n          // The autoLink helper method reveals a reg exp to detect correct urls                                       // 8155\n          urlRegExp       = dom.autoLink.URL_REG_EXP,                                                                  // 8156\n          getTextContent  = function(element) {                                                                        // 8157\n            var textContent = wysihtml5.lang.string(dom.getTextContent(element)).trim();                               // 8158\n            if (textContent.substr(0, 4) === \"www.\") {                                                                 // 8159\n              textContent = \"http://\" + textContent;                                                                   // 8160\n            }                                                                                                          // 8161\n            return textContent;                                                                                        // 8162\n          };                                                                                                           // 8163\n                                                                                                                       // 8164\n      dom.observe(this.element, \"keydown\", function(event) {                                                           // 8165\n        if (!links.length) {                                                                                           // 8166\n          return;                                                                                                      // 8167\n        }                                                                                                              // 8168\n                                                                                                                       // 8169\n        var selectedNode = that.selection.getSelectedNode(event.target.ownerDocument),                                 // 8170\n            link         = dom.getParentElement(selectedNode, { nodeName: \"A\" }, 4),                                   // 8171\n            textContent;                                                                                               // 8172\n                                                                                                                       // 8173\n        if (!link) {                                                                                                   // 8174\n          return;                                                                                                      // 8175\n        }                                                                                                              // 8176\n                                                                                                                       // 8177\n        textContent = getTextContent(link);                                                                            // 8178\n        // keydown is fired before the actual content is changed                                                       // 8179\n        // therefore we set a timeout to change the href                                                               // 8180\n        setTimeout(function() {                                                                                        // 8181\n          var newTextContent = getTextContent(link);                                                                   // 8182\n          if (newTextContent === textContent) {                                                                        // 8183\n            return;                                                                                                    // 8184\n          }                                                                                                            // 8185\n                                                                                                                       // 8186\n          // Only set href when new href looks like a valid url                                                        // 8187\n          if (newTextContent.match(urlRegExp)) {                                                                       // 8188\n            link.setAttribute(\"href\", newTextContent);                                                                 // 8189\n          }                                                                                                            // 8190\n        }, 0);                                                                                                         // 8191\n      });                                                                                                              // 8192\n    },                                                                                                                 // 8193\n                                                                                                                       // 8194\n    _initObjectResizing: function() {                                                                                  // 8195\n      var properties        = [\"width\", \"height\"],                                                                     // 8196\n          propertiesLength  = properties.length,                                                                       // 8197\n          element           = this.element;                                                                            // 8198\n                                                                                                                       // 8199\n      this.commands.exec(\"enableObjectResizing\", this.config.allowObjectResizing);                                     // 8200\n                                                                                                                       // 8201\n      if (this.config.allowObjectResizing) {                                                                           // 8202\n         // IE sets inline styles after resizing objects                                                               // 8203\n         // The following lines make sure that the width/height css properties                                         // 8204\n         // are copied over to the width/height attributes                                                             // 8205\n        if (browser.supportsEvent(\"resizeend\")) {                                                                      // 8206\n          dom.observe(element, \"resizeend\", function(event) {                                                          // 8207\n            var target = event.target || event.srcElement,                                                             // 8208\n                style  = target.style,                                                                                 // 8209\n                i      = 0,                                                                                            // 8210\n                property;                                                                                              // 8211\n            for(; i<propertiesLength; i++) {                                                                           // 8212\n              property = properties[i];                                                                                // 8213\n              if (style[property]) {                                                                                   // 8214\n                target.setAttribute(property, parseInt(style[property], 10));                                          // 8215\n                style[property] = \"\";                                                                                  // 8216\n              }                                                                                                        // 8217\n            }                                                                                                          // 8218\n            // After resizing IE sometimes forgets to remove the old resize handles                                    // 8219\n            wysihtml5.quirks.redraw(element);                                                                          // 8220\n          });                                                                                                          // 8221\n        }                                                                                                              // 8222\n      } else {                                                                                                         // 8223\n        if (browser.supportsEvent(\"resizestart\")) {                                                                    // 8224\n          dom.observe(element, \"resizestart\", function(event) { event.preventDefault(); });                            // 8225\n        }                                                                                                              // 8226\n      }                                                                                                                // 8227\n    },                                                                                                                 // 8228\n                                                                                                                       // 8229\n    _initUndoManager: function() {                                                                                     // 8230\n      new wysihtml5.UndoManager(this.parent);                                                                          // 8231\n    }                                                                                                                  // 8232\n  });                                                                                                                  // 8233\n})(wysihtml5);(function(wysihtml5) {                                                                                   // 8234\n  var dom             = wysihtml5.dom,                                                                                 // 8235\n      doc             = document,                                                                                      // 8236\n      win             = window,                                                                                        // 8237\n      HOST_TEMPLATE   = doc.createElement(\"div\"),                                                                      // 8238\n      /**                                                                                                              // 8239\n       * Styles to copy from textarea to the composer element                                                          // 8240\n       */                                                                                                              // 8241\n      TEXT_FORMATTING = [                                                                                              // 8242\n        \"background-color\",                                                                                            // 8243\n        \"color\", \"cursor\",                                                                                             // 8244\n        \"font-family\", \"font-size\", \"font-style\", \"font-variant\", \"font-weight\",                                       // 8245\n        \"line-height\", \"letter-spacing\",                                                                               // 8246\n        \"text-align\", \"text-decoration\", \"text-indent\", \"text-rendering\",                                              // 8247\n        \"word-break\", \"word-wrap\", \"word-spacing\"                                                                      // 8248\n      ],                                                                                                               // 8249\n      /**                                                                                                              // 8250\n       * Styles to copy from textarea to the iframe                                                                    // 8251\n       */                                                                                                              // 8252\n      BOX_FORMATTING = [                                                                                               // 8253\n        \"background-color\",                                                                                            // 8254\n        \"border-collapse\",                                                                                             // 8255\n        \"border-bottom-color\", \"border-bottom-style\", \"border-bottom-width\",                                           // 8256\n        \"border-left-color\", \"border-left-style\", \"border-left-width\",                                                 // 8257\n        \"border-right-color\", \"border-right-style\", \"border-right-width\",                                              // 8258\n        \"border-top-color\", \"border-top-style\", \"border-top-width\",                                                    // 8259\n        \"clear\", \"display\", \"float\",                                                                                   // 8260\n        \"margin-bottom\", \"margin-left\", \"margin-right\", \"margin-top\",                                                  // 8261\n        \"outline-color\", \"outline-offset\", \"outline-width\", \"outline-style\",                                           // 8262\n        \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\",                                              // 8263\n        \"position\", \"top\", \"left\", \"right\", \"bottom\", \"z-index\",                                                       // 8264\n        \"vertical-align\", \"text-align\",                                                                                // 8265\n        \"-webkit-box-sizing\", \"-moz-box-sizing\", \"-ms-box-sizing\", \"box-sizing\",                                       // 8266\n        \"-webkit-box-shadow\", \"-moz-box-shadow\", \"-ms-box-shadow\",\"box-shadow\",                                        // 8267\n        \"-webkit-border-top-right-radius\", \"-moz-border-radius-topright\", \"border-top-right-radius\",                   // 8268\n        \"-webkit-border-bottom-right-radius\", \"-moz-border-radius-bottomright\", \"border-bottom-right-radius\",          // 8269\n        \"-webkit-border-bottom-left-radius\", \"-moz-border-radius-bottomleft\", \"border-bottom-left-radius\",             // 8270\n        \"-webkit-border-top-left-radius\", \"-moz-border-radius-topleft\", \"border-top-left-radius\",                      // 8271\n        \"width\", \"height\"                                                                                              // 8272\n      ],                                                                                                               // 8273\n      /**                                                                                                              // 8274\n       * Styles to sync while the window gets resized                                                                  // 8275\n       */                                                                                                              // 8276\n      RESIZE_STYLE = [                                                                                                 // 8277\n        \"width\", \"height\",                                                                                             // 8278\n        \"top\", \"left\", \"right\", \"bottom\"                                                                               // 8279\n      ],                                                                                                               // 8280\n      ADDITIONAL_CSS_RULES = [                                                                                         // 8281\n        \"html             { height: 100%; }\",                                                                          // 8282\n        \"body             { min-height: 100%; padding: 0; margin: 0; margin-top: -1px; padding-top: 1px; }\",           // 8283\n        \"._wysihtml5-temp { display: none; }\",                                                                         // 8284\n        wysihtml5.browser.isGecko ?                                                                                    // 8285\n          \"body.placeholder { color: graytext !important; }\" :                                                         // 8286\n          \"body.placeholder { color: #a9a9a9 !important; }\",                                                           // 8287\n        \"body[disabled]   { background-color: #eee !important; color: #999 !important; cursor: default !important; }\",\n        // Ensure that user see's broken images and can delete them                                                    // 8289\n        \"img:-moz-broken  { -moz-force-broken-image-icon: 1; height: 24px; width: 24px; }\"                             // 8290\n      ];                                                                                                               // 8291\n                                                                                                                       // 8292\n  /**                                                                                                                  // 8293\n   * With \"setActive\" IE offers a smart way of focusing elements without scrolling them into view:                     // 8294\n   * http://msdn.microsoft.com/en-us/library/ms536738(v=vs.85).aspx                                                    // 8295\n   *                                                                                                                   // 8296\n   * Other browsers need a more hacky way: (pssst don't tell my mama)                                                  // 8297\n   * In order to prevent the element being scrolled into view when focusing it, we simply                              // 8298\n   * move it out of the scrollable area, focus it, and reset it's position                                             // 8299\n   */                                                                                                                  // 8300\n  var focusWithoutScrolling = function(element) {                                                                      // 8301\n    if (element.setActive) {                                                                                           // 8302\n      // Following line could cause a js error when the textarea is invisible                                          // 8303\n      // See https://github.com/xing/wysihtml5/issues/9                                                                // 8304\n      try { element.setActive(); } catch(e) {}                                                                         // 8305\n    } else {                                                                                                           // 8306\n      var elementStyle = element.style,                                                                                // 8307\n          originalScrollTop = doc.documentElement.scrollTop || doc.body.scrollTop,                                     // 8308\n          originalScrollLeft = doc.documentElement.scrollLeft || doc.body.scrollLeft,                                  // 8309\n          originalStyles = {                                                                                           // 8310\n            position:         elementStyle.position,                                                                   // 8311\n            top:              elementStyle.top,                                                                        // 8312\n            left:             elementStyle.left,                                                                       // 8313\n            WebkitUserSelect: elementStyle.WebkitUserSelect                                                            // 8314\n          };                                                                                                           // 8315\n                                                                                                                       // 8316\n      dom.setStyles({                                                                                                  // 8317\n        position:         \"absolute\",                                                                                  // 8318\n        top:              \"-99999px\",                                                                                  // 8319\n        left:             \"-99999px\",                                                                                  // 8320\n        // Don't ask why but temporarily setting -webkit-user-select to none makes the whole thing performing smoother\n        WebkitUserSelect: \"none\"                                                                                       // 8322\n      }).on(element);                                                                                                  // 8323\n                                                                                                                       // 8324\n      element.focus();                                                                                                 // 8325\n                                                                                                                       // 8326\n      dom.setStyles(originalStyles).on(element);                                                                       // 8327\n                                                                                                                       // 8328\n      if (win.scrollTo) {                                                                                              // 8329\n        // Some browser extensions unset this method to prevent annoyances                                             // 8330\n        // \"Better PopUp Blocker\" for Chrome http://code.google.com/p/betterpopupblocker/source/browse/trunk/blockStart.js#100\n        // Issue: http://code.google.com/p/betterpopupblocker/issues/detail?id=1                                       // 8332\n        win.scrollTo(originalScrollLeft, originalScrollTop);                                                           // 8333\n      }                                                                                                                // 8334\n    }                                                                                                                  // 8335\n  };                                                                                                                   // 8336\n                                                                                                                       // 8337\n                                                                                                                       // 8338\n  wysihtml5.views.Composer.prototype.style = function() {                                                              // 8339\n    var that                  = this,                                                                                  // 8340\n        originalActiveElement = doc.querySelector(\":focus\"),                                                           // 8341\n        textareaElement       = this.textarea.element,                                                                 // 8342\n        hasPlaceholder        = textareaElement.hasAttribute(\"placeholder\"),                                           // 8343\n        originalPlaceholder   = hasPlaceholder && textareaElement.getAttribute(\"placeholder\");                         // 8344\n    this.focusStylesHost      = this.focusStylesHost  || HOST_TEMPLATE.cloneNode(false);                               // 8345\n    this.blurStylesHost       = this.blurStylesHost   || HOST_TEMPLATE.cloneNode(false);                               // 8346\n                                                                                                                       // 8347\n    // Remove placeholder before copying (as the placeholder has an affect on the computed style)                      // 8348\n    if (hasPlaceholder) {                                                                                              // 8349\n      textareaElement.removeAttribute(\"placeholder\");                                                                  // 8350\n    }                                                                                                                  // 8351\n                                                                                                                       // 8352\n    if (textareaElement === originalActiveElement) {                                                                   // 8353\n      textareaElement.blur();                                                                                          // 8354\n    }                                                                                                                  // 8355\n                                                                                                                       // 8356\n    // --------- iframe styles (has to be set before editor styles, otherwise IE9 sets wrong fontFamily on blurStylesHost) ---------\n    dom.copyStyles(BOX_FORMATTING).from(textareaElement).to(this.iframe).andTo(this.blurStylesHost);                   // 8358\n                                                                                                                       // 8359\n    // --------- editor styles ---------                                                                               // 8360\n    dom.copyStyles(TEXT_FORMATTING).from(textareaElement).to(this.element).andTo(this.blurStylesHost);                 // 8361\n                                                                                                                       // 8362\n    // --------- apply standard rules ---------                                                                        // 8363\n    dom.insertCSS(ADDITIONAL_CSS_RULES).into(this.element.ownerDocument);                                              // 8364\n                                                                                                                       // 8365\n    // --------- :focus styles ---------                                                                               // 8366\n    focusWithoutScrolling(textareaElement);                                                                            // 8367\n    dom.copyStyles(BOX_FORMATTING).from(textareaElement).to(this.focusStylesHost);                                     // 8368\n    dom.copyStyles(TEXT_FORMATTING).from(textareaElement).to(this.focusStylesHost);                                    // 8369\n                                                                                                                       // 8370\n    // Make sure that we don't change the display style of the iframe when copying styles oblur/onfocus                // 8371\n    // this is needed for when the change_view event is fired where the iframe is hidden and then                      // 8372\n    // the blur event fires and re-displays it                                                                         // 8373\n    var boxFormattingStyles = wysihtml5.lang.array(BOX_FORMATTING).without([\"display\"]);                               // 8374\n                                                                                                                       // 8375\n    // --------- restore focus ---------                                                                               // 8376\n    if (originalActiveElement) {                                                                                       // 8377\n      originalActiveElement.focus();                                                                                   // 8378\n    } else {                                                                                                           // 8379\n      textareaElement.blur();                                                                                          // 8380\n    }                                                                                                                  // 8381\n                                                                                                                       // 8382\n    // --------- restore placeholder ---------                                                                         // 8383\n    if (hasPlaceholder) {                                                                                              // 8384\n      textareaElement.setAttribute(\"placeholder\", originalPlaceholder);                                                // 8385\n    }                                                                                                                  // 8386\n                                                                                                                       // 8387\n    // When copying styles, we only get the computed style which is never returned in percent unit                     // 8388\n    // Therefore we've to recalculate style onresize                                                                   // 8389\n    if (!wysihtml5.browser.hasCurrentStyleProperty()) {                                                                // 8390\n      var winObserver = dom.observe(win, \"resize\", function() {                                                        // 8391\n        // Remove event listener if composer doesn't exist anymore                                                     // 8392\n        if (!dom.contains(document.documentElement, that.iframe)) {                                                    // 8393\n          winObserver.stop();                                                                                          // 8394\n          return;                                                                                                      // 8395\n        }                                                                                                              // 8396\n        var originalTextareaDisplayStyle = dom.getStyle(\"display\").from(textareaElement),                              // 8397\n            originalComposerDisplayStyle = dom.getStyle(\"display\").from(that.iframe);                                  // 8398\n        textareaElement.style.display = \"\";                                                                            // 8399\n        that.iframe.style.display = \"none\";                                                                            // 8400\n        dom.copyStyles(RESIZE_STYLE)                                                                                   // 8401\n          .from(textareaElement)                                                                                       // 8402\n          .to(that.iframe)                                                                                             // 8403\n          .andTo(that.focusStylesHost)                                                                                 // 8404\n          .andTo(that.blurStylesHost);                                                                                 // 8405\n        that.iframe.style.display = originalComposerDisplayStyle;                                                      // 8406\n        textareaElement.style.display = originalTextareaDisplayStyle;                                                  // 8407\n      });                                                                                                              // 8408\n    }                                                                                                                  // 8409\n                                                                                                                       // 8410\n    // --------- Sync focus/blur styles ---------                                                                      // 8411\n    this.parent.observe(\"focus:composer\", function() {                                                                 // 8412\n      dom.copyStyles(boxFormattingStyles) .from(that.focusStylesHost).to(that.iframe);                                 // 8413\n      dom.copyStyles(TEXT_FORMATTING)     .from(that.focusStylesHost).to(that.element);                                // 8414\n    });                                                                                                                // 8415\n                                                                                                                       // 8416\n    this.parent.observe(\"blur:composer\", function() {                                                                  // 8417\n      dom.copyStyles(boxFormattingStyles) .from(that.blurStylesHost).to(that.iframe);                                  // 8418\n      dom.copyStyles(TEXT_FORMATTING)     .from(that.blurStylesHost).to(that.element);                                 // 8419\n    });                                                                                                                // 8420\n                                                                                                                       // 8421\n    return this;                                                                                                       // 8422\n  };                                                                                                                   // 8423\n})(wysihtml5);/**                                                                                                      // 8424\n * Taking care of events                                                                                               // 8425\n *  - Simulating 'change' event on contentEditable element                                                             // 8426\n *  - Handling drag & drop logic                                                                                       // 8427\n *  - Catch paste events                                                                                               // 8428\n *  - Dispatch proprietary newword:composer event                                                                      // 8429\n *  - Keyboard shortcuts                                                                                               // 8430\n */                                                                                                                    // 8431\n(function(wysihtml5) {                                                                                                 // 8432\n  var dom       = wysihtml5.dom,                                                                                       // 8433\n      browser   = wysihtml5.browser,                                                                                   // 8434\n      /**                                                                                                              // 8435\n       * Map keyCodes to query commands                                                                                // 8436\n       */                                                                                                              // 8437\n      shortcuts = {                                                                                                    // 8438\n        \"66\": \"bold\",     // B                                                                                         // 8439\n        \"73\": \"italic\",   // I                                                                                         // 8440\n        \"85\": \"underline\" // U                                                                                         // 8441\n      };                                                                                                               // 8442\n                                                                                                                       // 8443\n  wysihtml5.views.Composer.prototype.observe = function() {                                                            // 8444\n    var that                = this,                                                                                    // 8445\n        state               = this.getValue(),                                                                         // 8446\n        iframe              = this.sandbox.getIframe(),                                                                // 8447\n        element             = this.element,                                                                            // 8448\n        focusBlurElement    = browser.supportsEventsInIframeCorrectly() ? element : this.sandbox.getWindow(),          // 8449\n        // Firefox < 3.5 doesn't support the drop event, instead it supports a so called \"dragdrop\" event which behaves almost the same\n        pasteEvents         = browser.supportsEvent(\"drop\") ? [\"drop\", \"paste\"] : [\"dragdrop\", \"paste\"];               // 8451\n                                                                                                                       // 8452\n    // --------- destroy:composer event ---------                                                                      // 8453\n    dom.observe(iframe, \"DOMNodeRemoved\", function() {                                                                 // 8454\n      clearInterval(domNodeRemovedInterval);                                                                           // 8455\n      that.parent.fire(\"destroy:composer\");                                                                            // 8456\n    });                                                                                                                // 8457\n                                                                                                                       // 8458\n    // DOMNodeRemoved event is not supported in IE 8                                                                   // 8459\n    var domNodeRemovedInterval = setInterval(function() {                                                              // 8460\n      if (!dom.contains(document.documentElement, iframe)) {                                                           // 8461\n        clearInterval(domNodeRemovedInterval);                                                                         // 8462\n        that.parent.fire(\"destroy:composer\");                                                                          // 8463\n      }                                                                                                                // 8464\n    }, 250);                                                                                                           // 8465\n                                                                                                                       // 8466\n                                                                                                                       // 8467\n    // --------- Focus & blur logic ---------                                                                          // 8468\n    dom.observe(focusBlurElement, \"focus\", function() {                                                                // 8469\n      that.parent.fire(\"focus\").fire(\"focus:composer\");                                                                // 8470\n                                                                                                                       // 8471\n      // Delay storing of state until all focus handler are fired                                                      // 8472\n      // especially the one which resets the placeholder                                                               // 8473\n      setTimeout(function() { state = that.getValue(); }, 0);                                                          // 8474\n    });                                                                                                                // 8475\n                                                                                                                       // 8476\n    dom.observe(focusBlurElement, \"blur\", function() {                                                                 // 8477\n      if (state !== that.getValue()) {                                                                                 // 8478\n        that.parent.fire(\"change\").fire(\"change:composer\");                                                            // 8479\n      }                                                                                                                // 8480\n      that.parent.fire(\"blur\").fire(\"blur:composer\");                                                                  // 8481\n    });                                                                                                                // 8482\n                                                                                                                       // 8483\n    if (wysihtml5.browser.isIos()) {                                                                                   // 8484\n      // When on iPad/iPhone/IPod after clicking outside of editor, the editor loses focus                             // 8485\n      // but the UI still acts as if the editor has focus (blinking caret and onscreen keyboard visible)               // 8486\n      // We prevent that by focusing a temporary input element which immediately loses focus                           // 8487\n      dom.observe(element, \"blur\", function() {                                                                        // 8488\n        var input = element.ownerDocument.createElement(\"input\"),                                                      // 8489\n            originalScrollTop = document.documentElement.scrollTop || document.body.scrollTop,                         // 8490\n            originalScrollLeft = document.documentElement.scrollLeft || document.body.scrollLeft;                      // 8491\n        try {                                                                                                          // 8492\n          that.selection.insertNode(input);                                                                            // 8493\n        } catch(e) {                                                                                                   // 8494\n          element.appendChild(input);                                                                                  // 8495\n        }                                                                                                              // 8496\n        input.focus();                                                                                                 // 8497\n        input.parentNode.removeChild(input);                                                                           // 8498\n                                                                                                                       // 8499\n        window.scrollTo(originalScrollLeft, originalScrollTop);                                                        // 8500\n      });                                                                                                              // 8501\n    }                                                                                                                  // 8502\n                                                                                                                       // 8503\n    // --------- Drag & Drop logic ---------                                                                           // 8504\n    dom.observe(element, \"dragenter\", function() {                                                                     // 8505\n      that.parent.fire(\"unset_placeholder\");                                                                           // 8506\n    });                                                                                                                // 8507\n                                                                                                                       // 8508\n    if (browser.firesOnDropOnlyWhenOnDragOverIsCancelled()) {                                                          // 8509\n      dom.observe(element, [\"dragover\", \"dragenter\"], function(event) {                                                // 8510\n        event.preventDefault();                                                                                        // 8511\n      });                                                                                                              // 8512\n    }                                                                                                                  // 8513\n                                                                                                                       // 8514\n    dom.observe(element, pasteEvents, function(event) {                                                                // 8515\n      var dataTransfer = event.dataTransfer,                                                                           // 8516\n          data;                                                                                                        // 8517\n                                                                                                                       // 8518\n      if (dataTransfer && browser.supportsDataTransfer()) {                                                            // 8519\n        data = dataTransfer.getData(\"text/html\") || dataTransfer.getData(\"text/plain\");                                // 8520\n      }                                                                                                                // 8521\n      if (data) {                                                                                                      // 8522\n        element.focus();                                                                                               // 8523\n        that.commands.exec(\"insertHTML\", data);                                                                        // 8524\n        that.parent.fire(\"paste\").fire(\"paste:composer\");                                                              // 8525\n        event.stopPropagation();                                                                                       // 8526\n        event.preventDefault();                                                                                        // 8527\n      } else {                                                                                                         // 8528\n        setTimeout(function() {                                                                                        // 8529\n          that.parent.fire(\"paste\").fire(\"paste:composer\");                                                            // 8530\n        }, 0);                                                                                                         // 8531\n      }                                                                                                                // 8532\n    });                                                                                                                // 8533\n                                                                                                                       // 8534\n    // --------- neword event ---------                                                                                // 8535\n    dom.observe(element, \"keyup\", function(event) {                                                                    // 8536\n      var keyCode = event.keyCode;                                                                                     // 8537\n      if (keyCode === wysihtml5.SPACE_KEY || keyCode === wysihtml5.ENTER_KEY) {                                        // 8538\n        that.parent.fire(\"newword:composer\");                                                                          // 8539\n      }                                                                                                                // 8540\n    });                                                                                                                // 8541\n                                                                                                                       // 8542\n    this.parent.observe(\"paste:composer\", function() {                                                                 // 8543\n      setTimeout(function() { that.parent.fire(\"newword:composer\"); }, 0);                                             // 8544\n    });                                                                                                                // 8545\n                                                                                                                       // 8546\n    // --------- Make sure that images are selected when clicking on them ---------                                    // 8547\n    if (!browser.canSelectImagesInContentEditable()) {                                                                 // 8548\n      dom.observe(element, \"mousedown\", function(event) {                                                              // 8549\n        var target = event.target;                                                                                     // 8550\n        if (target.nodeName === \"IMG\") {                                                                               // 8551\n          that.selection.selectNode(target);                                                                           // 8552\n          event.preventDefault();                                                                                      // 8553\n        }                                                                                                              // 8554\n      });                                                                                                              // 8555\n    }                                                                                                                  // 8556\n                                                                                                                       // 8557\n    // --------- Shortcut logic ---------                                                                              // 8558\n    dom.observe(element, \"keydown\", function(event) {                                                                  // 8559\n      var keyCode  = event.keyCode,                                                                                    // 8560\n          command  = shortcuts[keyCode];                                                                               // 8561\n      if ((event.ctrlKey || event.metaKey) && !event.altKey && command) {                                              // 8562\n        that.commands.exec(command);                                                                                   // 8563\n        event.preventDefault();                                                                                        // 8564\n      }                                                                                                                // 8565\n    });                                                                                                                // 8566\n                                                                                                                       // 8567\n    // --------- Make sure that when pressing backspace/delete on selected images deletes the image and it's anchor ---------\n    dom.observe(element, \"keydown\", function(event) {                                                                  // 8569\n      var target  = that.selection.getSelectedNode(true),                                                              // 8570\n          keyCode = event.keyCode,                                                                                     // 8571\n          parent;                                                                                                      // 8572\n      if (target && target.nodeName === \"IMG\" && (keyCode === wysihtml5.BACKSPACE_KEY || keyCode === wysihtml5.DELETE_KEY)) { // 8 => backspace, 46 => delete\n        parent = target.parentNode;                                                                                    // 8574\n        // delete the <img>                                                                                            // 8575\n        parent.removeChild(target);                                                                                    // 8576\n        // and it's parent <a> too if it hasn't got any other child nodes                                              // 8577\n        if (parent.nodeName === \"A\" && !parent.firstChild) {                                                           // 8578\n          parent.parentNode.removeChild(parent);                                                                       // 8579\n        }                                                                                                              // 8580\n                                                                                                                       // 8581\n        setTimeout(function() { wysihtml5.quirks.redraw(element); }, 0);                                               // 8582\n        event.preventDefault();                                                                                        // 8583\n      }                                                                                                                // 8584\n    });                                                                                                                // 8585\n                                                                                                                       // 8586\n    // --------- Show url in tooltip when hovering links or images ---------                                           // 8587\n    var titlePrefixes = {                                                                                              // 8588\n      IMG: \"Image: \",                                                                                                  // 8589\n      A:   \"Link: \"                                                                                                    // 8590\n    };                                                                                                                 // 8591\n                                                                                                                       // 8592\n    dom.observe(element, \"mouseover\", function(event) {                                                                // 8593\n      var target   = event.target,                                                                                     // 8594\n          nodeName = target.nodeName,                                                                                  // 8595\n          title;                                                                                                       // 8596\n      if (nodeName !== \"A\" && nodeName !== \"IMG\") {                                                                    // 8597\n        return;                                                                                                        // 8598\n      }                                                                                                                // 8599\n      var hasTitle = target.hasAttribute(\"title\");                                                                     // 8600\n      if(!hasTitle){                                                                                                   // 8601\n        title = titlePrefixes[nodeName] + (target.getAttribute(\"href\") || target.getAttribute(\"src\"));                 // 8602\n        target.setAttribute(\"title\", title);                                                                           // 8603\n      }                                                                                                                // 8604\n    });                                                                                                                // 8605\n  };                                                                                                                   // 8606\n})(wysihtml5);/**                                                                                                      // 8607\n * Class that takes care that the value of the composer and the textarea is always in sync                             // 8608\n */                                                                                                                    // 8609\n(function(wysihtml5) {                                                                                                 // 8610\n  var INTERVAL = 400;                                                                                                  // 8611\n                                                                                                                       // 8612\n  wysihtml5.views.Synchronizer = Base.extend(                                                                          // 8613\n    /** @scope wysihtml5.views.Synchronizer.prototype */ {                                                             // 8614\n                                                                                                                       // 8615\n    constructor: function(editor, textarea, composer) {                                                                // 8616\n      this.editor   = editor;                                                                                          // 8617\n      this.textarea = textarea;                                                                                        // 8618\n      this.composer = composer;                                                                                        // 8619\n                                                                                                                       // 8620\n      this._observe();                                                                                                 // 8621\n    },                                                                                                                 // 8622\n                                                                                                                       // 8623\n    /**                                                                                                                // 8624\n     * Sync html from composer to textarea                                                                             // 8625\n     * Takes care of placeholders                                                                                      // 8626\n     * @param {Boolean} shouldParseHtml Whether the html should be sanitized before inserting it into the textarea     // 8627\n     */                                                                                                                // 8628\n    fromComposerToTextarea: function(shouldParseHtml) {                                                                // 8629\n      this.textarea.setValue(wysihtml5.lang.string(this.composer.getValue()).trim(), shouldParseHtml);                 // 8630\n    },                                                                                                                 // 8631\n                                                                                                                       // 8632\n    /**                                                                                                                // 8633\n     * Sync value of textarea to composer                                                                              // 8634\n     * Takes care of placeholders                                                                                      // 8635\n     * @param {Boolean} shouldParseHtml Whether the html should be sanitized before inserting it into the composer     // 8636\n     */                                                                                                                // 8637\n    fromTextareaToComposer: function(shouldParseHtml) {                                                                // 8638\n      var textareaValue = this.textarea.getValue();                                                                    // 8639\n      if (textareaValue) {                                                                                             // 8640\n        this.composer.setValue(textareaValue, shouldParseHtml);                                                        // 8641\n      } else {                                                                                                         // 8642\n        this.composer.clear();                                                                                         // 8643\n        this.editor.fire(\"set_placeholder\");                                                                           // 8644\n      }                                                                                                                // 8645\n    },                                                                                                                 // 8646\n                                                                                                                       // 8647\n    /**                                                                                                                // 8648\n     * Invoke syncing based on view state                                                                              // 8649\n     * @param {Boolean} shouldParseHtml Whether the html should be sanitized before inserting it into the composer/textarea\n     */                                                                                                                // 8651\n    sync: function(shouldParseHtml) {                                                                                  // 8652\n      if (this.editor.currentView.name === \"textarea\") {                                                               // 8653\n        this.fromTextareaToComposer(shouldParseHtml);                                                                  // 8654\n      } else {                                                                                                         // 8655\n        this.fromComposerToTextarea(shouldParseHtml);                                                                  // 8656\n      }                                                                                                                // 8657\n    },                                                                                                                 // 8658\n                                                                                                                       // 8659\n    /**                                                                                                                // 8660\n     * Initializes interval-based syncing                                                                              // 8661\n     * also makes sure that on-submit the composer's content is synced with the textarea                               // 8662\n     * immediately when the form gets submitted                                                                        // 8663\n     */                                                                                                                // 8664\n    _observe: function() {                                                                                             // 8665\n      var interval,                                                                                                    // 8666\n          that          = this,                                                                                        // 8667\n          form          = this.textarea.element.form,                                                                  // 8668\n          startInterval = function() {                                                                                 // 8669\n            interval = setInterval(function() { that.fromComposerToTextarea(); }, INTERVAL);                           // 8670\n          },                                                                                                           // 8671\n          stopInterval  = function() {                                                                                 // 8672\n            clearInterval(interval);                                                                                   // 8673\n            interval = null;                                                                                           // 8674\n          };                                                                                                           // 8675\n                                                                                                                       // 8676\n      startInterval();                                                                                                 // 8677\n                                                                                                                       // 8678\n      if (form) {                                                                                                      // 8679\n        // If the textarea is in a form make sure that after onreset and onsubmit the composer                         // 8680\n        // has the correct state                                                                                       // 8681\n        wysihtml5.dom.observe(form, \"submit\", function() {                                                             // 8682\n          that.sync(true);                                                                                             // 8683\n        });                                                                                                            // 8684\n        wysihtml5.dom.observe(form, \"reset\", function() {                                                              // 8685\n          setTimeout(function() { that.fromTextareaToComposer(); }, 0);                                                // 8686\n        });                                                                                                            // 8687\n      }                                                                                                                // 8688\n                                                                                                                       // 8689\n      this.editor.observe(\"change_view\", function(view) {                                                              // 8690\n        if (view === \"composer\" && !interval) {                                                                        // 8691\n          that.fromTextareaToComposer(true);                                                                           // 8692\n          startInterval();                                                                                             // 8693\n        } else if (view === \"textarea\") {                                                                              // 8694\n          that.fromComposerToTextarea(true);                                                                           // 8695\n          stopInterval();                                                                                              // 8696\n        }                                                                                                              // 8697\n      });                                                                                                              // 8698\n                                                                                                                       // 8699\n      this.editor.observe(\"destroy:composer\", stopInterval);                                                           // 8700\n    }                                                                                                                  // 8701\n  });                                                                                                                  // 8702\n})(wysihtml5);                                                                                                         // 8703\nwysihtml5.views.Textarea = wysihtml5.views.View.extend(                                                                // 8704\n  /** @scope wysihtml5.views.Textarea.prototype */ {                                                                   // 8705\n  name: \"textarea\",                                                                                                    // 8706\n                                                                                                                       // 8707\n  constructor: function(parent, textareaElement, config) {                                                             // 8708\n    this.base(parent, textareaElement, config);                                                                        // 8709\n                                                                                                                       // 8710\n    this._observe();                                                                                                   // 8711\n  },                                                                                                                   // 8712\n                                                                                                                       // 8713\n  clear: function() {                                                                                                  // 8714\n    this.element.value = \"\";                                                                                           // 8715\n  },                                                                                                                   // 8716\n                                                                                                                       // 8717\n  getValue: function(parse) {                                                                                          // 8718\n    var value = this.isEmpty() ? \"\" : this.element.value;                                                              // 8719\n    if (parse) {                                                                                                       // 8720\n      value = this.parent.parse(value);                                                                                // 8721\n    }                                                                                                                  // 8722\n    return value;                                                                                                      // 8723\n  },                                                                                                                   // 8724\n                                                                                                                       // 8725\n  setValue: function(html, parse) {                                                                                    // 8726\n    if (parse) {                                                                                                       // 8727\n      html = this.parent.parse(html);                                                                                  // 8728\n    }                                                                                                                  // 8729\n    this.element.value = html;                                                                                         // 8730\n  },                                                                                                                   // 8731\n                                                                                                                       // 8732\n  hasPlaceholderSet: function() {                                                                                      // 8733\n    var supportsPlaceholder = wysihtml5.browser.supportsPlaceholderAttributeOn(this.element),                          // 8734\n        placeholderText     = this.element.getAttribute(\"placeholder\") || null,                                        // 8735\n        value               = this.element.value,                                                                      // 8736\n        isEmpty             = !value;                                                                                  // 8737\n    return (supportsPlaceholder && isEmpty) || (value === placeholderText);                                            // 8738\n  },                                                                                                                   // 8739\n                                                                                                                       // 8740\n  isEmpty: function() {                                                                                                // 8741\n    return !wysihtml5.lang.string(this.element.value).trim() || this.hasPlaceholderSet();                              // 8742\n  },                                                                                                                   // 8743\n                                                                                                                       // 8744\n  _observe: function() {                                                                                               // 8745\n    var element = this.element,                                                                                        // 8746\n        parent  = this.parent,                                                                                         // 8747\n        eventMapping = {                                                                                               // 8748\n          focusin:  \"focus\",                                                                                           // 8749\n          focusout: \"blur\"                                                                                             // 8750\n        },                                                                                                             // 8751\n        /**                                                                                                            // 8752\n         * Calling focus() or blur() on an element doesn't synchronously trigger the attached focus/blur events        // 8753\n         * This is the case for focusin and focusout, so let's use them whenever possible, kkthxbai                    // 8754\n         */                                                                                                            // 8755\n        events = wysihtml5.browser.supportsEvent(\"focusin\") ? [\"focusin\", \"focusout\", \"change\"] : [\"focus\", \"blur\", \"change\"];\n                                                                                                                       // 8757\n    parent.observe(\"beforeload\", function() {                                                                          // 8758\n      wysihtml5.dom.observe(element, events, function(event) {                                                         // 8759\n        var eventName = eventMapping[event.type] || event.type;                                                        // 8760\n        parent.fire(eventName).fire(eventName + \":textarea\");                                                          // 8761\n      });                                                                                                              // 8762\n                                                                                                                       // 8763\n      wysihtml5.dom.observe(element, [\"paste\", \"drop\"], function() {                                                   // 8764\n        setTimeout(function() { parent.fire(\"paste\").fire(\"paste:textarea\"); }, 0);                                    // 8765\n      });                                                                                                              // 8766\n    });                                                                                                                // 8767\n  }                                                                                                                    // 8768\n});/**                                                                                                                 // 8769\n * Toolbar Dialog                                                                                                      // 8770\n *                                                                                                                     // 8771\n * @param {Element} link The toolbar link which causes the dialog to show up                                           // 8772\n * @param {Element} container The dialog container                                                                     // 8773\n *                                                                                                                     // 8774\n * @example                                                                                                            // 8775\n *    <!-- Toolbar link -->                                                                                            // 8776\n *    <a data-wysihtml5-command=\"insertImage\">insert an image</a>                                                      // 8777\n *                                                                                                                     // 8778\n *    <!-- Dialog -->                                                                                                  // 8779\n *    <div data-wysihtml5-dialog=\"insertImage\" style=\"display: none;\">                                                 // 8780\n *      <label>                                                                                                        // 8781\n *        URL: <input data-wysihtml5-dialog-field=\"src\" value=\"http://\">                                               // 8782\n *      </label>                                                                                                       // 8783\n *      <label>                                                                                                        // 8784\n *        Alternative text: <input data-wysihtml5-dialog-field=\"alt\" value=\"\">                                         // 8785\n *      </label>                                                                                                       // 8786\n *    </div>                                                                                                           // 8787\n *                                                                                                                     // 8788\n *    <script>                                                                                                         // 8789\n *      var dialog = new wysihtml5.toolbar.Dialog(                                                                     // 8790\n *        document.querySelector(\"[data-wysihtml5-command='insertImage']\"),                                            // 8791\n *        document.querySelector(\"[data-wysihtml5-dialog='insertImage']\")                                              // 8792\n *      );                                                                                                             // 8793\n *      dialog.observe(\"save\", function(attributes) {                                                                  // 8794\n *        // do something                                                                                              // 8795\n *      });                                                                                                            // 8796\n *    </script>                                                                                                        // 8797\n */                                                                                                                    // 8798\n(function(wysihtml5) {                                                                                                 // 8799\n  var dom                     = wysihtml5.dom,                                                                         // 8800\n      CLASS_NAME_OPENED       = \"wysihtml5-command-dialog-opened\",                                                     // 8801\n      SELECTOR_FORM_ELEMENTS  = \"input, select, textarea\",                                                             // 8802\n      SELECTOR_FIELDS         = \"[data-wysihtml5-dialog-field]\",                                                       // 8803\n      ATTRIBUTE_FIELDS        = \"data-wysihtml5-dialog-field\";                                                         // 8804\n                                                                                                                       // 8805\n                                                                                                                       // 8806\n  wysihtml5.toolbar.Dialog = wysihtml5.lang.Dispatcher.extend(                                                         // 8807\n    /** @scope wysihtml5.toolbar.Dialog.prototype */ {                                                                 // 8808\n    constructor: function(link, container) {                                                                           // 8809\n      this.link       = link;                                                                                          // 8810\n      this.container  = container;                                                                                     // 8811\n    },                                                                                                                 // 8812\n                                                                                                                       // 8813\n    _observe: function() {                                                                                             // 8814\n      if (this._observed) {                                                                                            // 8815\n        return;                                                                                                        // 8816\n      }                                                                                                                // 8817\n                                                                                                                       // 8818\n      var that = this,                                                                                                 // 8819\n          callbackWrapper = function(event) {                                                                          // 8820\n            var attributes = that._serialize();                                                                        // 8821\n            if (attributes == that.elementToChange) {                                                                  // 8822\n              that.fire(\"edit\", attributes);                                                                           // 8823\n            } else {                                                                                                   // 8824\n              that.fire(\"save\", attributes);                                                                           // 8825\n            }                                                                                                          // 8826\n            that.hide();                                                                                               // 8827\n            event.preventDefault();                                                                                    // 8828\n            event.stopPropagation();                                                                                   // 8829\n          };                                                                                                           // 8830\n                                                                                                                       // 8831\n      dom.observe(that.link, \"click\", function(event) {                                                                // 8832\n        if (dom.hasClass(that.link, CLASS_NAME_OPENED)) {                                                              // 8833\n          setTimeout(function() { that.hide(); }, 0);                                                                  // 8834\n        }                                                                                                              // 8835\n      });                                                                                                              // 8836\n                                                                                                                       // 8837\n      dom.observe(this.container, \"keydown\", function(event) {                                                         // 8838\n        var keyCode = event.keyCode;                                                                                   // 8839\n        if (keyCode === wysihtml5.ENTER_KEY) {                                                                         // 8840\n          callbackWrapper(event);                                                                                      // 8841\n        }                                                                                                              // 8842\n        if (keyCode === wysihtml5.ESCAPE_KEY) {                                                                        // 8843\n          that.hide();                                                                                                 // 8844\n        }                                                                                                              // 8845\n      });                                                                                                              // 8846\n                                                                                                                       // 8847\n      dom.delegate(this.container, \"[data-wysihtml5-dialog-action=save]\", \"click\", callbackWrapper);                   // 8848\n                                                                                                                       // 8849\n      dom.delegate(this.container, \"[data-wysihtml5-dialog-action=cancel]\", \"click\", function(event) {                 // 8850\n        that.fire(\"cancel\");                                                                                           // 8851\n        that.hide();                                                                                                   // 8852\n        event.preventDefault();                                                                                        // 8853\n        event.stopPropagation();                                                                                       // 8854\n      });                                                                                                              // 8855\n                                                                                                                       // 8856\n      var formElements  = this.container.querySelectorAll(SELECTOR_FORM_ELEMENTS),                                     // 8857\n          i             = 0,                                                                                           // 8858\n          length        = formElements.length,                                                                         // 8859\n          _clearInterval = function() { clearInterval(that.interval); };                                               // 8860\n      for (; i<length; i++) {                                                                                          // 8861\n        dom.observe(formElements[i], \"change\", _clearInterval);                                                        // 8862\n      }                                                                                                                // 8863\n                                                                                                                       // 8864\n      this._observed = true;                                                                                           // 8865\n    },                                                                                                                 // 8866\n                                                                                                                       // 8867\n    /**                                                                                                                // 8868\n     * Grabs all fields in the dialog and puts them in key=>value style in an object which                             // 8869\n     * then gets returned                                                                                              // 8870\n     */                                                                                                                // 8871\n    _serialize: function() {                                                                                           // 8872\n      var data    = this.elementToChange || {},                                                                        // 8873\n          fields  = this.container.querySelectorAll(SELECTOR_FIELDS),                                                  // 8874\n          length  = fields.length,                                                                                     // 8875\n          i       = 0;                                                                                                 // 8876\n      for (; i<length; i++) {                                                                                          // 8877\n        data[fields[i].getAttribute(ATTRIBUTE_FIELDS)] = fields[i].value;                                              // 8878\n      }                                                                                                                // 8879\n      return data;                                                                                                     // 8880\n    },                                                                                                                 // 8881\n                                                                                                                       // 8882\n    /**                                                                                                                // 8883\n     * Takes the attributes of the \"elementToChange\"                                                                   // 8884\n     * and inserts them in their corresponding dialog input fields                                                     // 8885\n     *                                                                                                                 // 8886\n     * Assume the \"elementToChange\" looks like this:                                                                   // 8887\n     *    <a href=\"http://www.google.com\" target=\"_blank\">foo</a>                                                      // 8888\n     *                                                                                                                 // 8889\n     * and we have the following dialog:                                                                               // 8890\n     *    <input type=\"text\" data-wysihtml5-dialog-field=\"href\" value=\"\">                                              // 8891\n     *    <input type=\"text\" data-wysihtml5-dialog-field=\"target\" value=\"\">                                            // 8892\n     *                                                                                                                 // 8893\n     * after calling _interpolate() the dialog will look like this                                                     // 8894\n     *    <input type=\"text\" data-wysihtml5-dialog-field=\"href\" value=\"http://www.google.com\">                         // 8895\n     *    <input type=\"text\" data-wysihtml5-dialog-field=\"target\" value=\"_blank\">                                      // 8896\n     *                                                                                                                 // 8897\n     * Basically it adopted the attribute values into the corresponding input fields                                   // 8898\n     *                                                                                                                 // 8899\n     */                                                                                                                // 8900\n    _interpolate: function(avoidHiddenFields) {                                                                        // 8901\n      var field,                                                                                                       // 8902\n          fieldName,                                                                                                   // 8903\n          newValue,                                                                                                    // 8904\n          focusedElement = document.querySelector(\":focus\"),                                                           // 8905\n          fields         = this.container.querySelectorAll(SELECTOR_FIELDS),                                           // 8906\n          length         = fields.length,                                                                              // 8907\n          i              = 0;                                                                                          // 8908\n      for (; i<length; i++) {                                                                                          // 8909\n        field = fields[i];                                                                                             // 8910\n                                                                                                                       // 8911\n        // Never change elements where the user is currently typing in                                                 // 8912\n        if (field === focusedElement) {                                                                                // 8913\n          continue;                                                                                                    // 8914\n        }                                                                                                              // 8915\n                                                                                                                       // 8916\n        // Don't update hidden fields                                                                                  // 8917\n        // See https://github.com/xing/wysihtml5/pull/14                                                               // 8918\n        if (avoidHiddenFields && field.type === \"hidden\") {                                                            // 8919\n          continue;                                                                                                    // 8920\n        }                                                                                                              // 8921\n                                                                                                                       // 8922\n        fieldName = field.getAttribute(ATTRIBUTE_FIELDS);                                                              // 8923\n        newValue  = this.elementToChange ? (this.elementToChange[fieldName] || \"\") : field.defaultValue;               // 8924\n        field.value = newValue;                                                                                        // 8925\n      }                                                                                                                // 8926\n    },                                                                                                                 // 8927\n                                                                                                                       // 8928\n    /**                                                                                                                // 8929\n     * Show the dialog element                                                                                         // 8930\n     */                                                                                                                // 8931\n    show: function(elementToChange) {                                                                                  // 8932\n      var that        = this,                                                                                          // 8933\n          firstField  = this.container.querySelector(SELECTOR_FORM_ELEMENTS);                                          // 8934\n      this.elementToChange = elementToChange;                                                                          // 8935\n      this._observe();                                                                                                 // 8936\n      this._interpolate();                                                                                             // 8937\n      if (elementToChange) {                                                                                           // 8938\n        this.interval = setInterval(function() { that._interpolate(true); }, 500);                                     // 8939\n      }                                                                                                                // 8940\n      dom.addClass(this.link, CLASS_NAME_OPENED);                                                                      // 8941\n      this.container.style.display = \"\";                                                                               // 8942\n      this.fire(\"show\");                                                                                               // 8943\n      if (firstField && !elementToChange) {                                                                            // 8944\n        try {                                                                                                          // 8945\n          firstField.focus();                                                                                          // 8946\n        } catch(e) {}                                                                                                  // 8947\n      }                                                                                                                // 8948\n    },                                                                                                                 // 8949\n                                                                                                                       // 8950\n    /**                                                                                                                // 8951\n     * Hide the dialog element                                                                                         // 8952\n     */                                                                                                                // 8953\n    hide: function() {                                                                                                 // 8954\n      clearInterval(this.interval);                                                                                    // 8955\n      this.elementToChange = null;                                                                                     // 8956\n      dom.removeClass(this.link, CLASS_NAME_OPENED);                                                                   // 8957\n      this.container.style.display = \"none\";                                                                           // 8958\n      this.fire(\"hide\");                                                                                               // 8959\n    }                                                                                                                  // 8960\n  });                                                                                                                  // 8961\n})(wysihtml5);                                                                                                         // 8962\n/**                                                                                                                    // 8963\n * Converts speech-to-text and inserts this into the editor                                                            // 8964\n * As of now (2011/03/25) this only is supported in Chrome >= 11                                                       // 8965\n *                                                                                                                     // 8966\n * Note that it sends the recorded audio to the google speech recognition api:                                         // 8967\n * http://stackoverflow.com/questions/4361826/does-chrome-have-buil-in-speech-recognition-for-input-type-text-x-webkit-speec\n *                                                                                                                     // 8969\n * Current HTML5 draft can be found here                                                                               // 8970\n * http://lists.w3.org/Archives/Public/public-xg-htmlspeech/2011Feb/att-0020/api-draft.html                            // 8971\n *                                                                                                                     // 8972\n * \"Accessing Google Speech API Chrome 11\"                                                                             // 8973\n * http://mikepultz.com/2011/03/accessing-google-speech-api-chrome-11/                                                 // 8974\n */                                                                                                                    // 8975\n(function(wysihtml5) {                                                                                                 // 8976\n  var dom = wysihtml5.dom;                                                                                             // 8977\n                                                                                                                       // 8978\n  var linkStyles = {                                                                                                   // 8979\n    position: \"relative\"                                                                                               // 8980\n  };                                                                                                                   // 8981\n                                                                                                                       // 8982\n  var wrapperStyles = {                                                                                                // 8983\n    left:     0,                                                                                                       // 8984\n    margin:   0,                                                                                                       // 8985\n    opacity:  0,                                                                                                       // 8986\n    overflow: \"hidden\",                                                                                                // 8987\n    padding:  0,                                                                                                       // 8988\n    position: \"absolute\",                                                                                              // 8989\n    top:      0,                                                                                                       // 8990\n    zIndex:   1                                                                                                        // 8991\n  };                                                                                                                   // 8992\n                                                                                                                       // 8993\n  var inputStyles = {                                                                                                  // 8994\n    cursor:     \"inherit\",                                                                                             // 8995\n    fontSize:   \"50px\",                                                                                                // 8996\n    height:     \"50px\",                                                                                                // 8997\n    marginTop:  \"-25px\",                                                                                               // 8998\n    outline:    0,                                                                                                     // 8999\n    padding:    0,                                                                                                     // 9000\n    position:   \"absolute\",                                                                                            // 9001\n    right:      \"-4px\",                                                                                                // 9002\n    top:        \"50%\"                                                                                                  // 9003\n  };                                                                                                                   // 9004\n                                                                                                                       // 9005\n  var inputAttributes = {                                                                                              // 9006\n    \"x-webkit-speech\": \"\",                                                                                             // 9007\n    \"speech\":          \"\"                                                                                              // 9008\n  };                                                                                                                   // 9009\n                                                                                                                       // 9010\n  wysihtml5.toolbar.Speech = function(parent, link) {                                                                  // 9011\n    var input = document.createElement(\"input\");                                                                       // 9012\n    if (!wysihtml5.browser.supportsSpeechApiOn(input)) {                                                               // 9013\n      link.style.display = \"none\";                                                                                     // 9014\n      return;                                                                                                          // 9015\n    }                                                                                                                  // 9016\n                                                                                                                       // 9017\n    var wrapper = document.createElement(\"div\");                                                                       // 9018\n                                                                                                                       // 9019\n    wysihtml5.lang.object(wrapperStyles).merge({                                                                       // 9020\n      width:  link.offsetWidth  + \"px\",                                                                                // 9021\n      height: link.offsetHeight + \"px\"                                                                                 // 9022\n    });                                                                                                                // 9023\n                                                                                                                       // 9024\n    dom.insert(input).into(wrapper);                                                                                   // 9025\n    dom.insert(wrapper).into(link);                                                                                    // 9026\n                                                                                                                       // 9027\n    dom.setStyles(inputStyles).on(input);                                                                              // 9028\n    dom.setAttributes(inputAttributes).on(input)                                                                       // 9029\n                                                                                                                       // 9030\n    dom.setStyles(wrapperStyles).on(wrapper);                                                                          // 9031\n    dom.setStyles(linkStyles).on(link);                                                                                // 9032\n                                                                                                                       // 9033\n    var eventName = \"onwebkitspeechchange\" in input ? \"webkitspeechchange\" : \"speechchange\";                           // 9034\n    dom.observe(input, eventName, function() {                                                                         // 9035\n      parent.execCommand(\"insertText\", input.value);                                                                   // 9036\n      input.value = \"\";                                                                                                // 9037\n    });                                                                                                                // 9038\n                                                                                                                       // 9039\n    dom.observe(input, \"click\", function(event) {                                                                      // 9040\n      if (dom.hasClass(link, \"wysihtml5-command-disabled\")) {                                                          // 9041\n        event.preventDefault();                                                                                        // 9042\n      }                                                                                                                // 9043\n                                                                                                                       // 9044\n      event.stopPropagation();                                                                                         // 9045\n    });                                                                                                                // 9046\n  };                                                                                                                   // 9047\n})(wysihtml5);/**                                                                                                      // 9048\n * Toolbar                                                                                                             // 9049\n *                                                                                                                     // 9050\n * @param {Object} parent Reference to instance of Editor instance                                                     // 9051\n * @param {Element} container Reference to the toolbar container element                                               // 9052\n *                                                                                                                     // 9053\n * @example                                                                                                            // 9054\n *    <div id=\"toolbar\">                                                                                               // 9055\n *      <a data-wysihtml5-command=\"createLink\">insert link</a>                                                         // 9056\n *      <a data-wysihtml5-command=\"formatBlock\" data-wysihtml5-command-value=\"h1\">insert h1</a>                        // 9057\n *    </div>                                                                                                           // 9058\n *                                                                                                                     // 9059\n *    <script>                                                                                                         // 9060\n *      var toolbar = new wysihtml5.toolbar.Toolbar(editor, document.getElementById(\"toolbar\"));                       // 9061\n *    </script>                                                                                                        // 9062\n */                                                                                                                    // 9063\n(function(wysihtml5) {                                                                                                 // 9064\n  var CLASS_NAME_COMMAND_DISABLED   = \"wysihtml5-command-disabled\",                                                    // 9065\n      CLASS_NAME_COMMANDS_DISABLED  = \"wysihtml5-commands-disabled\",                                                   // 9066\n      CLASS_NAME_COMMAND_ACTIVE     = \"wysihtml5-command-active\",                                                      // 9067\n      CLASS_NAME_ACTION_ACTIVE      = \"wysihtml5-action-active\",                                                       // 9068\n      dom                           = wysihtml5.dom;                                                                   // 9069\n                                                                                                                       // 9070\n  wysihtml5.toolbar.Toolbar = Base.extend(                                                                             // 9071\n    /** @scope wysihtml5.toolbar.Toolbar.prototype */ {                                                                // 9072\n    constructor: function(editor, container) {                                                                         // 9073\n      this.editor     = editor;                                                                                        // 9074\n      this.container  = typeof(container) === \"string\" ? document.getElementById(container) : container;               // 9075\n      this.composer   = editor.composer;                                                                               // 9076\n                                                                                                                       // 9077\n      this._getLinks(\"command\");                                                                                       // 9078\n      this._getLinks(\"action\");                                                                                        // 9079\n                                                                                                                       // 9080\n      this._observe();                                                                                                 // 9081\n      this.show();                                                                                                     // 9082\n                                                                                                                       // 9083\n      var speechInputLinks  = this.container.querySelectorAll(\"[data-wysihtml5-command=insertSpeech]\"),                // 9084\n          length            = speechInputLinks.length,                                                                 // 9085\n          i                 = 0;                                                                                       // 9086\n      for (; i<length; i++) {                                                                                          // 9087\n        new wysihtml5.toolbar.Speech(this, speechInputLinks[i]);                                                       // 9088\n      }                                                                                                                // 9089\n    },                                                                                                                 // 9090\n                                                                                                                       // 9091\n    _getLinks: function(type) {                                                                                        // 9092\n      var links   = this[type + \"Links\"] = wysihtml5.lang.array(this.container.querySelectorAll(\"[data-wysihtml5-\" + type + \"]\")).get(),\n          length  = links.length,                                                                                      // 9094\n          i       = 0,                                                                                                 // 9095\n          mapping = this[type + \"Mapping\"] = {},                                                                       // 9096\n          link,                                                                                                        // 9097\n          group,                                                                                                       // 9098\n          name,                                                                                                        // 9099\n          value,                                                                                                       // 9100\n          dialog;                                                                                                      // 9101\n      for (; i<length; i++) {                                                                                          // 9102\n        link    = links[i];                                                                                            // 9103\n        name    = link.getAttribute(\"data-wysihtml5-\" + type);                                                         // 9104\n        value   = link.getAttribute(\"data-wysihtml5-\" + type + \"-value\");                                              // 9105\n        group   = this.container.querySelector(\"[data-wysihtml5-\" + type + \"-group='\" + name + \"']\");                  // 9106\n        dialog  = this._getDialog(link, name);                                                                         // 9107\n                                                                                                                       // 9108\n        mapping[name + \":\" + value] = {                                                                                // 9109\n          link:   link,                                                                                                // 9110\n          group:  group,                                                                                               // 9111\n          name:   name,                                                                                                // 9112\n          value:  value,                                                                                               // 9113\n          dialog: dialog,                                                                                              // 9114\n          state:  false                                                                                                // 9115\n        };                                                                                                             // 9116\n      }                                                                                                                // 9117\n    },                                                                                                                 // 9118\n                                                                                                                       // 9119\n    _getDialog: function(link, command) {                                                                              // 9120\n      var that          = this,                                                                                        // 9121\n          dialogElement = this.container.querySelector(\"[data-wysihtml5-dialog='\" + command + \"']\"),                   // 9122\n          dialog,                                                                                                      // 9123\n          caretBookmark;                                                                                               // 9124\n                                                                                                                       // 9125\n      if (dialogElement) {                                                                                             // 9126\n        dialog = new wysihtml5.toolbar.Dialog(link, dialogElement);                                                    // 9127\n                                                                                                                       // 9128\n        dialog.observe(\"show\", function() {                                                                            // 9129\n          caretBookmark = that.composer.selection.getBookmark();                                                       // 9130\n                                                                                                                       // 9131\n          that.editor.fire(\"show:dialog\", { command: command, dialogContainer: dialogElement, commandLink: link });    // 9132\n        });                                                                                                            // 9133\n                                                                                                                       // 9134\n        dialog.observe(\"save\", function(attributes) {                                                                  // 9135\n          if (caretBookmark) {                                                                                         // 9136\n            that.composer.selection.setBookmark(caretBookmark);                                                        // 9137\n          }                                                                                                            // 9138\n          that._execCommand(command, attributes);                                                                      // 9139\n                                                                                                                       // 9140\n          that.editor.fire(\"save:dialog\", { command: command, dialogContainer: dialogElement, commandLink: link });    // 9141\n        });                                                                                                            // 9142\n                                                                                                                       // 9143\n        dialog.observe(\"cancel\", function() {                                                                          // 9144\n          that.editor.focus(false);                                                                                    // 9145\n          that.editor.fire(\"cancel:dialog\", { command: command, dialogContainer: dialogElement, commandLink: link });  // 9146\n        });                                                                                                            // 9147\n      }                                                                                                                // 9148\n      return dialog;                                                                                                   // 9149\n    },                                                                                                                 // 9150\n                                                                                                                       // 9151\n    /**                                                                                                                // 9152\n     * @example                                                                                                        // 9153\n     *    var toolbar = new wysihtml5.Toolbar();                                                                       // 9154\n     *    // Insert a <blockquote> element or wrap current selection in <blockquote>                                   // 9155\n     *    toolbar.execCommand(\"formatBlock\", \"blockquote\");                                                            // 9156\n     */                                                                                                                // 9157\n    execCommand: function(command, commandValue) {                                                                     // 9158\n      if (this.commandsDisabled) {                                                                                     // 9159\n        return;                                                                                                        // 9160\n      }                                                                                                                // 9161\n                                                                                                                       // 9162\n      var commandObj = this.commandMapping[command + \":\" + commandValue];                                              // 9163\n                                                                                                                       // 9164\n      // Show dialog when available                                                                                    // 9165\n      if (commandObj && commandObj.dialog && !commandObj.state) {                                                      // 9166\n        commandObj.dialog.show();                                                                                      // 9167\n      } else {                                                                                                         // 9168\n        this._execCommand(command, commandValue);                                                                      // 9169\n      }                                                                                                                // 9170\n    },                                                                                                                 // 9171\n                                                                                                                       // 9172\n    _execCommand: function(command, commandValue) {                                                                    // 9173\n      // Make sure that composer is focussed (false => don't move caret to the end)                                    // 9174\n      this.editor.focus(false);                                                                                        // 9175\n                                                                                                                       // 9176\n      this.composer.commands.exec(command, commandValue);                                                              // 9177\n      this._updateLinkStates();                                                                                        // 9178\n    },                                                                                                                 // 9179\n                                                                                                                       // 9180\n    execAction: function(action) {                                                                                     // 9181\n      var editor = this.editor;                                                                                        // 9182\n      switch(action) {                                                                                                 // 9183\n        case \"change_view\":                                                                                            // 9184\n          if (editor.currentView === editor.textarea) {                                                                // 9185\n            editor.fire(\"change_view\", \"composer\");                                                                    // 9186\n          } else {                                                                                                     // 9187\n            editor.fire(\"change_view\", \"textarea\");                                                                    // 9188\n          }                                                                                                            // 9189\n          break;                                                                                                       // 9190\n      }                                                                                                                // 9191\n    },                                                                                                                 // 9192\n                                                                                                                       // 9193\n    _observe: function() {                                                                                             // 9194\n      var that      = this,                                                                                            // 9195\n          editor    = this.editor,                                                                                     // 9196\n          container = this.container,                                                                                  // 9197\n          links     = this.commandLinks.concat(this.actionLinks),                                                      // 9198\n          length    = links.length,                                                                                    // 9199\n          i         = 0;                                                                                               // 9200\n                                                                                                                       // 9201\n      for (; i<length; i++) {                                                                                          // 9202\n        // 'javascript:;' and unselectable=on Needed for IE, but done in all browsers to make sure that all get the same css applied\n        // (you know, a:link { ... } doesn't match anchors with missing href attribute)                                // 9204\n        dom.setAttributes({                                                                                            // 9205\n          href:         \"javascript:;\",                                                                                // 9206\n          unselectable: \"on\"                                                                                           // 9207\n        }).on(links[i]);                                                                                               // 9208\n      }                                                                                                                // 9209\n                                                                                                                       // 9210\n      // Needed for opera                                                                                              // 9211\n      dom.delegate(container, \"[data-wysihtml5-command]\", \"mousedown\", function(event) { event.preventDefault(); });   // 9212\n                                                                                                                       // 9213\n      dom.delegate(container, \"[data-wysihtml5-command]\", \"click\", function(event) {                                   // 9214\n        var link          = this,                                                                                      // 9215\n            command       = link.getAttribute(\"data-wysihtml5-command\"),                                               // 9216\n            commandValue  = link.getAttribute(\"data-wysihtml5-command-value\");                                         // 9217\n        that.execCommand(command, commandValue);                                                                       // 9218\n        event.preventDefault();                                                                                        // 9219\n      });                                                                                                              // 9220\n                                                                                                                       // 9221\n      dom.delegate(container, \"[data-wysihtml5-action]\", \"click\", function(event) {                                    // 9222\n        var action = this.getAttribute(\"data-wysihtml5-action\");                                                       // 9223\n        that.execAction(action);                                                                                       // 9224\n        event.preventDefault();                                                                                        // 9225\n      });                                                                                                              // 9226\n                                                                                                                       // 9227\n      editor.observe(\"focus:composer\", function() {                                                                    // 9228\n        that.bookmark = null;                                                                                          // 9229\n        clearInterval(that.interval);                                                                                  // 9230\n        that.interval = setInterval(function() { that._updateLinkStates(); }, 500);                                    // 9231\n      });                                                                                                              // 9232\n                                                                                                                       // 9233\n      editor.observe(\"blur:composer\", function() {                                                                     // 9234\n        clearInterval(that.interval);                                                                                  // 9235\n      });                                                                                                              // 9236\n                                                                                                                       // 9237\n      editor.observe(\"destroy:composer\", function() {                                                                  // 9238\n        clearInterval(that.interval);                                                                                  // 9239\n      });                                                                                                              // 9240\n                                                                                                                       // 9241\n      editor.observe(\"change_view\", function(currentView) {                                                            // 9242\n        // Set timeout needed in order to let the blur event fire first                                                // 9243\n        setTimeout(function() {                                                                                        // 9244\n          that.commandsDisabled = (currentView !== \"composer\");                                                        // 9245\n          that._updateLinkStates();                                                                                    // 9246\n          if (that.commandsDisabled) {                                                                                 // 9247\n            dom.addClass(container, CLASS_NAME_COMMANDS_DISABLED);                                                     // 9248\n          } else {                                                                                                     // 9249\n            dom.removeClass(container, CLASS_NAME_COMMANDS_DISABLED);                                                  // 9250\n          }                                                                                                            // 9251\n        }, 0);                                                                                                         // 9252\n      });                                                                                                              // 9253\n    },                                                                                                                 // 9254\n                                                                                                                       // 9255\n    _updateLinkStates: function() {                                                                                    // 9256\n      var element           = this.composer.element,                                                                   // 9257\n          commandMapping    = this.commandMapping,                                                                     // 9258\n          actionMapping     = this.actionMapping,                                                                      // 9259\n          i,                                                                                                           // 9260\n          state,                                                                                                       // 9261\n          action,                                                                                                      // 9262\n          command;                                                                                                     // 9263\n      // every millisecond counts... this is executed quite often                                                      // 9264\n      for (i in commandMapping) {                                                                                      // 9265\n        command = commandMapping[i];                                                                                   // 9266\n        if (this.commandsDisabled) {                                                                                   // 9267\n          state = false;                                                                                               // 9268\n          dom.removeClass(command.link, CLASS_NAME_COMMAND_ACTIVE);                                                    // 9269\n          if (command.group) {                                                                                         // 9270\n            dom.removeClass(command.group, CLASS_NAME_COMMAND_ACTIVE);                                                 // 9271\n          }                                                                                                            // 9272\n          if (command.dialog) {                                                                                        // 9273\n            command.dialog.hide();                                                                                     // 9274\n          }                                                                                                            // 9275\n        } else {                                                                                                       // 9276\n          state = this.composer.commands.state(command.name, command.value);                                           // 9277\n          if (wysihtml5.lang.object(state).isArray()) {                                                                // 9278\n            // Grab first and only object/element in state array, otherwise convert state into boolean                 // 9279\n            // to avoid showing a dialog for multiple selected elements which may have different attributes            // 9280\n            // eg. when two links with different href are selected, the state will be an array consisting of both link elements\n            // but the dialog interface can only update one                                                            // 9282\n            state = state.length === 1 ? state[0] : true;                                                              // 9283\n          }                                                                                                            // 9284\n          dom.removeClass(command.link, CLASS_NAME_COMMAND_DISABLED);                                                  // 9285\n          if (command.group) {                                                                                         // 9286\n            dom.removeClass(command.group, CLASS_NAME_COMMAND_DISABLED);                                               // 9287\n          }                                                                                                            // 9288\n        }                                                                                                              // 9289\n                                                                                                                       // 9290\n        if (command.state === state) {                                                                                 // 9291\n          continue;                                                                                                    // 9292\n        }                                                                                                              // 9293\n                                                                                                                       // 9294\n        command.state = state;                                                                                         // 9295\n        if (state) {                                                                                                   // 9296\n          dom.addClass(command.link, CLASS_NAME_COMMAND_ACTIVE);                                                       // 9297\n          if (command.group) {                                                                                         // 9298\n            dom.addClass(command.group, CLASS_NAME_COMMAND_ACTIVE);                                                    // 9299\n          }                                                                                                            // 9300\n          if (command.dialog) {                                                                                        // 9301\n            if (typeof(state) === \"object\") {                                                                          // 9302\n              command.dialog.show(state);                                                                              // 9303\n            } else {                                                                                                   // 9304\n              command.dialog.hide();                                                                                   // 9305\n            }                                                                                                          // 9306\n          }                                                                                                            // 9307\n        } else {                                                                                                       // 9308\n          dom.removeClass(command.link, CLASS_NAME_COMMAND_ACTIVE);                                                    // 9309\n          if (command.group) {                                                                                         // 9310\n            dom.removeClass(command.group, CLASS_NAME_COMMAND_ACTIVE);                                                 // 9311\n          }                                                                                                            // 9312\n          if (command.dialog) {                                                                                        // 9313\n            command.dialog.hide();                                                                                     // 9314\n          }                                                                                                            // 9315\n        }                                                                                                              // 9316\n      }                                                                                                                // 9317\n                                                                                                                       // 9318\n      for (i in actionMapping) {                                                                                       // 9319\n        action = actionMapping[i];                                                                                     // 9320\n                                                                                                                       // 9321\n        if (action.name === \"change_view\") {                                                                           // 9322\n          action.state = this.editor.currentView === this.editor.textarea;                                             // 9323\n          if (action.state) {                                                                                          // 9324\n            dom.addClass(action.link, CLASS_NAME_ACTION_ACTIVE);                                                       // 9325\n          } else {                                                                                                     // 9326\n            dom.removeClass(action.link, CLASS_NAME_ACTION_ACTIVE);                                                    // 9327\n          }                                                                                                            // 9328\n        }                                                                                                              // 9329\n      }                                                                                                                // 9330\n    },                                                                                                                 // 9331\n                                                                                                                       // 9332\n    show: function() {                                                                                                 // 9333\n      this.container.style.display = \"\";                                                                               // 9334\n    },                                                                                                                 // 9335\n                                                                                                                       // 9336\n    hide: function() {                                                                                                 // 9337\n      this.container.style.display = \"none\";                                                                           // 9338\n    }                                                                                                                  // 9339\n  });                                                                                                                  // 9340\n                                                                                                                       // 9341\n})(wysihtml5);                                                                                                         // 9342\n/**                                                                                                                    // 9343\n * WYSIHTML5 Editor                                                                                                    // 9344\n *                                                                                                                     // 9345\n * @param {Element} textareaElement Reference to the textarea which should be turned into a rich text interface        // 9346\n * @param {Object} [config] See defaultConfig object below for explanation of each individual config option            // 9347\n *                                                                                                                     // 9348\n * @events                                                                                                             // 9349\n *    load                                                                                                             // 9350\n *    beforeload (for internal use only)                                                                               // 9351\n *    focus                                                                                                            // 9352\n *    focus:composer                                                                                                   // 9353\n *    focus:textarea                                                                                                   // 9354\n *    blur                                                                                                             // 9355\n *    blur:composer                                                                                                    // 9356\n *    blur:textarea                                                                                                    // 9357\n *    change                                                                                                           // 9358\n *    change:composer                                                                                                  // 9359\n *    change:textarea                                                                                                  // 9360\n *    paste                                                                                                            // 9361\n *    paste:composer                                                                                                   // 9362\n *    paste:textarea                                                                                                   // 9363\n *    newword:composer                                                                                                 // 9364\n *    destroy:composer                                                                                                 // 9365\n *    undo:composer                                                                                                    // 9366\n *    redo:composer                                                                                                    // 9367\n *    beforecommand:composer                                                                                           // 9368\n *    aftercommand:composer                                                                                            // 9369\n *    change_view                                                                                                      // 9370\n */                                                                                                                    // 9371\n(function(wysihtml5) {                                                                                                 // 9372\n  var undef;                                                                                                           // 9373\n                                                                                                                       // 9374\n  var defaultConfig = {                                                                                                // 9375\n    // Give the editor a name, the name will also be set as class name on the iframe and on the iframe's body          // 9376\n    name:                 undef,                                                                                       // 9377\n    // Whether the editor should look like the textarea (by adopting styles)                                           // 9378\n    style:                true,                                                                                        // 9379\n    // Id of the toolbar element, pass falsey value if you don't want any toolbar logic                                // 9380\n    toolbar:              undef,                                                                                       // 9381\n    // Whether urls, entered by the user should automatically become clickable-links                                   // 9382\n    autoLink:             true,                                                                                        // 9383\n    // Object which includes parser rules to apply when html gets inserted via copy & paste                            // 9384\n    // See parser_rules/*.js for examples                                                                              // 9385\n    parserRules:          { tags: { br: {}, span: {}, div: {}, p: {} }, classes: {} },                                 // 9386\n    // Parser method to use when the user inserts content via copy & paste                                             // 9387\n    parser:               wysihtml5.dom.parse,                                                                         // 9388\n    // Class name which should be set on the contentEditable element in the created sandbox iframe, can be styled via the 'stylesheets' option\n    composerClassName:    \"wysihtml5-editor\",                                                                          // 9390\n    // Class name to add to the body when the wysihtml5 editor is supported                                            // 9391\n    bodyClassName:        \"wysihtml5-supported\",                                                                       // 9392\n    // Array (or single string) of stylesheet urls to be loaded in the editor's iframe                                 // 9393\n    stylesheets:          [],                                                                                          // 9394\n    // Placeholder text to use, defaults to the placeholder attribute on the textarea element                          // 9395\n    placeholderText:      undef,                                                                                       // 9396\n    // Whether the composer should allow the user to manually resize images, tables etc.                               // 9397\n    allowObjectResizing:  true,                                                                                        // 9398\n    // Whether the rich text editor should be rendered on touch devices (wysihtml5 >= 0.3.0 comes with basic support for iOS 5)\n    supportTouchDevices:  true                                                                                         // 9400\n  };                                                                                                                   // 9401\n                                                                                                                       // 9402\n  wysihtml5.Editor = wysihtml5.lang.Dispatcher.extend(                                                                 // 9403\n    /** @scope wysihtml5.Editor.prototype */ {                                                                         // 9404\n    constructor: function(textareaElement, config) {                                                                   // 9405\n      this.textareaElement  = typeof(textareaElement) === \"string\" ? document.getElementById(textareaElement) : textareaElement;\n      this.config           = wysihtml5.lang.object({}).merge(defaultConfig).merge(config).get();                      // 9407\n      this.textarea         = new wysihtml5.views.Textarea(this, this.textareaElement, this.config);                   // 9408\n      this.currentView      = this.textarea;                                                                           // 9409\n      this._isCompatible    = wysihtml5.browser.supported();                                                           // 9410\n                                                                                                                       // 9411\n      // Sort out unsupported/unwanted browsers here                                                                   // 9412\n      if (!this._isCompatible || (!this.config.supportTouchDevices && wysihtml5.browser.isTouchDevice())) {            // 9413\n        var that = this;                                                                                               // 9414\n        setTimeout(function() { that.fire(\"beforeload\").fire(\"load\"); }, 0);                                           // 9415\n        return;                                                                                                        // 9416\n      }                                                                                                                // 9417\n                                                                                                                       // 9418\n      // Add class name to body, to indicate that the editor is supported                                              // 9419\n      wysihtml5.dom.addClass(document.body, this.config.bodyClassName);                                                // 9420\n                                                                                                                       // 9421\n      this.composer = new wysihtml5.views.Composer(this, this.textareaElement, this.config);                           // 9422\n      this.currentView = this.composer;                                                                                // 9423\n                                                                                                                       // 9424\n      if (typeof(this.config.parser) === \"function\") {                                                                 // 9425\n        this._initParser();                                                                                            // 9426\n      }                                                                                                                // 9427\n                                                                                                                       // 9428\n      this.observe(\"beforeload\", function() {                                                                          // 9429\n        this.synchronizer = new wysihtml5.views.Synchronizer(this, this.textarea, this.composer);                      // 9430\n        if (this.config.toolbar) {                                                                                     // 9431\n          this.toolbar = new wysihtml5.toolbar.Toolbar(this, this.config.toolbar);                                     // 9432\n        }                                                                                                              // 9433\n      });                                                                                                              // 9434\n                                                                                                                       // 9435\n      try {                                                                                                            // 9436\n        console.log(\"Heya! This page is using wysihtml5 for rich text editing. Check out https://github.com/xing/wysihtml5\");\n      } catch(e) {}                                                                                                    // 9438\n    },                                                                                                                 // 9439\n                                                                                                                       // 9440\n    isCompatible: function() {                                                                                         // 9441\n      return this._isCompatible;                                                                                       // 9442\n    },                                                                                                                 // 9443\n                                                                                                                       // 9444\n    clear: function() {                                                                                                // 9445\n      this.currentView.clear();                                                                                        // 9446\n      return this;                                                                                                     // 9447\n    },                                                                                                                 // 9448\n                                                                                                                       // 9449\n    getValue: function(parse) {                                                                                        // 9450\n      return this.currentView.getValue(parse);                                                                         // 9451\n    },                                                                                                                 // 9452\n                                                                                                                       // 9453\n    setValue: function(html, parse) {                                                                                  // 9454\n      if (!html) {                                                                                                     // 9455\n        return this.clear();                                                                                           // 9456\n      }                                                                                                                // 9457\n      this.currentView.setValue(html, parse);                                                                          // 9458\n      return this;                                                                                                     // 9459\n    },                                                                                                                 // 9460\n                                                                                                                       // 9461\n    focus: function(setToEnd) {                                                                                        // 9462\n      this.currentView.focus(setToEnd);                                                                                // 9463\n      return this;                                                                                                     // 9464\n    },                                                                                                                 // 9465\n                                                                                                                       // 9466\n    /**                                                                                                                // 9467\n     * Deactivate editor (make it readonly)                                                                            // 9468\n     */                                                                                                                // 9469\n    disable: function() {                                                                                              // 9470\n      this.currentView.disable();                                                                                      // 9471\n      return this;                                                                                                     // 9472\n    },                                                                                                                 // 9473\n                                                                                                                       // 9474\n    /**                                                                                                                // 9475\n     * Activate editor                                                                                                 // 9476\n     */                                                                                                                // 9477\n    enable: function() {                                                                                               // 9478\n      this.currentView.enable();                                                                                       // 9479\n      return this;                                                                                                     // 9480\n    },                                                                                                                 // 9481\n                                                                                                                       // 9482\n    isEmpty: function() {                                                                                              // 9483\n      return this.currentView.isEmpty();                                                                               // 9484\n    },                                                                                                                 // 9485\n                                                                                                                       // 9486\n    hasPlaceholderSet: function() {                                                                                    // 9487\n      return this.currentView.hasPlaceholderSet();                                                                     // 9488\n    },                                                                                                                 // 9489\n                                                                                                                       // 9490\n    parse: function(htmlOrElement) {                                                                                   // 9491\n      var returnValue = this.config.parser(htmlOrElement, this.config.parserRules, this.composer.sandbox.getDocument(), true);\n      if (typeof(htmlOrElement) === \"object\") {                                                                        // 9493\n        wysihtml5.quirks.redraw(htmlOrElement);                                                                        // 9494\n      }                                                                                                                // 9495\n      return returnValue;                                                                                              // 9496\n    },                                                                                                                 // 9497\n                                                                                                                       // 9498\n    /**                                                                                                                // 9499\n     * Prepare html parser logic                                                                                       // 9500\n     *  - Observes for paste and drop                                                                                  // 9501\n     */                                                                                                                // 9502\n    _initParser: function() {                                                                                          // 9503\n      this.observe(\"paste:composer\", function() {                                                                      // 9504\n        var keepScrollPosition  = true,                                                                                // 9505\n            that                = this;                                                                                // 9506\n        that.composer.selection.executeAndRestore(function() {                                                         // 9507\n          wysihtml5.quirks.cleanPastedHTML(that.composer.element);                                                     // 9508\n          that.parse(that.composer.element);                                                                           // 9509\n        }, keepScrollPosition);                                                                                        // 9510\n      });                                                                                                              // 9511\n                                                                                                                       // 9512\n      this.observe(\"paste:textarea\", function() {                                                                      // 9513\n        var value   = this.textarea.getValue(),                                                                        // 9514\n            newValue;                                                                                                  // 9515\n        newValue = this.parse(value);                                                                                  // 9516\n        this.textarea.setValue(newValue);                                                                              // 9517\n      });                                                                                                              // 9518\n    }                                                                                                                  // 9519\n  });                                                                                                                  // 9520\n})(wysihtml5);                                                                                                         // 9521\n                                                                                                                       // 9522\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/natestrauser_x-editable-bootstrap/lib/wysihtml5/bootstrap-wysihtml5-0.0.2/bootstrap-wysihtml5-0.0.2.js     //\n// This file is in bare mode and is not in its own closure.                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n!function($, wysi) {                                                                                                   // 1\n    \"use strict\";                                                                                                      // 2\n                                                                                                                       // 3\n    var tpl = {                                                                                                        // 4\n        \"font-styles\": function(locale, options) {                                                                     // 5\n            var size = (options && options.size) ? ' btn-'+options.size : '';                                          // 6\n            return \"<li class='dropdown'>\" +                                                                           // 7\n              \"<a class='btn dropdown-toggle\" + size + \"' data-toggle='dropdown' href='#'>\" +                          // 8\n              \"<i class='icon-font'></i>&nbsp;<span class='current-font'>\" + locale.font_styles.normal + \"</span>&nbsp;<b class='caret'></b>\" +\n              \"</a>\" +                                                                                                 // 10\n              \"<ul class='dropdown-menu'>\" +                                                                           // 11\n                \"<li><a data-wysihtml5-command='formatBlock' data-wysihtml5-command-value='div' tabindex='-1'>\" + locale.font_styles.normal + \"</a></li>\" +\n                \"<li><a data-wysihtml5-command='formatBlock' data-wysihtml5-command-value='h1' tabindex='-1'>\" + locale.font_styles.h1 + \"</a></li>\" +\n                \"<li><a data-wysihtml5-command='formatBlock' data-wysihtml5-command-value='h2' tabindex='-1'>\" + locale.font_styles.h2 + \"</a></li>\" +\n                \"<li><a data-wysihtml5-command='formatBlock' data-wysihtml5-command-value='h3' tabindex='-1'>\" + locale.font_styles.h3 + \"</a></li>\" +\n              \"</ul>\" +                                                                                                // 16\n            \"</li>\";                                                                                                   // 17\n        },                                                                                                             // 18\n                                                                                                                       // 19\n        \"emphasis\": function(locale, options) {                                                                        // 20\n            var size = (options && options.size) ? ' btn-'+options.size : '';                                          // 21\n            return \"<li>\" +                                                                                            // 22\n              \"<div class='btn-group'>\" +                                                                              // 23\n                \"<a class='btn\" + size + \"' data-wysihtml5-command='bold' title='CTRL+B' tabindex='-1'>\" + locale.emphasis.bold + \"</a>\" +\n                \"<a class='btn\" + size + \"' data-wysihtml5-command='italic' title='CTRL+I' tabindex='-1'>\" + locale.emphasis.italic + \"</a>\" +\n                \"<a class='btn\" + size + \"' data-wysihtml5-command='underline' title='CTRL+U' tabindex='-1'>\" + locale.emphasis.underline + \"</a>\" +\n              \"</div>\" +                                                                                               // 27\n            \"</li>\";                                                                                                   // 28\n        },                                                                                                             // 29\n                                                                                                                       // 30\n        \"lists\": function(locale, options) {                                                                           // 31\n            var size = (options && options.size) ? ' btn-'+options.size : '';                                          // 32\n            return \"<li>\" +                                                                                            // 33\n              \"<div class='btn-group'>\" +                                                                              // 34\n                \"<a class='btn\" + size + \"' data-wysihtml5-command='insertUnorderedList' title='\" + locale.lists.unordered + \"' tabindex='-1'><i class='icon-list'></i></a>\" +\n                \"<a class='btn\" + size + \"' data-wysihtml5-command='insertOrderedList' title='\" + locale.lists.ordered + \"' tabindex='-1'><i class='icon-th-list'></i></a>\" +\n                \"<a class='btn\" + size + \"' data-wysihtml5-command='Outdent' title='\" + locale.lists.outdent + \"' tabindex='-1'><i class='icon-indent-right'></i></a>\" +\n                \"<a class='btn\" + size + \"' data-wysihtml5-command='Indent' title='\" + locale.lists.indent + \"' tabindex='-1'><i class='icon-indent-left'></i></a>\" +\n              \"</div>\" +                                                                                               // 39\n            \"</li>\";                                                                                                   // 40\n        },                                                                                                             // 41\n                                                                                                                       // 42\n        \"link\": function(locale, options) {                                                                            // 43\n            var size = (options && options.size) ? ' btn-'+options.size : '';                                          // 44\n            return \"<li>\" +                                                                                            // 45\n              \"<div class='bootstrap-wysihtml5-insert-link-modal modal hide fade'>\" +                                  // 46\n                \"<div class='modal-header'>\" +                                                                         // 47\n                  \"<a class='close' data-dismiss='modal'>&times;</a>\" +                                                // 48\n                  \"<h3>\" + locale.link.insert + \"</h3>\" +                                                              // 49\n                \"</div>\" +                                                                                             // 50\n                \"<div class='modal-body'>\" +                                                                           // 51\n                  \"<input value='http://' class='bootstrap-wysihtml5-insert-link-url input-xlarge'>\" +                 // 52\n                \"</div>\" +                                                                                             // 53\n                \"<div class='modal-footer'>\" +                                                                         // 54\n                  \"<a href='#' class='btn' data-dismiss='modal'>\" + locale.link.cancel + \"</a>\" +                      // 55\n                  \"<a href='#' class='btn btn-primary' data-dismiss='modal'>\" + locale.link.insert + \"</a>\" +          // 56\n                \"</div>\" +                                                                                             // 57\n              \"</div>\" +                                                                                               // 58\n              \"<a class='btn\" + size + \"' data-wysihtml5-command='createLink' title='\" + locale.link.insert + \"' tabindex='-1'><i class='icon-share'></i></a>\" +\n            \"</li>\";                                                                                                   // 60\n        },                                                                                                             // 61\n                                                                                                                       // 62\n        \"image\": function(locale, options) {                                                                           // 63\n            var size = (options && options.size) ? ' btn-'+options.size : '';                                          // 64\n            return \"<li>\" +                                                                                            // 65\n              \"<div class='bootstrap-wysihtml5-insert-image-modal modal hide fade'>\" +                                 // 66\n                \"<div class='modal-header'>\" +                                                                         // 67\n                  \"<a class='close' data-dismiss='modal'>&times;</a>\" +                                                // 68\n                  \"<h3>\" + locale.image.insert + \"</h3>\" +                                                             // 69\n                \"</div>\" +                                                                                             // 70\n                \"<div class='modal-body'>\" +                                                                           // 71\n                  \"<input value='http://' class='bootstrap-wysihtml5-insert-image-url input-xlarge'>\" +                // 72\n                \"</div>\" +                                                                                             // 73\n                \"<div class='modal-footer'>\" +                                                                         // 74\n                  \"<a href='#' class='btn' data-dismiss='modal'>\" + locale.image.cancel + \"</a>\" +                     // 75\n                  \"<a href='#' class='btn btn-primary' data-dismiss='modal'>\" + locale.image.insert + \"</a>\" +         // 76\n                \"</div>\" +                                                                                             // 77\n              \"</div>\" +                                                                                               // 78\n              \"<a class='btn\" + size + \"' data-wysihtml5-command='insertImage' title='\" + locale.image.insert + \"' tabindex='-1'><i class='icon-picture'></i></a>\" +\n            \"</li>\";                                                                                                   // 80\n        },                                                                                                             // 81\n                                                                                                                       // 82\n        \"html\": function(locale, options) {                                                                            // 83\n            var size = (options && options.size) ? ' btn-'+options.size : '';                                          // 84\n            return \"<li>\" +                                                                                            // 85\n              \"<div class='btn-group'>\" +                                                                              // 86\n                \"<a class='btn\" + size + \"' data-wysihtml5-action='change_view' title='\" + locale.html.edit + \"' tabindex='-1'><i class='icon-pencil'></i></a>\" +\n              \"</div>\" +                                                                                               // 88\n            \"</li>\";                                                                                                   // 89\n        },                                                                                                             // 90\n                                                                                                                       // 91\n        \"color\": function(locale, options) {                                                                           // 92\n            var size = (options && options.size) ? ' btn-'+options.size : '';                                          // 93\n            return \"<li class='dropdown'>\" +                                                                           // 94\n              \"<a class='btn dropdown-toggle\" + size + \"' data-toggle='dropdown' href='#' tabindex='-1'>\" +            // 95\n                \"<span class='current-color'>\" + locale.colours.black + \"</span>&nbsp;<b class='caret'></b>\" +         // 96\n              \"</a>\" +                                                                                                 // 97\n              \"<ul class='dropdown-menu'>\" +                                                                           // 98\n                \"<li><div class='wysihtml5-colors' data-wysihtml5-command-value='black'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='black'>\" + locale.colours.black + \"</a></li>\" +\n                \"<li><div class='wysihtml5-colors' data-wysihtml5-command-value='silver'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='silver'>\" + locale.colours.silver + \"</a></li>\" +\n                \"<li><div class='wysihtml5-colors' data-wysihtml5-command-value='gray'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='gray'>\" + locale.colours.gray + \"</a></li>\" +\n                \"<li><div class='wysihtml5-colors' data-wysihtml5-command-value='maroon'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='maroon'>\" + locale.colours.maroon + \"</a></li>\" +\n                \"<li><div class='wysihtml5-colors' data-wysihtml5-command-value='red'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='red'>\" + locale.colours.red + \"</a></li>\" +\n                \"<li><div class='wysihtml5-colors' data-wysihtml5-command-value='purple'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='purple'>\" + locale.colours.purple + \"</a></li>\" +\n                \"<li><div class='wysihtml5-colors' data-wysihtml5-command-value='green'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='green'>\" + locale.colours.green + \"</a></li>\" +\n                \"<li><div class='wysihtml5-colors' data-wysihtml5-command-value='olive'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='olive'>\" + locale.colours.olive + \"</a></li>\" +\n                \"<li><div class='wysihtml5-colors' data-wysihtml5-command-value='navy'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='navy'>\" + locale.colours.navy + \"</a></li>\" +\n                \"<li><div class='wysihtml5-colors' data-wysihtml5-command-value='blue'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='blue'>\" + locale.colours.blue + \"</a></li>\" +\n                \"<li><div class='wysihtml5-colors' data-wysihtml5-command-value='orange'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='orange'>\" + locale.colours.orange + \"</a></li>\" +\n              \"</ul>\" +                                                                                                // 110\n            \"</li>\";                                                                                                   // 111\n        }                                                                                                              // 112\n    };                                                                                                                 // 113\n                                                                                                                       // 114\n    var templates = function(key, locale, options) {                                                                   // 115\n        return tpl[key](locale, options);                                                                              // 116\n    };                                                                                                                 // 117\n                                                                                                                       // 118\n                                                                                                                       // 119\n    var Wysihtml5 = function(el, options) {                                                                            // 120\n        this.el = el;                                                                                                  // 121\n        var toolbarOpts = options || defaultOptions;                                                                   // 122\n        for(var t in toolbarOpts.customTemplates) {                                                                    // 123\n          tpl[t] = toolbarOpts.customTemplates[t];                                                                     // 124\n        }                                                                                                              // 125\n        this.toolbar = this.createToolbar(el, toolbarOpts);                                                            // 126\n        this.editor =  this.createEditor(options);                                                                     // 127\n                                                                                                                       // 128\n        window.editor = this.editor;                                                                                   // 129\n                                                                                                                       // 130\n        $('iframe.wysihtml5-sandbox').each(function(i, el){                                                            // 131\n            $(el.contentWindow).off('focus.wysihtml5').on({                                                            // 132\n                'focus.wysihtml5' : function(){                                                                        // 133\n                    $('li.dropdown').removeClass('open');                                                              // 134\n                }                                                                                                      // 135\n            });                                                                                                        // 136\n        });                                                                                                            // 137\n    };                                                                                                                 // 138\n                                                                                                                       // 139\n    Wysihtml5.prototype = {                                                                                            // 140\n                                                                                                                       // 141\n        constructor: Wysihtml5,                                                                                        // 142\n                                                                                                                       // 143\n        createEditor: function(options) {                                                                              // 144\n            options = options || {};                                                                                   // 145\n                                                                                                                       // 146\n            // Add the toolbar to a clone of the options object so multiple instances                                  // 147\n            // of the WYISYWG don't break because \"toolbar\" is already defined                                         // 148\n            options = $.extend(true, {}, options);                                                                     // 149\n            options.toolbar = this.toolbar[0];                                                                         // 150\n                                                                                                                       // 151\n            var editor = new wysi.Editor(this.el[0], options);                                                         // 152\n                                                                                                                       // 153\n            if(options && options.events) {                                                                            // 154\n                for(var eventName in options.events) {                                                                 // 155\n                    editor.on(eventName, options.events[eventName]);                                                   // 156\n                }                                                                                                      // 157\n            }                                                                                                          // 158\n            return editor;                                                                                             // 159\n        },                                                                                                             // 160\n                                                                                                                       // 161\n        createToolbar: function(el, options) {                                                                         // 162\n            var self = this;                                                                                           // 163\n            var toolbar = $(\"<ul/>\", {                                                                                 // 164\n                'class' : \"wysihtml5-toolbar\",                                                                         // 165\n                'style': \"display:none\"                                                                                // 166\n            });                                                                                                        // 167\n            var culture = options.locale || defaultOptions.locale || \"en\";                                             // 168\n            for(var key in defaultOptions) {                                                                           // 169\n                var value = false;                                                                                     // 170\n                                                                                                                       // 171\n                if(options[key] !== undefined) {                                                                       // 172\n                    if(options[key] === true) {                                                                        // 173\n                        value = true;                                                                                  // 174\n                    }                                                                                                  // 175\n                } else {                                                                                               // 176\n                    value = defaultOptions[key];                                                                       // 177\n                }                                                                                                      // 178\n                                                                                                                       // 179\n                if(value === true) {                                                                                   // 180\n                    toolbar.append(templates(key, locale[culture], options));                                          // 181\n                                                                                                                       // 182\n                    if(key === \"html\") {                                                                               // 183\n                        this.initHtml(toolbar);                                                                        // 184\n                    }                                                                                                  // 185\n                                                                                                                       // 186\n                    if(key === \"link\") {                                                                               // 187\n                        this.initInsertLink(toolbar);                                                                  // 188\n                    }                                                                                                  // 189\n                                                                                                                       // 190\n                    if(key === \"image\") {                                                                              // 191\n                        this.initInsertImage(toolbar);                                                                 // 192\n                    }                                                                                                  // 193\n                }                                                                                                      // 194\n            }                                                                                                          // 195\n                                                                                                                       // 196\n            if(options.toolbar) {                                                                                      // 197\n                for(key in options.toolbar) {                                                                          // 198\n                    toolbar.append(options.toolbar[key]);                                                              // 199\n                }                                                                                                      // 200\n            }                                                                                                          // 201\n                                                                                                                       // 202\n            toolbar.find(\"a[data-wysihtml5-command='formatBlock']\").click(function(e) {                                // 203\n                var target = e.target || e.srcElement;                                                                 // 204\n                var el = $(target);                                                                                    // 205\n                self.toolbar.find('.current-font').text(el.html());                                                    // 206\n            });                                                                                                        // 207\n                                                                                                                       // 208\n            toolbar.find(\"a[data-wysihtml5-command='foreColor']\").click(function(e) {                                  // 209\n                var target = e.target || e.srcElement;                                                                 // 210\n                var el = $(target);                                                                                    // 211\n                self.toolbar.find('.current-color').text(el.html());                                                   // 212\n            });                                                                                                        // 213\n                                                                                                                       // 214\n            this.el.before(toolbar);                                                                                   // 215\n                                                                                                                       // 216\n            return toolbar;                                                                                            // 217\n        },                                                                                                             // 218\n                                                                                                                       // 219\n        initHtml: function(toolbar) {                                                                                  // 220\n            var changeViewSelector = \"a[data-wysihtml5-action='change_view']\";                                         // 221\n            toolbar.find(changeViewSelector).click(function(e) {                                                       // 222\n                toolbar.find('a.btn').not(changeViewSelector).toggleClass('disabled');                                 // 223\n            });                                                                                                        // 224\n        },                                                                                                             // 225\n                                                                                                                       // 226\n        initInsertImage: function(toolbar) {                                                                           // 227\n            var self = this;                                                                                           // 228\n            var insertImageModal = toolbar.find('.bootstrap-wysihtml5-insert-image-modal');                            // 229\n            var urlInput = insertImageModal.find('.bootstrap-wysihtml5-insert-image-url');                             // 230\n            var insertButton = insertImageModal.find('a.btn-primary');                                                 // 231\n            var initialValue = urlInput.val();                                                                         // 232\n            var caretBookmark;                                                                                         // 233\n                                                                                                                       // 234\n            var insertImage = function() {                                                                             // 235\n                var url = urlInput.val();                                                                              // 236\n                urlInput.val(initialValue);                                                                            // 237\n                self.editor.currentView.element.focus();                                                               // 238\n                if (caretBookmark) {                                                                                   // 239\n                  self.editor.composer.selection.setBookmark(caretBookmark);                                           // 240\n                  caretBookmark = null;                                                                                // 241\n                }                                                                                                      // 242\n                self.editor.composer.commands.exec(\"insertImage\", url);                                                // 243\n            };                                                                                                         // 244\n                                                                                                                       // 245\n            urlInput.keypress(function(e) {                                                                            // 246\n                if(e.which == 13) {                                                                                    // 247\n                    insertImage();                                                                                     // 248\n                    insertImageModal.modal('hide');                                                                    // 249\n                }                                                                                                      // 250\n            });                                                                                                        // 251\n                                                                                                                       // 252\n            insertButton.click(insertImage);                                                                           // 253\n                                                                                                                       // 254\n            insertImageModal.on('shown', function() {                                                                  // 255\n                urlInput.focus();                                                                                      // 256\n            });                                                                                                        // 257\n                                                                                                                       // 258\n            insertImageModal.on('hide', function() {                                                                   // 259\n                self.editor.currentView.element.focus();                                                               // 260\n            });                                                                                                        // 261\n                                                                                                                       // 262\n            toolbar.find('a[data-wysihtml5-command=insertImage]').click(function() {                                   // 263\n                var activeButton = $(this).hasClass(\"wysihtml5-command-active\");                                       // 264\n                                                                                                                       // 265\n                if (!activeButton) {                                                                                   // 266\n                    self.editor.currentView.element.focus(false);                                                      // 267\n                    caretBookmark = self.editor.composer.selection.getBookmark();                                      // 268\n                    insertImageModal.appendTo('body').modal('show');                                                   // 269\n                    insertImageModal.on('click.dismiss.modal', '[data-dismiss=\"modal\"]', function(e) {                 // 270\n                        e.stopPropagation();                                                                           // 271\n                    });                                                                                                // 272\n                    return false;                                                                                      // 273\n                }                                                                                                      // 274\n                else {                                                                                                 // 275\n                    return true;                                                                                       // 276\n                }                                                                                                      // 277\n            });                                                                                                        // 278\n        },                                                                                                             // 279\n                                                                                                                       // 280\n        initInsertLink: function(toolbar) {                                                                            // 281\n            var self = this;                                                                                           // 282\n            var insertLinkModal = toolbar.find('.bootstrap-wysihtml5-insert-link-modal');                              // 283\n            var urlInput = insertLinkModal.find('.bootstrap-wysihtml5-insert-link-url');                               // 284\n            var insertButton = insertLinkModal.find('a.btn-primary');                                                  // 285\n            var initialValue = urlInput.val();                                                                         // 286\n            var caretBookmark;                                                                                         // 287\n                                                                                                                       // 288\n            var insertLink = function() {                                                                              // 289\n                var url = urlInput.val();                                                                              // 290\n                urlInput.val(initialValue);                                                                            // 291\n                self.editor.currentView.element.focus();                                                               // 292\n                if (caretBookmark) {                                                                                   // 293\n                  self.editor.composer.selection.setBookmark(caretBookmark);                                           // 294\n                  caretBookmark = null;                                                                                // 295\n                }                                                                                                      // 296\n                self.editor.composer.commands.exec(\"createLink\", {                                                     // 297\n                    href: url,                                                                                         // 298\n                    target: \"_blank\",                                                                                  // 299\n                    rel: \"nofollow\"                                                                                    // 300\n                });                                                                                                    // 301\n            };                                                                                                         // 302\n            var pressedEnter = false;                                                                                  // 303\n                                                                                                                       // 304\n            urlInput.keypress(function(e) {                                                                            // 305\n                if(e.which == 13) {                                                                                    // 306\n                    insertLink();                                                                                      // 307\n                    insertLinkModal.modal('hide');                                                                     // 308\n                }                                                                                                      // 309\n            });                                                                                                        // 310\n                                                                                                                       // 311\n            insertButton.click(insertLink);                                                                            // 312\n                                                                                                                       // 313\n            insertLinkModal.on('shown', function() {                                                                   // 314\n                urlInput.focus();                                                                                      // 315\n            });                                                                                                        // 316\n                                                                                                                       // 317\n            insertLinkModal.on('hide', function() {                                                                    // 318\n                self.editor.currentView.element.focus();                                                               // 319\n            });                                                                                                        // 320\n                                                                                                                       // 321\n            toolbar.find('a[data-wysihtml5-command=createLink]').click(function() {                                    // 322\n                var activeButton = $(this).hasClass(\"wysihtml5-command-active\");                                       // 323\n                                                                                                                       // 324\n                if (!activeButton) {                                                                                   // 325\n                    self.editor.currentView.element.focus(false);                                                      // 326\n                    caretBookmark = self.editor.composer.selection.getBookmark();                                      // 327\n                    insertLinkModal.appendTo('body').modal('show');                                                    // 328\n                    insertLinkModal.on('click.dismiss.modal', '[data-dismiss=\"modal\"]', function(e) {                  // 329\n                        e.stopPropagation();                                                                           // 330\n                    });                                                                                                // 331\n                    return false;                                                                                      // 332\n                }                                                                                                      // 333\n                else {                                                                                                 // 334\n                    return true;                                                                                       // 335\n                }                                                                                                      // 336\n            });                                                                                                        // 337\n        }                                                                                                              // 338\n    };                                                                                                                 // 339\n                                                                                                                       // 340\n    // these define our public api                                                                                     // 341\n    var methods = {                                                                                                    // 342\n        resetDefaults: function() {                                                                                    // 343\n            $.fn.wysihtml5.defaultOptions = $.extend(true, {}, $.fn.wysihtml5.defaultOptionsCache);                    // 344\n        },                                                                                                             // 345\n        bypassDefaults: function(options) {                                                                            // 346\n            return this.each(function () {                                                                             // 347\n                var $this = $(this);                                                                                   // 348\n                $this.data('wysihtml5', new Wysihtml5($this, options));                                                // 349\n            });                                                                                                        // 350\n        },                                                                                                             // 351\n        shallowExtend: function (options) {                                                                            // 352\n            var settings = $.extend({}, $.fn.wysihtml5.defaultOptions, options || {});                                 // 353\n            var that = this;                                                                                           // 354\n            return methods.bypassDefaults.apply(that, [settings]);                                                     // 355\n        },                                                                                                             // 356\n        deepExtend: function(options) {                                                                                // 357\n            var settings = $.extend(true, {}, $.fn.wysihtml5.defaultOptions, options || {});                           // 358\n            var that = this;                                                                                           // 359\n            return methods.bypassDefaults.apply(that, [settings]);                                                     // 360\n        },                                                                                                             // 361\n        init: function(options) {                                                                                      // 362\n            var that = this;                                                                                           // 363\n            return methods.shallowExtend.apply(that, [options]);                                                       // 364\n        }                                                                                                              // 365\n    };                                                                                                                 // 366\n                                                                                                                       // 367\n    $.fn.wysihtml5 = function ( method ) {                                                                             // 368\n        if ( methods[method] ) {                                                                                       // 369\n            return methods[method].apply( this, Array.prototype.slice.call( arguments, 1 ));                           // 370\n        } else if ( typeof method === 'object' || ! method ) {                                                         // 371\n            return methods.init.apply( this, arguments );                                                              // 372\n        } else {                                                                                                       // 373\n            $.error( 'Method ' +  method + ' does not exist on jQuery.wysihtml5' );                                    // 374\n        }                                                                                                              // 375\n    };                                                                                                                 // 376\n                                                                                                                       // 377\n    $.fn.wysihtml5.Constructor = Wysihtml5;                                                                            // 378\n                                                                                                                       // 379\n    var defaultOptions = $.fn.wysihtml5.defaultOptions = {                                                             // 380\n        \"font-styles\": true,                                                                                           // 381\n        \"color\": false,                                                                                                // 382\n        \"emphasis\": true,                                                                                              // 383\n        \"lists\": true,                                                                                                 // 384\n        \"html\": false,                                                                                                 // 385\n        \"link\": true,                                                                                                  // 386\n        \"image\": true,                                                                                                 // 387\n        events: {},                                                                                                    // 388\n        parserRules: {                                                                                                 // 389\n            classes: {                                                                                                 // 390\n                // (path_to_project/lib/css/wysiwyg-color.css)                                                         // 391\n                \"wysiwyg-color-silver\" : 1,                                                                            // 392\n                \"wysiwyg-color-gray\" : 1,                                                                              // 393\n                \"wysiwyg-color-white\" : 1,                                                                             // 394\n                \"wysiwyg-color-maroon\" : 1,                                                                            // 395\n                \"wysiwyg-color-red\" : 1,                                                                               // 396\n                \"wysiwyg-color-purple\" : 1,                                                                            // 397\n                \"wysiwyg-color-fuchsia\" : 1,                                                                           // 398\n                \"wysiwyg-color-green\" : 1,                                                                             // 399\n                \"wysiwyg-color-lime\" : 1,                                                                              // 400\n                \"wysiwyg-color-olive\" : 1,                                                                             // 401\n                \"wysiwyg-color-yellow\" : 1,                                                                            // 402\n                \"wysiwyg-color-navy\" : 1,                                                                              // 403\n                \"wysiwyg-color-blue\" : 1,                                                                              // 404\n                \"wysiwyg-color-teal\" : 1,                                                                              // 405\n                \"wysiwyg-color-aqua\" : 1,                                                                              // 406\n                \"wysiwyg-color-orange\" : 1                                                                             // 407\n            },                                                                                                         // 408\n            tags: {                                                                                                    // 409\n                \"b\":  {},                                                                                              // 410\n                \"i\":  {},                                                                                              // 411\n                \"br\": {},                                                                                              // 412\n                \"ol\": {},                                                                                              // 413\n                \"ul\": {},                                                                                              // 414\n                \"li\": {},                                                                                              // 415\n                \"h1\": {},                                                                                              // 416\n                \"h2\": {},                                                                                              // 417\n                \"h3\": {},                                                                                              // 418\n                \"blockquote\": {},                                                                                      // 419\n                \"u\": 1,                                                                                                // 420\n                \"img\": {                                                                                               // 421\n                    \"check_attributes\": {                                                                              // 422\n                        \"width\": \"numbers\",                                                                            // 423\n                        \"alt\": \"alt\",                                                                                  // 424\n                        \"src\": \"url\",                                                                                  // 425\n                        \"height\": \"numbers\"                                                                            // 426\n                    }                                                                                                  // 427\n                },                                                                                                     // 428\n                \"a\":  {                                                                                                // 429\n                    set_attributes: {                                                                                  // 430\n                        target: \"_blank\",                                                                              // 431\n                        rel:    \"nofollow\"                                                                             // 432\n                    },                                                                                                 // 433\n                    check_attributes: {                                                                                // 434\n                        href:   \"url\" // important to avoid XSS                                                        // 435\n                    }                                                                                                  // 436\n                },                                                                                                     // 437\n                \"span\": 1,                                                                                             // 438\n                \"div\": 1,                                                                                              // 439\n                // to allow save and edit files with code tag hacks                                                    // 440\n                \"code\": 1,                                                                                             // 441\n                \"pre\": 1                                                                                               // 442\n            }                                                                                                          // 443\n        },                                                                                                             // 444\n        stylesheets: [\"./lib/css/wysiwyg-color.css\"], // (path_to_project/lib/css/wysiwyg-color.css)                   // 445\n        locale: \"en\"                                                                                                   // 446\n    };                                                                                                                 // 447\n                                                                                                                       // 448\n    if (typeof $.fn.wysihtml5.defaultOptionsCache === 'undefined') {                                                   // 449\n        $.fn.wysihtml5.defaultOptionsCache = $.extend(true, {}, $.fn.wysihtml5.defaultOptions);                        // 450\n    }                                                                                                                  // 451\n                                                                                                                       // 452\n    var locale = $.fn.wysihtml5.locale = {                                                                             // 453\n        en: {                                                                                                          // 454\n            font_styles: {                                                                                             // 455\n                normal: \"Normal text\",                                                                                 // 456\n                h1: \"Heading 1\",                                                                                       // 457\n                h2: \"Heading 2\",                                                                                       // 458\n                h3: \"Heading 3\"                                                                                        // 459\n            },                                                                                                         // 460\n            emphasis: {                                                                                                // 461\n                bold: \"Bold\",                                                                                          // 462\n                italic: \"Italic\",                                                                                      // 463\n                underline: \"Underline\"                                                                                 // 464\n            },                                                                                                         // 465\n            lists: {                                                                                                   // 466\n                unordered: \"Unordered list\",                                                                           // 467\n                ordered: \"Ordered list\",                                                                               // 468\n                outdent: \"Outdent\",                                                                                    // 469\n                indent: \"Indent\"                                                                                       // 470\n            },                                                                                                         // 471\n            link: {                                                                                                    // 472\n                insert: \"Insert link\",                                                                                 // 473\n                cancel: \"Cancel\"                                                                                       // 474\n            },                                                                                                         // 475\n            image: {                                                                                                   // 476\n                insert: \"Insert image\",                                                                                // 477\n                cancel: \"Cancel\"                                                                                       // 478\n            },                                                                                                         // 479\n            html: {                                                                                                    // 480\n                edit: \"Edit HTML\"                                                                                      // 481\n            },                                                                                                         // 482\n            colours: {                                                                                                 // 483\n                black: \"Black\",                                                                                        // 484\n                silver: \"Silver\",                                                                                      // 485\n                gray: \"Grey\",                                                                                          // 486\n                maroon: \"Maroon\",                                                                                      // 487\n                red: \"Red\",                                                                                            // 488\n                purple: \"Purple\",                                                                                      // 489\n                green: \"Green\",                                                                                        // 490\n                olive: \"Olive\",                                                                                        // 491\n                navy: \"Navy\",                                                                                          // 492\n                blue: \"Blue\",                                                                                          // 493\n                orange: \"Orange\"                                                                                       // 494\n            }                                                                                                          // 495\n        }                                                                                                              // 496\n    };                                                                                                                 // 497\n                                                                                                                       // 498\n}(jQuery, wysihtml5);                                                                                                  // 499\n                                                                                                                       // 500\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['natestrauser:x-editable-bootstrap'] = {};\n\n})();\n","servePath":"/packages/natestrauser_x-editable-bootstrap.js","sourceMap":{"version":3,"sources":["/packages/natestrauser_x-editable-bootstrap/lib/bootstrap-editable/js/bootstrap-editable.js","/packages/natestrauser_x-editable-bootstrap/lib/address/address.js","/packages/natestrauser_x-editable-bootstrap/lib/wysihtml5/wysihtml5.js","/packages/natestrauser_x-editable-bootstrap/lib/wysihtml5/bootstrap-wysihtml5-0.0.2/wysihtml5-0.3.0.js","/packages/natestrauser_x-editable-bootstrap/lib/wysihtml5/bootstrap-wysihtml5-0.0.2/bootstrap-wysihtml5-0.0.2.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8H;;;;;;;;;;;;;;;;ACvpzjzfile":"/packages/natestrauser_x-editable-bootstrap.js","sourcesContent":["/*! X-editable - v1.5.1 \n* In-place editing with Twitter Bootstrap, jQuery UI or pure jQuery\n* http://github.com/vitalets/x-editable\n* Copyright (c) 2013 Vitaliy Potapov; Licensed MIT */\n/**\nForm with single input element, two buttons and two states: normal/loading.\nApplied as jQuery method to DIV tag (not to form tag!). This is because form can be in loading state when spinner shown.\nEditableform is linked with one of input types, e.g. 'text', 'select' etc.\n\n@class editableform\n@uses text\n@uses textarea\n**/\n(function ($) {\n    \"use strict\";\n    \n    var EditableForm = function (div, options) {\n        this.options = $.extend({}, $.fn.editableform.defaults, options);\n        this.$div = $(div); //div, containing form. Not form tag. Not editable-element.\n        if(!this.options.scope) {\n            this.options.scope = this;\n        }\n        //nothing shown after init\n    };\n\n    EditableForm.prototype = {\n        constructor: EditableForm,\n        initInput: function() {  //called once\n            //take input from options (as it is created in editable-element)\n            this.input = this.options.input;\n            \n            //set initial value\n            //todo: may be add check: typeof str === 'string' ? \n            this.value = this.input.str2value(this.options.value); \n            \n            //prerender: get input.$input\n            this.input.prerender();\n        },\n        initTemplate: function() {\n            this.$form = $($.fn.editableform.template); \n        },\n        initButtons: function() {\n            var $btn = this.$form.find('.editable-buttons');\n            $btn.append($.fn.editableform.buttons);\n            if(this.options.showbuttons === 'bottom') {\n                $btn.addClass('editable-buttons-bottom');\n            }\n        },\n        /**\n        Renders editableform\n\n        @method render\n        **/        \n        render: function() {\n            //init loader\n            this.$loading = $($.fn.editableform.loading);        \n            this.$div.empty().append(this.$loading);\n            \n            //init form template and buttons\n            this.initTemplate();\n            if(this.options.showbuttons) {\n                this.initButtons();\n            } else {\n                this.$form.find('.editable-buttons').remove();\n            }\n\n            //show loading state\n            this.showLoading();            \n            \n            //flag showing is form now saving value to server. \n            //It is needed to wait when closing form.\n            this.isSaving = false;\n            \n            /**        \n            Fired when rendering starts\n            @event rendering \n            @param {Object} event event object\n            **/            \n            this.$div.triggerHandler('rendering');\n            \n            //init input\n            this.initInput();\n            \n            //append input to form\n            this.$form.find('div.editable-input').append(this.input.$tpl);            \n            \n            //append form to container\n            this.$div.append(this.$form);\n            \n            //render input\n            $.when(this.input.render())\n            .then($.proxy(function () {\n                //setup input to submit automatically when no buttons shown\n                if(!this.options.showbuttons) {\n                    this.input.autosubmit(); \n                }\n                 \n                //attach 'cancel' handler\n                this.$form.find('.editable-cancel').click($.proxy(this.cancel, this));\n                \n                if(this.input.error) {\n                    this.error(this.input.error);\n                    this.$form.find('.editable-submit').attr('disabled', true);\n                    this.input.$input.attr('disabled', true);\n                    //prevent form from submitting\n                    this.$form.submit(function(e){ e.preventDefault(); });\n                } else {\n                    this.error(false);\n                    this.input.$input.removeAttr('disabled');\n                    this.$form.find('.editable-submit').removeAttr('disabled');\n                    var value = (this.value === null || this.value === undefined || this.value === '') ? this.options.defaultValue : this.value;\n                    this.input.value2input(value);\n                    //attach submit handler\n                    this.$form.submit($.proxy(this.submit, this));\n                }\n\n                /**        \n                Fired when form is rendered\n                @event rendered\n                @param {Object} event event object\n                **/            \n                this.$div.triggerHandler('rendered');                \n\n                this.showForm();\n                \n                //call postrender method to perform actions required visibility of form\n                if(this.input.postrender) {\n                    this.input.postrender();\n                }                \n            }, this));\n        },\n        cancel: function() {   \n            /**        \n            Fired when form was cancelled by user\n            @event cancel \n            @param {Object} event event object\n            **/              \n            this.$div.triggerHandler('cancel');\n        },\n        showLoading: function() {\n            var w, h;\n            if(this.$form) {\n                //set loading size equal to form\n                w = this.$form.outerWidth();\n                h = this.$form.outerHeight(); \n                if(w) {\n                    this.$loading.width(w);\n                }\n                if(h) {\n                    this.$loading.height(h);\n                }\n                this.$form.hide();\n            } else {\n                //stretch loading to fill container width\n                w = this.$loading.parent().width();\n                if(w) {\n                    this.$loading.width(w);\n                }\n            }\n            this.$loading.show(); \n        },\n\n        showForm: function(activate) {\n            this.$loading.hide();\n            this.$form.show();\n            if(activate !== false) {\n                this.input.activate(); \n            }\n            /**        \n            Fired when form is shown\n            @event show \n            @param {Object} event event object\n            **/                    \n            this.$div.triggerHandler('show');\n        },\n\n        error: function(msg) {\n            var $group = this.$form.find('.control-group'),\n                $block = this.$form.find('.editable-error-block'),\n                lines;\n\n            if(msg === false) {\n                $group.removeClass($.fn.editableform.errorGroupClass);\n                $block.removeClass($.fn.editableform.errorBlockClass).empty().hide(); \n            } else {\n                //convert newline to <br> for more pretty error display\n                if(msg) {\n                    lines = (''+msg).split('\\n');\n                    for (var i = 0; i < lines.length; i++) {\n                        lines[i] = $('<div>').text(lines[i]).html();\n                    }\n                    msg = lines.join('<br>');\n                }\n                $group.addClass($.fn.editableform.errorGroupClass);\n                $block.addClass($.fn.editableform.errorBlockClass).html(msg).show();\n            }\n        },\n\n        submit: function(e) {\n            e.stopPropagation();\n            e.preventDefault();\n            \n            //get new value from input\n            var newValue = this.input.input2value(); \n\n            //validation: if validate returns string or truthy value - means error\n            //if returns object like {newValue: '...'} => submitted value is reassigned to it\n            var error = this.validate(newValue);\n            if ($.type(error) === 'object' && error.newValue !== undefined) {\n                newValue = error.newValue;\n                this.input.value2input(newValue);\n                if(typeof error.msg === 'string') {\n                    this.error(error.msg);\n                    this.showForm();\n                    return;\n                }\n            } else if (error) {\n                this.error(error);\n                this.showForm();\n                return;\n            } \n            \n            //if value not changed --> trigger 'nochange' event and return\n            /*jslint eqeq: true*/\n            if (!this.options.savenochange && this.input.value2str(newValue) == this.input.value2str(this.value)) {\n            /*jslint eqeq: false*/                \n                /**        \n                Fired when value not changed but form is submitted. Requires savenochange = false.\n                @event nochange \n                @param {Object} event event object\n                **/                    \n                this.$div.triggerHandler('nochange');            \n                return;\n            } \n\n            //convert value for submitting to server\n            var submitValue = this.input.value2submit(newValue);\n            \n            this.isSaving = true;\n            \n            //sending data to server\n            $.when(this.save(submitValue))\n            .done($.proxy(function(response) {\n                this.isSaving = false;\n\n                //run success callback\n                var res = typeof this.options.success === 'function' ? this.options.success.call(this.options.scope, response, newValue) : null;\n\n                //if success callback returns false --> keep form open and do not activate input\n                if(res === false) {\n                    this.error(false);\n                    this.showForm(false);\n                    return;\n                }\n\n                //if success callback returns string -->  keep form open, show error and activate input               \n                if(typeof res === 'string') {\n                    this.error(res);\n                    this.showForm();\n                    return;\n                }\n\n                //if success callback returns object like {newValue: <something>} --> use that value instead of submitted\n                //it is usefull if you want to chnage value in url-function\n                if(res && typeof res === 'object' && res.hasOwnProperty('newValue')) {\n                    newValue = res.newValue;\n                }\n\n                //clear error message\n                this.error(false);   \n                this.value = newValue;\n                /**        \n                Fired when form is submitted\n                @event save \n                @param {Object} event event object\n                @param {Object} params additional params\n                @param {mixed} params.newValue raw new value\n                @param {mixed} params.submitValue submitted value as string\n                @param {Object} params.response ajax response\n\n                @example\n                $('#form-div').on('save'), function(e, params){\n                    if(params.newValue === 'username') {...}\n                });\n                **/\n                this.$div.triggerHandler('save', {newValue: newValue, submitValue: submitValue, response: response});\n            }, this))\n            .fail($.proxy(function(xhr) {\n                this.isSaving = false;\n\n                var msg;\n                if(typeof this.options.error === 'function') {\n                    msg = this.options.error.call(this.options.scope, xhr, newValue);\n                } else {\n                    msg = typeof xhr === 'string' ? xhr : xhr.responseText || xhr.statusText || 'Unknown error!';\n                }\n\n                this.error(msg);\n                this.showForm();\n            }, this));\n        },\n\n        save: function(submitValue) {\n            //try parse composite pk defined as json string in data-pk \n            this.options.pk = $.fn.editableutils.tryParseJson(this.options.pk, true); \n            \n            var pk = (typeof this.options.pk === 'function') ? this.options.pk.call(this.options.scope) : this.options.pk,\n            /*\n              send on server in following cases:\n              1. url is function\n              2. url is string AND (pk defined OR send option = always) \n            */\n            send = !!(typeof this.options.url === 'function' || (this.options.url && ((this.options.send === 'always') || (this.options.send === 'auto' && pk !== null && pk !== undefined)))),\n            params;\n\n            if (send) { //send to server\n                this.showLoading();\n\n                //standard params\n                params = {\n                    name: this.options.name || '',\n                    value: submitValue,\n                    pk: pk \n                };\n\n                //additional params\n                if(typeof this.options.params === 'function') {\n                    params = this.options.params.call(this.options.scope, params);  \n                } else {\n                    //try parse json in single quotes (from data-params attribute)\n                    this.options.params = $.fn.editableutils.tryParseJson(this.options.params, true);   \n                    $.extend(params, this.options.params);\n                }\n\n                if(typeof this.options.url === 'function') { //user's function\n                    return this.options.url.call(this.options.scope, params);\n                } else {  \n                    //send ajax to server and return deferred object\n                    return $.ajax($.extend({\n                        url     : this.options.url,\n                        data    : params,\n                        type    : 'POST'\n                    }, this.options.ajaxOptions));\n                }\n            }\n        }, \n\n        validate: function (value) {\n            if (value === undefined) {\n                value = this.value;\n            }\n            if (typeof this.options.validate === 'function') {\n                return this.options.validate.call(this.options.scope, value);\n            }\n        },\n\n        option: function(key, value) {\n            if(key in this.options) {\n                this.options[key] = value;\n            }\n            \n            if(key === 'value') {\n                this.setValue(value);\n            }\n            \n            //do not pass option to input as it is passed in editable-element\n        },\n\n        setValue: function(value, convertStr) {\n            if(convertStr) {\n                this.value = this.input.str2value(value);\n            } else {\n                this.value = value;\n            }\n            \n            //if form is visible, update input\n            if(this.$form && this.$form.is(':visible')) {\n                this.input.value2input(this.value);\n            }            \n        }               \n    };\n\n    /*\n    Initialize editableform. Applied to jQuery object.\n\n    @method $().editableform(options)\n    @params {Object} options\n    @example\n    var $form = $('&lt;div&gt;').editableform({\n        type: 'text',\n        name: 'username',\n        url: '/post',\n        value: 'vitaliy'\n    });\n\n    //to display form you should call 'render' method\n    $form.editableform('render');     \n    */\n    $.fn.editableform = function (option) {\n        var args = arguments;\n        return this.each(function () {\n            var $this = $(this), \n            data = $this.data('editableform'), \n            options = typeof option === 'object' && option; \n            if (!data) {\n                $this.data('editableform', (data = new EditableForm(this, options)));\n            }\n\n            if (typeof option === 'string') { //call method \n                data[option].apply(data, Array.prototype.slice.call(args, 1));\n            } \n        });\n    };\n\n    //keep link to constructor to allow inheritance\n    $.fn.editableform.Constructor = EditableForm;    \n\n    //defaults\n    $.fn.editableform.defaults = {\n        /* see also defaults for input */\n\n        /**\n        Type of input. Can be <code>text|textarea|select|date|checklist</code>\n\n        @property type \n        @type string\n        @default 'text'\n        **/\n        type: 'text',\n        /**\n        Url for submit, e.g. <code>'/post'</code>  \n        If function - it will be called instead of ajax. Function should return deferred object to run fail/done callbacks.\n\n        @property url \n        @type string|function\n        @default null\n        @example\n        url: function(params) {\n            var d = new $.Deferred;\n            if(params.value === 'abc') {\n                return d.reject('error message'); //returning error via deferred object\n            } else {\n                //async saving data in js model\n                someModel.asyncSaveMethod({\n                   ..., \n                   success: function(){\n                      d.resolve();\n                   }\n                }); \n                return d.promise();\n            }\n        } \n        **/        \n        url:null,\n        /**\n        Additional params for submit. If defined as <code>object</code> - it is **appended** to original ajax data (pk, name and value).  \n        If defined as <code>function</code> - returned object **overwrites** original ajax data.\n        @example\n        params: function(params) {\n            //originally params contain pk, name and value\n            params.a = 1;\n            return params;\n        }\n\n        @property params \n        @type object|function\n        @default null\n        **/          \n        params:null,\n        /**\n        Name of field. Will be submitted on server. Can be taken from <code>id</code> attribute\n\n        @property name \n        @type string\n        @default null\n        **/         \n        name: null,\n        /**\n        Primary key of editable object (e.g. record id in database). For composite keys use object, e.g. <code>{id: 1, lang: 'en'}</code>.\n        Can be calculated dynamically via function.\n\n        @property pk \n        @type string|object|function\n        @default null\n        **/         \n        pk: null,\n        /**\n        Initial value. If not defined - will be taken from element's content.\n        For __select__ type should be defined (as it is ID of shown text).\n\n        @property value \n        @type string|object\n        @default null\n        **/        \n        value: null,\n        /**\n        Value that will be displayed in input if original field value is empty (`null|undefined|''`).\n\n        @property defaultValue \n        @type string|object\n        @default null\n        @since 1.4.6\n        **/        \n        defaultValue: null,\n        /**\n        Strategy for sending data on server. Can be `auto|always|never`.\n        When 'auto' data will be sent on server **only if pk and url defined**, otherwise new value will be stored locally.\n\n        @property send \n        @type string\n        @default 'auto'\n        **/          \n        send: 'auto', \n        /**\n        Function for client-side validation. If returns string - means validation not passed and string showed as error.\n        Since 1.5.1 you can modify submitted value by returning object from `validate`: \n        `{newValue: '...'}` or `{newValue: '...', msg: '...'}`\n\n        @property validate \n        @type function\n        @default null\n        @example\n        validate: function(value) {\n            if($.trim(value) == '') {\n                return 'This field is required';\n            }\n        }\n        **/         \n        validate: null,\n        /**\n        Success callback. Called when value successfully sent on server and **response status = 200**.  \n        Usefull to work with json response. For example, if your backend response can be <code>{success: true}</code>\n        or <code>{success: false, msg: \"server error\"}</code> you can check it inside this callback.  \n        If it returns **string** - means error occured and string is shown as error message.  \n        If it returns **object like** <code>{newValue: &lt;something&gt;}</code> - it overwrites value, submitted by user.  \n        Otherwise newValue simply rendered into element.\n        \n        @property success \n        @type function\n        @default null\n        @example\n        success: function(response, newValue) {\n            if(!response.success) return response.msg;\n        }\n        **/          \n        success: null,\n        /**\n        Error callback. Called when request failed (response status != 200).  \n        Usefull when you want to parse error response and display a custom message.\n        Must return **string** - the message to be displayed in the error block.\n                \n        @property error \n        @type function\n        @default null\n        @since 1.4.4\n        @example\n        error: function(response, newValue) {\n            if(response.status === 500) {\n                return 'Service unavailable. Please try later.';\n            } else {\n                return response.responseText;\n            }\n        }\n        **/          \n        error: null,\n        /**\n        Additional options for submit ajax request.\n        List of values: http://api.jquery.com/jQuery.ajax\n        \n        @property ajaxOptions \n        @type object\n        @default null\n        @since 1.1.1        \n        @example \n        ajaxOptions: {\n            type: 'put',\n            dataType: 'json'\n        }        \n        **/        \n        ajaxOptions: null,\n        /**\n        Where to show buttons: left(true)|bottom|false  \n        Form without buttons is auto-submitted.\n\n        @property showbuttons \n        @type boolean|string\n        @default true\n        @since 1.1.1\n        **/         \n        showbuttons: true,\n        /**\n        Scope for callback methods (success, validate).  \n        If <code>null</code> means editableform instance itself. \n\n        @property scope \n        @type DOMElement|object\n        @default null\n        @since 1.2.0\n        @private\n        **/            \n        scope: null,\n        /**\n        Whether to save or cancel value when it was not changed but form was submitted\n\n        @property savenochange \n        @type boolean\n        @default false\n        @since 1.2.0\n        **/\n        savenochange: false\n    };   \n\n    /*\n    Note: following params could redefined in engine: bootstrap or jqueryui:\n    Classes 'control-group' and 'editable-error-block' must always present!\n    */      \n    $.fn.editableform.template = '<form class=\"form-inline editableform\">'+\n    '<div class=\"control-group\">' + \n    '<div><div class=\"editable-input\"></div><div class=\"editable-buttons\"></div></div>'+\n    '<div class=\"editable-error-block\"></div>' + \n    '</div>' + \n    '</form>';\n\n    //loading div\n    $.fn.editableform.loading = '<div class=\"editableform-loading\"></div>';\n\n    //buttons\n    $.fn.editableform.buttons = '<button type=\"submit\" class=\"editable-submit\">ok</button>'+\n    '<button type=\"button\" class=\"editable-cancel\">cancel</button>';      \n\n    //error class attached to control-group\n    $.fn.editableform.errorGroupClass = null;  \n\n    //error class attached to editable-error-block\n    $.fn.editableform.errorBlockClass = 'editable-error';\n    \n    //engine\n    $.fn.editableform.engine = 'jquery';\n}(window.jQuery));\n\n/**\n* EditableForm utilites\n*/\n(function ($) {\n    \"use strict\";\n    \n    //utils\n    $.fn.editableutils = {\n        /**\n        * classic JS inheritance function\n        */  \n        inherit: function (Child, Parent) {\n            var F = function() { };\n            F.prototype = Parent.prototype;\n            Child.prototype = new F();\n            Child.prototype.constructor = Child;\n            Child.superclass = Parent.prototype;\n        },\n\n        /**\n        * set caret position in input\n        * see http://stackoverflow.com/questions/499126/jquery-set-cursor-position-in-text-area\n        */        \n        setCursorPosition: function(elem, pos) {\n            if (elem.setSelectionRange) {\n                elem.setSelectionRange(pos, pos);\n            } else if (elem.createTextRange) {\n                var range = elem.createTextRange();\n                range.collapse(true);\n                range.moveEnd('character', pos);\n                range.moveStart('character', pos);\n                range.select();\n            }\n        },\n\n        /**\n        * function to parse JSON in *single* quotes. (jquery automatically parse only double quotes)\n        * That allows such code as: <a data-source=\"{'a': 'b', 'c': 'd'}\">\n        * safe = true --> means no exception will be thrown\n        * for details see http://stackoverflow.com/questions/7410348/how-to-set-json-format-to-html5-data-attributes-in-the-jquery\n        */\n        tryParseJson: function(s, safe) {\n            if (typeof s === 'string' && s.length && s.match(/^[\\{\\[].*[\\}\\]]$/)) {\n                if (safe) {\n                    try {\n                        /*jslint evil: true*/\n                        s = (new Function('return ' + s))();\n                        /*jslint evil: false*/\n                    } catch (e) {} finally {\n                        return s;\n                    }\n                } else {\n                    /*jslint evil: true*/\n                    s = (new Function('return ' + s))();\n                    /*jslint evil: false*/\n                }\n            }\n            return s;\n        },\n\n        /**\n        * slice object by specified keys\n        */\n        sliceObj: function(obj, keys, caseSensitive /* default: false */) {\n            var key, keyLower, newObj = {};\n\n            if (!$.isArray(keys) || !keys.length) {\n                return newObj;\n            }\n\n            for (var i = 0; i < keys.length; i++) {\n                key = keys[i];\n                if (obj.hasOwnProperty(key)) {\n                    newObj[key] = obj[key];\n                }\n\n                if(caseSensitive === true) {\n                    continue;\n                }\n\n                //when getting data-* attributes via $.data() it's converted to lowercase.\n                //details: http://stackoverflow.com/questions/7602565/using-data-attributes-with-jquery\n                //workaround is code below.\n                keyLower = key.toLowerCase();\n                if (obj.hasOwnProperty(keyLower)) {\n                    newObj[key] = obj[keyLower];\n                }\n            }\n\n            return newObj;\n        },\n\n        /*\n        exclude complex objects from $.data() before pass to config\n        */\n        getConfigData: function($element) {\n            var data = {};\n            $.each($element.data(), function(k, v) {\n                if(typeof v !== 'object' || (v && typeof v === 'object' && (v.constructor === Object || v.constructor === Array))) {\n                    data[k] = v;\n                }\n            });\n            return data;\n        },\n\n        /*\n         returns keys of object\n        */\n        objectKeys: function(o) {\n            if (Object.keys) {\n                return Object.keys(o);  \n            } else {\n                if (o !== Object(o)) {\n                    throw new TypeError('Object.keys called on a non-object');\n                }\n                var k=[], p;\n                for (p in o) {\n                    if (Object.prototype.hasOwnProperty.call(o,p)) {\n                        k.push(p);\n                    }\n                }\n                return k;\n            }\n\n        },\n        \n       /**\n        method to escape html.\n       **/\n       escape: function(str) {\n           return $('<div>').text(str).html();\n       },\n       \n       /*\n        returns array items from sourceData having value property equal or inArray of 'value'\n       */\n       itemsByValue: function(value, sourceData, valueProp) {\n           if(!sourceData || value === null) {\n               return [];\n           }\n           \n           if (typeof(valueProp) !== \"function\") {\n               var idKey = valueProp || 'value';\n               valueProp = function (e) { return e[idKey]; };\n           }\n                      \n           var isValArray = $.isArray(value),\n           result = [], \n           that = this;\n\n           $.each(sourceData, function(i, o) {\n               if(o.children) {\n                   result = result.concat(that.itemsByValue(value, o.children, valueProp));\n               } else {\n                   /*jslint eqeq: true*/\n                   if(isValArray) {\n                       if($.grep(value, function(v){  return v == (o && typeof o === 'object' ? valueProp(o) : o); }).length) {\n                           result.push(o); \n                       }\n                   } else {\n                       var itemValue = (o && (typeof o === 'object')) ? valueProp(o) : o;\n                       if(value == itemValue) {\n                           result.push(o); \n                       }\n                   }\n                   /*jslint eqeq: false*/\n               }\n           });\n           \n           return result;\n       },\n       \n       /*\n       Returns input by options: type, mode. \n       */\n       createInput: function(options) {\n           var TypeConstructor, typeOptions, input,\n           type = options.type;\n\n           //`date` is some kind of virtual type that is transformed to one of exact types\n           //depending on mode and core lib\n           if(type === 'date') {\n               //inline\n               if(options.mode === 'inline') {\n                   if($.fn.editabletypes.datefield) {\n                       type = 'datefield';\n                   } else if($.fn.editabletypes.dateuifield) {\n                       type = 'dateuifield';\n                   }\n               //popup\n               } else {\n                   if($.fn.editabletypes.date) {\n                       type = 'date';\n                   } else if($.fn.editabletypes.dateui) {\n                       type = 'dateui';\n                   }\n               }\n               \n               //if type still `date` and not exist in types, replace with `combodate` that is base input\n               if(type === 'date' && !$.fn.editabletypes.date) {\n                   type = 'combodate';\n               } \n           }\n           \n           //`datetime` should be datetimefield in 'inline' mode\n           if(type === 'datetime' && options.mode === 'inline') {\n             type = 'datetimefield';  \n           }           \n\n           //change wysihtml5 to textarea for jquery UI and plain versions\n           if(type === 'wysihtml5' && !$.fn.editabletypes[type]) {\n               type = 'textarea';\n           }\n\n           //create input of specified type. Input will be used for converting value, not in form\n           if(typeof $.fn.editabletypes[type] === 'function') {\n               TypeConstructor = $.fn.editabletypes[type];\n               typeOptions = this.sliceObj(options, this.objectKeys(TypeConstructor.defaults));\n               input = new TypeConstructor(typeOptions);\n               return input;\n           } else {\n               $.error('Unknown type: '+ type);\n               return false; \n           }  \n       },\n       \n       //see http://stackoverflow.com/questions/7264899/detect-css-transitions-using-javascript-and-without-modernizr\n       supportsTransitions: function () {\n           var b = document.body || document.documentElement,\n               s = b.style,\n               p = 'transition',\n               v = ['Moz', 'Webkit', 'Khtml', 'O', 'ms'];\n               \n           if(typeof s[p] === 'string') {\n               return true; \n           }\n\n           // Tests for vendor specific prop\n           p = p.charAt(0).toUpperCase() + p.substr(1);\n           for(var i=0; i<v.length; i++) {\n               if(typeof s[v[i] + p] === 'string') { \n                   return true; \n               }\n           }\n           return false;\n       }            \n       \n    };      \n}(window.jQuery));\n\n/**\nAttaches stand-alone container with editable-form to HTML element. Element is used only for positioning, value is not stored anywhere.<br>\nThis method applied internally in <code>$().editable()</code>. You should subscribe on it's events (save / cancel) to get profit of it.<br>\nFinal realization can be different: bootstrap-popover, jqueryui-tooltip, poshytip, inline-div. It depends on which js file you include.<br>\nApplied as jQuery method.\n\n@class editableContainer\n@uses editableform\n**/\n(function ($) {\n    \"use strict\";\n\n    var Popup = function (element, options) {\n        this.init(element, options);\n    };\n    \n    var Inline = function (element, options) {\n        this.init(element, options);\n    };    \n\n    //methods\n    Popup.prototype = {\n        containerName: null, //method to call container on element\n        containerDataName: null, //object name in element's .data()\n        innerCss: null, //tbd in child class\n        containerClass: 'editable-container editable-popup', //css class applied to container element\n        defaults: {}, //container itself defaults\n        \n        init: function(element, options) {\n            this.$element = $(element);\n            //since 1.4.1 container do not use data-* directly as they already merged into options.\n            this.options = $.extend({}, $.fn.editableContainer.defaults, options);         \n            this.splitOptions();\n            \n            //set scope of form callbacks to element\n            this.formOptions.scope = this.$element[0]; \n            \n            this.initContainer();\n            \n            //flag to hide container, when saving value will finish\n            this.delayedHide = false;\n\n            //bind 'destroyed' listener to destroy container when element is removed from dom\n            this.$element.on('destroyed', $.proxy(function(){\n                this.destroy();\n            }, this)); \n            \n            //attach document handler to close containers on click / escape\n            if(!$(document).data('editable-handlers-attached')) {\n                //close all on escape\n                $(document).on('keyup.editable', function (e) {\n                    if (e.which === 27) {\n                        $('.editable-open').editableContainer('hide');\n                        //todo: return focus on element \n                    }\n                });\n\n                //close containers when click outside \n                //(mousedown could be better than click, it closes everything also on drag drop)\n                $(document).on('click.editable', function(e) {\n                    var $target = $(e.target), i,\n                        exclude_classes = ['.editable-container', \n                                           '.ui-datepicker-header', \n                                           '.datepicker', //in inline mode datepicker is rendered into body\n                                           '.modal-backdrop', \n                                           '.bootstrap-wysihtml5-insert-image-modal', \n                                           '.bootstrap-wysihtml5-insert-link-modal'\n                                           ];\n                    \n                    //check if element is detached. It occurs when clicking in bootstrap datepicker\n                    if (!$.contains(document.documentElement, e.target)) {\n                      return;\n                    }\n\n                    //for some reason FF 20 generates extra event (click) in select2 widget with e.target = document\n                    //we need to filter it via construction below. See https://github.com/vitalets/x-editable/issues/199\n                    //Possibly related to http://stackoverflow.com/questions/10119793/why-does-firefox-react-differently-from-webkit-and-ie-to-click-event-on-selec\n                    if($target.is(document)) {\n                       return; \n                    }\n                    \n                    //if click inside one of exclude classes --> no nothing\n                    for(i=0; i<exclude_classes.length; i++) {\n                         if($target.is(exclude_classes[i]) || $target.parents(exclude_classes[i]).length) {\n                             return;\n                         }\n                    }\n                      \n                    //close all open containers (except one - target)\n                    Popup.prototype.closeOthers(e.target);\n                });\n                \n                $(document).data('editable-handlers-attached', true);\n            }                        \n        },\n\n        //split options on containerOptions and formOptions\n        splitOptions: function() {\n            this.containerOptions = {};\n            this.formOptions = {};\n            \n            if(!$.fn[this.containerName]) {\n                throw new Error(this.containerName + ' not found. Have you included corresponding js file?');   \n            }\n            \n            //keys defined in container defaults go to container, others go to form\n            for(var k in this.options) {\n              if(k in this.defaults) {\n                 this.containerOptions[k] = this.options[k];\n              } else {\n                 this.formOptions[k] = this.options[k];\n              } \n            }\n        },\n        \n        /*\n        Returns jquery object of container\n        @method tip()\n        */         \n        tip: function() {\n            return this.container() ? this.container().$tip : null;\n        },\n\n        /* returns container object */\n        container: function() {\n            var container;\n            //first, try get it by `containerDataName`\n            if(this.containerDataName) {\n                if(container = this.$element.data(this.containerDataName)) {\n                    return container;\n                }\n            }\n            //second, try `containerName`\n            container = this.$element.data(this.containerName);\n            return container;\n        },\n\n        /* call native method of underlying container, e.g. this.$element.popover('method') */ \n        call: function() {\n            this.$element[this.containerName].apply(this.$element, arguments); \n        },        \n        \n        initContainer: function(){\n            this.call(this.containerOptions);\n        },\n\n        renderForm: function() {\n            this.$form\n            .editableform(this.formOptions)\n            .on({\n                save: $.proxy(this.save, this), //click on submit button (value changed)\n                nochange: $.proxy(function(){ this.hide('nochange'); }, this), //click on submit button (value NOT changed)                \n                cancel: $.proxy(function(){ this.hide('cancel'); }, this), //click on calcel button\n                show: $.proxy(function() {\n                    if(this.delayedHide) {\n                        this.hide(this.delayedHide.reason);\n                        this.delayedHide = false;\n                    } else {\n                        this.setPosition();\n                    }\n                }, this), //re-position container every time form is shown (occurs each time after loading state)\n                rendering: $.proxy(this.setPosition, this), //this allows to place container correctly when loading shown\n                resize: $.proxy(this.setPosition, this), //this allows to re-position container when form size is changed \n                rendered: $.proxy(function(){\n                    /**        \n                    Fired when container is shown and form is rendered (for select will wait for loading dropdown options).  \n                    **Note:** Bootstrap popover has own `shown` event that now cannot be separated from x-editable's one.\n                    The workaround is to check `arguments.length` that is always `2` for x-editable.                     \n                    \n                    @event shown \n                    @param {Object} event event object\n                    @example\n                    $('#username').on('shown', function(e, editable) {\n                        editable.input.$input.val('overwriting value of input..');\n                    });                     \n                    **/                      \n                    /*\n                     TODO: added second param mainly to distinguish from bootstrap's shown event. It's a hotfix that will be solved in future versions via namespaced events.  \n                    */\n                    this.$element.triggerHandler('shown', $(this.options.scope).data('editable')); \n                }, this) \n            })\n            .editableform('render');\n        },        \n\n        /**\n        Shows container with form\n        @method show()\n        @param {boolean} closeAll Whether to close all other editable containers when showing this one. Default true.\n        **/\n        /* Note: poshytip owerwrites this method totally! */          \n        show: function (closeAll) {\n            this.$element.addClass('editable-open');\n            if(closeAll !== false) {\n                //close all open containers (except this)\n                this.closeOthers(this.$element[0]);  \n            }\n            \n            //show container itself\n            this.innerShow();\n            this.tip().addClass(this.containerClass);\n\n            /*\n            Currently, form is re-rendered on every show. \n            The main reason is that we dont know, what will container do with content when closed:\n            remove(), detach() or just hide() - it depends on container.\n            \n            Detaching form itself before hide and re-insert before show is good solution, \n            but visually it looks ugly --> container changes size before hide.  \n            */             \n            \n            //if form already exist - delete previous data \n            if(this.$form) {\n                //todo: destroy prev data!\n                //this.$form.destroy();\n            }\n\n            this.$form = $('<div>');\n            \n            //insert form into container body\n            if(this.tip().is(this.innerCss)) {\n                //for inline container\n                this.tip().append(this.$form); \n            } else {\n                this.tip().find(this.innerCss).append(this.$form);\n            } \n            \n            //render form\n            this.renderForm();\n        },\n\n        /**\n        Hides container with form\n        @method hide()\n        @param {string} reason Reason caused hiding. Can be <code>save|cancel|onblur|nochange|undefined (=manual)</code>\n        **/         \n        hide: function(reason) {  \n            if(!this.tip() || !this.tip().is(':visible') || !this.$element.hasClass('editable-open')) {\n                return;\n            }\n            \n            //if form is saving value, schedule hide\n            if(this.$form.data('editableform').isSaving) {\n                this.delayedHide = {reason: reason};\n                return;    \n            } else {\n                this.delayedHide = false;\n            }\n\n            this.$element.removeClass('editable-open');   \n            this.innerHide();\n\n            /**\n            Fired when container was hidden. It occurs on both save or cancel.  \n            **Note:** Bootstrap popover has own `hidden` event that now cannot be separated from x-editable's one.\n            The workaround is to check `arguments.length` that is always `2` for x-editable. \n\n            @event hidden \n            @param {object} event event object\n            @param {string} reason Reason caused hiding. Can be <code>save|cancel|onblur|nochange|manual</code>\n            @example\n            $('#username').on('hidden', function(e, reason) {\n                if(reason === 'save' || reason === 'cancel') {\n                    //auto-open next editable\n                    $(this).closest('tr').next().find('.editable').editable('show');\n                } \n            });\n            **/\n            this.$element.triggerHandler('hidden', reason || 'manual');   \n        },\n\n        /* internal show method. To be overwritten in child classes */\n        innerShow: function () {\n             \n        },        \n\n        /* internal hide method. To be overwritten in child classes */\n        innerHide: function () {\n\n        },\n        \n        /**\n        Toggles container visibility (show / hide)\n        @method toggle()\n        @param {boolean} closeAll Whether to close all other editable containers when showing this one. Default true.\n        **/          \n        toggle: function(closeAll) {\n            if(this.container() && this.tip() && this.tip().is(':visible')) {\n                this.hide();\n            } else {\n                this.show(closeAll);\n            } \n        },\n\n        /*\n        Updates the position of container when content changed.\n        @method setPosition()\n        */       \n        setPosition: function() {\n            //tbd in child class\n        },\n\n        save: function(e, params) {\n            /**        \n            Fired when new value was submitted. You can use <code>$(this).data('editableContainer')</code> inside handler to access to editableContainer instance\n            \n            @event save \n            @param {Object} event event object\n            @param {Object} params additional params\n            @param {mixed} params.newValue submitted value\n            @param {Object} params.response ajax response\n            @example\n            $('#username').on('save', function(e, params) {\n                //assuming server response: '{success: true}'\n                var pk = $(this).data('editableContainer').options.pk;\n                if(params.response && params.response.success) {\n                    alert('value: ' + params.newValue + ' with pk: ' + pk + ' saved!');\n                } else {\n                    alert('error!'); \n                } \n            });\n            **/             \n            this.$element.triggerHandler('save', params);\n            \n            //hide must be after trigger, as saving value may require methods of plugin, applied to input\n            this.hide('save');\n        },\n\n        /**\n        Sets new option\n        \n        @method option(key, value)\n        @param {string} key \n        @param {mixed} value \n        **/         \n        option: function(key, value) {\n            this.options[key] = value;\n            if(key in this.containerOptions) {\n                this.containerOptions[key] = value;\n                this.setContainerOption(key, value); \n            } else {\n                this.formOptions[key] = value;\n                if(this.$form) {\n                    this.$form.editableform('option', key, value);  \n                }\n            }\n        },\n        \n        setContainerOption: function(key, value) {\n            this.call('option', key, value);\n        },\n\n        /**\n        Destroys the container instance\n        @method destroy()\n        **/        \n        destroy: function() {\n            this.hide();\n            this.innerDestroy();\n            this.$element.off('destroyed');\n            this.$element.removeData('editableContainer');\n        },\n        \n        /* to be overwritten in child classes */\n        innerDestroy: function() {\n            \n        }, \n        \n        /*\n        Closes other containers except one related to passed element. \n        Other containers can be cancelled or submitted (depends on onblur option)\n        */\n        closeOthers: function(element) {\n            $('.editable-open').each(function(i, el){\n                //do nothing with passed element and it's children\n                if(el === element || $(el).find(element).length) {\n                    return;\n                }\n\n                //otherwise cancel or submit all open containers \n                var $el = $(el),\n                ec = $el.data('editableContainer');\n\n                if(!ec) {\n                    return;  \n                }\n                \n                if(ec.options.onblur === 'cancel') {\n                    $el.data('editableContainer').hide('onblur');\n                } else if(ec.options.onblur === 'submit') {\n                    $el.data('editableContainer').tip().find('form').submit();\n                }\n            });\n\n        },\n        \n        /**\n        Activates input of visible container (e.g. set focus)\n        @method activate()\n        **/         \n        activate: function() {\n            if(this.tip && this.tip().is(':visible') && this.$form) {\n               this.$form.data('editableform').input.activate(); \n            }\n        } \n\n    };\n\n    /**\n    jQuery method to initialize editableContainer.\n    \n    @method $().editableContainer(options)\n    @params {Object} options\n    @example\n    $('#edit').editableContainer({\n        type: 'text',\n        url: '/post',\n        pk: 1,\n        value: 'hello'\n    });\n    **/  \n    $.fn.editableContainer = function (option) {\n        var args = arguments;\n        return this.each(function () {\n            var $this = $(this),\n            dataKey = 'editableContainer', \n            data = $this.data(dataKey),\n            options = typeof option === 'object' && option,\n            Constructor = (options.mode === 'inline') ? Inline : Popup;             \n\n            if (!data) {\n                $this.data(dataKey, (data = new Constructor(this, options)));\n            }\n\n            if (typeof option === 'string') { //call method \n                data[option].apply(data, Array.prototype.slice.call(args, 1));\n            }            \n        });\n    };     \n\n    //store constructors\n    $.fn.editableContainer.Popup = Popup;\n    $.fn.editableContainer.Inline = Inline;\n\n    //defaults\n    $.fn.editableContainer.defaults = {\n        /**\n        Initial value of form input\n\n        @property value \n        @type mixed\n        @default null\n        @private\n        **/        \n        value: null,\n        /**\n        Placement of container relative to element. Can be <code>top|right|bottom|left</code>. Not used for inline container.\n\n        @property placement \n        @type string\n        @default 'top'\n        **/        \n        placement: 'top',\n        /**\n        Whether to hide container on save/cancel.\n\n        @property autohide \n        @type boolean\n        @default true\n        @private \n        **/        \n        autohide: true,\n        /**\n        Action when user clicks outside the container. Can be <code>cancel|submit|ignore</code>.  \n        Setting <code>ignore</code> allows to have several containers open. \n\n        @property onblur \n        @type string\n        @default 'cancel'\n        @since 1.1.1\n        **/        \n        onblur: 'cancel',\n        \n        /**\n        Animation speed (inline mode only)\n        @property anim \n        @type string\n        @default false\n        **/        \n        anim: false,\n        \n        /**\n        Mode of editable, can be `popup` or `inline` \n        \n        @property mode \n        @type string         \n        @default 'popup'\n        @since 1.4.0        \n        **/        \n        mode: 'popup'        \n    };\n\n    /* \n    * workaround to have 'destroyed' event to destroy popover when element is destroyed\n    * see http://stackoverflow.com/questions/2200494/jquery-trigger-event-when-an-element-is-removed-from-the-dom\n    */\n    jQuery.event.special.destroyed = {\n        remove: function(o) {\n            if (o.handler) {\n                o.handler();\n            }\n        }\n    };    \n\n}(window.jQuery));\n\n/**\n* Editable Inline \n* ---------------------\n*/\n(function ($) {\n    \"use strict\";\n    \n    //copy prototype from EditableContainer\n    //extend methods\n    $.extend($.fn.editableContainer.Inline.prototype, $.fn.editableContainer.Popup.prototype, {\n        containerName: 'editableform',\n        innerCss: '.editable-inline',\n        containerClass: 'editable-container editable-inline', //css class applied to container element\n                 \n        initContainer: function(){\n            //container is <span> element\n            this.$tip = $('<span></span>');\n            \n            //convert anim to miliseconds (int)\n            if(!this.options.anim) {\n                this.options.anim = 0;\n            }         \n        },\n        \n        splitOptions: function() {\n            //all options are passed to form\n            this.containerOptions = {};\n            this.formOptions = this.options;\n        },\n        \n        tip: function() {\n           return this.$tip; \n        },\n        \n        innerShow: function () {\n            this.$element.hide();\n            this.tip().insertAfter(this.$element).show();\n        }, \n        \n        innerHide: function () {\n            this.$tip.hide(this.options.anim, $.proxy(function() {\n                this.$element.show();\n                this.innerDestroy();\n            }, this)); \n        },\n        \n        innerDestroy: function() {\n            if(this.tip()) {\n                this.tip().empty().remove();\n            }\n        } \n    });\n\n}(window.jQuery));\n/**\nMakes editable any HTML element on the page. Applied as jQuery method.\n\n@class editable\n@uses editableContainer\n**/\n(function ($) {\n    \"use strict\";\n\n    var Editable = function (element, options) {\n        this.$element = $(element);\n        //data-* has more priority over js options: because dynamically created elements may change data-* \n        this.options = $.extend({}, $.fn.editable.defaults, options, $.fn.editableutils.getConfigData(this.$element));  \n        if(this.options.selector) {\n            this.initLive();\n        } else {\n            this.init();\n        }\n        \n        //check for transition support\n        if(this.options.highlight && !$.fn.editableutils.supportsTransitions()) {\n            this.options.highlight = false;\n        }\n    };\n\n    Editable.prototype = {\n        constructor: Editable, \n        init: function () {\n            var isValueByText = false, \n                doAutotext, finalize;\n\n            //name\n            this.options.name = this.options.name || this.$element.attr('id');\n             \n            //create input of specified type. Input needed already here to convert value for initial display (e.g. show text by id for select)\n            //also we set scope option to have access to element inside input specific callbacks (e. g. source as function)\n            this.options.scope = this.$element[0]; \n            this.input = $.fn.editableutils.createInput(this.options);\n            if(!this.input) {\n                return; \n            }            \n\n            //set value from settings or by element's text\n            if (this.options.value === undefined || this.options.value === null) {\n                this.value = this.input.html2value($.trim(this.$element.html()));\n                isValueByText = true;\n            } else {\n                /*\n                  value can be string when received from 'data-value' attribute\n                  for complext objects value can be set as json string in data-value attribute, \n                  e.g. data-value=\"{city: 'Moscow', street: 'Lenina'}\"\n                */\n                this.options.value = $.fn.editableutils.tryParseJson(this.options.value, true); \n                if(typeof this.options.value === 'string') {\n                    this.value = this.input.str2value(this.options.value);\n                } else {\n                    this.value = this.options.value;\n                }\n            }\n            \n            //add 'editable' class to every editable element\n            this.$element.addClass('editable');\n            \n            //specifically for \"textarea\" add class .editable-pre-wrapped to keep linebreaks\n            if(this.input.type === 'textarea') {\n                this.$element.addClass('editable-pre-wrapped');\n            }\n            \n            //attach handler activating editable. In disabled mode it just prevent default action (useful for links)\n            if(this.options.toggle !== 'manual') {\n                this.$element.addClass('editable-click');\n                this.$element.on(this.options.toggle + '.editable', $.proxy(function(e){\n                    //prevent following link if editable enabled\n                    if(!this.options.disabled) {\n                        e.preventDefault();\n                    }\n                    \n                    //stop propagation not required because in document click handler it checks event target\n                    //e.stopPropagation();\n                    \n                    if(this.options.toggle === 'mouseenter') {\n                        //for hover only show container\n                        this.show();\n                    } else {\n                        //when toggle='click' we should not close all other containers as they will be closed automatically in document click listener\n                        var closeAll = (this.options.toggle !== 'click');\n                        this.toggle(closeAll);\n                    }\n                }, this));\n            } else {\n                this.$element.attr('tabindex', -1); //do not stop focus on element when toggled manually\n            }\n            \n            //if display is function it's far more convinient to have autotext = always to render correctly on init\n            //see https://github.com/vitalets/x-editable-yii/issues/34\n            if(typeof this.options.display === 'function') {\n                this.options.autotext = 'always';\n            }\n            \n            //check conditions for autotext:\n            switch(this.options.autotext) {\n              case 'always':\n               doAutotext = true;\n              break;\n              case 'auto':\n                //if element text is empty and value is defined and value not generated by text --> run autotext\n                doAutotext = !$.trim(this.$element.text()).length && this.value !== null && this.value !== undefined && !isValueByText;\n              break;\n              default:\n               doAutotext = false;\n            }\n\n            //depending on autotext run render() or just finilize init\n            $.when(doAutotext ? this.render() : true).then($.proxy(function() {\n                if(this.options.disabled) {\n                    this.disable();\n                } else {\n                    this.enable(); \n                }\n               /**        \n               Fired when element was initialized by `$().editable()` method. \n               Please note that you should setup `init` handler **before** applying `editable`. \n                              \n               @event init \n               @param {Object} event event object\n               @param {Object} editable editable instance (as here it cannot accessed via data('editable'))\n               @since 1.2.0\n               @example\n               $('#username').on('init', function(e, editable) {\n                   alert('initialized ' + editable.options.name);\n               });\n               $('#username').editable();\n               **/                  \n                this.$element.triggerHandler('init', this);\n            }, this));\n        },\n\n        /*\n         Initializes parent element for live editables \n        */\n        initLive: function() {\n           //store selector \n           var selector = this.options.selector;\n           //modify options for child elements\n           this.options.selector = false; \n           this.options.autotext = 'never';\n           //listen toggle events\n           this.$element.on(this.options.toggle + '.editable', selector, $.proxy(function(e){\n               var $target = $(e.target);\n               if(!$target.data('editable')) {\n                   //if delegated element initially empty, we need to clear it's text (that was manually set to `empty` by user)\n                   //see https://github.com/vitalets/x-editable/issues/137 \n                   if($target.hasClass(this.options.emptyclass)) {\n                      $target.empty();\n                   }\n                   $target.editable(this.options).trigger(e);\n               }\n           }, this)); \n        },\n        \n        /*\n        Renders value into element's text.\n        Can call custom display method from options.\n        Can return deferred object.\n        @method render()\n        @param {mixed} response server response (if exist) to pass into display function\n        */          \n        render: function(response) {\n            //do not display anything\n            if(this.options.display === false) {\n                return;\n            }\n            \n            //if input has `value2htmlFinal` method, we pass callback in third param to be called when source is loaded\n            if(this.input.value2htmlFinal) {\n                return this.input.value2html(this.value, this.$element[0], this.options.display, response); \n            //if display method defined --> use it    \n            } else if(typeof this.options.display === 'function') {\n                return this.options.display.call(this.$element[0], this.value, response);\n            //else use input's original value2html() method    \n            } else {\n                return this.input.value2html(this.value, this.$element[0]); \n            }\n        },\n        \n        /**\n        Enables editable\n        @method enable()\n        **/          \n        enable: function() {\n            this.options.disabled = false;\n            this.$element.removeClass('editable-disabled');\n            this.handleEmpty(this.isEmpty);\n            if(this.options.toggle !== 'manual') {\n                if(this.$element.attr('tabindex') === '-1') {    \n                    this.$element.removeAttr('tabindex');                                \n                }\n            }\n        },\n        \n        /**\n        Disables editable\n        @method disable()\n        **/         \n        disable: function() {\n            this.options.disabled = true; \n            this.hide();           \n            this.$element.addClass('editable-disabled');\n            this.handleEmpty(this.isEmpty);\n            //do not stop focus on this element\n            this.$element.attr('tabindex', -1);                \n        },\n        \n        /**\n        Toggles enabled / disabled state of editable element\n        @method toggleDisabled()\n        **/         \n        toggleDisabled: function() {\n            if(this.options.disabled) {\n                this.enable();\n            } else { \n                this.disable(); \n            }\n        },  \n        \n        /**\n        Sets new option\n        \n        @method option(key, value)\n        @param {string|object} key option name or object with several options\n        @param {mixed} value option new value\n        @example\n        $('.editable').editable('option', 'pk', 2);\n        **/          \n        option: function(key, value) {\n            //set option(s) by object\n            if(key && typeof key === 'object') {\n               $.each(key, $.proxy(function(k, v){\n                  this.option($.trim(k), v); \n               }, this)); \n               return;\n            }\n\n            //set option by string             \n            this.options[key] = value;                          \n            \n            //disabled\n            if(key === 'disabled') {\n               return value ? this.disable() : this.enable();\n            } \n            \n            //value\n            if(key === 'value') {\n                this.setValue(value);\n            }\n            \n            //transfer new option to container! \n            if(this.container) {\n                this.container.option(key, value);  \n            }\n             \n            //pass option to input directly (as it points to the same in form)\n            if(this.input.option) {\n                this.input.option(key, value);\n            }\n            \n        },              \n        \n        /*\n        * set emptytext if element is empty\n        */\n        handleEmpty: function (isEmpty) {\n            //do not handle empty if we do not display anything\n            if(this.options.display === false) {\n                return;\n            }\n\n            /* \n            isEmpty may be set directly as param of method.\n            It is required when we enable/disable field and can't rely on content \n            as node content is text: \"Empty\" that is not empty %)\n            */\n            if(isEmpty !== undefined) { \n                this.isEmpty = isEmpty;\n            } else {\n                //detect empty\n                //for some inputs we need more smart check\n                //e.g. wysihtml5 may have <br>, <p></p>, <img>\n                if(typeof(this.input.isEmpty) === 'function') {\n                    this.isEmpty = this.input.isEmpty(this.$element);                    \n                } else {\n                    this.isEmpty = $.trim(this.$element.html()) === '';\n                }\n            }           \n            \n            //emptytext shown only for enabled\n            if(!this.options.disabled) {\n                if (this.isEmpty) {\n                    this.$element.html(this.options.emptytext);\n                    if(this.options.emptyclass) {\n                        this.$element.addClass(this.options.emptyclass);\n                    }\n                } else if(this.options.emptyclass) {\n                    this.$element.removeClass(this.options.emptyclass);\n                }\n            } else {\n                //below required if element disable property was changed\n                if(this.isEmpty) {\n                    this.$element.empty();\n                    if(this.options.emptyclass) {\n                        this.$element.removeClass(this.options.emptyclass);\n                    }\n                }\n            }\n        },        \n        \n        /**\n        Shows container with form\n        @method show()\n        @param {boolean} closeAll Whether to close all other editable containers when showing this one. Default true.\n        **/  \n        show: function (closeAll) {\n            if(this.options.disabled) {\n                return;\n            }\n            \n            //init editableContainer: popover, tooltip, inline, etc..\n            if(!this.container) {\n                var containerOptions = $.extend({}, this.options, {\n                    value: this.value,\n                    input: this.input //pass input to form (as it is already created)\n                });\n                this.$element.editableContainer(containerOptions);\n                //listen `save` event \n                this.$element.on(\"save.internal\", $.proxy(this.save, this));\n                this.container = this.$element.data('editableContainer'); \n            } else if(this.container.tip().is(':visible')) {\n                return;\n            }      \n            \n            //show container\n            this.container.show(closeAll);\n        },\n        \n        /**\n        Hides container with form\n        @method hide()\n        **/       \n        hide: function () {   \n            if(this.container) {  \n                this.container.hide();\n            }\n        },\n        \n        /**\n        Toggles container visibility (show / hide)\n        @method toggle()\n        @param {boolean} closeAll Whether to close all other editable containers when showing this one. Default true.\n        **/  \n        toggle: function(closeAll) {\n            if(this.container && this.container.tip().is(':visible')) {\n                this.hide();\n            } else {\n                this.show(closeAll);\n            }\n        },\n        \n        /*\n        * called when form was submitted\n        */          \n        save: function(e, params) {\n            //mark element with unsaved class if needed\n            if(this.options.unsavedclass) {\n                /*\n                 Add unsaved css to element if:\n                  - url is not user's function \n                  - value was not sent to server\n                  - params.response === undefined, that means data was not sent\n                  - value changed \n                */\n                var sent = false;\n                sent = sent || typeof this.options.url === 'function';\n                sent = sent || this.options.display === false; \n                sent = sent || params.response !== undefined; \n                sent = sent || (this.options.savenochange && this.input.value2str(this.value) !== this.input.value2str(params.newValue)); \n                \n                if(sent) {\n                    this.$element.removeClass(this.options.unsavedclass); \n                } else {\n                    this.$element.addClass(this.options.unsavedclass);                    \n                }\n            }\n            \n            //highlight when saving\n            if(this.options.highlight) {\n                var $e = this.$element,\n                    bgColor = $e.css('background-color');\n                    \n                $e.css('background-color', this.options.highlight);\n                setTimeout(function(){\n                    if(bgColor === 'transparent') {\n                        bgColor = ''; \n                    }\n                    $e.css('background-color', bgColor);\n                    $e.addClass('editable-bg-transition');\n                    setTimeout(function(){\n                       $e.removeClass('editable-bg-transition');  \n                    }, 1700);\n                }, 10);\n            }\n            \n            //set new value\n            this.setValue(params.newValue, false, params.response);\n            \n            /**        \n            Fired when new value was submitted. You can use <code>$(this).data('editable')</code> to access to editable instance\n            \n            @event save \n            @param {Object} event event object\n            @param {Object} params additional params\n            @param {mixed} params.newValue submitted value\n            @param {Object} params.response ajax response\n            @example\n            $('#username').on('save', function(e, params) {\n                alert('Saved value: ' + params.newValue);\n            });\n            **/\n            //event itself is triggered by editableContainer. Description here is only for documentation              \n        },\n\n        validate: function () {\n            if (typeof this.options.validate === 'function') {\n                return this.options.validate.call(this, this.value);\n            }\n        },\n        \n        /**\n        Sets new value of editable\n        @method setValue(value, convertStr)\n        @param {mixed} value new value \n        @param {boolean} convertStr whether to convert value from string to internal format\n        **/         \n        setValue: function(value, convertStr, response) {\n            if(convertStr) {\n                this.value = this.input.str2value(value);\n            } else {\n                this.value = value;\n            }\n            if(this.container) {\n                this.container.option('value', this.value);\n            }\n            $.when(this.render(response))\n            .then($.proxy(function() {\n                this.handleEmpty();\n            }, this));\n        },\n        \n        /**\n        Activates input of visible container (e.g. set focus)\n        @method activate()\n        **/         \n        activate: function() {\n            if(this.container) {\n               this.container.activate(); \n            }\n        },\n        \n        /**\n        Removes editable feature from element\n        @method destroy()\n        **/        \n        destroy: function() {\n            this.disable();\n            \n            if(this.container) {\n               this.container.destroy(); \n            }\n            \n            this.input.destroy();\n\n            if(this.options.toggle !== 'manual') {\n                this.$element.removeClass('editable-click');\n                this.$element.off(this.options.toggle + '.editable');\n            } \n            \n            this.$element.off(\"save.internal\");\n            \n            this.$element.removeClass('editable editable-open editable-disabled');\n            this.$element.removeData('editable');\n        }        \n    };\n\n    /* EDITABLE PLUGIN DEFINITION\n    * ======================= */\n\n    /**\n    jQuery method to initialize editable element.\n    \n    @method $().editable(options)\n    @params {Object} options\n    @example\n    $('#username').editable({\n        type: 'text',\n        url: '/post',\n        pk: 1\n    });\n    **/\n    $.fn.editable = function (option) {\n        //special API methods returning non-jquery object\n        var result = {}, args = arguments, datakey = 'editable';\n        switch (option) {\n            /**\n            Runs client-side validation for all matched editables\n            \n            @method validate()\n            @returns {Object} validation errors map\n            @example\n            $('#username, #fullname').editable('validate');\n            // possible result:\n            {\n              username: \"username is required\",\n              fullname: \"fullname should be minimum 3 letters length\"\n            }\n            **/\n            case 'validate':\n                this.each(function () {\n                    var $this = $(this), data = $this.data(datakey), error;\n                    if (data && (error = data.validate())) {\n                        result[data.options.name] = error;\n                    }\n                });\n            return result;\n\n            /**\n            Returns current values of editable elements.   \n            Note that it returns an **object** with name-value pairs, not a value itself. It allows to get data from several elements.    \n            If value of some editable is `null` or `undefined` it is excluded from result object.\n            When param `isSingle` is set to **true** - it is supposed you have single element and will return value of editable instead of object.   \n             \n            @method getValue()\n            @param {bool} isSingle whether to return just value of single element\n            @returns {Object} object of element names and values\n            @example\n            $('#username, #fullname').editable('getValue');\n            //result:\n            {\n            username: \"superuser\",\n            fullname: \"John\"\n            }\n            //isSingle = true\n            $('#username').editable('getValue', true);\n            //result \"superuser\" \n            **/\n            case 'getValue':\n                if(arguments.length === 2 && arguments[1] === true) { //isSingle = true\n                    result = this.eq(0).data(datakey).value;\n                } else {\n                    this.each(function () {\n                        var $this = $(this), data = $this.data(datakey);\n                        if (data && data.value !== undefined && data.value !== null) {\n                            result[data.options.name] = data.input.value2submit(data.value);\n                        }\n                    });\n                }\n            return result;\n\n            /**\n            This method collects values from several editable elements and submit them all to server.   \n            Internally it runs client-side validation for all fields and submits only in case of success.  \n            See <a href=\"#newrecord\">creating new records</a> for details.  \n            Since 1.5.1 `submit` can be applied to single element to send data programmatically. In that case\n            `url`, `success` and `error` is taken from initial options and you can just call `$('#username').editable('submit')`. \n            \n            @method submit(options)\n            @param {object} options \n            @param {object} options.url url to submit data \n            @param {object} options.data additional data to submit\n            @param {object} options.ajaxOptions additional ajax options\n            @param {function} options.error(obj) error handler \n            @param {function} options.success(obj,config) success handler\n            @returns {Object} jQuery object\n            **/\n            case 'submit':  //collects value, validate and submit to server for creating new record\n                var config = arguments[1] || {},\n                $elems = this,\n                errors = this.editable('validate');\n\n                // validation ok\n                if($.isEmptyObject(errors)) {\n                    var ajaxOptions = {};\n                                                      \n                    // for single element use url, success etc from options\n                    if($elems.length === 1) {\n                        var editable = $elems.data('editable');\n                        //standard params\n                        var params = {\n                            name: editable.options.name || '',\n                            value: editable.input.value2submit(editable.value),\n                            pk: (typeof editable.options.pk === 'function') ? \n                                editable.options.pk.call(editable.options.scope) : \n                                editable.options.pk \n                        };\n\n                        //additional params\n                        if(typeof editable.options.params === 'function') {\n                            params = editable.options.params.call(editable.options.scope, params);  \n                        } else {\n                            //try parse json in single quotes (from data-params attribute)\n                            editable.options.params = $.fn.editableutils.tryParseJson(editable.options.params, true);   \n                            $.extend(params, editable.options.params);\n                        }\n\n                        ajaxOptions = {\n                            url: editable.options.url,\n                            data: params,\n                            type: 'POST'  \n                        };\n                        \n                        // use success / error from options \n                        config.success = config.success || editable.options.success;\n                        config.error = config.error || editable.options.error;\n                        \n                    // multiple elements\n                    } else {\n                        var values = this.editable('getValue'); \n                        \n                        ajaxOptions = {\n                            url: config.url,\n                            data: values, \n                            type: 'POST'\n                        };                        \n                    }                    \n\n                    // ajax success callabck (response 200 OK)\n                    ajaxOptions.success = typeof config.success === 'function' ? function(response) {\n                            config.success.call($elems, response, config);\n                        } : $.noop;\n                                  \n                    // ajax error callabck\n                    ajaxOptions.error = typeof config.error === 'function' ? function() {\n                             config.error.apply($elems, arguments);\n                        } : $.noop;\n                       \n                    // extend ajaxOptions    \n                    if(config.ajaxOptions) { \n                        $.extend(ajaxOptions, config.ajaxOptions);\n                    }\n                    \n                    // extra data \n                    if(config.data) {\n                        $.extend(ajaxOptions.data, config.data);\n                    }                     \n                    \n                    // perform ajax request\n                    $.ajax(ajaxOptions);\n                } else { //client-side validation error\n                    if(typeof config.error === 'function') {\n                        config.error.call($elems, errors);\n                    }\n                }\n            return this;\n        }\n\n        //return jquery object\n        return this.each(function () {\n            var $this = $(this), \n                data = $this.data(datakey), \n                options = typeof option === 'object' && option;\n\n            //for delegated targets do not store `editable` object for element\n            //it's allows several different selectors.\n            //see: https://github.com/vitalets/x-editable/issues/312    \n            if(options && options.selector) {\n                data = new Editable(this, options);\n                return; \n            }    \n            \n            if (!data) {\n                $this.data(datakey, (data = new Editable(this, options)));\n            }\n\n            if (typeof option === 'string') { //call method \n                data[option].apply(data, Array.prototype.slice.call(args, 1));\n            } \n        });\n    };    \n            \n\n    $.fn.editable.defaults = {\n        /**\n        Type of input. Can be <code>text|textarea|select|date|checklist</code> and more\n\n        @property type \n        @type string\n        @default 'text'\n        **/\n        type: 'text',        \n        /**\n        Sets disabled state of editable\n\n        @property disabled \n        @type boolean\n        @default false\n        **/         \n        disabled: false,\n        /**\n        How to toggle editable. Can be <code>click|dblclick|mouseenter|manual</code>.   \n        When set to <code>manual</code> you should manually call <code>show/hide</code> methods of editable.    \n        **Note**: if you call <code>show</code> or <code>toggle</code> inside **click** handler of some DOM element, \n        you need to apply <code>e.stopPropagation()</code> because containers are being closed on any click on document.\n        \n        @example\n        $('#edit-button').click(function(e) {\n            e.stopPropagation();\n            $('#username').editable('toggle');\n        });\n\n        @property toggle \n        @type string\n        @default 'click'\n        **/          \n        toggle: 'click',\n        /**\n        Text shown when element is empty.\n\n        @property emptytext \n        @type string\n        @default 'Empty'\n        **/         \n        emptytext: 'Empty',\n        /**\n        Allows to automatically set element's text based on it's value. Can be <code>auto|always|never</code>. Useful for select and date.\n        For example, if dropdown list is <code>{1: 'a', 2: 'b'}</code> and element's value set to <code>1</code>, it's html will be automatically set to <code>'a'</code>.  \n        <code>auto</code> - text will be automatically set only if element is empty.  \n        <code>always|never</code> - always(never) try to set element's text.\n\n        @property autotext \n        @type string\n        @default 'auto'\n        **/          \n        autotext: 'auto', \n        /**\n        Initial value of input. If not set, taken from element's text.  \n        Note, that if element's text is empty - text is automatically generated from value and can be customized (see `autotext` option).  \n        For example, to display currency sign:\n        @example\n        <a id=\"price\" data-type=\"text\" data-value=\"100\"></a>\n        <script>\n        $('#price').editable({\n            ...\n            display: function(value) {\n              $(this).text(value + '$');\n            } \n        }) \n        </script>\n                \n        @property value \n        @type mixed\n        @default element's text\n        **/\n        value: null,\n        /**\n        Callback to perform custom displaying of value in element's text.  \n        If `null`, default input's display used.  \n        If `false`, no displaying methods will be called, element's text will never change.  \n        Runs under element's scope.  \n        _**Parameters:**_  \n        \n        * `value` current value to be displayed\n        * `response` server response (if display called after ajax submit), since 1.4.0\n         \n        For _inputs with source_ (select, checklist) parameters are different:  \n          \n        * `value` current value to be displayed\n        * `sourceData` array of items for current input (e.g. dropdown items) \n        * `response` server response (if display called after ajax submit), since 1.4.0\n                  \n        To get currently selected items use `$.fn.editableutils.itemsByValue(value, sourceData)`.\n        \n        @property display \n        @type function|boolean\n        @default null\n        @since 1.2.0\n        @example\n        display: function(value, sourceData) {\n           //display checklist as comma-separated values\n           var html = [],\n               checked = $.fn.editableutils.itemsByValue(value, sourceData);\n               \n           if(checked.length) {\n               $.each(checked, function(i, v) { html.push($.fn.editableutils.escape(v.text)); });\n               $(this).html(html.join(', '));\n           } else {\n               $(this).empty(); \n           }\n        }\n        **/          \n        display: null,\n        /**\n        Css class applied when editable text is empty.\n\n        @property emptyclass \n        @type string\n        @since 1.4.1        \n        @default editable-empty\n        **/        \n        emptyclass: 'editable-empty',\n        /**\n        Css class applied when value was stored but not sent to server (`pk` is empty or `send = 'never'`).  \n        You may set it to `null` if you work with editables locally and submit them together.  \n\n        @property unsavedclass \n        @type string\n        @since 1.4.1        \n        @default editable-unsaved\n        **/        \n        unsavedclass: 'editable-unsaved',\n        /**\n        If selector is provided, editable will be delegated to the specified targets.  \n        Usefull for dynamically generated DOM elements.  \n        **Please note**, that delegated targets can't be initialized with `emptytext` and `autotext` options, \n        as they actually become editable only after first click.  \n        You should manually set class `editable-click` to these elements.  \n        Also, if element originally empty you should add class `editable-empty`, set `data-value=\"\"` and write emptytext into element:\n\n        @property selector \n        @type string\n        @since 1.4.1        \n        @default null\n        @example\n        <div id=\"user\">\n          <!-- empty -->\n          <a href=\"#\" data-name=\"username\" data-type=\"text\" class=\"editable-click editable-empty\" data-value=\"\" title=\"Username\">Empty</a>\n          <!-- non-empty -->\n          <a href=\"#\" data-name=\"group\" data-type=\"select\" data-source=\"/groups\" data-value=\"1\" class=\"editable-click\" title=\"Group\">Operator</a>\n        </div>     \n        \n        <script>\n        $('#user').editable({\n            selector: 'a',\n            url: '/post',\n            pk: 1\n        });\n        </script>\n        **/         \n        selector: null,\n        /**\n        Color used to highlight element after update. Implemented via CSS3 transition, works in modern browsers.\n        \n        @property highlight \n        @type string|boolean\n        @since 1.4.5        \n        @default #FFFF80 \n        **/\n        highlight: '#FFFF80'\n    };\n    \n}(window.jQuery));\n\n/**\nAbstractInput - base class for all editable inputs.\nIt defines interface to be implemented by any input type.\nTo create your own input you can inherit from this class.\n\n@class abstractinput\n**/\n(function ($) {\n    \"use strict\";\n\n    //types\n    $.fn.editabletypes = {};\n\n    var AbstractInput = function () { };\n\n    AbstractInput.prototype = {\n       /**\n        Initializes input\n\n        @method init() \n        **/\n       init: function(type, options, defaults) {\n           this.type = type;\n           this.options = $.extend({}, defaults, options);\n       },\n\n       /*\n       this method called before render to init $tpl that is inserted in DOM\n       */\n       prerender: function() {\n           this.$tpl = $(this.options.tpl); //whole tpl as jquery object    \n           this.$input = this.$tpl;         //control itself, can be changed in render method\n           this.$clear = null;              //clear button\n           this.error = null;               //error message, if input cannot be rendered           \n       },\n       \n       /**\n        Renders input from tpl. Can return jQuery deferred object.\n        Can be overwritten in child objects\n\n        @method render()\n       **/\n       render: function() {\n\n       }, \n\n       /**\n        Sets element's html by value. \n\n        @method value2html(value, element)\n        @param {mixed} value\n        @param {DOMElement} element\n       **/\n       value2html: function(value, element) {\n           $(element)[this.options.escape ? 'text' : 'html']($.trim(value));\n       },\n\n       /**\n        Converts element's html to value\n\n        @method html2value(html)\n        @param {string} html\n        @returns {mixed}\n       **/\n       html2value: function(html) {\n           return $('<div>').html(html).text();\n       },\n\n       /**\n        Converts value to string (for internal compare). For submitting to server used value2submit().\n\n        @method value2str(value) \n        @param {mixed} value\n        @returns {string}\n       **/\n       value2str: function(value) {\n           return value;\n       }, \n\n       /**\n        Converts string received from server into value. Usually from `data-value` attribute.\n\n        @method str2value(str)\n        @param {string} str\n        @returns {mixed}\n       **/\n       str2value: function(str) {\n           return str;\n       }, \n       \n       /**\n        Converts value for submitting to server. Result can be string or object.\n\n        @method value2submit(value) \n        @param {mixed} value\n        @returns {mixed}\n       **/\n       value2submit: function(value) {\n           return value;\n       },\n\n       /**\n        Sets value of input.\n\n        @method value2input(value) \n        @param {mixed} value\n       **/\n       value2input: function(value) {\n           this.$input.val(value);\n       },\n\n       /**\n        Returns value of input. Value can be object (e.g. datepicker)\n\n        @method input2value() \n       **/\n       input2value: function() { \n           return this.$input.val();\n       }, \n\n       /**\n        Activates input. For text it sets focus.\n\n        @method activate() \n       **/\n       activate: function() {\n           if(this.$input.is(':visible')) {\n               this.$input.focus();\n           }\n       },\n\n       /**\n        Creates input.\n\n        @method clear() \n       **/        \n       clear: function() {\n           this.$input.val(null);\n       },\n\n       /**\n        method to escape html.\n       **/\n       escape: function(str) {\n           return $('<div>').text(str).html();\n       },\n       \n       /**\n        attach handler to automatically submit form when value changed (useful when buttons not shown)\n       **/\n       autosubmit: function() {\n        \n       },\n       \n       /**\n       Additional actions when destroying element \n       **/\n       destroy: function() {\n       },\n\n       // -------- helper functions --------\n       setClass: function() {          \n           if(this.options.inputclass) {\n               this.$input.addClass(this.options.inputclass); \n           } \n       },\n\n       setAttr: function(attr) {\n           if (this.options[attr] !== undefined && this.options[attr] !== null) {\n               this.$input.attr(attr, this.options[attr]);\n           } \n       },\n       \n       option: function(key, value) {\n            this.options[key] = value;\n       }\n       \n    };\n        \n    AbstractInput.defaults = {  \n        /**\n        HTML template of input. Normally you should not change it.\n\n        @property tpl \n        @type string\n        @default ''\n        **/   \n        tpl: '',\n        /**\n        CSS class automatically applied to input\n        \n        @property inputclass \n        @type string\n        @default null\n        **/         \n        inputclass: null,\n        \n        /**\n        If `true` - html will be escaped in content of element via $.text() method.  \n        If `false` - html will not be escaped, $.html() used.  \n        When you use own `display` function, this option obviosly has no effect.\n        \n        @property escape \n        @type boolean\n        @since 1.5.0\n        @default true\n        **/         \n        escape: true,\n                \n        //scope for external methods (e.g. source defined as function)\n        //for internal use only\n        scope: null,\n        \n        //need to re-declare showbuttons here to get it's value from common config (passed only options existing in defaults)\n        showbuttons: true \n    };\n    \n    $.extend($.fn.editabletypes, {abstractinput: AbstractInput});\n        \n}(window.jQuery));\n\n/**\nList - abstract class for inputs that have source option loaded from js array or via ajax\n\n@class list\n@extends abstractinput\n**/\n(function ($) {\n    \"use strict\";\n    \n    var List = function (options) {\n       \n    };\n\n    $.fn.editableutils.inherit(List, $.fn.editabletypes.abstractinput);\n\n    $.extend(List.prototype, {\n        render: function () {\n            var deferred = $.Deferred();\n\n            this.error = null;\n            this.onSourceReady(function () {\n                this.renderList();\n                deferred.resolve();\n            }, function () {\n                this.error = this.options.sourceError;\n                deferred.resolve();\n            });\n\n            return deferred.promise();\n        },\n\n        html2value: function (html) {\n            return null; //can't set value by text\n        },\n        \n        value2html: function (value, element, display, response) {\n            var deferred = $.Deferred(),\n                success = function () {\n                    if(typeof display === 'function') {\n                        //custom display method\n                        display.call(element, value, this.sourceData, response); \n                    } else {\n                        this.value2htmlFinal(value, element);\n                    }\n                    deferred.resolve();\n               };\n            \n            //for null value just call success without loading source\n            if(value === null) {\n               success.call(this);   \n            } else {\n               this.onSourceReady(success, function () { deferred.resolve(); });\n            }\n\n            return deferred.promise();\n        },  \n\n        // ------------- additional functions ------------\n\n        onSourceReady: function (success, error) {\n            //run source if it function\n            var source;\n            if ($.isFunction(this.options.source)) {\n                source = this.options.source.call(this.options.scope);\n                this.sourceData = null;\n                //note: if function returns the same source as URL - sourceData will be taken from cahce and no extra request performed\n            } else {\n                source = this.options.source;\n            }            \n            \n            //if allready loaded just call success\n            if(this.options.sourceCache && $.isArray(this.sourceData)) {\n                success.call(this);\n                return; \n            }\n\n            //try parse json in single quotes (for double quotes jquery does automatically)\n            try {\n                source = $.fn.editableutils.tryParseJson(source, false);\n            } catch (e) {\n                error.call(this);\n                return;\n            }\n\n            //loading from url\n            if (typeof source === 'string') {\n                //try to get sourceData from cache\n                if(this.options.sourceCache) {\n                    var cacheID = source,\n                    cache;\n\n                    if (!$(document).data(cacheID)) {\n                        $(document).data(cacheID, {});\n                    }\n                    cache = $(document).data(cacheID);\n\n                    //check for cached data\n                    if (cache.loading === false && cache.sourceData) { //take source from cache\n                        this.sourceData = cache.sourceData;\n                        this.doPrepend();\n                        success.call(this);\n                        return;\n                    } else if (cache.loading === true) { //cache is loading, put callback in stack to be called later\n                        cache.callbacks.push($.proxy(function () {\n                            this.sourceData = cache.sourceData;\n                            this.doPrepend();\n                            success.call(this);\n                        }, this));\n\n                        //also collecting error callbacks\n                        cache.err_callbacks.push($.proxy(error, this));\n                        return;\n                    } else { //no cache yet, activate it\n                        cache.loading = true;\n                        cache.callbacks = [];\n                        cache.err_callbacks = [];\n                    }\n                }\n                \n                //ajaxOptions for source. Can be overwritten bt options.sourceOptions\n                var ajaxOptions = $.extend({\n                    url: source,\n                    type: 'get',\n                    cache: false,\n                    dataType: 'json',\n                    success: $.proxy(function (data) {\n                        if(cache) {\n                            cache.loading = false;\n                        }\n                        this.sourceData = this.makeArray(data);\n                        if($.isArray(this.sourceData)) {\n                            if(cache) {\n                                //store result in cache\n                                cache.sourceData = this.sourceData;\n                                //run success callbacks for other fields waiting for this source\n                                $.each(cache.callbacks, function () { this.call(); }); \n                            }\n                            this.doPrepend();\n                            success.call(this);\n                        } else {\n                            error.call(this);\n                            if(cache) {\n                                //run error callbacks for other fields waiting for this source\n                                $.each(cache.err_callbacks, function () { this.call(); }); \n                            }\n                        }\n                    }, this),\n                    error: $.proxy(function () {\n                        error.call(this);\n                        if(cache) {\n                             cache.loading = false;\n                             //run error callbacks for other fields\n                             $.each(cache.err_callbacks, function () { this.call(); }); \n                        }\n                    }, this)\n                }, this.options.sourceOptions);\n                \n                //loading sourceData from server\n                $.ajax(ajaxOptions);\n                \n            } else { //options as json/array\n                this.sourceData = this.makeArray(source);\n                    \n                if($.isArray(this.sourceData)) {\n                    this.doPrepend();\n                    success.call(this);   \n                } else {\n                    error.call(this);\n                }\n            }\n        },\n\n        doPrepend: function () {\n            if(this.options.prepend === null || this.options.prepend === undefined) {\n                return;  \n            }\n            \n            if(!$.isArray(this.prependData)) {\n                //run prepend if it is function (once)\n                if ($.isFunction(this.options.prepend)) {\n                    this.options.prepend = this.options.prepend.call(this.options.scope);\n                }\n              \n                //try parse json in single quotes\n                this.options.prepend = $.fn.editableutils.tryParseJson(this.options.prepend, true);\n                \n                //convert prepend from string to object\n                if (typeof this.options.prepend === 'string') {\n                    this.options.prepend = {'': this.options.prepend};\n                }\n                \n                this.prependData = this.makeArray(this.options.prepend);\n            }\n\n            if($.isArray(this.prependData) && $.isArray(this.sourceData)) {\n                this.sourceData = this.prependData.concat(this.sourceData);\n            }\n        },\n\n        /*\n         renders input list\n        */\n        renderList: function() {\n            // this method should be overwritten in child class\n        },\n       \n         /*\n         set element's html by value\n        */\n        value2htmlFinal: function(value, element) {\n            // this method should be overwritten in child class\n        },        \n\n        /**\n        * convert data to array suitable for sourceData, e.g. [{value: 1, text: 'abc'}, {...}]\n        */\n        makeArray: function(data) {\n            var count, obj, result = [], item, iterateItem;\n            if(!data || typeof data === 'string') {\n                return null; \n            }\n\n            if($.isArray(data)) { //array\n                /* \n                   function to iterate inside item of array if item is object.\n                   Caclulates count of keys in item and store in obj. \n                */\n                iterateItem = function (k, v) {\n                    obj = {value: k, text: v};\n                    if(count++ >= 2) {\n                        return false;// exit from `each` if item has more than one key.\n                    }\n                };\n            \n                for(var i = 0; i < data.length; i++) {\n                    item = data[i]; \n                    if(typeof item === 'object') {\n                        count = 0; //count of keys inside item\n                        $.each(item, iterateItem);\n                        //case: [{val1: 'text1'}, {val2: 'text2} ...]\n                        if(count === 1) { \n                            result.push(obj); \n                            //case: [{value: 1, text: 'text1'}, {value: 2, text: 'text2'}, ...]\n                        } else if(count > 1) {\n                            //removed check of existance: item.hasOwnProperty('value') && item.hasOwnProperty('text')\n                            if(item.children) {\n                                item.children = this.makeArray(item.children);   \n                            }\n                            result.push(item);\n                        }\n                    } else {\n                        //case: ['text1', 'text2' ...]\n                        result.push({value: item, text: item}); \n                    }\n                }\n            } else {  //case: {val1: 'text1', val2: 'text2, ...}\n                $.each(data, function (k, v) {\n                    result.push({value: k, text: v});\n                });  \n            }\n            return result;\n        },\n        \n        option: function(key, value) {\n            this.options[key] = value;\n            if(key === 'source') {\n                this.sourceData = null;\n            }\n            if(key === 'prepend') {\n                this.prependData = null;\n            }            \n        }        \n\n    });      \n\n    List.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {\n        /**\n        Source data for list.  \n        If **array** - it should be in format: `[{value: 1, text: \"text1\"}, {value: 2, text: \"text2\"}, ...]`  \n        For compability, object format is also supported: `{\"1\": \"text1\", \"2\": \"text2\" ...}` but it does not guarantee elements order.\n        \n        If **string** - considered ajax url to load items. In that case results will be cached for fields with the same source and name. See also `sourceCache` option.\n          \n        If **function**, it should return data in format above (since 1.4.0).\n        \n        Since 1.4.1 key `children` supported to render OPTGROUP (for **select** input only).  \n        `[{text: \"group1\", children: [{value: 1, text: \"text1\"}, {value: 2, text: \"text2\"}]}, ...]` \n\n\t\t\n        @property source \n        @type string | array | object | function\n        @default null\n        **/         \n        source: null, \n        /**\n        Data automatically prepended to the beginning of dropdown list.\n        \n        @property prepend \n        @type string | array | object | function\n        @default false\n        **/         \n        prepend: false,\n        /**\n        Error message when list cannot be loaded (e.g. ajax error)\n        \n        @property sourceError \n        @type string\n        @default Error when loading list\n        **/          \n        sourceError: 'Error when loading list',\n        /**\n        if <code>true</code> and source is **string url** - results will be cached for fields with the same source.    \n        Usefull for editable column in grid to prevent extra requests.\n        \n        @property sourceCache \n        @type boolean\n        @default true\n        @since 1.2.0\n        **/        \n        sourceCache: true,\n        /**\n        Additional ajax options to be used in $.ajax() when loading list from server.\n        Useful to send extra parameters (`data` key) or change request method (`type` key).\n        \n        @property sourceOptions \n        @type object|function\n        @default null\n        @since 1.5.0\n        **/        \n        sourceOptions: null\n    });\n\n    $.fn.editabletypes.list = List;      \n\n}(window.jQuery));\n\n/**\nText input\n\n@class text\n@extends abstractinput\n@final\n@example\n<a href=\"#\" id=\"username\" data-type=\"text\" data-pk=\"1\">awesome</a>\n<script>\n$(function(){\n    $('#username').editable({\n        url: '/post',\n        title: 'Enter username'\n    });\n});\n</script>\n**/\n(function ($) {\n    \"use strict\";\n    \n    var Text = function (options) {\n        this.init('text', options, Text.defaults);\n    };\n\n    $.fn.editableutils.inherit(Text, $.fn.editabletypes.abstractinput);\n\n    $.extend(Text.prototype, {\n        render: function() {\n           this.renderClear();\n           this.setClass();\n           this.setAttr('placeholder');\n        },\n        \n        activate: function() {\n            if(this.$input.is(':visible')) {\n                this.$input.focus();\n                $.fn.editableutils.setCursorPosition(this.$input.get(0), this.$input.val().length);\n                if(this.toggleClear) {\n                    this.toggleClear();\n                }\n            }\n        },\n        \n        //render clear button\n        renderClear:  function() {\n           if (this.options.clear) {\n               this.$clear = $('<span class=\"editable-clear-x\"></span>');\n               this.$input.after(this.$clear)\n                          .css('padding-right', 24)\n                          .keyup($.proxy(function(e) {\n                              //arrows, enter, tab, etc\n                              if(~$.inArray(e.keyCode, [40,38,9,13,27])) {\n                                return;\n                              }                            \n\n                              clearTimeout(this.t);\n                              var that = this;\n                              this.t = setTimeout(function() {\n                                that.toggleClear(e);\n                              }, 100);\n                              \n                          }, this))\n                          .parent().css('position', 'relative');\n                          \n               this.$clear.click($.proxy(this.clear, this));                       \n           }            \n        },\n        \n        postrender: function() {\n            /*\n            //now `clear` is positioned via css\n            if(this.$clear) {\n                //can position clear button only here, when form is shown and height can be calculated\n//                var h = this.$input.outerHeight(true) || 20,\n                var h = this.$clear.parent().height(),\n                    delta = (h - this.$clear.height()) / 2;\n                    \n                //this.$clear.css({bottom: delta, right: delta});\n            }\n            */ \n        },\n        \n        //show / hide clear button\n        toggleClear: function(e) {\n            if(!this.$clear) {\n                return;\n            }\n            \n            var len = this.$input.val().length,\n                visible = this.$clear.is(':visible');\n                 \n            if(len && !visible) {\n                this.$clear.show();\n            } \n            \n            if(!len && visible) {\n                this.$clear.hide();\n            } \n        },\n        \n        clear: function() {\n           this.$clear.hide();\n           this.$input.val('').focus();\n        }          \n    });\n\n    Text.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {\n        /**\n        @property tpl \n        @default <input type=\"text\">\n        **/         \n        tpl: '<input type=\"text\">',\n        /**\n        Placeholder attribute of input. Shown when input is empty.\n\n        @property placeholder \n        @type string\n        @default null\n        **/             \n        placeholder: null,\n        \n        /**\n        Whether to show `clear` button \n        \n        @property clear \n        @type boolean\n        @default true        \n        **/\n        clear: true\n    });\n\n    $.fn.editabletypes.text = Text;\n\n}(window.jQuery));\n\n/**\nTextarea input\n\n@class textarea\n@extends abstractinput\n@final\n@example\n<a href=\"#\" id=\"comments\" data-type=\"textarea\" data-pk=\"1\">awesome comment!</a>\n<script>\n$(function(){\n    $('#comments').editable({\n        url: '/post',\n        title: 'Enter comments',\n        rows: 10\n    });\n});\n</script>\n**/\n(function ($) {\n    \"use strict\";\n    \n    var Textarea = function (options) {\n        this.init('textarea', options, Textarea.defaults);\n    };\n\n    $.fn.editableutils.inherit(Textarea, $.fn.editabletypes.abstractinput);\n\n    $.extend(Textarea.prototype, {\n        render: function () {\n            this.setClass();\n            this.setAttr('placeholder');\n            this.setAttr('rows');                        \n            \n            //ctrl + enter\n            this.$input.keydown(function (e) {\n                if (e.ctrlKey && e.which === 13) {\n                    $(this).closest('form').submit();\n                }\n            });\n        },\n        \n       //using `white-space: pre-wrap` solves \\n  <--> BR conversion very elegant!\n       /* \n       value2html: function(value, element) {\n            var html = '', lines;\n            if(value) {\n                lines = value.split(\"\\n\");\n                for (var i = 0; i < lines.length; i++) {\n                    lines[i] = $('<div>').text(lines[i]).html();\n                }\n                html = lines.join('<br>');\n            }\n            $(element).html(html);\n        },\n       \n        html2value: function(html) {\n            if(!html) {\n                return '';\n            }\n\n            var regex = new RegExp(String.fromCharCode(10), 'g');\n            var lines = html.split(/<br\\s*\\/?>/i);\n            for (var i = 0; i < lines.length; i++) {\n                var text = $('<div>').html(lines[i]).text();\n\n                // Remove newline characters (\\n) to avoid them being converted by value2html() method\n                // thus adding extra <br> tags\n                text = text.replace(regex, '');\n\n                lines[i] = text;\n            }\n            return lines.join(\"\\n\");\n        },\n         */\n        activate: function() {\n            $.fn.editabletypes.text.prototype.activate.call(this);\n        }\n    });\n\n    Textarea.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {\n        /**\n        @property tpl\n        @default <textarea></textarea>\n        **/\n        tpl:'<textarea></textarea>',\n        /**\n        @property inputclass\n        @default input-large\n        **/\n        inputclass: 'input-large',\n        /**\n        Placeholder attribute of input. Shown when input is empty.\n\n        @property placeholder\n        @type string\n        @default null\n        **/\n        placeholder: null,\n        /**\n        Number of rows in textarea\n\n        @property rows\n        @type integer\n        @default 7\n        **/        \n        rows: 7        \n    });\n\n    $.fn.editabletypes.textarea = Textarea;\n\n}(window.jQuery));\n\n/**\nSelect (dropdown)\n\n@class select\n@extends list\n@final\n@example\n<a href=\"#\" id=\"status\" data-type=\"select\" data-pk=\"1\" data-url=\"/post\" data-title=\"Select status\"></a>\n<script>\n$(function(){\n    $('#status').editable({\n        value: 2,    \n        source: [\n              {value: 1, text: 'Active'},\n              {value: 2, text: 'Blocked'},\n              {value: 3, text: 'Deleted'}\n           ]\n    });\n});\n</script>\n**/\n(function ($) {\n    \"use strict\";\n    \n    var Select = function (options) {\n        this.init('select', options, Select.defaults);\n    };\n\n    $.fn.editableutils.inherit(Select, $.fn.editabletypes.list);\n\n    $.extend(Select.prototype, {\n        renderList: function() {\n            this.$input.empty();\n\n            var fillItems = function($el, data) {\n                var attr;\n                if($.isArray(data)) {\n                    for(var i=0; i<data.length; i++) {\n                        attr = {};\n                        if(data[i].children) {\n                            attr.label = data[i].text;\n                            $el.append(fillItems($('<optgroup>', attr), data[i].children)); \n                        } else {\n                            attr.value = data[i].value;\n                            if(data[i].disabled) {\n                                attr.disabled = true;\n                            }\n                            $el.append($('<option>', attr).text(data[i].text)); \n                        }\n                    }\n                }\n                return $el;\n            };        \n\n            fillItems(this.$input, this.sourceData);\n            \n            this.setClass();\n            \n            //enter submit\n            this.$input.on('keydown.editable', function (e) {\n                if (e.which === 13) {\n                    $(this).closest('form').submit();\n                }\n            });            \n        },\n       \n        value2htmlFinal: function(value, element) {\n            var text = '', \n                items = $.fn.editableutils.itemsByValue(value, this.sourceData);\n                \n            if(items.length) {\n                text = items[0].text;\n            }\n            \n            //$(element).text(text);\n            $.fn.editabletypes.abstractinput.prototype.value2html.call(this, text, element);\n        },\n        \n        autosubmit: function() {\n            this.$input.off('keydown.editable').on('change.editable', function(){\n                $(this).closest('form').submit();\n            });\n        }\n    });      \n\n    Select.defaults = $.extend({}, $.fn.editabletypes.list.defaults, {\n        /**\n        @property tpl \n        @default <select></select>\n        **/         \n        tpl:'<select></select>'\n    });\n\n    $.fn.editabletypes.select = Select;      \n\n}(window.jQuery));\n\n/**\nList of checkboxes. \nInternally value stored as javascript array of values.\n\n@class checklist\n@extends list\n@final\n@example\n<a href=\"#\" id=\"options\" data-type=\"checklist\" data-pk=\"1\" data-url=\"/post\" data-title=\"Select options\"></a>\n<script>\n$(function(){\n    $('#options').editable({\n        value: [2, 3],    \n        source: [\n              {value: 1, text: 'option1'},\n              {value: 2, text: 'option2'},\n              {value: 3, text: 'option3'}\n           ]\n    });\n});\n</script>\n**/\n(function ($) {\n    \"use strict\";\n    \n    var Checklist = function (options) {\n        this.init('checklist', options, Checklist.defaults);\n    };\n\n    $.fn.editableutils.inherit(Checklist, $.fn.editabletypes.list);\n\n    $.extend(Checklist.prototype, {\n        renderList: function() {\n            var $label, $div;\n            \n            this.$tpl.empty();\n            \n            if(!$.isArray(this.sourceData)) {\n                return;\n            }\n\n            for(var i=0; i<this.sourceData.length; i++) {\n                $label = $('<label>').append($('<input>', {\n                                           type: 'checkbox',\n                                           value: this.sourceData[i].value \n                                     }))\n                                     .append($('<span>').text(' '+this.sourceData[i].text));\n                \n                $('<div>').append($label).appendTo(this.$tpl);\n            }\n            \n            this.$input = this.$tpl.find('input[type=\"checkbox\"]');\n            this.setClass();\n        },\n       \n       value2str: function(value) {\n           return $.isArray(value) ? value.sort().join($.trim(this.options.separator)) : '';\n       },  \n       \n       //parse separated string\n        str2value: function(str) {\n           var reg, value = null;\n           if(typeof str === 'string' && str.length) {\n               reg = new RegExp('\\\\s*'+$.trim(this.options.separator)+'\\\\s*');\n               value = str.split(reg);\n           } else if($.isArray(str)) {\n               value = str; \n           } else {\n               value = [str];\n           }\n           return value;\n        },       \n       \n       //set checked on required checkboxes\n       value2input: function(value) {\n            this.$input.prop('checked', false);\n            if($.isArray(value) && value.length) {\n               this.$input.each(function(i, el) {\n                   var $el = $(el);\n                   // cannot use $.inArray as it performs strict comparison\n                   $.each(value, function(j, val){\n                       /*jslint eqeq: true*/\n                       if($el.val() == val) {\n                       /*jslint eqeq: false*/                           \n                           $el.prop('checked', true);\n                       }\n                   });\n               }); \n            }  \n        },  \n        \n       input2value: function() { \n           var checked = [];\n           this.$input.filter(':checked').each(function(i, el) {\n               checked.push($(el).val());\n           });\n           return checked;\n       },            \n          \n       //collect text of checked boxes\n        value2htmlFinal: function(value, element) {\n           var html = [],\n               checked = $.fn.editableutils.itemsByValue(value, this.sourceData),\n               escape = this.options.escape;\n               \n           if(checked.length) {\n               $.each(checked, function(i, v) {\n                   var text = escape ? $.fn.editableutils.escape(v.text) : v.text; \n                   html.push(text); \n               });\n               $(element).html(html.join('<br>'));\n           } else {\n               $(element).empty(); \n           }\n        },\n        \n       activate: function() {\n           this.$input.first().focus();\n       },\n       \n       autosubmit: function() {\n           this.$input.on('keydown', function(e){\n               if (e.which === 13) {\n                   $(this).closest('form').submit();\n               }\n           });\n       }\n    });      \n\n    Checklist.defaults = $.extend({}, $.fn.editabletypes.list.defaults, {\n        /**\n        @property tpl \n        @default <div></div>\n        **/         \n        tpl:'<div class=\"editable-checklist\"></div>',\n        \n        /**\n        @property inputclass \n        @type string\n        @default null\n        **/         \n        inputclass: null,        \n        \n        /**\n        Separator of values when reading from `data-value` attribute\n\n        @property separator \n        @type string\n        @default ','\n        **/         \n        separator: ','\n    });\n\n    $.fn.editabletypes.checklist = Checklist;      \n\n}(window.jQuery));\n\n/**\nHTML5 input types.\nFollowing types are supported:\n\n* password\n* email\n* url\n* tel\n* number\n* range\n* time\n\nLearn more about html5 inputs:  \nhttp://www.w3.org/wiki/HTML5_form_additions  \nTo check browser compatibility please see:  \nhttps://developer.mozilla.org/en-US/docs/HTML/Element/Input\n            \n@class html5types \n@extends text\n@final\n@since 1.3.0\n@example\n<a href=\"#\" id=\"email\" data-type=\"email\" data-pk=\"1\">admin@example.com</a>\n<script>\n$(function(){\n    $('#email').editable({\n        url: '/post',\n        title: 'Enter email'\n    });\n});\n</script>\n**/\n\n/**\n@property tpl \n@default depends on type\n**/ \n\n/*\nPassword\n*/\n(function ($) {\n    \"use strict\";\n    \n    var Password = function (options) {\n        this.init('password', options, Password.defaults);\n    };\n    $.fn.editableutils.inherit(Password, $.fn.editabletypes.text);\n    $.extend(Password.prototype, {\n       //do not display password, show '[hidden]' instead\n       value2html: function(value, element) {\n           if(value) {\n               $(element).text('[hidden]');\n           } else {\n               $(element).empty(); \n           }\n       },\n       //as password not displayed, should not set value by html\n       html2value: function(html) {\n           return null;\n       }       \n    });    \n    Password.defaults = $.extend({}, $.fn.editabletypes.text.defaults, {\n        tpl: '<input type=\"password\">'\n    });\n    $.fn.editabletypes.password = Password;\n}(window.jQuery));\n\n\n/*\nEmail\n*/\n(function ($) {\n    \"use strict\";\n    \n    var Email = function (options) {\n        this.init('email', options, Email.defaults);\n    };\n    $.fn.editableutils.inherit(Email, $.fn.editabletypes.text);\n    Email.defaults = $.extend({}, $.fn.editabletypes.text.defaults, {\n        tpl: '<input type=\"email\">'\n    });\n    $.fn.editabletypes.email = Email;\n}(window.jQuery));\n\n\n/*\nUrl\n*/\n(function ($) {\n    \"use strict\";\n    \n    var Url = function (options) {\n        this.init('url', options, Url.defaults);\n    };\n    $.fn.editableutils.inherit(Url, $.fn.editabletypes.text);\n    Url.defaults = $.extend({}, $.fn.editabletypes.text.defaults, {\n        tpl: '<input type=\"url\">'\n    });\n    $.fn.editabletypes.url = Url;\n}(window.jQuery));\n\n\n/*\nTel\n*/\n(function ($) {\n    \"use strict\";\n    \n    var Tel = function (options) {\n        this.init('tel', options, Tel.defaults);\n    };\n    $.fn.editableutils.inherit(Tel, $.fn.editabletypes.text);\n    Tel.defaults = $.extend({}, $.fn.editabletypes.text.defaults, {\n        tpl: '<input type=\"tel\">'\n    });\n    $.fn.editabletypes.tel = Tel;\n}(window.jQuery));\n\n\n/*\nNumber\n*/\n(function ($) {\n    \"use strict\";\n    \n    var NumberInput = function (options) {\n        this.init('number', options, NumberInput.defaults);\n    };\n    $.fn.editableutils.inherit(NumberInput, $.fn.editabletypes.text);\n    $.extend(NumberInput.prototype, {\n         render: function () {\n            NumberInput.superclass.render.call(this);\n            this.setAttr('min');\n            this.setAttr('max');\n            this.setAttr('step');\n        },\n        postrender: function() {\n            if(this.$clear) {\n                //increase right ffset  for up/down arrows\n                this.$clear.css({right: 24});\n                /*\n                //can position clear button only here, when form is shown and height can be calculated\n                var h = this.$input.outerHeight(true) || 20,\n                    delta = (h - this.$clear.height()) / 2;\n                \n                //add 12px to offset right for up/down arrows    \n                this.$clear.css({top: delta, right: delta + 16});\n                */\n            } \n        }        \n    });     \n    NumberInput.defaults = $.extend({}, $.fn.editabletypes.text.defaults, {\n        tpl: '<input type=\"number\">',\n        inputclass: 'input-mini',\n        min: null,\n        max: null,\n        step: null\n    });\n    $.fn.editabletypes.number = NumberInput;\n}(window.jQuery));\n\n\n/*\nRange (inherit from number)\n*/\n(function ($) {\n    \"use strict\";\n    \n    var Range = function (options) {\n        this.init('range', options, Range.defaults);\n    };\n    $.fn.editableutils.inherit(Range, $.fn.editabletypes.number);\n    $.extend(Range.prototype, {\n        render: function () {\n            this.$input = this.$tpl.filter('input');\n            \n            this.setClass();\n            this.setAttr('min');\n            this.setAttr('max');\n            this.setAttr('step');           \n            \n            this.$input.on('input', function(){\n                $(this).siblings('output').text($(this).val()); \n            });  \n        },\n        activate: function() {\n            this.$input.focus();\n        }         \n    });\n    Range.defaults = $.extend({}, $.fn.editabletypes.number.defaults, {\n        tpl: '<input type=\"range\"><output style=\"width: 30px; display: inline-block\"></output>',\n        inputclass: 'input-medium'\n    });\n    $.fn.editabletypes.range = Range;\n}(window.jQuery));\n\n/*\nTime\n*/\n(function ($) {\n    \"use strict\";\n\n    var Time = function (options) {\n        this.init('time', options, Time.defaults);\n    };\n    //inherit from abstract, as inheritance from text gives selection error.\n    $.fn.editableutils.inherit(Time, $.fn.editabletypes.abstractinput);\n    $.extend(Time.prototype, {\n        render: function() {\n           this.setClass();\n        }        \n    });\n    Time.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {\n        tpl: '<input type=\"time\">'\n    });\n    $.fn.editabletypes.time = Time;\n}(window.jQuery));\n\n/**\nSelect2 input. Based on amazing work of Igor Vaynberg https://github.com/ivaynberg/select2.  \nPlease see [original select2 docs](http://ivaynberg.github.com/select2) for detailed description and options.  \n \nYou should manually download and include select2 distributive:  \n\n    <link href=\"select2/select2.css\" rel=\"stylesheet\" type=\"text/css\"></link>  \n    <script src=\"select2/select2.js\"></script>  \n    \nTo make it **bootstrap-styled** you can use css from [here](https://github.com/t0m/select2-bootstrap-css): \n\n    <link href=\"select2-bootstrap.css\" rel=\"stylesheet\" type=\"text/css\"></link>    \n    \n**Note:** currently `autotext` feature does not work for select2 with `ajax` remote source.    \nYou need initially put both `data-value` and element's text youself:    \n\n    <a href=\"#\" data-type=\"select2\" data-value=\"1\">Text1</a>\n    \n    \n@class select2\n@extends abstractinput\n@since 1.4.1\n@final\n@example\n<a href=\"#\" id=\"country\" data-type=\"select2\" data-pk=\"1\" data-value=\"ru\" data-url=\"/post\" data-title=\"Select country\"></a>\n<script>\n$(function(){\n    //local source\n    $('#country').editable({\n        source: [\n              {id: 'gb', text: 'Great Britain'},\n              {id: 'us', text: 'United States'},\n              {id: 'ru', text: 'Russia'}\n           ],\n        select2: {\n           multiple: true\n        }\n    });\n    //remote source (simple)\n    $('#country').editable({\n        source: '/getCountries',\n        select2: {\n            placeholder: 'Select Country',\n            minimumInputLength: 1\n        }\n    });\n    //remote source (advanced)\n    $('#country').editable({\n        select2: {\n            placeholder: 'Select Country',\n            allowClear: true,\n            minimumInputLength: 3,\n            id: function (item) {\n                return item.CountryId;\n            },\n            ajax: {\n                url: '/getCountries',\n                dataType: 'json',\n                data: function (term, page) {\n                    return { query: term };\n                },\n                results: function (data, page) {\n                    return { results: data };\n                }\n            },\n            formatResult: function (item) {\n                return item.CountryName;\n            },\n            formatSelection: function (item) {\n                return item.CountryName;\n            },\n            initSelection: function (element, callback) {\n                return $.get('/getCountryById', { query: element.val() }, function (data) {\n                    callback(data);\n                });\n            } \n        }  \n    });\n});\n</script>\n**/\n(function ($) {\n    \"use strict\";\n    \n    var Constructor = function (options) {\n        this.init('select2', options, Constructor.defaults);\n\n        options.select2 = options.select2 || {};\n\n        this.sourceData = null;\n        \n        //placeholder\n        if(options.placeholder) {\n            options.select2.placeholder = options.placeholder;\n        }\n       \n        //if not `tags` mode, use source\n        if(!options.select2.tags && options.source) {\n            var source = options.source;\n            //if source is function, call it (once!)\n            if ($.isFunction(options.source)) {\n                source = options.source.call(options.scope);\n            }               \n\n            if (typeof source === 'string') {\n                options.select2.ajax = options.select2.ajax || {};\n                //some default ajax params\n                if(!options.select2.ajax.data) {\n                    options.select2.ajax.data = function(term) {return { query:term };};\n                }\n                if(!options.select2.ajax.results) {\n                    options.select2.ajax.results = function(data) { return {results:data };};\n                }\n                options.select2.ajax.url = source;\n            } else {\n                //check format and convert x-editable format to select2 format (if needed)\n                this.sourceData = this.convertSource(source);\n                options.select2.data = this.sourceData;\n            }\n        } \n\n        //overriding objects in config (as by default jQuery extend() is not recursive)\n        this.options.select2 = $.extend({}, Constructor.defaults.select2, options.select2);\n\n        //detect whether it is multi-valued\n        this.isMultiple = this.options.select2.tags || this.options.select2.multiple;\n        this.isRemote = ('ajax' in this.options.select2);\n\n        //store function returning ID of item\n        //should be here as used inautotext for local source\n        this.idFunc = this.options.select2.id;\n        if (typeof(this.idFunc) !== \"function\") {\n            var idKey = this.idFunc || 'id';\n            this.idFunc = function (e) { return e[idKey]; };\n        }\n\n        //store function that renders text in select2\n        this.formatSelection = this.options.select2.formatSelection;\n        if (typeof(this.formatSelection) !== \"function\") {\n            this.formatSelection = function (e) { return e.text; };\n        }\n    };\n\n    $.fn.editableutils.inherit(Constructor, $.fn.editabletypes.abstractinput);\n\n    $.extend(Constructor.prototype, {\n        render: function() {\n            this.setClass();\n\n            //can not apply select2 here as it calls initSelection \n            //over input that does not have correct value yet.\n            //apply select2 only in value2input\n            //this.$input.select2(this.options.select2);\n\n            //when data is loaded via ajax, we need to know when it's done to populate listData\n            if(this.isRemote) {\n                //listen to loaded event to populate data\n                this.$input.on('select2-loaded', $.proxy(function(e) {\n                    this.sourceData = e.items.results;\n                }, this));\n            }\n\n            //trigger resize of editableform to re-position container in multi-valued mode\n            if(this.isMultiple) {\n               this.$input.on('change', function() {\n                   $(this).closest('form').parent().triggerHandler('resize');\n               });\n            }\n       },\n\n       value2html: function(value, element) {\n           var text = '', data,\n               that = this;\n\n           if(this.options.select2.tags) { //in tags mode just assign value\n              data = value; \n              //data = $.fn.editableutils.itemsByValue(value, this.options.select2.tags, this.idFunc);\n           } else if(this.sourceData) {\n              data = $.fn.editableutils.itemsByValue(value, this.sourceData, this.idFunc); \n           } else {\n              //can not get list of possible values \n              //(e.g. autotext for select2 with ajax source)\n           }\n\n           //data may be array (when multiple values allowed)\n           if($.isArray(data)) {\n               //collect selected data and show with separator\n               text = [];\n               $.each(data, function(k, v){\n                   text.push(v && typeof v === 'object' ? that.formatSelection(v) : v);\n               });\n           } else if(data) {\n               text = that.formatSelection(data);\n           }\n\n           text = $.isArray(text) ? text.join(this.options.viewseparator) : text;\n\n           //$(element).text(text);\n           Constructor.superclass.value2html.call(this, text, element); \n       },\n\n       html2value: function(html) {\n           return this.options.select2.tags ? this.str2value(html, this.options.viewseparator) : null;\n       },\n\n       value2input: function(value) {\n           // if value array => join it anyway\n           if($.isArray(value)) {\n              value = value.join(this.getSeparator());\n           }\n\n           //for remote source just set value, text is updated by initSelection\n           if(!this.$input.data('select2')) {\n               this.$input.val(value);\n               this.$input.select2(this.options.select2);\n           } else {\n               //second argument needed to separate initial change from user's click (for autosubmit)   \n               this.$input.val(value).trigger('change', true); \n\n               //Uncaught Error: cannot call val() if initSelection() is not defined\n               //this.$input.select2('val', value);\n           }\n\n           // if defined remote source AND no multiple mode AND no user's initSelection provided --> \n           // we should somehow get text for provided id.\n           // The solution is to use element's text as text for that id (exclude empty)\n           if(this.isRemote && !this.isMultiple && !this.options.select2.initSelection) {\n               // customId and customText are methods to extract `id` and `text` from data object\n               // we can use this workaround only if user did not define these methods\n               // otherwise we cant construct data object\n               var customId = this.options.select2.id,\n                   customText = this.options.select2.formatSelection;\n\n               if(!customId && !customText) {\n                   var $el = $(this.options.scope);\n                   if (!$el.data('editable').isEmpty) {\n                       var data = {id: value, text: $el.text()};\n                       this.$input.select2('data', data); \n                   }\n               }\n           }\n       },\n       \n       input2value: function() { \n           return this.$input.select2('val');\n       },\n\n       str2value: function(str, separator) {\n            if(typeof str !== 'string' || !this.isMultiple) {\n                return str;\n            }\n\n            separator = separator || this.getSeparator();\n\n            var val, i, l;\n\n            if (str === null || str.length < 1) {\n                return null;\n            }\n            val = str.split(separator);\n            for (i = 0, l = val.length; i < l; i = i + 1) {\n                val[i] = $.trim(val[i]);\n            }\n\n            return val;\n       },\n\n        autosubmit: function() {\n            this.$input.on('change', function(e, isInitial){\n                if(!isInitial) {\n                  $(this).closest('form').submit();\n                }\n            });\n        },\n\n        getSeparator: function() {\n            return this.options.select2.separator || $.fn.select2.defaults.separator;\n        },\n\n        /*\n        Converts source from x-editable format: {value: 1, text: \"1\"} to\n        select2 format: {id: 1, text: \"1\"}\n        */\n        convertSource: function(source) {\n            if($.isArray(source) && source.length && source[0].value !== undefined) {\n                for(var i = 0; i<source.length; i++) {\n                    if(source[i].value !== undefined) {\n                        source[i].id = source[i].value;\n                        delete source[i].value;\n                    }\n                }\n            }\n            return source;\n        },\n        \n        destroy: function() {\n            if(this.$input.data('select2')) {\n                this.$input.select2('destroy');\n            }\n        }\n        \n    });\n\n    Constructor.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {\n        /**\n        @property tpl \n        @default <input type=\"hidden\">\n        **/\n        tpl:'<input type=\"hidden\">',\n        /**\n        Configuration of select2. [Full list of options](http://ivaynberg.github.com/select2).\n\n        @property select2 \n        @type object\n        @default null\n        **/\n        select2: null,\n        /**\n        Placeholder attribute of select\n\n        @property placeholder \n        @type string\n        @default null\n        **/\n        placeholder: null,\n        /**\n        Source data for select. It will be assigned to select2 `data` property and kept here just for convenience.\n        Please note, that format is different from simple `select` input: use 'id' instead of 'value'.\n        E.g. `[{id: 1, text: \"text1\"}, {id: 2, text: \"text2\"}, ...]`.\n\n        @property source \n        @type array|string|function\n        @default null        \n        **/\n        source: null,\n        /**\n        Separator used to display tags.\n\n        @property viewseparator \n        @type string\n        @default ', '        \n        **/\n        viewseparator: ', '\n    });\n\n    $.fn.editabletypes.select2 = Constructor;\n\n}(window.jQuery));\n\n/**\n* Combodate - 1.0.5\n* Dropdown date and time picker.\n* Converts text input into dropdowns to pick day, month, year, hour, minute and second.\n* Uses momentjs as datetime library http://momentjs.com.\n* For i18n include corresponding file from https://github.com/timrwood/moment/tree/master/lang \n*\n* Confusion at noon and midnight - see http://en.wikipedia.org/wiki/12-hour_clock#Confusion_at_noon_and_midnight\n* In combodate: \n* 12:00 pm --> 12:00 (24-h format, midday)\n* 12:00 am --> 00:00 (24-h format, midnight, start of day)\n* \n* Differs from momentjs parse rules:\n* 00:00 pm, 12:00 pm --> 12:00 (24-h format, day not change)\n* 00:00 am, 12:00 am --> 00:00 (24-h format, day not change)\n* \n* \n* Author: Vitaliy Potapov\n* Project page: http://github.com/vitalets/combodate\n* Copyright (c) 2012 Vitaliy Potapov. Released under MIT License.\n**/\n(function ($) {\n\n    var Combodate = function (element, options) {\n        this.$element = $(element);\n        if(!this.$element.is('input')) {\n            $.error('Combodate should be applied to INPUT element');\n            return;\n        }\n        this.options = $.extend({}, $.fn.combodate.defaults, options, this.$element.data());\n        this.init();  \n     };\n\n    Combodate.prototype = {\n        constructor: Combodate, \n        init: function () {\n            this.map = {\n                //key   regexp    moment.method\n                day:    ['D',    'date'], \n                month:  ['M',    'month'], \n                year:   ['Y',    'year'], \n                hour:   ['[Hh]', 'hours'],\n                minute: ['m',    'minutes'], \n                second: ['s',    'seconds'],\n                ampm:   ['[Aa]', ''] \n            };\n            \n            this.$widget = $('<span class=\"combodate\"></span>').html(this.getTemplate());\n                      \n            this.initCombos();\n            \n            //update original input on change \n            this.$widget.on('change', 'select', $.proxy(function(e) {\n                this.$element.val(this.getValue()).change();\n                // update days count if month or year changes\n                if (this.options.smartDays) {\n                    if ($(e.target).is('.month') || $(e.target).is('.year')) {\n                        this.fillCombo('day');\n                    }\n                }\n            }, this));\n            \n            this.$widget.find('select').css('width', 'auto');\n                                       \n            // hide original input and insert widget                                       \n            this.$element.hide().after(this.$widget);\n            \n            // set initial value\n            this.setValue(this.$element.val() || this.options.value);\n        },\n        \n        /*\n         Replace tokens in template with <select> elements \n        */         \n        getTemplate: function() {\n            var tpl = this.options.template;\n\n            //first pass\n            $.each(this.map, function(k, v) {\n                v = v[0]; \n                var r = new RegExp(v+'+'),\n                    token = v.length > 1 ? v.substring(1, 2) : v;\n                    \n                tpl = tpl.replace(r, '{'+token+'}');\n            });\n\n            //replace spaces with &nbsp;\n            tpl = tpl.replace(/ /g, '&nbsp;');\n\n            //second pass\n            $.each(this.map, function(k, v) {\n                v = v[0];\n                var token = v.length > 1 ? v.substring(1, 2) : v;\n                    \n                tpl = tpl.replace('{'+token+'}', '<select class=\"'+k+'\"></select>');\n            });   \n\n            return tpl;\n        },\n        \n        /*\n         Initialize combos that presents in template \n        */        \n        initCombos: function() {\n            for (var k in this.map) {\n                var $c = this.$widget.find('.'+k);\n                // set properties like this.$day, this.$month etc.\n                this['$'+k] = $c.length ? $c : null;\n                // fill with items\n                this.fillCombo(k);\n            }\n        },\n\n        /*\n         Fill combo with items \n        */        \n        fillCombo: function(k) {\n            var $combo = this['$'+k];\n            if (!$combo) {\n                return;\n            }\n\n            // define method name to fill items, e.g `fillDays`\n            var f = 'fill' + k.charAt(0).toUpperCase() + k.slice(1); \n            var items = this[f]();\n            var value = $combo.val();\n\n            $combo.empty();\n            for(var i=0; i<items.length; i++) {\n                $combo.append('<option value=\"'+items[i][0]+'\">'+items[i][1]+'</option>');\n            }\n\n            $combo.val(value);\n        },\n\n        /*\n         Initialize items of combos. Handles `firstItem` option \n        */\n        fillCommon: function(key) {\n            var values = [],\n                relTime;\n                \n            if(this.options.firstItem === 'name') {\n                //need both to support moment ver < 2 and  >= 2\n                relTime = moment.relativeTime || moment.langData()._relativeTime; \n                var header = typeof relTime[key] === 'function' ? relTime[key](1, true, key, false) : relTime[key];\n                //take last entry (see momentjs lang files structure) \n                header = header.split(' ').reverse()[0];                \n                values.push(['', header]);\n            } else if(this.options.firstItem === 'empty') {\n                values.push(['', '']);\n            }\n            return values;\n        },  \n\n\n        /*\n        fill day\n        */\n        fillDay: function() {\n            var items = this.fillCommon('d'), name, i,\n                twoDigit = this.options.template.indexOf('DD') !== -1,\n                daysCount = 31;\n\n            // detect days count (depends on month and year)\n            // originally https://github.com/vitalets/combodate/pull/7\n            if (this.options.smartDays && this.$month && this.$year) {\n                var month = parseInt(this.$month.val(), 10);\n                var year = parseInt(this.$year.val(), 10);\n\n                if (!isNaN(month) && !isNaN(year)) {\n                    daysCount = moment([year, month]).daysInMonth();\n                }\n            }\n\n            for (i = 1; i <= daysCount; i++) {\n                name = twoDigit ? this.leadZero(i) : i;\n                items.push([i, name]);\n            }\n            return items;        \n        },\n        \n        /*\n        fill month\n        */\n        fillMonth: function() {\n            var items = this.fillCommon('M'), name, i, \n                longNames = this.options.template.indexOf('MMMM') !== -1,\n                shortNames = this.options.template.indexOf('MMM') !== -1,\n                twoDigit = this.options.template.indexOf('MM') !== -1;\n                \n            for(i=0; i<=11; i++) {\n                if(longNames) {\n                    //see https://github.com/timrwood/momentjs.com/pull/36\n                    name = moment().date(1).month(i).format('MMMM');\n                } else if(shortNames) {\n                    name = moment().date(1).month(i).format('MMM');\n                } else if(twoDigit) {\n                    name = this.leadZero(i+1);\n                } else {\n                    name = i+1;\n                }\n                items.push([i, name]);\n            } \n            return items;\n        },  \n        \n        /*\n        fill year\n        */\n        fillYear: function() {\n            var items = [], name, i, \n                longNames = this.options.template.indexOf('YYYY') !== -1;\n           \n            for(i=this.options.maxYear; i>=this.options.minYear; i--) {\n                name = longNames ? i : (i+'').substring(2);\n                items[this.options.yearDescending ? 'push' : 'unshift']([i, name]);\n            }\n            \n            items = this.fillCommon('y').concat(items);\n            \n            return items;              \n        },    \n        \n        /*\n        fill hour\n        */\n        fillHour: function() {\n            var items = this.fillCommon('h'), name, i,\n                h12 = this.options.template.indexOf('h') !== -1,\n                h24 = this.options.template.indexOf('H') !== -1,\n                twoDigit = this.options.template.toLowerCase().indexOf('hh') !== -1,\n                min = h12 ? 1 : 0, \n                max = h12 ? 12 : 23;\n                \n            for(i=min; i<=max; i++) {\n                name = twoDigit ? this.leadZero(i) : i;\n                items.push([i, name]);\n            } \n            return items;                 \n        },    \n        \n        /*\n        fill minute\n        */\n        fillMinute: function() {\n            var items = this.fillCommon('m'), name, i,\n                twoDigit = this.options.template.indexOf('mm') !== -1;\n\n            for(i=0; i<=59; i+= this.options.minuteStep) {\n                name = twoDigit ? this.leadZero(i) : i;\n                items.push([i, name]);\n            }    \n            return items;              \n        },  \n        \n        /*\n        fill second\n        */\n        fillSecond: function() {\n            var items = this.fillCommon('s'), name, i,\n                twoDigit = this.options.template.indexOf('ss') !== -1;\n\n            for(i=0; i<=59; i+= this.options.secondStep) {\n                name = twoDigit ? this.leadZero(i) : i;\n                items.push([i, name]);\n            }    \n            return items;              \n        },  \n        \n        /*\n        fill ampm\n        */\n        fillAmpm: function() {\n            var ampmL = this.options.template.indexOf('a') !== -1,\n                ampmU = this.options.template.indexOf('A') !== -1,            \n                items = [\n                    ['am', ampmL ? 'am' : 'AM'],\n                    ['pm', ampmL ? 'pm' : 'PM']\n                ];\n            return items;                              \n        },                                       \n\n        /*\n         Returns current date value from combos. \n         If format not specified - `options.format` used.\n         If format = `null` - Moment object returned.\n        */\n        getValue: function(format) {\n            var dt, values = {}, \n                that = this,\n                notSelected = false;\n                \n            //getting selected values    \n            $.each(this.map, function(k, v) {\n                if(k === 'ampm') {\n                    return;\n                }\n                var def = k === 'day' ? 1 : 0;\n                  \n                values[k] = that['$'+k] ? parseInt(that['$'+k].val(), 10) : def; \n                \n                if(isNaN(values[k])) {\n                   notSelected = true;\n                   return false; \n                }\n            });\n            \n            //if at least one visible combo not selected - return empty string\n            if(notSelected) {\n               return '';\n            }\n            \n            //convert hours 12h --> 24h \n            if(this.$ampm) {\n                //12:00 pm --> 12:00 (24-h format, midday), 12:00 am --> 00:00 (24-h format, midnight, start of day)\n                if(values.hour === 12) {\n                    values.hour = this.$ampm.val() === 'am' ? 0 : 12;                    \n                } else {\n                    values.hour = this.$ampm.val() === 'am' ? values.hour : values.hour+12;\n                }\n            }    \n            \n            dt = moment([values.year, values.month, values.day, values.hour, values.minute, values.second]);\n            \n            //highlight invalid date\n            this.highlight(dt);\n                              \n            format = format === undefined ? this.options.format : format;\n            if(format === null) {\n               return dt.isValid() ? dt : null; \n            } else {\n               return dt.isValid() ? dt.format(format) : ''; \n            }           \n        },\n        \n        setValue: function(value) {\n            if(!value) {\n                return;\n            }\n            \n            var dt = typeof value === 'string' ? moment(value, this.options.format) : moment(value),\n                that = this,\n                values = {};\n            \n            //function to find nearest value in select options\n            function getNearest($select, value) {\n                var delta = {};\n                $select.children('option').each(function(i, opt){\n                    var optValue = $(opt).attr('value'),\n                    distance;\n\n                    if(optValue === '') return;\n                    distance = Math.abs(optValue - value); \n                    if(typeof delta.distance === 'undefined' || distance < delta.distance) {\n                        delta = {value: optValue, distance: distance};\n                    } \n                }); \n                return delta.value;\n            }             \n            \n            if(dt.isValid()) {\n                //read values from date object\n                $.each(this.map, function(k, v) {\n                    if(k === 'ampm') {\n                       return; \n                    }\n                    values[k] = dt[v[1]]();\n                });\n               \n                if(this.$ampm) {\n                    //12:00 pm --> 12:00 (24-h format, midday), 12:00 am --> 00:00 (24-h format, midnight, start of day)\n                    if(values.hour >= 12) {\n                        values.ampm = 'pm';\n                        if(values.hour > 12) {\n                            values.hour -= 12;\n                        }\n                    } else {\n                        values.ampm = 'am';\n                        if(values.hour === 0) {\n                            values.hour = 12;\n                        }\n                    } \n                }\n               \n                $.each(values, function(k, v) {\n                    //call val() for each existing combo, e.g. this.$hour.val()\n                    if(that['$'+k]) {\n                       \n                        if(k === 'minute' && that.options.minuteStep > 1 && that.options.roundTime) {\n                           v = getNearest(that['$'+k], v);\n                        }\n                       \n                        if(k === 'second' && that.options.secondStep > 1 && that.options.roundTime) {\n                           v = getNearest(that['$'+k], v);\n                        }                       \n                       \n                        that['$'+k].val(v);\n                    }\n                });\n\n                // update days count\n                if (this.options.smartDays) {\n                    this.fillCombo('day');\n                }\n               \n               this.$element.val(dt.format(this.options.format)).change();\n            }\n        },\n        \n        /*\n         highlight combos if date is invalid\n        */\n        highlight: function(dt) {\n            if(!dt.isValid()) {\n                if(this.options.errorClass) {\n                    this.$widget.addClass(this.options.errorClass);\n                } else {\n                    //store original border color\n                    if(!this.borderColor) {\n                        this.borderColor = this.$widget.find('select').css('border-color'); \n                    }\n                    this.$widget.find('select').css('border-color', 'red');\n                } \n            } else {\n                if(this.options.errorClass) {\n                    this.$widget.removeClass(this.options.errorClass);\n                } else {\n                    this.$widget.find('select').css('border-color', this.borderColor);\n                }  \n            }\n        },\n        \n        leadZero: function(v) {\n            return v <= 9 ? '0' + v : v; \n        },\n        \n        destroy: function() {\n            this.$widget.remove();\n            this.$element.removeData('combodate').show();\n        }\n        \n        //todo: clear method        \n    };\n\n    $.fn.combodate = function ( option ) {\n        var d, args = Array.apply(null, arguments);\n        args.shift();\n\n        //getValue returns date as string / object (not jQuery object)\n        if(option === 'getValue' && this.length && (d = this.eq(0).data('combodate'))) {\n          return d.getValue.apply(d, args);\n        }        \n        \n        return this.each(function () {\n            var $this = $(this),\n            data = $this.data('combodate'),\n            options = typeof option == 'object' && option;\n            if (!data) {\n                $this.data('combodate', (data = new Combodate(this, options)));\n            }\n            if (typeof option == 'string' && typeof data[option] == 'function') {\n                data[option].apply(data, args);\n            }\n        });\n    };  \n    \n    $.fn.combodate.defaults = {\n         //in this format value stored in original input\n        format: 'DD-MM-YYYY HH:mm',      \n        //in this format items in dropdowns are displayed\n        template: 'D / MMM / YYYY   H : mm',\n        //initial value, can be `new Date()`    \n        value: null,                       \n        minYear: 1970,\n        maxYear: 2015,\n        yearDescending: true,\n        minuteStep: 5,\n        secondStep: 1,\n        firstItem: 'empty', //'name', 'empty', 'none'\n        errorClass: null,\n        roundTime: true, // whether to round minutes and seconds if step > 1\n        smartDays: false // whether days in combo depend on selected month: 31, 30, 28\n    };\n\n}(window.jQuery));\n/**\nCombodate input - dropdown date and time picker.    \nBased on [combodate](http://vitalets.github.com/combodate) plugin (included). To use it you should manually include [momentjs](http://momentjs.com).\n\n    <script src=\"js/moment.min.js\"></script>\n   \nAllows to input:\n\n* only date\n* only time \n* both date and time  \n\nPlease note, that format is taken from momentjs and **not compatible** with bootstrap-datepicker / jquery UI datepicker.  \nInternally value stored as `momentjs` object. \n\n@class combodate\n@extends abstractinput\n@final\n@since 1.4.0\n@example\n<a href=\"#\" id=\"dob\" data-type=\"combodate\" data-pk=\"1\" data-url=\"/post\" data-value=\"1984-05-15\" data-title=\"Select date\"></a>\n<script>\n$(function(){\n    $('#dob').editable({\n        format: 'YYYY-MM-DD',    \n        viewformat: 'DD.MM.YYYY',    \n        template: 'D / MMMM / YYYY',    \n        combodate: {\n                minYear: 2000,\n                maxYear: 2015,\n                minuteStep: 1\n           }\n        }\n    });\n});\n</script>\n**/\n\n/*global moment*/\n\n(function ($) {\n    \"use strict\";\n    \n    var Constructor = function (options) {\n        this.init('combodate', options, Constructor.defaults);\n        \n        //by default viewformat equals to format\n        if(!this.options.viewformat) {\n            this.options.viewformat = this.options.format;\n        }        \n        \n        //try parse combodate config defined as json string in data-combodate\n        options.combodate = $.fn.editableutils.tryParseJson(options.combodate, true);\n\n        //overriding combodate config (as by default jQuery extend() is not recursive)\n        this.options.combodate = $.extend({}, Constructor.defaults.combodate, options.combodate, {\n            format: this.options.format,\n            template: this.options.template\n        });\n    };\n\n    $.fn.editableutils.inherit(Constructor, $.fn.editabletypes.abstractinput);    \n    \n    $.extend(Constructor.prototype, {\n        render: function () {\n            this.$input.combodate(this.options.combodate);\n                    \n            if($.fn.editableform.engine === 'bs3') {\n                this.$input.siblings().find('select').addClass('form-control');\n            }\n            \n            if(this.options.inputclass) {\n                this.$input.siblings().find('select').addClass(this.options.inputclass);\n            }            \n            //\"clear\" link\n            /*\n            if(this.options.clear) {\n                this.$clear = $('<a href=\"#\"></a>').html(this.options.clear).click($.proxy(function(e){\n                    e.preventDefault();\n                    e.stopPropagation();\n                    this.clear();\n                }, this));\n                \n                this.$tpl.parent().append($('<div class=\"editable-clear\">').append(this.$clear));  \n            } \n            */               \n        },\n        \n        value2html: function(value, element) {\n            var text = value ? value.format(this.options.viewformat) : '';\n            //$(element).text(text);\n            Constructor.superclass.value2html.call(this, text, element);  \n        },\n\n        html2value: function(html) {\n            return html ? moment(html, this.options.viewformat) : null;\n        },   \n        \n        value2str: function(value) {\n            return value ? value.format(this.options.format) : '';\n       }, \n       \n       str2value: function(str) {\n           return str ? moment(str, this.options.format) : null;\n       }, \n       \n       value2submit: function(value) {\n           return this.value2str(value);\n       },                    \n\n       value2input: function(value) {\n           this.$input.combodate('setValue', value);\n       },\n        \n       input2value: function() { \n           return this.$input.combodate('getValue', null);\n       },       \n       \n       activate: function() {\n           this.$input.siblings('.combodate').find('select').eq(0).focus();\n       },\n       \n       /*\n       clear:  function() {\n          this.$input.data('datepicker').date = null;\n          this.$input.find('.active').removeClass('active');\n       },\n       */\n       \n       autosubmit: function() {\n           \n       }\n\n    });\n    \n    Constructor.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {\n        /**\n        @property tpl \n        @default <input type=\"text\">\n        **/         \n        tpl:'<input type=\"text\">',\n        /**\n        @property inputclass \n        @default null\n        **/         \n        inputclass: null,\n        /**\n        Format used for sending value to server. Also applied when converting date from <code>data-value</code> attribute.<br>\n        See list of tokens in [momentjs docs](http://momentjs.com/docs/#/parsing/string-format)  \n        \n        @property format \n        @type string\n        @default YYYY-MM-DD\n        **/         \n        format:'YYYY-MM-DD',\n        /**\n        Format used for displaying date. Also applied when converting date from element's text on init.   \n        If not specified equals to `format`.\n        \n        @property viewformat \n        @type string\n        @default null\n        **/          \n        viewformat: null,        \n        /**\n        Template used for displaying dropdowns.\n        \n        @property template \n        @type string\n        @default D / MMM / YYYY\n        **/          \n        template: 'D / MMM / YYYY',  \n        /**\n        Configuration of combodate.\n        Full list of options: http://vitalets.github.com/combodate/#docs\n        \n        @property combodate \n        @type object\n        @default null\n        **/\n        combodate: null\n        \n        /*\n        (not implemented yet)\n        Text shown as clear date button. \n        If <code>false</code> clear button will not be rendered.\n        \n        @property clear \n        @type boolean|string\n        @default 'x clear'         \n        */\n        //clear: '&times; clear'\n    });   \n\n    $.fn.editabletypes.combodate = Constructor;\n\n}(window.jQuery));\n\n/*\nEditableform based on Twitter Bootstrap 3\n*/\n(function ($) {\n    \"use strict\";\n    \n    //store parent methods\n    var pInitInput = $.fn.editableform.Constructor.prototype.initInput;\n    \n    $.extend($.fn.editableform.Constructor.prototype, {\n        initTemplate: function() {\n            this.$form = $($.fn.editableform.template); \n            this.$form.find('.control-group').addClass('form-group');\n            this.$form.find('.editable-error-block').addClass('help-block');\n        },\n        initInput: function() {  \n            pInitInput.apply(this);\n\n            //for bs3 set default class `input-sm` to standard inputs\n            var emptyInputClass = this.input.options.inputclass === null || this.input.options.inputclass === false;\n            var defaultClass = 'input-sm';\n            \n            //bs3 add `form-control` class to standard inputs\n            var stdtypes = 'text,select,textarea,password,email,url,tel,number,range,time,typeaheadjs'.split(','); \n            if(~$.inArray(this.input.type, stdtypes)) {\n                this.input.$input.addClass('form-control');\n                if(emptyInputClass) {\n                    this.input.options.inputclass = defaultClass;\n                    this.input.$input.addClass(defaultClass);\n                }\n            }             \n        \n            //apply bs3 size class also to buttons (to fit size of control)\n            var $btn = this.$form.find('.editable-buttons');\n            var classes = emptyInputClass ? [defaultClass] : this.input.options.inputclass.split(' ');\n            for(var i=0; i<classes.length; i++) {\n                // `btn-sm` is default now\n                /*\n                if(classes[i].toLowerCase() === 'input-sm') { \n                    $btn.find('button').addClass('btn-sm');  \n                }\n                */\n                if(classes[i].toLowerCase() === 'input-lg') {\n                    $btn.find('button').removeClass('btn-sm').addClass('btn-lg'); \n                }\n            }\n        }\n    });    \n    \n    //buttons\n    $.fn.editableform.buttons = \n      '<button type=\"submit\" class=\"btn btn-primary btn-sm editable-submit\">'+\n        '<i class=\"glyphicon glyphicon-ok\"></i>'+\n      '</button>'+\n      '<button type=\"button\" class=\"btn btn-default btn-sm editable-cancel\">'+\n        '<i class=\"glyphicon glyphicon-remove\"></i>'+\n      '</button>';         \n    \n    //error classes\n    $.fn.editableform.errorGroupClass = 'has-error';\n    $.fn.editableform.errorBlockClass = null;  \n    //engine\n    $.fn.editableform.engine = 'bs3';  \n}(window.jQuery));\n/**\n* Editable Popover3 (for Bootstrap 3) \n* ---------------------\n* requires bootstrap-popover.js\n*/\n(function ($) {\n    \"use strict\";\n\n    //extend methods\n    $.extend($.fn.editableContainer.Popup.prototype, {\n        containerName: 'popover',\n        containerDataName: 'bs.popover',\n        innerCss: '.popover-content',\n        defaults: $.fn.popover.Constructor.DEFAULTS,\n\n        initContainer: function(){\n            $.extend(this.containerOptions, {\n                trigger: 'manual',\n                selector: false,\n                content: ' ',\n                template: this.defaults.template\n            });\n            \n            //as template property is used in inputs, hide it from popover\n            var t;\n            if(this.$element.data('template')) {\n               t = this.$element.data('template');\n               this.$element.removeData('template');  \n            } \n            \n            this.call(this.containerOptions);\n            \n            if(t) {\n               //restore data('template')\n               this.$element.data('template', t); \n            }\n        }, \n        \n        /* show */\n        innerShow: function () {\n            this.call('show');                \n        },  \n        \n        /* hide */\n        innerHide: function () {\n            this.call('hide');       \n        }, \n        \n        /* destroy */\n        innerDestroy: function() {\n            this.call('destroy');\n        },                               \n        \n        setContainerOption: function(key, value) {\n            this.container().options[key] = value; \n        },               \n\n        /**\n        * move popover to new position. This function mainly copied from bootstrap-popover.\n        */\n        /*jshint laxcomma: true, eqeqeq: false*/\n        setPosition: function () { \n\n            (function() {\n            /*    \n                var $tip = this.tip()\n                , inside\n                , pos\n                , actualWidth\n                , actualHeight\n                , placement\n                , tp\n                , tpt\n                , tpb\n                , tpl\n                , tpr;\n\n                placement = typeof this.options.placement === 'function' ?\n                this.options.placement.call(this, $tip[0], this.$element[0]) :\n                this.options.placement;\n\n                inside = /in/.test(placement);\n               \n                $tip\n              //  .detach()\n              //vitalets: remove any placement class because otherwise they dont influence on re-positioning of visible popover\n                .removeClass('top right bottom left')\n                .css({ top: 0, left: 0, display: 'block' });\n              //  .insertAfter(this.$element);\n               \n                pos = this.getPosition(inside);\n\n                actualWidth = $tip[0].offsetWidth;\n                actualHeight = $tip[0].offsetHeight;\n\n                placement = inside ? placement.split(' ')[1] : placement;\n\n                tpb = {top: pos.top + pos.height, left: pos.left + pos.width / 2 - actualWidth / 2};\n                tpt = {top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2};\n                tpl = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth};\n                tpr = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width};\n\n                switch (placement) {\n                    case 'bottom':\n                        if ((tpb.top + actualHeight) > ($(window).scrollTop() + $(window).height())) {\n                            if (tpt.top > $(window).scrollTop()) {\n                                placement = 'top';\n                            } else if ((tpr.left + actualWidth) < ($(window).scrollLeft() + $(window).width())) {\n                                placement = 'right';\n                            } else if (tpl.left > $(window).scrollLeft()) {\n                                placement = 'left';\n                            } else {\n                                placement = 'right';\n                            }\n                        }\n                        break;\n                    case 'top':\n                        if (tpt.top < $(window).scrollTop()) {\n                            if ((tpb.top + actualHeight) < ($(window).scrollTop() + $(window).height())) {\n                                placement = 'bottom';\n                            } else if ((tpr.left + actualWidth) < ($(window).scrollLeft() + $(window).width())) {\n                                placement = 'right';\n                            } else if (tpl.left > $(window).scrollLeft()) {\n                                placement = 'left';\n                            } else {\n                                placement = 'right';\n                            }\n                        }\n                        break;\n                    case 'left':\n                        if (tpl.left < $(window).scrollLeft()) {\n                            if ((tpr.left + actualWidth) < ($(window).scrollLeft() + $(window).width())) {\n                                placement = 'right';\n                            } else if (tpt.top > $(window).scrollTop()) {\n                                placement = 'top';\n                            } else if (tpt.top > $(window).scrollTop()) {\n                                placement = 'bottom';\n                            } else {\n                                placement = 'right';\n                            }\n                        }\n                        break;\n                    case 'right':\n                        if ((tpr.left + actualWidth) > ($(window).scrollLeft() + $(window).width())) {\n                            if (tpl.left > $(window).scrollLeft()) {\n                                placement = 'left';\n                            } else if (tpt.top > $(window).scrollTop()) {\n                                placement = 'top';\n                            } else if (tpt.top > $(window).scrollTop()) {\n                                placement = 'bottom';\n                            }\n                        }\n                        break;\n                }\n\n                switch (placement) {\n                    case 'bottom':\n                        tp = tpb;\n                        break;\n                    case 'top':\n                        tp = tpt;\n                        break;\n                    case 'left':\n                        tp = tpl;\n                        break;\n                    case 'right':\n                        tp = tpr;\n                        break;\n                }\n\n                $tip\n                .offset(tp)\n                .addClass(placement)\n                .addClass('in');\n           */\n                     \n           \n            var $tip = this.tip();\n            \n            var placement = typeof this.options.placement == 'function' ?\n                this.options.placement.call(this, $tip[0], this.$element[0]) :\n                this.options.placement;            \n\n            var autoToken = /\\s?auto?\\s?/i;\n            var autoPlace = autoToken.test(placement);\n            if (autoPlace) {\n                placement = placement.replace(autoToken, '') || 'top';\n            }\n            \n            \n            var pos = this.getPosition();\n            var actualWidth = $tip[0].offsetWidth;\n            var actualHeight = $tip[0].offsetHeight;\n\n            if (autoPlace) {\n                var $parent = this.$element.parent();\n\n                var orgPlacement = placement;\n                var docScroll    = document.documentElement.scrollTop || document.body.scrollTop;\n                var parentWidth  = this.options.container == 'body' ? window.innerWidth  : $parent.outerWidth();\n                var parentHeight = this.options.container == 'body' ? window.innerHeight : $parent.outerHeight();\n                var parentLeft   = this.options.container == 'body' ? 0 : $parent.offset().left;\n\n                placement = placement == 'bottom' && pos.top   + pos.height  + actualHeight - docScroll > parentHeight  ? 'top'    :\n                            placement == 'top'    && pos.top   - docScroll   - actualHeight < 0                         ? 'bottom' :\n                            placement == 'right'  && pos.right + actualWidth > parentWidth                              ? 'left'   :\n                            placement == 'left'   && pos.left  - actualWidth < parentLeft                               ? 'right'  :\n                            placement;\n\n                $tip\n                  .removeClass(orgPlacement)\n                  .addClass(placement);\n            }\n\n\n            var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight);\n\n            this.applyPlacement(calculatedOffset, placement);            \n                     \n                \n            }).call(this.container());\n          /*jshint laxcomma: false, eqeqeq: true*/  \n        }            \n    });\n\n}(window.jQuery));\n\n/* =========================================================\n * bootstrap-datepicker.js\n * http://www.eyecon.ro/bootstrap-datepicker\n * =========================================================\n * Copyright 2012 Stefan Petre\n * Improvements by Andrew Rowls\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ========================================================= */\n\n(function( $ ) {\n\n\tfunction UTCDate(){\n\t\treturn new Date(Date.UTC.apply(Date, arguments));\n\t}\n\tfunction UTCToday(){\n\t\tvar today = new Date();\n\t\treturn UTCDate(today.getUTCFullYear(), today.getUTCMonth(), today.getUTCDate());\n\t}\n\n\t// Picker object\n\n\tvar Datepicker = function(element, options) {\n\t\tvar that = this;\n\n\t\tthis._process_options(options);\n\n\t\tthis.element = $(element);\n\t\tthis.isInline = false;\n\t\tthis.isInput = this.element.is('input');\n\t\tthis.component = this.element.is('.date') ? this.element.find('.add-on, .btn') : false;\n\t\tthis.hasInput = this.component && this.element.find('input').length;\n\t\tif(this.component && this.component.length === 0)\n\t\t\tthis.component = false;\n\n\t\tthis.picker = $(DPGlobal.template);\n\t\tthis._buildEvents();\n\t\tthis._attachEvents();\n\n\t\tif(this.isInline) {\n\t\t\tthis.picker.addClass('datepicker-inline').appendTo(this.element);\n\t\t} else {\n\t\t\tthis.picker.addClass('datepicker-dropdown dropdown-menu');\n\t\t}\n\n\t\tif (this.o.rtl){\n\t\t\tthis.picker.addClass('datepicker-rtl');\n\t\t\tthis.picker.find('.prev i, .next i')\n\t\t\t\t\t\t.toggleClass('icon-arrow-left icon-arrow-right');\n\t\t}\n\n\n\t\tthis.viewMode = this.o.startView;\n\n\t\tif (this.o.calendarWeeks)\n\t\t\tthis.picker.find('tfoot th.today')\n\t\t\t\t\t\t.attr('colspan', function(i, val){\n\t\t\t\t\t\t\treturn parseInt(val) + 1;\n\t\t\t\t\t\t});\n\n\t\tthis._allow_update = false;\n\n\t\tthis.setStartDate(this.o.startDate);\n\t\tthis.setEndDate(this.o.endDate);\n\t\tthis.setDaysOfWeekDisabled(this.o.daysOfWeekDisabled);\n\n\t\tthis.fillDow();\n\t\tthis.fillMonths();\n\n\t\tthis._allow_update = true;\n\n\t\tthis.update();\n\t\tthis.showMode();\n\n\t\tif(this.isInline) {\n\t\t\tthis.show();\n\t\t}\n\t};\n\n\tDatepicker.prototype = {\n\t\tconstructor: Datepicker,\n\n\t\t_process_options: function(opts){\n\t\t\t// Store raw options for reference\n\t\t\tthis._o = $.extend({}, this._o, opts);\n\t\t\t// Processed options\n\t\t\tvar o = this.o = $.extend({}, this._o);\n\n\t\t\t// Check if \"de-DE\" style date is available, if not language should\n\t\t\t// fallback to 2 letter code eg \"de\"\n\t\t\tvar lang = o.language;\n\t\t\tif (!dates[lang]) {\n\t\t\t\tlang = lang.split('-')[0];\n\t\t\t\tif (!dates[lang])\n\t\t\t\t\tlang = defaults.language;\n\t\t\t}\n\t\t\to.language = lang;\n\n\t\t\tswitch(o.startView){\n\t\t\t\tcase 2:\n\t\t\t\tcase 'decade':\n\t\t\t\t\to.startView = 2;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\tcase 'year':\n\t\t\t\t\to.startView = 1;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\to.startView = 0;\n\t\t\t}\n\n\t\t\tswitch (o.minViewMode) {\n\t\t\t\tcase 1:\n\t\t\t\tcase 'months':\n\t\t\t\t\to.minViewMode = 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\tcase 'years':\n\t\t\t\t\to.minViewMode = 2;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\to.minViewMode = 0;\n\t\t\t}\n\n\t\t\to.startView = Math.max(o.startView, o.minViewMode);\n\n\t\t\to.weekStart %= 7;\n\t\t\to.weekEnd = ((o.weekStart + 6) % 7);\n\n\t\t\tvar format = DPGlobal.parseFormat(o.format)\n\t\t\tif (o.startDate !== -Infinity) {\n\t\t\t\to.startDate = DPGlobal.parseDate(o.startDate, format, o.language);\n\t\t\t}\n\t\t\tif (o.endDate !== Infinity) {\n\t\t\t\to.endDate = DPGlobal.parseDate(o.endDate, format, o.language);\n\t\t\t}\n\n\t\t\to.daysOfWeekDisabled = o.daysOfWeekDisabled||[];\n\t\t\tif (!$.isArray(o.daysOfWeekDisabled))\n\t\t\t\to.daysOfWeekDisabled = o.daysOfWeekDisabled.split(/[,\\s]*/);\n\t\t\to.daysOfWeekDisabled = $.map(o.daysOfWeekDisabled, function (d) {\n\t\t\t\treturn parseInt(d, 10);\n\t\t\t});\n\t\t},\n\t\t_events: [],\n\t\t_secondaryEvents: [],\n\t\t_applyEvents: function(evs){\n\t\t\tfor (var i=0, el, ev; i<evs.length; i++){\n\t\t\t\tel = evs[i][0];\n\t\t\t\tev = evs[i][1];\n\t\t\t\tel.on(ev);\n\t\t\t}\n\t\t},\n\t\t_unapplyEvents: function(evs){\n\t\t\tfor (var i=0, el, ev; i<evs.length; i++){\n\t\t\t\tel = evs[i][0];\n\t\t\t\tev = evs[i][1];\n\t\t\t\tel.off(ev);\n\t\t\t}\n\t\t},\n\t\t_buildEvents: function(){\n\t\t\tif (this.isInput) { // single input\n\t\t\t\tthis._events = [\n\t\t\t\t\t[this.element, {\n\t\t\t\t\t\tfocus: $.proxy(this.show, this),\n\t\t\t\t\t\tkeyup: $.proxy(this.update, this),\n\t\t\t\t\t\tkeydown: $.proxy(this.keydown, this)\n\t\t\t\t\t}]\n\t\t\t\t];\n\t\t\t}\n\t\t\telse if (this.component && this.hasInput){ // component: input + button\n\t\t\t\tthis._events = [\n\t\t\t\t\t// For components that are not readonly, allow keyboard nav\n\t\t\t\t\t[this.element.find('input'), {\n\t\t\t\t\t\tfocus: $.proxy(this.show, this),\n\t\t\t\t\t\tkeyup: $.proxy(this.update, this),\n\t\t\t\t\t\tkeydown: $.proxy(this.keydown, this)\n\t\t\t\t\t}],\n\t\t\t\t\t[this.component, {\n\t\t\t\t\t\tclick: $.proxy(this.show, this)\n\t\t\t\t\t}]\n\t\t\t\t];\n\t\t\t}\n\t\t\telse if (this.element.is('div')) {  // inline datepicker\n\t\t\t\tthis.isInline = true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis._events = [\n\t\t\t\t\t[this.element, {\n\t\t\t\t\t\tclick: $.proxy(this.show, this)\n\t\t\t\t\t}]\n\t\t\t\t];\n\t\t\t}\n\n\t\t\tthis._secondaryEvents = [\n\t\t\t\t[this.picker, {\n\t\t\t\t\tclick: $.proxy(this.click, this)\n\t\t\t\t}],\n\t\t\t\t[$(window), {\n\t\t\t\t\tresize: $.proxy(this.place, this)\n\t\t\t\t}],\n\t\t\t\t[$(document), {\n\t\t\t\t\tmousedown: $.proxy(function (e) {\n\t\t\t\t\t\t// Clicked outside the datepicker, hide it\n\t\t\t\t\t\tif (!(\n\t\t\t\t\t\t\tthis.element.is(e.target) ||\n\t\t\t\t\t\t\tthis.element.find(e.target).size() ||\n\t\t\t\t\t\t\tthis.picker.is(e.target) ||\n\t\t\t\t\t\t\tthis.picker.find(e.target).size()\n\t\t\t\t\t\t)) {\n\t\t\t\t\t\t\tthis.hide();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, this)\n\t\t\t\t}]\n\t\t\t];\n\t\t},\n\t\t_attachEvents: function(){\n\t\t\tthis._detachEvents();\n\t\t\tthis._applyEvents(this._events);\n\t\t},\n\t\t_detachEvents: function(){\n\t\t\tthis._unapplyEvents(this._events);\n\t\t},\n\t\t_attachSecondaryEvents: function(){\n\t\t\tthis._detachSecondaryEvents();\n\t\t\tthis._applyEvents(this._secondaryEvents);\n\t\t},\n\t\t_detachSecondaryEvents: function(){\n\t\t\tthis._unapplyEvents(this._secondaryEvents);\n\t\t},\n\t\t_trigger: function(event, altdate){\n\t\t\tvar date = altdate || this.date,\n\t\t\t\tlocal_date = new Date(date.getTime() + (date.getTimezoneOffset()*60000));\n\n\t\t\tthis.element.trigger({\n\t\t\t\ttype: event,\n\t\t\t\tdate: local_date,\n\t\t\t\tformat: $.proxy(function(altformat){\n\t\t\t\t\tvar format = altformat || this.o.format;\n\t\t\t\t\treturn DPGlobal.formatDate(date, format, this.o.language);\n\t\t\t\t}, this)\n\t\t\t});\n\t\t},\n\n\t\tshow: function(e) {\n\t\t\tif (!this.isInline)\n\t\t\t\tthis.picker.appendTo('body');\n\t\t\tthis.picker.show();\n\t\t\tthis.height = this.component ? this.component.outerHeight() : this.element.outerHeight();\n\t\t\tthis.place();\n\t\t\tthis._attachSecondaryEvents();\n\t\t\tif (e) {\n\t\t\t\te.preventDefault();\n\t\t\t}\n\t\t\tthis._trigger('show');\n\t\t},\n\n\t\thide: function(e){\n\t\t\tif(this.isInline) return;\n\t\t\tif (!this.picker.is(':visible')) return;\n\t\t\tthis.picker.hide().detach();\n\t\t\tthis._detachSecondaryEvents();\n\t\t\tthis.viewMode = this.o.startView;\n\t\t\tthis.showMode();\n\n\t\t\tif (\n\t\t\t\tthis.o.forceParse &&\n\t\t\t\t(\n\t\t\t\t\tthis.isInput && this.element.val() ||\n\t\t\t\t\tthis.hasInput && this.element.find('input').val()\n\t\t\t\t)\n\t\t\t)\n\t\t\t\tthis.setValue();\n\t\t\tthis._trigger('hide');\n\t\t},\n\n\t\tremove: function() {\n\t\t\tthis.hide();\n\t\t\tthis._detachEvents();\n\t\t\tthis._detachSecondaryEvents();\n\t\t\tthis.picker.remove();\n\t\t\tdelete this.element.data().datepicker;\n\t\t\tif (!this.isInput) {\n\t\t\t\tdelete this.element.data().date;\n\t\t\t}\n\t\t},\n\n\t\tgetDate: function() {\n\t\t\tvar d = this.getUTCDate();\n\t\t\treturn new Date(d.getTime() + (d.getTimezoneOffset()*60000));\n\t\t},\n\n\t\tgetUTCDate: function() {\n\t\t\treturn this.date;\n\t\t},\n\n\t\tsetDate: function(d) {\n\t\t\tthis.setUTCDate(new Date(d.getTime() - (d.getTimezoneOffset()*60000)));\n\t\t},\n\n\t\tsetUTCDate: function(d) {\n\t\t\tthis.date = d;\n\t\t\tthis.setValue();\n\t\t},\n\n\t\tsetValue: function() {\n\t\t\tvar formatted = this.getFormattedDate();\n\t\t\tif (!this.isInput) {\n\t\t\t\tif (this.component){\n\t\t\t\t\tthis.element.find('input').val(formatted);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.element.val(formatted);\n\t\t\t}\n\t\t},\n\n\t\tgetFormattedDate: function(format) {\n\t\t\tif (format === undefined)\n\t\t\t\tformat = this.o.format;\n\t\t\treturn DPGlobal.formatDate(this.date, format, this.o.language);\n\t\t},\n\n\t\tsetStartDate: function(startDate){\n\t\t\tthis._process_options({startDate: startDate});\n\t\t\tthis.update();\n\t\t\tthis.updateNavArrows();\n\t\t},\n\n\t\tsetEndDate: function(endDate){\n\t\t\tthis._process_options({endDate: endDate});\n\t\t\tthis.update();\n\t\t\tthis.updateNavArrows();\n\t\t},\n\n\t\tsetDaysOfWeekDisabled: function(daysOfWeekDisabled){\n\t\t\tthis._process_options({daysOfWeekDisabled: daysOfWeekDisabled});\n\t\t\tthis.update();\n\t\t\tthis.updateNavArrows();\n\t\t},\n\n\t\tplace: function(){\n\t\t\t\t\t\tif(this.isInline) return;\n\t\t\tvar zIndex = parseInt(this.element.parents().filter(function() {\n\t\t\t\t\t\t\treturn $(this).css('z-index') != 'auto';\n\t\t\t\t\t\t}).first().css('z-index'))+10;\n\t\t\tvar offset = this.component ? this.component.parent().offset() : this.element.offset();\n\t\t\tvar height = this.component ? this.component.outerHeight(true) : this.element.outerHeight(true);\n\t\t\tthis.picker.css({\n\t\t\t\ttop: offset.top + height,\n\t\t\t\tleft: offset.left,\n\t\t\t\tzIndex: zIndex\n\t\t\t});\n\t\t},\n\n\t\t_allow_update: true,\n\t\tupdate: function(){\n\t\t\tif (!this._allow_update) return;\n\n\t\t\tvar date, fromArgs = false;\n\t\t\tif(arguments && arguments.length && (typeof arguments[0] === 'string' || arguments[0] instanceof Date)) {\n\t\t\t\tdate = arguments[0];\n\t\t\t\tfromArgs = true;\n\t\t\t} else {\n\t\t\t\tdate = this.isInput ? this.element.val() : this.element.data('date') || this.element.find('input').val();\n\t\t\t\tdelete this.element.data().date;\n\t\t\t}\n\n\t\t\tthis.date = DPGlobal.parseDate(date, this.o.format, this.o.language);\n\n\t\t\tif(fromArgs) this.setValue();\n\n\t\t\tif (this.date < this.o.startDate) {\n\t\t\t\tthis.viewDate = new Date(this.o.startDate);\n\t\t\t} else if (this.date > this.o.endDate) {\n\t\t\t\tthis.viewDate = new Date(this.o.endDate);\n\t\t\t} else {\n\t\t\t\tthis.viewDate = new Date(this.date);\n\t\t\t}\n\t\t\tthis.fill();\n\t\t},\n\n\t\tfillDow: function(){\n\t\t\tvar dowCnt = this.o.weekStart,\n\t\t\thtml = '<tr>';\n\t\t\tif(this.o.calendarWeeks){\n\t\t\t\tvar cell = '<th class=\"cw\">&nbsp;</th>';\n\t\t\t\thtml += cell;\n\t\t\t\tthis.picker.find('.datepicker-days thead tr:first-child').prepend(cell);\n\t\t\t}\n\t\t\twhile (dowCnt < this.o.weekStart + 7) {\n\t\t\t\thtml += '<th class=\"dow\">'+dates[this.o.language].daysMin[(dowCnt++)%7]+'</th>';\n\t\t\t}\n\t\t\thtml += '</tr>';\n\t\t\tthis.picker.find('.datepicker-days thead').append(html);\n\t\t},\n\n\t\tfillMonths: function(){\n\t\t\tvar html = '',\n\t\t\ti = 0;\n\t\t\twhile (i < 12) {\n\t\t\t\thtml += '<span class=\"month\">'+dates[this.o.language].monthsShort[i++]+'</span>';\n\t\t\t}\n\t\t\tthis.picker.find('.datepicker-months td').html(html);\n\t\t},\n\n\t\tsetRange: function(range){\n\t\t\tif (!range || !range.length)\n\t\t\t\tdelete this.range;\n\t\t\telse\n\t\t\t\tthis.range = $.map(range, function(d){ return d.valueOf(); });\n\t\t\tthis.fill();\n\t\t},\n\n\t\tgetClassNames: function(date){\n\t\t\tvar cls = [],\n\t\t\t\tyear = this.viewDate.getUTCFullYear(),\n\t\t\t\tmonth = this.viewDate.getUTCMonth(),\n\t\t\t\tcurrentDate = this.date.valueOf(),\n\t\t\t\ttoday = new Date();\n\t\t\tif (date.getUTCFullYear() < year || (date.getUTCFullYear() == year && date.getUTCMonth() < month)) {\n\t\t\t\tcls.push('old');\n\t\t\t} else if (date.getUTCFullYear() > year || (date.getUTCFullYear() == year && date.getUTCMonth() > month)) {\n\t\t\t\tcls.push('new');\n\t\t\t}\n\t\t\t// Compare internal UTC date with local today, not UTC today\n\t\t\tif (this.o.todayHighlight &&\n\t\t\t\tdate.getUTCFullYear() == today.getFullYear() &&\n\t\t\t\tdate.getUTCMonth() == today.getMonth() &&\n\t\t\t\tdate.getUTCDate() == today.getDate()) {\n\t\t\t\tcls.push('today');\n\t\t\t}\n\t\t\tif (currentDate && date.valueOf() == currentDate) {\n\t\t\t\tcls.push('active');\n\t\t\t}\n\t\t\tif (date.valueOf() < this.o.startDate || date.valueOf() > this.o.endDate ||\n\t\t\t\t$.inArray(date.getUTCDay(), this.o.daysOfWeekDisabled) !== -1) {\n\t\t\t\tcls.push('disabled');\n\t\t\t}\n\t\t\tif (this.range){\n\t\t\t\tif (date > this.range[0] && date < this.range[this.range.length-1]){\n\t\t\t\t\tcls.push('range');\n\t\t\t\t}\n\t\t\t\tif ($.inArray(date.valueOf(), this.range) != -1){\n\t\t\t\t\tcls.push('selected');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn cls;\n\t\t},\n\n\t\tfill: function() {\n\t\t\tvar d = new Date(this.viewDate),\n\t\t\t\tyear = d.getUTCFullYear(),\n\t\t\t\tmonth = d.getUTCMonth(),\n\t\t\t\tstartYear = this.o.startDate !== -Infinity ? this.o.startDate.getUTCFullYear() : -Infinity,\n\t\t\t\tstartMonth = this.o.startDate !== -Infinity ? this.o.startDate.getUTCMonth() : -Infinity,\n\t\t\t\tendYear = this.o.endDate !== Infinity ? this.o.endDate.getUTCFullYear() : Infinity,\n\t\t\t\tendMonth = this.o.endDate !== Infinity ? this.o.endDate.getUTCMonth() : Infinity,\n\t\t\t\tcurrentDate = this.date && this.date.valueOf(),\n\t\t\t\ttooltip;\n\t\t\tthis.picker.find('.datepicker-days thead th.datepicker-switch')\n\t\t\t\t\t\t.text(dates[this.o.language].months[month]+' '+year);\n\t\t\tthis.picker.find('tfoot th.today')\n\t\t\t\t\t\t.text(dates[this.o.language].today)\n\t\t\t\t\t\t.toggle(this.o.todayBtn !== false);\n\t\t\tthis.picker.find('tfoot th.clear')\n\t\t\t\t\t\t.text(dates[this.o.language].clear)\n\t\t\t\t\t\t.toggle(this.o.clearBtn !== false);\n\t\t\tthis.updateNavArrows();\n\t\t\tthis.fillMonths();\n\t\t\tvar prevMonth = UTCDate(year, month-1, 28,0,0,0,0),\n\t\t\t\tday = DPGlobal.getDaysInMonth(prevMonth.getUTCFullYear(), prevMonth.getUTCMonth());\n\t\t\tprevMonth.setUTCDate(day);\n\t\t\tprevMonth.setUTCDate(day - (prevMonth.getUTCDay() - this.o.weekStart + 7)%7);\n\t\t\tvar nextMonth = new Date(prevMonth);\n\t\t\tnextMonth.setUTCDate(nextMonth.getUTCDate() + 42);\n\t\t\tnextMonth = nextMonth.valueOf();\n\t\t\tvar html = [];\n\t\t\tvar clsName;\n\t\t\twhile(prevMonth.valueOf() < nextMonth) {\n\t\t\t\tif (prevMonth.getUTCDay() == this.o.weekStart) {\n\t\t\t\t\thtml.push('<tr>');\n\t\t\t\t\tif(this.o.calendarWeeks){\n\t\t\t\t\t\t// ISO 8601: First week contains first thursday.\n\t\t\t\t\t\t// ISO also states week starts on Monday, but we can be more abstract here.\n\t\t\t\t\t\tvar\n\t\t\t\t\t\t\t// Start of current week: based on weekstart/current date\n\t\t\t\t\t\t\tws = new Date(+prevMonth + (this.o.weekStart - prevMonth.getUTCDay() - 7) % 7 * 864e5),\n\t\t\t\t\t\t\t// Thursday of this week\n\t\t\t\t\t\t\tth = new Date(+ws + (7 + 4 - ws.getUTCDay()) % 7 * 864e5),\n\t\t\t\t\t\t\t// First Thursday of year, year from thursday\n\t\t\t\t\t\t\tyth = new Date(+(yth = UTCDate(th.getUTCFullYear(), 0, 1)) + (7 + 4 - yth.getUTCDay())%7*864e5),\n\t\t\t\t\t\t\t// Calendar week: ms between thursdays, div ms per day, div 7 days\n\t\t\t\t\t\t\tcalWeek =  (th - yth) / 864e5 / 7 + 1;\n\t\t\t\t\t\thtml.push('<td class=\"cw\">'+ calWeek +'</td>');\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tclsName = this.getClassNames(prevMonth);\n\t\t\t\tclsName.push('day');\n\n\t\t\t\tvar before = this.o.beforeShowDay(prevMonth);\n\t\t\t\tif (before === undefined)\n\t\t\t\t\tbefore = {};\n\t\t\t\telse if (typeof(before) === 'boolean')\n\t\t\t\t\tbefore = {enabled: before};\n\t\t\t\telse if (typeof(before) === 'string')\n\t\t\t\t\tbefore = {classes: before};\n\t\t\t\tif (before.enabled === false)\n\t\t\t\t\tclsName.push('disabled');\n\t\t\t\tif (before.classes)\n\t\t\t\t\tclsName = clsName.concat(before.classes.split(/\\s+/));\n\t\t\t\tif (before.tooltip)\n\t\t\t\t\ttooltip = before.tooltip;\n\n\t\t\t\tclsName = $.unique(clsName);\n\t\t\t\thtml.push('<td class=\"'+clsName.join(' ')+'\"' + (tooltip ? ' title=\"'+tooltip+'\"' : '') + '>'+prevMonth.getUTCDate() + '</td>');\n\t\t\t\tif (prevMonth.getUTCDay() == this.o.weekEnd) {\n\t\t\t\t\thtml.push('</tr>');\n\t\t\t\t}\n\t\t\t\tprevMonth.setUTCDate(prevMonth.getUTCDate()+1);\n\t\t\t}\n\t\t\tthis.picker.find('.datepicker-days tbody').empty().append(html.join(''));\n\t\t\tvar currentYear = this.date && this.date.getUTCFullYear();\n\n\t\t\tvar months = this.picker.find('.datepicker-months')\n\t\t\t\t\t\t.find('th:eq(1)')\n\t\t\t\t\t\t\t.text(year)\n\t\t\t\t\t\t\t.end()\n\t\t\t\t\t\t.find('span').removeClass('active');\n\t\t\tif (currentYear && currentYear == year) {\n\t\t\t\tmonths.eq(this.date.getUTCMonth()).addClass('active');\n\t\t\t}\n\t\t\tif (year < startYear || year > endYear) {\n\t\t\t\tmonths.addClass('disabled');\n\t\t\t}\n\t\t\tif (year == startYear) {\n\t\t\t\tmonths.slice(0, startMonth).addClass('disabled');\n\t\t\t}\n\t\t\tif (year == endYear) {\n\t\t\t\tmonths.slice(endMonth+1).addClass('disabled');\n\t\t\t}\n\n\t\t\thtml = '';\n\t\t\tyear = parseInt(year/10, 10) * 10;\n\t\t\tvar yearCont = this.picker.find('.datepicker-years')\n\t\t\t\t\t\t\t\t.find('th:eq(1)')\n\t\t\t\t\t\t\t\t\t.text(year + '-' + (year + 9))\n\t\t\t\t\t\t\t\t\t.end()\n\t\t\t\t\t\t\t\t.find('td');\n\t\t\tyear -= 1;\n\t\t\tfor (var i = -1; i < 11; i++) {\n\t\t\t\thtml += '<span class=\"year'+(i == -1 ? ' old' : i == 10 ? ' new' : '')+(currentYear == year ? ' active' : '')+(year < startYear || year > endYear ? ' disabled' : '')+'\">'+year+'</span>';\n\t\t\t\tyear += 1;\n\t\t\t}\n\t\t\tyearCont.html(html);\n\t\t},\n\n\t\tupdateNavArrows: function() {\n\t\t\tif (!this._allow_update) return;\n\n\t\t\tvar d = new Date(this.viewDate),\n\t\t\t\tyear = d.getUTCFullYear(),\n\t\t\t\tmonth = d.getUTCMonth();\n\t\t\tswitch (this.viewMode) {\n\t\t\t\tcase 0:\n\t\t\t\t\tif (this.o.startDate !== -Infinity && year <= this.o.startDate.getUTCFullYear() && month <= this.o.startDate.getUTCMonth()) {\n\t\t\t\t\t\tthis.picker.find('.prev').css({visibility: 'hidden'});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.picker.find('.prev').css({visibility: 'visible'});\n\t\t\t\t\t}\n\t\t\t\t\tif (this.o.endDate !== Infinity && year >= this.o.endDate.getUTCFullYear() && month >= this.o.endDate.getUTCMonth()) {\n\t\t\t\t\t\tthis.picker.find('.next').css({visibility: 'hidden'});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.picker.find('.next').css({visibility: 'visible'});\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\tcase 2:\n\t\t\t\t\tif (this.o.startDate !== -Infinity && year <= this.o.startDate.getUTCFullYear()) {\n\t\t\t\t\t\tthis.picker.find('.prev').css({visibility: 'hidden'});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.picker.find('.prev').css({visibility: 'visible'});\n\t\t\t\t\t}\n\t\t\t\t\tif (this.o.endDate !== Infinity && year >= this.o.endDate.getUTCFullYear()) {\n\t\t\t\t\t\tthis.picker.find('.next').css({visibility: 'hidden'});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.picker.find('.next').css({visibility: 'visible'});\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\n\t\tclick: function(e) {\n\t\t\te.preventDefault();\n\t\t\tvar target = $(e.target).closest('span, td, th');\n\t\t\tif (target.length == 1) {\n\t\t\t\tswitch(target[0].nodeName.toLowerCase()) {\n\t\t\t\t\tcase 'th':\n\t\t\t\t\t\tswitch(target[0].className) {\n\t\t\t\t\t\t\tcase 'datepicker-switch':\n\t\t\t\t\t\t\t\tthis.showMode(1);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'prev':\n\t\t\t\t\t\t\tcase 'next':\n\t\t\t\t\t\t\t\tvar dir = DPGlobal.modes[this.viewMode].navStep * (target[0].className == 'prev' ? -1 : 1);\n\t\t\t\t\t\t\t\tswitch(this.viewMode){\n\t\t\t\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\t\t\t\tthis.viewDate = this.moveMonth(this.viewDate, dir);\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\t\tthis.viewDate = this.moveYear(this.viewDate, dir);\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tthis.fill();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'today':\n\t\t\t\t\t\t\t\tvar date = new Date();\n\t\t\t\t\t\t\t\tdate = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);\n\n\t\t\t\t\t\t\t\tthis.showMode(-2);\n\t\t\t\t\t\t\t\tvar which = this.o.todayBtn == 'linked' ? null : 'view';\n\t\t\t\t\t\t\t\tthis._setDate(date, which);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'clear':\n\t\t\t\t\t\t\t\tvar element;\n\t\t\t\t\t\t\t\tif (this.isInput)\n\t\t\t\t\t\t\t\t\telement = this.element;\n\t\t\t\t\t\t\t\telse if (this.component)\n\t\t\t\t\t\t\t\t\telement = this.element.find('input');\n\t\t\t\t\t\t\t\tif (element)\n\t\t\t\t\t\t\t\t\telement.val(\"\").change();\n\t\t\t\t\t\t\t\tthis._trigger('changeDate');\n\t\t\t\t\t\t\t\tthis.update();\n\t\t\t\t\t\t\t\tif (this.o.autoclose)\n\t\t\t\t\t\t\t\t\tthis.hide();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'span':\n\t\t\t\t\t\tif (!target.is('.disabled')) {\n\t\t\t\t\t\t\tthis.viewDate.setUTCDate(1);\n\t\t\t\t\t\t\tif (target.is('.month')) {\n\t\t\t\t\t\t\t\tvar day = 1;\n\t\t\t\t\t\t\t\tvar month = target.parent().find('span').index(target);\n\t\t\t\t\t\t\t\tvar year = this.viewDate.getUTCFullYear();\n\t\t\t\t\t\t\t\tthis.viewDate.setUTCMonth(month);\n\t\t\t\t\t\t\t\tthis._trigger('changeMonth', this.viewDate);\n\t\t\t\t\t\t\t\tif (this.o.minViewMode === 1) {\n\t\t\t\t\t\t\t\t\tthis._setDate(UTCDate(year, month, day,0,0,0,0));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tvar year = parseInt(target.text(), 10)||0;\n\t\t\t\t\t\t\t\tvar day = 1;\n\t\t\t\t\t\t\t\tvar month = 0;\n\t\t\t\t\t\t\t\tthis.viewDate.setUTCFullYear(year);\n\t\t\t\t\t\t\t\tthis._trigger('changeYear', this.viewDate);\n\t\t\t\t\t\t\t\tif (this.o.minViewMode === 2) {\n\t\t\t\t\t\t\t\t\tthis._setDate(UTCDate(year, month, day,0,0,0,0));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.showMode(-1);\n\t\t\t\t\t\t\tthis.fill();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'td':\n\t\t\t\t\t\tif (target.is('.day') && !target.is('.disabled')){\n\t\t\t\t\t\t\tvar day = parseInt(target.text(), 10)||1;\n\t\t\t\t\t\t\tvar year = this.viewDate.getUTCFullYear(),\n\t\t\t\t\t\t\t\tmonth = this.viewDate.getUTCMonth();\n\t\t\t\t\t\t\tif (target.is('.old')) {\n\t\t\t\t\t\t\t\tif (month === 0) {\n\t\t\t\t\t\t\t\t\tmonth = 11;\n\t\t\t\t\t\t\t\t\tyear -= 1;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tmonth -= 1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if (target.is('.new')) {\n\t\t\t\t\t\t\t\tif (month == 11) {\n\t\t\t\t\t\t\t\t\tmonth = 0;\n\t\t\t\t\t\t\t\t\tyear += 1;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tmonth += 1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis._setDate(UTCDate(year, month, day,0,0,0,0));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_setDate: function(date, which){\n\t\t\tif (!which || which == 'date')\n\t\t\t\tthis.date = new Date(date);\n\t\t\tif (!which || which  == 'view')\n\t\t\t\tthis.viewDate = new Date(date);\n\t\t\tthis.fill();\n\t\t\tthis.setValue();\n\t\t\tthis._trigger('changeDate');\n\t\t\tvar element;\n\t\t\tif (this.isInput) {\n\t\t\t\telement = this.element;\n\t\t\t} else if (this.component){\n\t\t\t\telement = this.element.find('input');\n\t\t\t}\n\t\t\tif (element) {\n\t\t\t\telement.change();\n\t\t\t\tif (this.o.autoclose && (!which || which == 'date')) {\n\t\t\t\t\tthis.hide();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tmoveMonth: function(date, dir){\n\t\t\tif (!dir) return date;\n\t\t\tvar new_date = new Date(date.valueOf()),\n\t\t\t\tday = new_date.getUTCDate(),\n\t\t\t\tmonth = new_date.getUTCMonth(),\n\t\t\t\tmag = Math.abs(dir),\n\t\t\t\tnew_month, test;\n\t\t\tdir = dir > 0 ? 1 : -1;\n\t\t\tif (mag == 1){\n\t\t\t\ttest = dir == -1\n\t\t\t\t\t// If going back one month, make sure month is not current month\n\t\t\t\t\t// (eg, Mar 31 -> Feb 31 == Feb 28, not Mar 02)\n\t\t\t\t\t? function(){ return new_date.getUTCMonth() == month; }\n\t\t\t\t\t// If going forward one month, make sure month is as expected\n\t\t\t\t\t// (eg, Jan 31 -> Feb 31 == Feb 28, not Mar 02)\n\t\t\t\t\t: function(){ return new_date.getUTCMonth() != new_month; };\n\t\t\t\tnew_month = month + dir;\n\t\t\t\tnew_date.setUTCMonth(new_month);\n\t\t\t\t// Dec -> Jan (12) or Jan -> Dec (-1) -- limit expected date to 0-11\n\t\t\t\tif (new_month < 0 || new_month > 11)\n\t\t\t\t\tnew_month = (new_month + 12) % 12;\n\t\t\t} else {\n\t\t\t\t// For magnitudes >1, move one month at a time...\n\t\t\t\tfor (var i=0; i<mag; i++)\n\t\t\t\t\t// ...which might decrease the day (eg, Jan 31 to Feb 28, etc)...\n\t\t\t\t\tnew_date = this.moveMonth(new_date, dir);\n\t\t\t\t// ...then reset the day, keeping it in the new month\n\t\t\t\tnew_month = new_date.getUTCMonth();\n\t\t\t\tnew_date.setUTCDate(day);\n\t\t\t\ttest = function(){ return new_month != new_date.getUTCMonth(); };\n\t\t\t}\n\t\t\t// Common date-resetting loop -- if date is beyond end of month, make it\n\t\t\t// end of month\n\t\t\twhile (test()){\n\t\t\t\tnew_date.setUTCDate(--day);\n\t\t\t\tnew_date.setUTCMonth(new_month);\n\t\t\t}\n\t\t\treturn new_date;\n\t\t},\n\n\t\tmoveYear: function(date, dir){\n\t\t\treturn this.moveMonth(date, dir*12);\n\t\t},\n\n\t\tdateWithinRange: function(date){\n\t\t\treturn date >= this.o.startDate && date <= this.o.endDate;\n\t\t},\n\n\t\tkeydown: function(e){\n\t\t\tif (this.picker.is(':not(:visible)')){\n\t\t\t\tif (e.keyCode == 27) // allow escape to hide and re-show picker\n\t\t\t\t\tthis.show();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar dateChanged = false,\n\t\t\t\tdir, day, month,\n\t\t\t\tnewDate, newViewDate;\n\t\t\tswitch(e.keyCode){\n\t\t\t\tcase 27: // escape\n\t\t\t\t\tthis.hide();\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 37: // left\n\t\t\t\tcase 39: // right\n\t\t\t\t\tif (!this.o.keyboardNavigation) break;\n\t\t\t\t\tdir = e.keyCode == 37 ? -1 : 1;\n\t\t\t\t\tif (e.ctrlKey){\n\t\t\t\t\t\tnewDate = this.moveYear(this.date, dir);\n\t\t\t\t\t\tnewViewDate = this.moveYear(this.viewDate, dir);\n\t\t\t\t\t} else if (e.shiftKey){\n\t\t\t\t\t\tnewDate = this.moveMonth(this.date, dir);\n\t\t\t\t\t\tnewViewDate = this.moveMonth(this.viewDate, dir);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnewDate = new Date(this.date);\n\t\t\t\t\t\tnewDate.setUTCDate(this.date.getUTCDate() + dir);\n\t\t\t\t\t\tnewViewDate = new Date(this.viewDate);\n\t\t\t\t\t\tnewViewDate.setUTCDate(this.viewDate.getUTCDate() + dir);\n\t\t\t\t\t}\n\t\t\t\t\tif (this.dateWithinRange(newDate)){\n\t\t\t\t\t\tthis.date = newDate;\n\t\t\t\t\t\tthis.viewDate = newViewDate;\n\t\t\t\t\t\tthis.setValue();\n\t\t\t\t\t\tthis.update();\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tdateChanged = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 38: // up\n\t\t\t\tcase 40: // down\n\t\t\t\t\tif (!this.o.keyboardNavigation) break;\n\t\t\t\t\tdir = e.keyCode == 38 ? -1 : 1;\n\t\t\t\t\tif (e.ctrlKey){\n\t\t\t\t\t\tnewDate = this.moveYear(this.date, dir);\n\t\t\t\t\t\tnewViewDate = this.moveYear(this.viewDate, dir);\n\t\t\t\t\t} else if (e.shiftKey){\n\t\t\t\t\t\tnewDate = this.moveMonth(this.date, dir);\n\t\t\t\t\t\tnewViewDate = this.moveMonth(this.viewDate, dir);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnewDate = new Date(this.date);\n\t\t\t\t\t\tnewDate.setUTCDate(this.date.getUTCDate() + dir * 7);\n\t\t\t\t\t\tnewViewDate = new Date(this.viewDate);\n\t\t\t\t\t\tnewViewDate.setUTCDate(this.viewDate.getUTCDate() + dir * 7);\n\t\t\t\t\t}\n\t\t\t\t\tif (this.dateWithinRange(newDate)){\n\t\t\t\t\t\tthis.date = newDate;\n\t\t\t\t\t\tthis.viewDate = newViewDate;\n\t\t\t\t\t\tthis.setValue();\n\t\t\t\t\t\tthis.update();\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tdateChanged = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 13: // enter\n\t\t\t\t\tthis.hide();\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 9: // tab\n\t\t\t\t\tthis.hide();\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (dateChanged){\n\t\t\t\tthis._trigger('changeDate');\n\t\t\t\tvar element;\n\t\t\t\tif (this.isInput) {\n\t\t\t\t\telement = this.element;\n\t\t\t\t} else if (this.component){\n\t\t\t\t\telement = this.element.find('input');\n\t\t\t\t}\n\t\t\t\tif (element) {\n\t\t\t\t\telement.change();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tshowMode: function(dir) {\n\t\t\tif (dir) {\n\t\t\t\tthis.viewMode = Math.max(this.o.minViewMode, Math.min(2, this.viewMode + dir));\n\t\t\t}\n\t\t\t/*\n\t\t\t\tvitalets: fixing bug of very special conditions:\n\t\t\t\tjquery 1.7.1 + webkit + show inline datepicker in bootstrap popover.\n\t\t\t\tMethod show() does not set display css correctly and datepicker is not shown.\n\t\t\t\tChanged to .css('display', 'block') solve the problem.\n\t\t\t\tSee https://github.com/vitalets/x-editable/issues/37\n\n\t\t\t\tIn jquery 1.7.2+ everything works fine.\n\t\t\t*/\n\t\t\t//this.picker.find('>div').hide().filter('.datepicker-'+DPGlobal.modes[this.viewMode].clsName).show();\n\t\t\tthis.picker.find('>div').hide().filter('.datepicker-'+DPGlobal.modes[this.viewMode].clsName).css('display', 'block');\n\t\t\tthis.updateNavArrows();\n\t\t}\n\t};\n\n\tvar DateRangePicker = function(element, options){\n\t\tthis.element = $(element);\n\t\tthis.inputs = $.map(options.inputs, function(i){ return i.jquery ? i[0] : i; });\n\t\tdelete options.inputs;\n\n\t\t$(this.inputs)\n\t\t\t.datepicker(options)\n\t\t\t.bind('changeDate', $.proxy(this.dateUpdated, this));\n\n\t\tthis.pickers = $.map(this.inputs, function(i){ return $(i).data('datepicker'); });\n\t\tthis.updateDates();\n\t};\n\tDateRangePicker.prototype = {\n\t\tupdateDates: function(){\n\t\t\tthis.dates = $.map(this.pickers, function(i){ return i.date; });\n\t\t\tthis.updateRanges();\n\t\t},\n\t\tupdateRanges: function(){\n\t\t\tvar range = $.map(this.dates, function(d){ return d.valueOf(); });\n\t\t\t$.each(this.pickers, function(i, p){\n\t\t\t\tp.setRange(range);\n\t\t\t});\n\t\t},\n\t\tdateUpdated: function(e){\n\t\t\tvar dp = $(e.target).data('datepicker'),\n\t\t\t\tnew_date = dp.getUTCDate(),\n\t\t\t\ti = $.inArray(e.target, this.inputs),\n\t\t\t\tl = this.inputs.length;\n\t\t\tif (i == -1) return;\n\n\t\t\tif (new_date < this.dates[i]){\n\t\t\t\t// Date being moved earlier/left\n\t\t\t\twhile (i>=0 && new_date < this.dates[i]){\n\t\t\t\t\tthis.pickers[i--].setUTCDate(new_date);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (new_date > this.dates[i]){\n\t\t\t\t// Date being moved later/right\n\t\t\t\twhile (i<l && new_date > this.dates[i]){\n\t\t\t\t\tthis.pickers[i++].setUTCDate(new_date);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.updateDates();\n\t\t},\n\t\tremove: function(){\n\t\t\t$.map(this.pickers, function(p){ p.remove(); });\n\t\t\tdelete this.element.data().datepicker;\n\t\t}\n\t};\n\n\tfunction opts_from_el(el, prefix){\n\t\t// Derive options from element data-attrs\n\t\tvar data = $(el).data(),\n\t\t\tout = {}, inkey,\n\t\t\treplace = new RegExp('^' + prefix.toLowerCase() + '([A-Z])'),\n\t\t\tprefix = new RegExp('^' + prefix.toLowerCase());\n\t\tfor (var key in data)\n\t\t\tif (prefix.test(key)){\n\t\t\t\tinkey = key.replace(replace, function(_,a){ return a.toLowerCase(); });\n\t\t\t\tout[inkey] = data[key];\n\t\t\t}\n\t\treturn out;\n\t}\n\n\tfunction opts_from_locale(lang){\n\t\t// Derive options from locale plugins\n\t\tvar out = {};\n\t\t// Check if \"de-DE\" style date is available, if not language should\n\t\t// fallback to 2 letter code eg \"de\"\n\t\tif (!dates[lang]) {\n\t\t\tlang = lang.split('-')[0]\n\t\t\tif (!dates[lang])\n\t\t\t\treturn;\n\t\t}\n\t\tvar d = dates[lang];\n\t\t$.each(locale_opts, function(i,k){\n\t\t\tif (k in d)\n\t\t\t\tout[k] = d[k];\n\t\t});\n\t\treturn out;\n\t}\n\n\tvar old = $.fn.datepicker;\n\tvar datepicker = $.fn.datepicker = function ( option ) {\n\t\tvar args = Array.apply(null, arguments);\n\t\targs.shift();\n\t\tvar internal_return,\n\t\t\tthis_return;\n\t\tthis.each(function () {\n\t\t\tvar $this = $(this),\n\t\t\t\tdata = $this.data('datepicker'),\n\t\t\t\toptions = typeof option == 'object' && option;\n\t\t\tif (!data) {\n\t\t\t\tvar elopts = opts_from_el(this, 'date'),\n\t\t\t\t\t// Preliminary otions\n\t\t\t\t\txopts = $.extend({}, defaults, elopts, options),\n\t\t\t\t\tlocopts = opts_from_locale(xopts.language),\n\t\t\t\t\t// Options priority: js args, data-attrs, locales, defaults\n\t\t\t\t\topts = $.extend({}, defaults, locopts, elopts, options);\n\t\t\t\tif ($this.is('.input-daterange') || opts.inputs){\n\t\t\t\t\tvar ropts = {\n\t\t\t\t\t\tinputs: opts.inputs || $this.find('input').toArray()\n\t\t\t\t\t};\n\t\t\t\t\t$this.data('datepicker', (data = new DateRangePicker(this, $.extend(opts, ropts))));\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\t$this.data('datepicker', (data = new Datepicker(this, opts)));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (typeof option == 'string' && typeof data[option] == 'function') {\n\t\t\t\tinternal_return = data[option].apply(data, args);\n\t\t\t\tif (internal_return !== undefined)\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\t\tif (internal_return !== undefined)\n\t\t\treturn internal_return;\n\t\telse\n\t\t\treturn this;\n\t};\n\n\tvar defaults = $.fn.datepicker.defaults = {\n\t\tautoclose: false,\n\t\tbeforeShowDay: $.noop,\n\t\tcalendarWeeks: false,\n\t\tclearBtn: false,\n\t\tdaysOfWeekDisabled: [],\n\t\tendDate: Infinity,\n\t\tforceParse: true,\n\t\tformat: 'mm/dd/yyyy',\n\t\tkeyboardNavigation: true,\n\t\tlanguage: 'en',\n\t\tminViewMode: 0,\n\t\trtl: false,\n\t\tstartDate: -Infinity,\n\t\tstartView: 0,\n\t\ttodayBtn: false,\n\t\ttodayHighlight: false,\n\t\tweekStart: 0\n\t};\n\tvar locale_opts = $.fn.datepicker.locale_opts = [\n\t\t'format',\n\t\t'rtl',\n\t\t'weekStart'\n\t];\n\t$.fn.datepicker.Constructor = Datepicker;\n\tvar dates = $.fn.datepicker.dates = {\n\t\ten: {\n\t\t\tdays: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"],\n\t\t\tdaysShort: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"],\n\t\t\tdaysMin: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\", \"Su\"],\n\t\t\tmonths: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n\t\t\tmonthsShort: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n\t\t\ttoday: \"Today\",\n\t\t\tclear: \"Clear\"\n\t\t}\n\t};\n\n\tvar DPGlobal = {\n\t\tmodes: [\n\t\t\t{\n\t\t\t\tclsName: 'days',\n\t\t\t\tnavFnc: 'Month',\n\t\t\t\tnavStep: 1\n\t\t\t},\n\t\t\t{\n\t\t\t\tclsName: 'months',\n\t\t\t\tnavFnc: 'FullYear',\n\t\t\t\tnavStep: 1\n\t\t\t},\n\t\t\t{\n\t\t\t\tclsName: 'years',\n\t\t\t\tnavFnc: 'FullYear',\n\t\t\t\tnavStep: 10\n\t\t}],\n\t\tisLeapYear: function (year) {\n\t\t\treturn (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0));\n\t\t},\n\t\tgetDaysInMonth: function (year, month) {\n\t\t\treturn [31, (DPGlobal.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];\n\t\t},\n\t\tvalidParts: /dd?|DD?|mm?|MM?|yy(?:yy)?/g,\n\t\tnonpunctuation: /[^ -\\/:-@\\[\\u3400-\\u9fff-`{-~\\t\\n\\r]+/g,\n\t\tparseFormat: function(format){\n\t\t\t// IE treats \\0 as a string end in inputs (truncating the value),\n\t\t\t// so it's a bad format delimiter, anyway\n\t\t\tvar separators = format.replace(this.validParts, '\\0').split('\\0'),\n\t\t\t\tparts = format.match(this.validParts);\n\t\t\tif (!separators || !separators.length || !parts || parts.length === 0){\n\t\t\t\tthrow new Error(\"Invalid date format.\");\n\t\t\t}\n\t\t\treturn {separators: separators, parts: parts};\n\t\t},\n\t\tparseDate: function(date, format, language) {\n\t\t\tif (date instanceof Date) return date;\n\t\t\tif (typeof format === 'string')\n\t\t\t\tformat = DPGlobal.parseFormat(format);\n\t\t\tif (/^[\\-+]\\d+[dmwy]([\\s,]+[\\-+]\\d+[dmwy])*$/.test(date)) {\n\t\t\t\tvar part_re = /([\\-+]\\d+)([dmwy])/,\n\t\t\t\t\tparts = date.match(/([\\-+]\\d+)([dmwy])/g),\n\t\t\t\t\tpart, dir;\n\t\t\t\tdate = new Date();\n\t\t\t\tfor (var i=0; i<parts.length; i++) {\n\t\t\t\t\tpart = part_re.exec(parts[i]);\n\t\t\t\t\tdir = parseInt(part[1]);\n\t\t\t\t\tswitch(part[2]){\n\t\t\t\t\t\tcase 'd':\n\t\t\t\t\t\t\tdate.setUTCDate(date.getUTCDate() + dir);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'm':\n\t\t\t\t\t\t\tdate = Datepicker.prototype.moveMonth.call(Datepicker.prototype, date, dir);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'w':\n\t\t\t\t\t\t\tdate.setUTCDate(date.getUTCDate() + dir * 7);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'y':\n\t\t\t\t\t\t\tdate = Datepicker.prototype.moveYear.call(Datepicker.prototype, date, dir);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn UTCDate(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), 0, 0, 0);\n\t\t\t}\n\t\t\tvar parts = date && date.match(this.nonpunctuation) || [],\n\t\t\t\tdate = new Date(),\n\t\t\t\tparsed = {},\n\t\t\t\tsetters_order = ['yyyy', 'yy', 'M', 'MM', 'm', 'mm', 'd', 'dd'],\n\t\t\t\tsetters_map = {\n\t\t\t\t\tyyyy: function(d,v){ return d.setUTCFullYear(v); },\n\t\t\t\t\tyy: function(d,v){ return d.setUTCFullYear(2000+v); },\n\t\t\t\t\tm: function(d,v){\n\t\t\t\t\t\tv -= 1;\n\t\t\t\t\t\twhile (v<0) v += 12;\n\t\t\t\t\t\tv %= 12;\n\t\t\t\t\t\td.setUTCMonth(v);\n\t\t\t\t\t\twhile (d.getUTCMonth() != v)\n\t\t\t\t\t\t\td.setUTCDate(d.getUTCDate()-1);\n\t\t\t\t\t\treturn d;\n\t\t\t\t\t},\n\t\t\t\t\td: function(d,v){ return d.setUTCDate(v); }\n\t\t\t\t},\n\t\t\t\tval, filtered, part;\n\t\t\tsetters_map['M'] = setters_map['MM'] = setters_map['mm'] = setters_map['m'];\n\t\t\tsetters_map['dd'] = setters_map['d'];\n\t\t\tdate = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);\n\t\t\tvar fparts = format.parts.slice();\n\t\t\t// Remove noop parts\n\t\t\tif (parts.length != fparts.length) {\n\t\t\t\tfparts = $(fparts).filter(function(i,p){\n\t\t\t\t\treturn $.inArray(p, setters_order) !== -1;\n\t\t\t\t}).toArray();\n\t\t\t}\n\t\t\t// Process remainder\n\t\t\tif (parts.length == fparts.length) {\n\t\t\t\tfor (var i=0, cnt = fparts.length; i < cnt; i++) {\n\t\t\t\t\tval = parseInt(parts[i], 10);\n\t\t\t\t\tpart = fparts[i];\n\t\t\t\t\tif (isNaN(val)) {\n\t\t\t\t\t\tswitch(part) {\n\t\t\t\t\t\t\tcase 'MM':\n\t\t\t\t\t\t\t\tfiltered = $(dates[language].months).filter(function(){\n\t\t\t\t\t\t\t\t\tvar m = this.slice(0, parts[i].length),\n\t\t\t\t\t\t\t\t\t\tp = parts[i].slice(0, m.length);\n\t\t\t\t\t\t\t\t\treturn m == p;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tval = $.inArray(filtered[0], dates[language].months) + 1;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'M':\n\t\t\t\t\t\t\t\tfiltered = $(dates[language].monthsShort).filter(function(){\n\t\t\t\t\t\t\t\t\tvar m = this.slice(0, parts[i].length),\n\t\t\t\t\t\t\t\t\t\tp = parts[i].slice(0, m.length);\n\t\t\t\t\t\t\t\t\treturn m == p;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tval = $.inArray(filtered[0], dates[language].monthsShort) + 1;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tparsed[part] = val;\n\t\t\t\t}\n\t\t\t\tfor (var i=0, s; i<setters_order.length; i++){\n\t\t\t\t\ts = setters_order[i];\n\t\t\t\t\tif (s in parsed && !isNaN(parsed[s]))\n\t\t\t\t\t\tsetters_map[s](date, parsed[s]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn date;\n\t\t},\n\t\tformatDate: function(date, format, language){\n\t\t\tif (typeof format === 'string')\n\t\t\t\tformat = DPGlobal.parseFormat(format);\n\t\t\tvar val = {\n\t\t\t\td: date.getUTCDate(),\n\t\t\t\tD: dates[language].daysShort[date.getUTCDay()],\n\t\t\t\tDD: dates[language].days[date.getUTCDay()],\n\t\t\t\tm: date.getUTCMonth() + 1,\n\t\t\t\tM: dates[language].monthsShort[date.getUTCMonth()],\n\t\t\t\tMM: dates[language].months[date.getUTCMonth()],\n\t\t\t\tyy: date.getUTCFullYear().toString().substring(2),\n\t\t\t\tyyyy: date.getUTCFullYear()\n\t\t\t};\n\t\t\tval.dd = (val.d < 10 ? '0' : '') + val.d;\n\t\t\tval.mm = (val.m < 10 ? '0' : '') + val.m;\n\t\t\tvar date = [],\n\t\t\t\tseps = $.extend([], format.separators);\n\t\t\tfor (var i=0, cnt = format.parts.length; i <= cnt; i++) {\n\t\t\t\tif (seps.length)\n\t\t\t\t\tdate.push(seps.shift());\n\t\t\t\tdate.push(val[format.parts[i]]);\n\t\t\t}\n\t\t\treturn date.join('');\n\t\t},\n\t\theadTemplate: '<thead>'+\n\t\t\t\t\t\t\t'<tr>'+\n\t\t\t\t\t\t\t\t'<th class=\"prev\"><i class=\"icon-arrow-left\"/></th>'+\n\t\t\t\t\t\t\t\t'<th colspan=\"5\" class=\"datepicker-switch\"></th>'+\n\t\t\t\t\t\t\t\t'<th class=\"next\"><i class=\"icon-arrow-right\"/></th>'+\n\t\t\t\t\t\t\t'</tr>'+\n\t\t\t\t\t\t'</thead>',\n\t\tcontTemplate: '<tbody><tr><td colspan=\"7\"></td></tr></tbody>',\n\t\tfootTemplate: '<tfoot><tr><th colspan=\"7\" class=\"today\"></th></tr><tr><th colspan=\"7\" class=\"clear\"></th></tr></tfoot>'\n\t};\n\tDPGlobal.template = '<div class=\"datepicker\">'+\n\t\t\t\t\t\t\t'<div class=\"datepicker-days\">'+\n\t\t\t\t\t\t\t\t'<table class=\" table-condensed\">'+\n\t\t\t\t\t\t\t\t\tDPGlobal.headTemplate+\n\t\t\t\t\t\t\t\t\t'<tbody></tbody>'+\n\t\t\t\t\t\t\t\t\tDPGlobal.footTemplate+\n\t\t\t\t\t\t\t\t'</table>'+\n\t\t\t\t\t\t\t'</div>'+\n\t\t\t\t\t\t\t'<div class=\"datepicker-months\">'+\n\t\t\t\t\t\t\t\t'<table class=\"table-condensed\">'+\n\t\t\t\t\t\t\t\t\tDPGlobal.headTemplate+\n\t\t\t\t\t\t\t\t\tDPGlobal.contTemplate+\n\t\t\t\t\t\t\t\t\tDPGlobal.footTemplate+\n\t\t\t\t\t\t\t\t'</table>'+\n\t\t\t\t\t\t\t'</div>'+\n\t\t\t\t\t\t\t'<div class=\"datepicker-years\">'+\n\t\t\t\t\t\t\t\t'<table class=\"table-condensed\">'+\n\t\t\t\t\t\t\t\t\tDPGlobal.headTemplate+\n\t\t\t\t\t\t\t\t\tDPGlobal.contTemplate+\n\t\t\t\t\t\t\t\t\tDPGlobal.footTemplate+\n\t\t\t\t\t\t\t\t'</table>'+\n\t\t\t\t\t\t\t'</div>'+\n\t\t\t\t\t\t'</div>';\n\n\t$.fn.datepicker.DPGlobal = DPGlobal;\n\n\n\t/* DATEPICKER NO CONFLICT\n\t* =================== */\n\n\t$.fn.datepicker.noConflict = function(){\n\t\t$.fn.datepicker = old;\n\t\treturn this;\n\t};\n\n\n\t/* DATEPICKER DATA-API\n\t* ================== */\n\n\t$(document).on(\n\t\t'focus.datepicker.data-api click.datepicker.data-api',\n\t\t'[data-provide=\"datepicker\"]',\n\t\tfunction(e){\n\t\t\tvar $this = $(this);\n\t\t\tif ($this.data('datepicker')) return;\n\t\t\te.preventDefault();\n\t\t\t// component click requires us to explicitly show it\n\t\t\tdatepicker.call($this, 'show');\n\t\t}\n\t);\n\t$(function(){\n\t\t//$('[data-provide=\"datepicker-inline\"]').datepicker();\n        //vit: changed to support noConflict()\n        datepicker.call($('[data-provide=\"datepicker-inline\"]'));\n\t});\n\n}( window.jQuery ));\n\n/**\nBootstrap-datepicker.  \nDescription and examples: https://github.com/eternicode/bootstrap-datepicker.  \nFor **i18n** you should include js file from here: https://github.com/eternicode/bootstrap-datepicker/tree/master/js/locales\nand set `language` option.  \nSince 1.4.0 date has different appearance in **popup** and **inline** modes. \n\n@class date\n@extends abstractinput\n@final\n@example\n<a href=\"#\" id=\"dob\" data-type=\"date\" data-pk=\"1\" data-url=\"/post\" data-title=\"Select date\">15/05/1984</a>\n<script>\n$(function(){\n    $('#dob').editable({\n        format: 'yyyy-mm-dd',    \n        viewformat: 'dd/mm/yyyy',    \n        datepicker: {\n                weekStart: 1\n           }\n        }\n    });\n});\n</script>\n**/\n(function ($) {\n    \"use strict\";\n    \n    //store bootstrap-datepicker as bdateicker to exclude conflict with jQuery UI one\n    $.fn.bdatepicker = $.fn.datepicker.noConflict();\n    if(!$.fn.datepicker) { //if there were no other datepickers, keep also original name\n        $.fn.datepicker = $.fn.bdatepicker;    \n    }    \n    \n    var Date = function (options) {\n        this.init('date', options, Date.defaults);\n        this.initPicker(options, Date.defaults);\n    };\n\n    $.fn.editableutils.inherit(Date, $.fn.editabletypes.abstractinput);    \n    \n    $.extend(Date.prototype, {\n        initPicker: function(options, defaults) {\n            //'format' is set directly from settings or data-* attributes\n\n            //by default viewformat equals to format\n            if(!this.options.viewformat) {\n                this.options.viewformat = this.options.format;\n            }\n            \n            //try parse datepicker config defined as json string in data-datepicker\n            options.datepicker = $.fn.editableutils.tryParseJson(options.datepicker, true);\n            \n            //overriding datepicker config (as by default jQuery extend() is not recursive)\n            //since 1.4 datepicker internally uses viewformat instead of format. Format is for submit only\n            this.options.datepicker = $.extend({}, defaults.datepicker, options.datepicker, {\n                format: this.options.viewformat\n            });\n            \n            //language\n            this.options.datepicker.language = this.options.datepicker.language || 'en'; \n\n            //store DPglobal\n            this.dpg = $.fn.bdatepicker.DPGlobal; \n\n            //store parsed formats\n            this.parsedFormat = this.dpg.parseFormat(this.options.format);\n            this.parsedViewFormat = this.dpg.parseFormat(this.options.viewformat);            \n        },\n        \n        render: function () {\n            this.$input.bdatepicker(this.options.datepicker);\n            \n            //\"clear\" link\n            if(this.options.clear) {\n                this.$clear = $('<a href=\"#\"></a>').html(this.options.clear).click($.proxy(function(e){\n                    e.preventDefault();\n                    e.stopPropagation();\n                    this.clear();\n                }, this));\n                \n                this.$tpl.parent().append($('<div class=\"editable-clear\">').append(this.$clear));  \n            }                \n        },\n        \n        value2html: function(value, element) {\n           var text = value ? this.dpg.formatDate(value, this.parsedViewFormat, this.options.datepicker.language) : '';\n           Date.superclass.value2html.call(this, text, element); \n        },\n\n        html2value: function(html) {\n            return this.parseDate(html, this.parsedViewFormat);\n        },   \n\n        value2str: function(value) {\n            return value ? this.dpg.formatDate(value, this.parsedFormat, this.options.datepicker.language) : '';\n        }, \n\n        str2value: function(str) {\n            return this.parseDate(str, this.parsedFormat);\n        }, \n\n        value2submit: function(value) {\n            return this.value2str(value);\n        },                    \n\n        value2input: function(value) {\n            this.$input.bdatepicker('update', value);\n        },\n\n        input2value: function() { \n            return this.$input.data('datepicker').date;\n        },       \n\n        activate: function() {\n        },\n\n        clear:  function() {\n            this.$input.data('datepicker').date = null;\n            this.$input.find('.active').removeClass('active');\n            if(!this.options.showbuttons) {\n                this.$input.closest('form').submit(); \n            }\n        },\n\n        autosubmit: function() {\n            this.$input.on('mouseup', '.day', function(e){\n                if($(e.currentTarget).is('.old') || $(e.currentTarget).is('.new')) {\n                    return;\n                }\n                var $form = $(this).closest('form');\n                setTimeout(function() {\n                    $form.submit();\n                }, 200);\n            });\n           //changedate is not suitable as it triggered when showing datepicker. see #149\n           /*\n           this.$input.on('changeDate', function(e){\n               var $form = $(this).closest('form');\n               setTimeout(function() {\n                   $form.submit();\n               }, 200);\n           });\n           */\n       },\n       \n       /*\n        For incorrect date bootstrap-datepicker returns current date that is not suitable\n        for datefield.\n        This function returns null for incorrect date.  \n       */\n       parseDate: function(str, format) {\n           var date = null, formattedBack;\n           if(str) {\n               date = this.dpg.parseDate(str, format, this.options.datepicker.language);\n               if(typeof str === 'string') {\n                   formattedBack = this.dpg.formatDate(date, format, this.options.datepicker.language);\n                   if(str !== formattedBack) {\n                       date = null;\n                   }\n               }\n           }\n           return date;\n       }\n\n    });\n\n    Date.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {\n        /**\n        @property tpl \n        @default <div></div>\n        **/         \n        tpl:'<div class=\"editable-date well\"></div>',\n        /**\n        @property inputclass \n        @default null\n        **/\n        inputclass: null,\n        /**\n        Format used for sending value to server. Also applied when converting date from <code>data-value</code> attribute.<br>\n        Possible tokens are: <code>d, dd, m, mm, yy, yyyy</code>  \n\n        @property format \n        @type string\n        @default yyyy-mm-dd\n        **/\n        format:'yyyy-mm-dd',\n        /**\n        Format used for displaying date. Also applied when converting date from element's text on init.   \n        If not specified equals to <code>format</code>\n\n        @property viewformat \n        @type string\n        @default null\n        **/\n        viewformat: null,\n        /**\n        Configuration of datepicker.\n        Full list of options: http://bootstrap-datepicker.readthedocs.org/en/latest/options.html\n\n        @property datepicker \n        @type object\n        @default {\n            weekStart: 0,\n            startView: 0,\n            minViewMode: 0,\n            autoclose: false\n        }\n        **/\n        datepicker:{\n            weekStart: 0,\n            startView: 0,\n            minViewMode: 0,\n            autoclose: false\n        },\n        /**\n        Text shown as clear date button. \n        If <code>false</code> clear button will not be rendered.\n\n        @property clear \n        @type boolean|string\n        @default 'x clear'\n        **/\n        clear: '&times; clear'\n    });\n\n    $.fn.editabletypes.date = Date;\n\n}(window.jQuery));\n\n/**\nBootstrap datefield input - modification for inline mode.\nShows normal <input type=\"text\"> and binds popup datepicker.  \nAutomatically shown in inline mode.\n\n@class datefield\n@extends date\n\n@since 1.4.0\n**/\n(function ($) {\n    \"use strict\";\n    \n    var DateField = function (options) {\n        this.init('datefield', options, DateField.defaults);\n        this.initPicker(options, DateField.defaults);\n    };\n\n    $.fn.editableutils.inherit(DateField, $.fn.editabletypes.date);    \n    \n    $.extend(DateField.prototype, {\n        render: function () {\n            this.$input = this.$tpl.find('input');\n            this.setClass();\n            this.setAttr('placeholder');\n    \n            //bootstrap-datepicker is set `bdateicker` to exclude conflict with jQuery UI one. (in date.js)        \n            this.$tpl.bdatepicker(this.options.datepicker);\n            \n            //need to disable original event handlers\n            this.$input.off('focus keydown');\n            \n            //update value of datepicker\n            this.$input.keyup($.proxy(function(){\n               this.$tpl.removeData('date');\n               this.$tpl.bdatepicker('update');\n            }, this));\n            \n        },   \n        \n       value2input: function(value) {\n           this.$input.val(value ? this.dpg.formatDate(value, this.parsedViewFormat, this.options.datepicker.language) : '');\n           this.$tpl.bdatepicker('update');\n       },\n        \n       input2value: function() { \n           return this.html2value(this.$input.val());\n       },              \n        \n       activate: function() {\n           $.fn.editabletypes.text.prototype.activate.call(this);\n       },\n       \n       autosubmit: function() {\n         //reset autosubmit to empty  \n       }\n    });\n    \n    DateField.defaults = $.extend({}, $.fn.editabletypes.date.defaults, {\n        /**\n        @property tpl \n        **/         \n        tpl:'<div class=\"input-append date\"><input type=\"text\"/><span class=\"add-on\"><i class=\"icon-th\"></i></span></div>',\n        /**\n        @property inputclass \n        @default 'input-small'\n        **/         \n        inputclass: 'input-small',\n        \n        /* datepicker config */\n        datepicker: {\n            weekStart: 0,\n            startView: 0,\n            minViewMode: 0,\n            autoclose: true\n        }\n    });\n    \n    $.fn.editabletypes.datefield = DateField;\n\n}(window.jQuery));\n/**\nBootstrap-datetimepicker.  \nBased on [smalot bootstrap-datetimepicker plugin](https://github.com/smalot/bootstrap-datetimepicker). \nBefore usage you should manually include dependent js and css:\n\n    <link href=\"css/datetimepicker.css\" rel=\"stylesheet\" type=\"text/css\"></link> \n    <script src=\"js/bootstrap-datetimepicker.js\"></script>\n\nFor **i18n** you should include js file from here: https://github.com/smalot/bootstrap-datetimepicker/tree/master/js/locales\nand set `language` option.  \n\n@class datetime\n@extends abstractinput\n@final\n@since 1.4.4\n@example\n<a href=\"#\" id=\"last_seen\" data-type=\"datetime\" data-pk=\"1\" data-url=\"/post\" title=\"Select date & time\">15/03/2013 12:45</a>\n<script>\n$(function(){\n    $('#last_seen').editable({\n        format: 'yyyy-mm-dd hh:ii',    \n        viewformat: 'dd/mm/yyyy hh:ii',    \n        datetimepicker: {\n                weekStart: 1\n           }\n        }\n    });\n});\n</script>\n**/\n(function ($) {\n    \"use strict\";\n\n    var DateTime = function (options) {\n        this.init('datetime', options, DateTime.defaults);\n        this.initPicker(options, DateTime.defaults);\n    };\n\n    $.fn.editableutils.inherit(DateTime, $.fn.editabletypes.abstractinput);\n\n    $.extend(DateTime.prototype, {\n        initPicker: function(options, defaults) {\n            //'format' is set directly from settings or data-* attributes\n\n            //by default viewformat equals to format\n            if(!this.options.viewformat) {\n                this.options.viewformat = this.options.format;\n            }\n            \n            //try parse datetimepicker config defined as json string in data-datetimepicker\n            options.datetimepicker = $.fn.editableutils.tryParseJson(options.datetimepicker, true);\n\n            //overriding datetimepicker config (as by default jQuery extend() is not recursive)\n            //since 1.4 datetimepicker internally uses viewformat instead of format. Format is for submit only\n            this.options.datetimepicker = $.extend({}, defaults.datetimepicker, options.datetimepicker, {\n                format: this.options.viewformat\n            });\n\n            //language\n            this.options.datetimepicker.language = this.options.datetimepicker.language || 'en'; \n\n            //store DPglobal\n            this.dpg = $.fn.datetimepicker.DPGlobal; \n\n            //store parsed formats\n            this.parsedFormat = this.dpg.parseFormat(this.options.format, this.options.formatType);\n            this.parsedViewFormat = this.dpg.parseFormat(this.options.viewformat, this.options.formatType);\n        },\n\n        render: function () {\n            this.$input.datetimepicker(this.options.datetimepicker);\n\n            //adjust container position when viewMode changes\n            //see https://github.com/smalot/bootstrap-datetimepicker/pull/80\n            this.$input.on('changeMode', function(e) {\n                var f = $(this).closest('form').parent();\n                //timeout here, otherwise container changes position before form has new size\n                setTimeout(function(){\n                    f.triggerHandler('resize');\n                }, 0);\n            });\n\n            //\"clear\" link\n            if(this.options.clear) {\n                this.$clear = $('<a href=\"#\"></a>').html(this.options.clear).click($.proxy(function(e){\n                    e.preventDefault();\n                    e.stopPropagation();\n                    this.clear();\n                }, this));\n\n                this.$tpl.parent().append($('<div class=\"editable-clear\">').append(this.$clear));  \n            }\n        },\n\n        value2html: function(value, element) {\n            //formatDate works with UTCDate!\n            var text = value ? this.dpg.formatDate(this.toUTC(value), this.parsedViewFormat, this.options.datetimepicker.language, this.options.formatType) : '';\n            if(element) {\n                DateTime.superclass.value2html.call(this, text, element);\n            } else {\n                return text;\n            }\n        },\n\n        html2value: function(html) {\n            //parseDate return utc date!\n            var value = this.parseDate(html, this.parsedViewFormat); \n            return value ? this.fromUTC(value) : null;\n        },\n\n        value2str: function(value) {\n            //formatDate works with UTCDate!\n            return value ? this.dpg.formatDate(this.toUTC(value), this.parsedFormat, this.options.datetimepicker.language, this.options.formatType) : '';\n       },\n\n       str2value: function(str) {\n           //parseDate return utc date!\n           var value = this.parseDate(str, this.parsedFormat);\n           return value ? this.fromUTC(value) : null;\n       },\n\n       value2submit: function(value) {\n           return this.value2str(value);\n       },\n\n       value2input: function(value) {\n           if(value) {\n             this.$input.data('datetimepicker').setDate(value);\n           }\n       },\n\n       input2value: function() { \n           //date may be cleared, in that case getDate() triggers error\n           var dt = this.$input.data('datetimepicker');\n           return dt.date ? dt.getDate() : null;\n       },\n\n       activate: function() {\n       },\n\n       clear: function() {\n          this.$input.data('datetimepicker').date = null;\n          this.$input.find('.active').removeClass('active');\n          if(!this.options.showbuttons) {\n             this.$input.closest('form').submit(); \n          }          \n       },\n\n       autosubmit: function() {\n           this.$input.on('mouseup', '.minute', function(e){\n               var $form = $(this).closest('form');\n               setTimeout(function() {\n                   $form.submit();\n               }, 200);\n           });\n       },\n\n       //convert date from local to utc\n       toUTC: function(value) {\n         return value ? new Date(value.valueOf() - value.getTimezoneOffset() * 60000) : value;  \n       },\n\n       //convert date from utc to local\n       fromUTC: function(value) {\n         return value ? new Date(value.valueOf() + value.getTimezoneOffset() * 60000) : value;  \n       },\n\n       /*\n        For incorrect date bootstrap-datetimepicker returns current date that is not suitable\n        for datetimefield.\n        This function returns null for incorrect date.  \n       */\n       parseDate: function(str, format) {\n           var date = null, formattedBack;\n           if(str) {\n               date = this.dpg.parseDate(str, format, this.options.datetimepicker.language, this.options.formatType);\n               if(typeof str === 'string') {\n                   formattedBack = this.dpg.formatDate(date, format, this.options.datetimepicker.language, this.options.formatType);\n                   if(str !== formattedBack) {\n                       date = null;\n                   } \n               }\n           }\n           return date;\n       }\n\n    });\n\n    DateTime.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {\n        /**\n        @property tpl \n        @default <div></div>\n        **/         \n        tpl:'<div class=\"editable-date well\"></div>',\n        /**\n        @property inputclass \n        @default null\n        **/\n        inputclass: null,\n        /**\n        Format used for sending value to server. Also applied when converting date from <code>data-value</code> attribute.<br>\n        Possible tokens are: <code>d, dd, m, mm, yy, yyyy, h, i</code>  \n        \n        @property format \n        @type string\n        @default yyyy-mm-dd hh:ii\n        **/         \n        format:'yyyy-mm-dd hh:ii',\n        formatType:'standard',\n        /**\n        Format used for displaying date. Also applied when converting date from element's text on init.   \n        If not specified equals to <code>format</code>\n        \n        @property viewformat \n        @type string\n        @default null\n        **/\n        viewformat: null,\n        /**\n        Configuration of datetimepicker.\n        Full list of options: https://github.com/smalot/bootstrap-datetimepicker\n\n        @property datetimepicker \n        @type object\n        @default { }\n        **/\n        datetimepicker:{\n            todayHighlight: false,\n            autoclose: false\n        },\n        /**\n        Text shown as clear date button. \n        If <code>false</code> clear button will not be rendered.\n\n        @property clear \n        @type boolean|string\n        @default 'x clear'\n        **/\n        clear: '&times; clear'\n    });\n\n    $.fn.editabletypes.datetime = DateTime;\n\n}(window.jQuery));\n/**\nBootstrap datetimefield input - datetime input for inline mode.\nShows normal <input type=\"text\"> and binds popup datetimepicker.  \nAutomatically shown in inline mode.\n\n@class datetimefield\n@extends datetime\n\n**/\n(function ($) {\n    \"use strict\";\n    \n    var DateTimeField = function (options) {\n        this.init('datetimefield', options, DateTimeField.defaults);\n        this.initPicker(options, DateTimeField.defaults);\n    };\n\n    $.fn.editableutils.inherit(DateTimeField, $.fn.editabletypes.datetime);\n    \n    $.extend(DateTimeField.prototype, {\n        render: function () {\n            this.$input = this.$tpl.find('input');\n            this.setClass();\n            this.setAttr('placeholder');\n            \n            this.$tpl.datetimepicker(this.options.datetimepicker);\n            \n            //need to disable original event handlers\n            this.$input.off('focus keydown');\n            \n            //update value of datepicker\n            this.$input.keyup($.proxy(function(){\n               this.$tpl.removeData('date');\n               this.$tpl.datetimepicker('update');\n            }, this));\n            \n        },   \n      \n       value2input: function(value) {\n           this.$input.val(this.value2html(value));\n           this.$tpl.datetimepicker('update');\n       },\n        \n       input2value: function() { \n           return this.html2value(this.$input.val());\n       },              \n        \n       activate: function() {\n           $.fn.editabletypes.text.prototype.activate.call(this);\n       },\n       \n       autosubmit: function() {\n         //reset autosubmit to empty  \n       }\n    });\n    \n    DateTimeField.defaults = $.extend({}, $.fn.editabletypes.datetime.defaults, {\n        /**\n        @property tpl \n        **/         \n        tpl:'<div class=\"input-append date\"><input type=\"text\"/><span class=\"add-on\"><i class=\"icon-th\"></i></span></div>',\n        /**\n        @property inputclass \n        @default 'input-medium'\n        **/         \n        inputclass: 'input-medium',\n        \n        /* datetimepicker config */\n        datetimepicker:{\n            todayHighlight: false,\n            autoclose: true\n        }\n    });\n    \n    $.fn.editabletypes.datetimefield = DateTimeField;\n\n}(window.jQuery));\n","/**\nAddress editable input.\nInternally value stored as {city: \"Moscow\", street: \"Lenina\", building: \"15\"}\n\n@class address\n@extends abstractinput\n@final\n@example\n<a href=\"#\" id=\"address\" data-type=\"address\" data-pk=\"1\">awesome</a>\n<script>\n$(function(){\n    $('#address').editable({\n        url: '/post',\n        title: 'Enter city, street and building #',\n        value: {\n            city: \"Moscow\", \n            street: \"Lenina\", \n            building: \"15\"\n        }\n    });\n});\n</script>\n**/\n(function ($) {\n    \"use strict\";\n    \n    var Address = function (options) {\n        this.init('address', options, Address.defaults);\n    };\n\n    //inherit from Abstract input\n    $.fn.editableutils.inherit(Address, $.fn.editabletypes.abstractinput);\n\n    $.extend(Address.prototype, {\n        /**\n        Renders input from tpl\n\n        @method render() \n        **/        \n        render: function() {\n           this.$input = this.$tpl.find('input');\n        },\n        \n        /**\n        Default method to show value in element. Can be overwritten by display option.\n        \n        @method value2html(value, element) \n        **/\n        value2html: function(value, element) {\n            if(!value) {\n                $(element).empty();\n                return; \n            }\n            var html = $('<div>').text(value.city).html() + ', ' + $('<div>').text(value.street).html() + ' st., bld. ' + $('<div>').text(value.building).html();\n            $(element).html(html); \n        },\n        \n        /**\n        Gets value from element's html\n        \n        @method html2value(html) \n        **/        \n        html2value: function(html) {        \n          /*\n            you may write parsing method to get value by element's html\n            e.g. \"Moscow, st. Lenina, bld. 15\" => {city: \"Moscow\", street: \"Lenina\", building: \"15\"}\n            but for complex structures it's not recommended.\n            Better set value directly via javascript, e.g. \n            editable({\n                value: {\n                    city: \"Moscow\", \n                    street: \"Lenina\", \n                    building: \"15\"\n                }\n            });\n          */ \n          return null;  \n        },\n      \n       /**\n        Converts value to string. \n        It is used in internal comparing (not for sending to server).\n        \n        @method value2str(value)  \n       **/\n       value2str: function(value) {\n           var str = '';\n           if(value) {\n               for(var k in value) {\n                   str = str + k + ':' + value[k] + ';';  \n               }\n           }\n           return str;\n       }, \n       \n       /*\n        Converts string to value. Used for reading value from 'data-value' attribute.\n        \n        @method str2value(str)  \n       */\n       str2value: function(str) {\n           /*\n           this is mainly for parsing value defined in data-value attribute. \n           If you will always set value by javascript, no need to overwrite it\n           */\n           return str;\n       },                \n       \n       /**\n        Sets value of input.\n        \n        @method value2input(value) \n        @param {mixed} value\n       **/         \n       value2input: function(value) {\n           if(!value) {\n             return;\n           }\n           this.$input.filter('[name=\"city\"]').val(value.city);\n           this.$input.filter('[name=\"street\"]').val(value.street);\n           this.$input.filter('[name=\"building\"]').val(value.building);\n       },       \n       \n       /**\n        Returns value of input.\n        \n        @method input2value() \n       **/          \n       input2value: function() { \n           return {\n              city: this.$input.filter('[name=\"city\"]').val(), \n              street: this.$input.filter('[name=\"street\"]').val(), \n              building: this.$input.filter('[name=\"building\"]').val()\n           };\n       },        \n       \n        /**\n        Activates input: sets focus on the first field.\n        \n        @method activate() \n       **/        \n       activate: function() {\n            this.$input.filter('[name=\"city\"]').focus();\n       },  \n       \n       /**\n        Attaches handler to submit form in case of 'showbuttons=false' mode\n        \n        @method autosubmit() \n       **/       \n       autosubmit: function() {\n           this.$input.keydown(function (e) {\n                if (e.which === 13) {\n                    $(this).closest('form').submit();\n                }\n           });\n       }       \n    });\n\n    Address.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {\n        tpl: '<div class=\"editable-address\"><label><span>City: </span><input type=\"text\" name=\"city\" class=\"input-small\"></label></div>'+\n             '<div class=\"editable-address\"><label><span>Street: </span><input type=\"text\" name=\"street\" class=\"input-small\"></label></div>'+\n             '<div class=\"editable-address\"><label><span>Building: </span><input type=\"text\" name=\"building\" class=\"input-mini\"></label></div>',\n             \n        inputclass: ''\n    });\n\n    $.fn.editabletypes.address = Address;\n\n}(window.jQuery));","/**\nBootstrap wysihtml5 editor. Based on [bootstrap-wysihtml5](https://github.com/jhollingworth/bootstrap-wysihtml5).  \nYou should include **manually** distributives of `wysihtml5` and `bootstrap-wysihtml5`:\n\n    <link href=\"js/inputs-ext/wysihtml5/bootstrap-wysihtml5-0.0.2/bootstrap-wysihtml5-0.0.2.css\" rel=\"stylesheet\" type=\"text/css\"></link>  \n    <script src=\"js/inputs-ext/wysihtml5/bootstrap-wysihtml5-0.0.2/wysihtml5-0.3.0.min.js\"></script>  \n    <script src=\"js/inputs-ext/wysihtml5/bootstrap-wysihtml5-0.0.2/bootstrap-wysihtml5-0.0.2.min.js\"></script>\n    \nAnd also include `wysihtml5.js` from `inputs-ext` directory of x-editable:\n      \n    <script src=\"js/inputs-ext/wysihtml5/wysihtml5.js\"></script>  \n\n**Note:** It's better to use fresh bootstrap-wysihtml5 from it's [master branch](https://github.com/jhollingworth/bootstrap-wysihtml5/tree/master/src) as there is update for correct image insertion.    \n    \n@class wysihtml5\n@extends abstractinput\n@final\n@since 1.4.0\n@example\n<div id=\"comments\" data-type=\"wysihtml5\" data-pk=\"1\"><h2>awesome</h2> comment!</div>\n<script>\n$(function(){\n    $('#comments').editable({\n        url: '/post',\n        title: 'Enter comments'\n    });\n});\n</script>\n**/\n(function ($) {\n    \"use strict\";\n    \n    var Wysihtml5 = function (options) {\n        this.init('wysihtml5', options, Wysihtml5.defaults);\n        \n        //extend wysihtml5 manually as $.extend not recursive \n        this.options.wysihtml5 = $.extend({}, Wysihtml5.defaults.wysihtml5, options.wysihtml5);\n    };\n\n    $.fn.editableutils.inherit(Wysihtml5, $.fn.editabletypes.abstractinput);\n\n    $.extend(Wysihtml5.prototype, {\n        render: function () {\n            var deferred = $.Deferred(),\n            msieOld;\n            \n            //generate unique id as it required for wysihtml5\n            this.$input.attr('id', 'textarea_'+(new Date()).getTime());\n\n            this.setClass();\n            this.setAttr('placeholder');            \n            \n            //resolve deffered when widget loaded\n            $.extend(this.options.wysihtml5, {\n                events: {\n                  load: function() {\n                      deferred.resolve();\n                  }  \n                }\n            });\n            \n            this.$input.wysihtml5(this.options.wysihtml5);\n            \n            /*\n             In IE8 wysihtml5 iframe stays on the same line with buttons toolbar (inside popover).\n             The only solution I found is to add <br>. If you fine better way, please send PR.   \n            */\n            msieOld = /msie\\s*(8|7|6)/.test(navigator.userAgent.toLowerCase());\n            if(msieOld) {\n                this.$input.before('<br><br>'); \n            }\n            \n            return deferred.promise();\n        },\n       \n        value2html: function(value, element) {\n            $(element).html(value);\n        },\n\n        html2value: function(html) {\n            return html;\n        },\n        \n        value2input: function(value) {\n            this.$input.data(\"wysihtml5\").editor.setValue(value, true);\n        }, \n\n        activate: function() {\n            this.$input.data(\"wysihtml5\").editor.focus();\n        },\n        \n        isEmpty: function($element) {\n            if($.trim($element.html()) === '') { \n                return true;\n            } else if($.trim($element.text()) !== '') {\n                return false;\n            } else {\n                //e.g. '<img>', '<br>', '<p></p>'\n                return !$element.height() || !$element.width();\n            } \n        }\n    });\n\n    Wysihtml5.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {\n        /**\n        @property tpl\n        @default <textarea></textarea>\n        **/\n        tpl:'<textarea></textarea>',\n        /**\n        @property inputclass\n        @default editable-wysihtml5\n        **/\n        inputclass: 'editable-wysihtml5',\n        /**\n        Placeholder attribute of input. Shown when input is empty.\n\n        @property placeholder\n        @type string\n        @default null\n        **/\n        placeholder: null,\n        /**\n        Wysihtml5 default options.  \n        See https://github.com/jhollingworth/bootstrap-wysihtml5#options\n\n        @property wysihtml5\n        @type object\n        @default {stylesheets: false}\n        **/        \n        wysihtml5: {\n            stylesheets: false //see https://github.com/jhollingworth/bootstrap-wysihtml5/issues/183\n        }\n    });\n\n    $.fn.editabletypes.wysihtml5 = Wysihtml5;\n\n}(window.jQuery));\n","/**\n * @license wysihtml5 v0.3.0\n * https://github.com/xing/wysihtml5\n *\n * Author: Christopher Blum (https://github.com/tiff)\n *\n * Copyright (C) 2012 XING AG\n * Licensed under the MIT license (MIT)\n *\n */\nwysihtml5 = {\n  version: \"0.3.0\",\n  \n  // namespaces\n  commands:   {},\n  dom:        {},\n  quirks:     {},\n  toolbar:    {},\n  lang:       {},\n  selection:  {},\n  views:      {},\n  \n  INVISIBLE_SPACE: \"\\uFEFF\",\n  \n  EMPTY_FUNCTION: function() {},\n  \n  ELEMENT_NODE: 1,\n  TEXT_NODE:    3,\n  \n  BACKSPACE_KEY:  8,\n  ENTER_KEY:      13,\n  ESCAPE_KEY:     27,\n  SPACE_KEY:      32,\n  DELETE_KEY:     46\n};/**\n * @license Rangy, a cross-browser JavaScript range and selection library\n * http://code.google.com/p/rangy/\n *\n * Copyright 2011, Tim Down\n * Licensed under the MIT license.\n * Version: 1.2.2\n * Build date: 13 November 2011\n */\nwindow['rangy'] = (function() {\n\n\n    var OBJECT = \"object\", FUNCTION = \"function\", UNDEFINED = \"undefined\";\n\n    var domRangeProperties = [\"startContainer\", \"startOffset\", \"endContainer\", \"endOffset\", \"collapsed\",\n        \"commonAncestorContainer\", \"START_TO_START\", \"START_TO_END\", \"END_TO_START\", \"END_TO_END\"];\n\n    var domRangeMethods = [\"setStart\", \"setStartBefore\", \"setStartAfter\", \"setEnd\", \"setEndBefore\",\n        \"setEndAfter\", \"collapse\", \"selectNode\", \"selectNodeContents\", \"compareBoundaryPoints\", \"deleteContents\",\n        \"extractContents\", \"cloneContents\", \"insertNode\", \"surroundContents\", \"cloneRange\", \"toString\", \"detach\"];\n\n    var textRangeProperties = [\"boundingHeight\", \"boundingLeft\", \"boundingTop\", \"boundingWidth\", \"htmlText\", \"text\"];\n\n    // Subset of TextRange's full set of methods that we're interested in\n    var textRangeMethods = [\"collapse\", \"compareEndPoints\", \"duplicate\", \"getBookmark\", \"moveToBookmark\",\n        \"moveToElementText\", \"parentElement\", \"pasteHTML\", \"select\", \"setEndPoint\", \"getBoundingClientRect\"];\n\n    /*----------------------------------------------------------------------------------------------------------------*/\n\n    // Trio of functions taken from Peter Michaux's article:\n    // http://peter.michaux.ca/articles/feature-detection-state-of-the-art-browser-scripting\n    function isHostMethod(o, p) {\n        var t = typeof o[p];\n        return t == FUNCTION || (!!(t == OBJECT && o[p])) || t == \"unknown\";\n    }\n\n    function isHostObject(o, p) {\n        return !!(typeof o[p] == OBJECT && o[p]);\n    }\n\n    function isHostProperty(o, p) {\n        return typeof o[p] != UNDEFINED;\n    }\n\n    // Creates a convenience function to save verbose repeated calls to tests functions\n    function createMultiplePropertyTest(testFunc) {\n        return function(o, props) {\n            var i = props.length;\n            while (i--) {\n                if (!testFunc(o, props[i])) {\n                    return false;\n                }\n            }\n            return true;\n        };\n    }\n\n    // Next trio of functions are a convenience to save verbose repeated calls to previous two functions\n    var areHostMethods = createMultiplePropertyTest(isHostMethod);\n    var areHostObjects = createMultiplePropertyTest(isHostObject);\n    var areHostProperties = createMultiplePropertyTest(isHostProperty);\n\n    function isTextRange(range) {\n        return range && areHostMethods(range, textRangeMethods) && areHostProperties(range, textRangeProperties);\n    }\n\n    var api = {\n        version: \"1.2.2\",\n        initialized: false,\n        supported: true,\n\n        util: {\n            isHostMethod: isHostMethod,\n            isHostObject: isHostObject,\n            isHostProperty: isHostProperty,\n            areHostMethods: areHostMethods,\n            areHostObjects: areHostObjects,\n            areHostProperties: areHostProperties,\n            isTextRange: isTextRange\n        },\n\n        features: {},\n\n        modules: {},\n        config: {\n            alertOnWarn: false,\n            preferTextRange: false\n        }\n    };\n\n    function fail(reason) {\n        window.alert(\"Rangy not supported in your browser. Reason: \" + reason);\n        api.initialized = true;\n        api.supported = false;\n    }\n\n    api.fail = fail;\n\n    function warn(msg) {\n        var warningMessage = \"Rangy warning: \" + msg;\n        if (api.config.alertOnWarn) {\n            window.alert(warningMessage);\n        } else if (typeof window.console != UNDEFINED && typeof window.console.log != UNDEFINED) {\n            window.console.log(warningMessage);\n        }\n    }\n\n    api.warn = warn;\n\n    if ({}.hasOwnProperty) {\n        api.util.extend = function(o, props) {\n            for (var i in props) {\n                if (props.hasOwnProperty(i)) {\n                    o[i] = props[i];\n                }\n            }\n        };\n    } else {\n        fail(\"hasOwnProperty not supported\");\n    }\n\n    var initListeners = [];\n    var moduleInitializers = [];\n\n    // Initialization\n    function init() {\n        if (api.initialized) {\n            return;\n        }\n        var testRange;\n        var implementsDomRange = false, implementsTextRange = false;\n\n        // First, perform basic feature tests\n\n        if (isHostMethod(document, \"createRange\")) {\n            testRange = document.createRange();\n            if (areHostMethods(testRange, domRangeMethods) && areHostProperties(testRange, domRangeProperties)) {\n                implementsDomRange = true;\n            }\n            testRange.detach();\n        }\n\n        var body = isHostObject(document, \"body\") ? document.body : document.getElementsByTagName(\"body\")[0];\n\n        if (body && isHostMethod(body, \"createTextRange\")) {\n            testRange = body.createTextRange();\n            if (isTextRange(testRange)) {\n                implementsTextRange = true;\n            }\n        }\n\n        if (!implementsDomRange && !implementsTextRange) {\n            fail(\"Neither Range nor TextRange are implemented\");\n        }\n\n        api.initialized = true;\n        api.features = {\n            implementsDomRange: implementsDomRange,\n            implementsTextRange: implementsTextRange\n        };\n\n        // Initialize modules and call init listeners\n        var allListeners = moduleInitializers.concat(initListeners);\n        for (var i = 0, len = allListeners.length; i < len; ++i) {\n            try {\n                allListeners[i](api);\n            } catch (ex) {\n                if (isHostObject(window, \"console\") && isHostMethod(window.console, \"log\")) {\n                    window.console.log(\"Init listener threw an exception. Continuing.\", ex);\n                }\n\n            }\n        }\n    }\n\n    // Allow external scripts to initialize this library in case it's loaded after the document has loaded\n    api.init = init;\n\n    // Execute listener immediately if already initialized\n    api.addInitListener = function(listener) {\n        if (api.initialized) {\n            listener(api);\n        } else {\n            initListeners.push(listener);\n        }\n    };\n\n    var createMissingNativeApiListeners = [];\n\n    api.addCreateMissingNativeApiListener = function(listener) {\n        createMissingNativeApiListeners.push(listener);\n    };\n\n    function createMissingNativeApi(win) {\n        win = win || window;\n        init();\n\n        // Notify listeners\n        for (var i = 0, len = createMissingNativeApiListeners.length; i < len; ++i) {\n            createMissingNativeApiListeners[i](win);\n        }\n    }\n\n    api.createMissingNativeApi = createMissingNativeApi;\n\n    /**\n     * @constructor\n     */\n    function Module(name) {\n        this.name = name;\n        this.initialized = false;\n        this.supported = false;\n    }\n\n    Module.prototype.fail = function(reason) {\n        this.initialized = true;\n        this.supported = false;\n\n        throw new Error(\"Module '\" + this.name + \"' failed to load: \" + reason);\n    };\n\n    Module.prototype.warn = function(msg) {\n        api.warn(\"Module \" + this.name + \": \" + msg);\n    };\n\n    Module.prototype.createError = function(msg) {\n        return new Error(\"Error in Rangy \" + this.name + \" module: \" + msg);\n    };\n\n    api.createModule = function(name, initFunc) {\n        var module = new Module(name);\n        api.modules[name] = module;\n\n        moduleInitializers.push(function(api) {\n            initFunc(api, module);\n            module.initialized = true;\n            module.supported = true;\n        });\n    };\n\n    api.requireModules = function(modules) {\n        for (var i = 0, len = modules.length, module, moduleName; i < len; ++i) {\n            moduleName = modules[i];\n            module = api.modules[moduleName];\n            if (!module || !(module instanceof Module)) {\n                throw new Error(\"Module '\" + moduleName + \"' not found\");\n            }\n            if (!module.supported) {\n                throw new Error(\"Module '\" + moduleName + \"' not supported\");\n            }\n        }\n    };\n\n    /*----------------------------------------------------------------------------------------------------------------*/\n\n    // Wait for document to load before running tests\n\n    var docReady = false;\n\n    var loadHandler = function(e) {\n\n        if (!docReady) {\n            docReady = true;\n            if (!api.initialized) {\n                init();\n            }\n        }\n    };\n\n    // Test whether we have window and document objects that we will need\n    if (typeof window == UNDEFINED) {\n        fail(\"No window found\");\n        return;\n    }\n    if (typeof document == UNDEFINED) {\n        fail(\"No document found\");\n        return;\n    }\n\n    if (isHostMethod(document, \"addEventListener\")) {\n        document.addEventListener(\"DOMContentLoaded\", loadHandler, false);\n    }\n\n    // Add a fallback in case the DOMContentLoaded event isn't supported\n    if (isHostMethod(window, \"addEventListener\")) {\n        window.addEventListener(\"load\", loadHandler, false);\n    } else if (isHostMethod(window, \"attachEvent\")) {\n        window.attachEvent(\"onload\", loadHandler);\n    } else {\n        fail(\"Window does not have required addEventListener or attachEvent method\");\n    }\n\n    return api;\n})();\nrangy.createModule(\"DomUtil\", function(api, module) {\n\n    var UNDEF = \"undefined\";\n    var util = api.util;\n\n    // Perform feature tests\n    if (!util.areHostMethods(document, [\"createDocumentFragment\", \"createElement\", \"createTextNode\"])) {\n        module.fail(\"document missing a Node creation method\");\n    }\n\n    if (!util.isHostMethod(document, \"getElementsByTagName\")) {\n        module.fail(\"document missing getElementsByTagName method\");\n    }\n\n    var el = document.createElement(\"div\");\n    if (!util.areHostMethods(el, [\"insertBefore\", \"appendChild\", \"cloneNode\"] ||\n            !util.areHostObjects(el, [\"previousSibling\", \"nextSibling\", \"childNodes\", \"parentNode\"]))) {\n        module.fail(\"Incomplete Element implementation\");\n    }\n\n    // innerHTML is required for Range's createContextualFragment method\n    if (!util.isHostProperty(el, \"innerHTML\")) {\n        module.fail(\"Element is missing innerHTML property\");\n    }\n\n    var textNode = document.createTextNode(\"test\");\n    if (!util.areHostMethods(textNode, [\"splitText\", \"deleteData\", \"insertData\", \"appendData\", \"cloneNode\"] ||\n            !util.areHostObjects(el, [\"previousSibling\", \"nextSibling\", \"childNodes\", \"parentNode\"]) ||\n            !util.areHostProperties(textNode, [\"data\"]))) {\n        module.fail(\"Incomplete Text Node implementation\");\n    }\n\n    /*----------------------------------------------------------------------------------------------------------------*/\n\n    // Removed use of indexOf because of a bizarre bug in Opera that is thrown in one of the Acid3 tests. I haven't been\n    // able to replicate it outside of the test. The bug is that indexOf returns -1 when called on an Array that\n    // contains just the document as a single element and the value searched for is the document.\n    var arrayContains = /*Array.prototype.indexOf ?\n        function(arr, val) {\n            return arr.indexOf(val) > -1;\n        }:*/\n\n        function(arr, val) {\n            var i = arr.length;\n            while (i--) {\n                if (arr[i] === val) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n    // Opera 11 puts HTML elements in the null namespace, it seems, and IE 7 has undefined namespaceURI\n    function isHtmlNamespace(node) {\n        var ns;\n        return typeof node.namespaceURI == UNDEF || ((ns = node.namespaceURI) === null || ns == \"http://www.w3.org/1999/xhtml\");\n    }\n\n    function parentElement(node) {\n        var parent = node.parentNode;\n        return (parent.nodeType == 1) ? parent : null;\n    }\n\n    function getNodeIndex(node) {\n        var i = 0;\n        while( (node = node.previousSibling) ) {\n            i++;\n        }\n        return i;\n    }\n\n    function getNodeLength(node) {\n        var childNodes;\n        return isCharacterDataNode(node) ? node.length : ((childNodes = node.childNodes) ? childNodes.length : 0);\n    }\n\n    function getCommonAncestor(node1, node2) {\n        var ancestors = [], n;\n        for (n = node1; n; n = n.parentNode) {\n            ancestors.push(n);\n        }\n\n        for (n = node2; n; n = n.parentNode) {\n            if (arrayContains(ancestors, n)) {\n                return n;\n            }\n        }\n\n        return null;\n    }\n\n    function isAncestorOf(ancestor, descendant, selfIsAncestor) {\n        var n = selfIsAncestor ? descendant : descendant.parentNode;\n        while (n) {\n            if (n === ancestor) {\n                return true;\n            } else {\n                n = n.parentNode;\n            }\n        }\n        return false;\n    }\n\n    function getClosestAncestorIn(node, ancestor, selfIsAncestor) {\n        var p, n = selfIsAncestor ? node : node.parentNode;\n        while (n) {\n            p = n.parentNode;\n            if (p === ancestor) {\n                return n;\n            }\n            n = p;\n        }\n        return null;\n    }\n\n    function isCharacterDataNode(node) {\n        var t = node.nodeType;\n        return t == 3 || t == 4 || t == 8 ; // Text, CDataSection or Comment\n    }\n\n    function insertAfter(node, precedingNode) {\n        var nextNode = precedingNode.nextSibling, parent = precedingNode.parentNode;\n        if (nextNode) {\n            parent.insertBefore(node, nextNode);\n        } else {\n            parent.appendChild(node);\n        }\n        return node;\n    }\n\n    // Note that we cannot use splitText() because it is bugridden in IE 9.\n    function splitDataNode(node, index) {\n        var newNode = node.cloneNode(false);\n        newNode.deleteData(0, index);\n        node.deleteData(index, node.length - index);\n        insertAfter(newNode, node);\n        return newNode;\n    }\n\n    function getDocument(node) {\n        if (node.nodeType == 9) {\n            return node;\n        } else if (typeof node.ownerDocument != UNDEF) {\n            return node.ownerDocument;\n        } else if (typeof node.document != UNDEF) {\n            return node.document;\n        } else if (node.parentNode) {\n            return getDocument(node.parentNode);\n        } else {\n            throw new Error(\"getDocument: no document found for node\");\n        }\n    }\n\n    function getWindow(node) {\n        var doc = getDocument(node);\n        if (typeof doc.defaultView != UNDEF) {\n            return doc.defaultView;\n        } else if (typeof doc.parentWindow != UNDEF) {\n            return doc.parentWindow;\n        } else {\n            throw new Error(\"Cannot get a window object for node\");\n        }\n    }\n\n    function getIframeDocument(iframeEl) {\n        if (typeof iframeEl.contentDocument != UNDEF) {\n            return iframeEl.contentDocument;\n        } else if (typeof iframeEl.contentWindow != UNDEF) {\n            return iframeEl.contentWindow.document;\n        } else {\n            throw new Error(\"getIframeWindow: No Document object found for iframe element\");\n        }\n    }\n\n    function getIframeWindow(iframeEl) {\n        if (typeof iframeEl.contentWindow != UNDEF) {\n            return iframeEl.contentWindow;\n        } else if (typeof iframeEl.contentDocument != UNDEF) {\n            return iframeEl.contentDocument.defaultView;\n        } else {\n            throw new Error(\"getIframeWindow: No Window object found for iframe element\");\n        }\n    }\n\n    function getBody(doc) {\n        return util.isHostObject(doc, \"body\") ? doc.body : doc.getElementsByTagName(\"body\")[0];\n    }\n\n    function getRootContainer(node) {\n        var parent;\n        while ( (parent = node.parentNode) ) {\n            node = parent;\n        }\n        return node;\n    }\n\n    function comparePoints(nodeA, offsetA, nodeB, offsetB) {\n        // See http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level-2-Range-Comparing\n        var nodeC, root, childA, childB, n;\n        if (nodeA == nodeB) {\n\n            // Case 1: nodes are the same\n            return offsetA === offsetB ? 0 : (offsetA < offsetB) ? -1 : 1;\n        } else if ( (nodeC = getClosestAncestorIn(nodeB, nodeA, true)) ) {\n\n            // Case 2: node C (container B or an ancestor) is a child node of A\n            return offsetA <= getNodeIndex(nodeC) ? -1 : 1;\n        } else if ( (nodeC = getClosestAncestorIn(nodeA, nodeB, true)) ) {\n\n            // Case 3: node C (container A or an ancestor) is a child node of B\n            return getNodeIndex(nodeC) < offsetB  ? -1 : 1;\n        } else {\n\n            // Case 4: containers are siblings or descendants of siblings\n            root = getCommonAncestor(nodeA, nodeB);\n            childA = (nodeA === root) ? root : getClosestAncestorIn(nodeA, root, true);\n            childB = (nodeB === root) ? root : getClosestAncestorIn(nodeB, root, true);\n\n            if (childA === childB) {\n                // This shouldn't be possible\n\n                throw new Error(\"comparePoints got to case 4 and childA and childB are the same!\");\n            } else {\n                n = root.firstChild;\n                while (n) {\n                    if (n === childA) {\n                        return -1;\n                    } else if (n === childB) {\n                        return 1;\n                    }\n                    n = n.nextSibling;\n                }\n                throw new Error(\"Should not be here!\");\n            }\n        }\n    }\n\n    function fragmentFromNodeChildren(node) {\n        var fragment = getDocument(node).createDocumentFragment(), child;\n        while ( (child = node.firstChild) ) {\n            fragment.appendChild(child);\n        }\n        return fragment;\n    }\n\n    function inspectNode(node) {\n        if (!node) {\n            return \"[No node]\";\n        }\n        if (isCharacterDataNode(node)) {\n            return '\"' + node.data + '\"';\n        } else if (node.nodeType == 1) {\n            var idAttr = node.id ? ' id=\"' + node.id + '\"' : \"\";\n            return \"<\" + node.nodeName + idAttr + \">[\" + node.childNodes.length + \"]\";\n        } else {\n            return node.nodeName;\n        }\n    }\n\n    /**\n     * @constructor\n     */\n    function NodeIterator(root) {\n        this.root = root;\n        this._next = root;\n    }\n\n    NodeIterator.prototype = {\n        _current: null,\n\n        hasNext: function() {\n            return !!this._next;\n        },\n\n        next: function() {\n            var n = this._current = this._next;\n            var child, next;\n            if (this._current) {\n                child = n.firstChild;\n                if (child) {\n                    this._next = child;\n                } else {\n                    next = null;\n                    while ((n !== this.root) && !(next = n.nextSibling)) {\n                        n = n.parentNode;\n                    }\n                    this._next = next;\n                }\n            }\n            return this._current;\n        },\n\n        detach: function() {\n            this._current = this._next = this.root = null;\n        }\n    };\n\n    function createIterator(root) {\n        return new NodeIterator(root);\n    }\n\n    /**\n     * @constructor\n     */\n    function DomPosition(node, offset) {\n        this.node = node;\n        this.offset = offset;\n    }\n\n    DomPosition.prototype = {\n        equals: function(pos) {\n            return this.node === pos.node & this.offset == pos.offset;\n        },\n\n        inspect: function() {\n            return \"[DomPosition(\" + inspectNode(this.node) + \":\" + this.offset + \")]\";\n        }\n    };\n\n    /**\n     * @constructor\n     */\n    function DOMException(codeName) {\n        this.code = this[codeName];\n        this.codeName = codeName;\n        this.message = \"DOMException: \" + this.codeName;\n    }\n\n    DOMException.prototype = {\n        INDEX_SIZE_ERR: 1,\n        HIERARCHY_REQUEST_ERR: 3,\n        WRONG_DOCUMENT_ERR: 4,\n        NO_MODIFICATION_ALLOWED_ERR: 7,\n        NOT_FOUND_ERR: 8,\n        NOT_SUPPORTED_ERR: 9,\n        INVALID_STATE_ERR: 11\n    };\n\n    DOMException.prototype.toString = function() {\n        return this.message;\n    };\n\n    api.dom = {\n        arrayContains: arrayContains,\n        isHtmlNamespace: isHtmlNamespace,\n        parentElement: parentElement,\n        getNodeIndex: getNodeIndex,\n        getNodeLength: getNodeLength,\n        getCommonAncestor: getCommonAncestor,\n        isAncestorOf: isAncestorOf,\n        getClosestAncestorIn: getClosestAncestorIn,\n        isCharacterDataNode: isCharacterDataNode,\n        insertAfter: insertAfter,\n        splitDataNode: splitDataNode,\n        getDocument: getDocument,\n        getWindow: getWindow,\n        getIframeWindow: getIframeWindow,\n        getIframeDocument: getIframeDocument,\n        getBody: getBody,\n        getRootContainer: getRootContainer,\n        comparePoints: comparePoints,\n        inspectNode: inspectNode,\n        fragmentFromNodeChildren: fragmentFromNodeChildren,\n        createIterator: createIterator,\n        DomPosition: DomPosition\n    };\n\n    api.DOMException = DOMException;\n});rangy.createModule(\"DomRange\", function(api, module) {\n    api.requireModules( [\"DomUtil\"] );\n\n\n    var dom = api.dom;\n    var DomPosition = dom.DomPosition;\n    var DOMException = api.DOMException;\n    \n    /*----------------------------------------------------------------------------------------------------------------*/\n\n    // Utility functions\n\n    function isNonTextPartiallySelected(node, range) {\n        return (node.nodeType != 3) &&\n               (dom.isAncestorOf(node, range.startContainer, true) || dom.isAncestorOf(node, range.endContainer, true));\n    }\n\n    function getRangeDocument(range) {\n        return dom.getDocument(range.startContainer);\n    }\n\n    function dispatchEvent(range, type, args) {\n        var listeners = range._listeners[type];\n        if (listeners) {\n            for (var i = 0, len = listeners.length; i < len; ++i) {\n                listeners[i].call(range, {target: range, args: args});\n            }\n        }\n    }\n\n    function getBoundaryBeforeNode(node) {\n        return new DomPosition(node.parentNode, dom.getNodeIndex(node));\n    }\n\n    function getBoundaryAfterNode(node) {\n        return new DomPosition(node.parentNode, dom.getNodeIndex(node) + 1);\n    }\n\n    function insertNodeAtPosition(node, n, o) {\n        var firstNodeInserted = node.nodeType == 11 ? node.firstChild : node;\n        if (dom.isCharacterDataNode(n)) {\n            if (o == n.length) {\n                dom.insertAfter(node, n);\n            } else {\n                n.parentNode.insertBefore(node, o == 0 ? n : dom.splitDataNode(n, o));\n            }\n        } else if (o >= n.childNodes.length) {\n            n.appendChild(node);\n        } else {\n            n.insertBefore(node, n.childNodes[o]);\n        }\n        return firstNodeInserted;\n    }\n\n    function cloneSubtree(iterator) {\n        var partiallySelected;\n        for (var node, frag = getRangeDocument(iterator.range).createDocumentFragment(), subIterator; node = iterator.next(); ) {\n            partiallySelected = iterator.isPartiallySelectedSubtree();\n\n            node = node.cloneNode(!partiallySelected);\n            if (partiallySelected) {\n                subIterator = iterator.getSubtreeIterator();\n                node.appendChild(cloneSubtree(subIterator));\n                subIterator.detach(true);\n            }\n\n            if (node.nodeType == 10) { // DocumentType\n                throw new DOMException(\"HIERARCHY_REQUEST_ERR\");\n            }\n            frag.appendChild(node);\n        }\n        return frag;\n    }\n\n    function iterateSubtree(rangeIterator, func, iteratorState) {\n        var it, n;\n        iteratorState = iteratorState || { stop: false };\n        for (var node, subRangeIterator; node = rangeIterator.next(); ) {\n            //log.debug(\"iterateSubtree, partially selected: \" + rangeIterator.isPartiallySelectedSubtree(), nodeToString(node));\n            if (rangeIterator.isPartiallySelectedSubtree()) {\n                // The node is partially selected by the Range, so we can use a new RangeIterator on the portion of the\n                // node selected by the Range.\n                if (func(node) === false) {\n                    iteratorState.stop = true;\n                    return;\n                } else {\n                    subRangeIterator = rangeIterator.getSubtreeIterator();\n                    iterateSubtree(subRangeIterator, func, iteratorState);\n                    subRangeIterator.detach(true);\n                    if (iteratorState.stop) {\n                        return;\n                    }\n                }\n            } else {\n                // The whole node is selected, so we can use efficient DOM iteration to iterate over the node and its\n                // descendant\n                it = dom.createIterator(node);\n                while ( (n = it.next()) ) {\n                    if (func(n) === false) {\n                        iteratorState.stop = true;\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    function deleteSubtree(iterator) {\n        var subIterator;\n        while (iterator.next()) {\n            if (iterator.isPartiallySelectedSubtree()) {\n                subIterator = iterator.getSubtreeIterator();\n                deleteSubtree(subIterator);\n                subIterator.detach(true);\n            } else {\n                iterator.remove();\n            }\n        }\n    }\n\n    function extractSubtree(iterator) {\n\n        for (var node, frag = getRangeDocument(iterator.range).createDocumentFragment(), subIterator; node = iterator.next(); ) {\n\n\n            if (iterator.isPartiallySelectedSubtree()) {\n                node = node.cloneNode(false);\n                subIterator = iterator.getSubtreeIterator();\n                node.appendChild(extractSubtree(subIterator));\n                subIterator.detach(true);\n            } else {\n                iterator.remove();\n            }\n            if (node.nodeType == 10) { // DocumentType\n                throw new DOMException(\"HIERARCHY_REQUEST_ERR\");\n            }\n            frag.appendChild(node);\n        }\n        return frag;\n    }\n\n    function getNodesInRange(range, nodeTypes, filter) {\n        //log.info(\"getNodesInRange, \" + nodeTypes.join(\",\"));\n        var filterNodeTypes = !!(nodeTypes && nodeTypes.length), regex;\n        var filterExists = !!filter;\n        if (filterNodeTypes) {\n            regex = new RegExp(\"^(\" + nodeTypes.join(\"|\") + \")$\");\n        }\n\n        var nodes = [];\n        iterateSubtree(new RangeIterator(range, false), function(node) {\n            if ((!filterNodeTypes || regex.test(node.nodeType)) && (!filterExists || filter(node))) {\n                nodes.push(node);\n            }\n        });\n        return nodes;\n    }\n\n    function inspect(range) {\n        var name = (typeof range.getName == \"undefined\") ? \"Range\" : range.getName();\n        return \"[\" + name + \"(\" + dom.inspectNode(range.startContainer) + \":\" + range.startOffset + \", \" +\n                dom.inspectNode(range.endContainer) + \":\" + range.endOffset + \")]\";\n    }\n\n    /*----------------------------------------------------------------------------------------------------------------*/\n\n    // RangeIterator code partially borrows from IERange by Tim Ryan (http://github.com/timcameronryan/IERange)\n\n    /**\n     * @constructor\n     */\n    function RangeIterator(range, clonePartiallySelectedTextNodes) {\n        this.range = range;\n        this.clonePartiallySelectedTextNodes = clonePartiallySelectedTextNodes;\n\n\n\n        if (!range.collapsed) {\n            this.sc = range.startContainer;\n            this.so = range.startOffset;\n            this.ec = range.endContainer;\n            this.eo = range.endOffset;\n            var root = range.commonAncestorContainer;\n\n            if (this.sc === this.ec && dom.isCharacterDataNode(this.sc)) {\n                this.isSingleCharacterDataNode = true;\n                this._first = this._last = this._next = this.sc;\n            } else {\n                this._first = this._next = (this.sc === root && !dom.isCharacterDataNode(this.sc)) ?\n                    this.sc.childNodes[this.so] : dom.getClosestAncestorIn(this.sc, root, true);\n                this._last = (this.ec === root && !dom.isCharacterDataNode(this.ec)) ?\n                    this.ec.childNodes[this.eo - 1] : dom.getClosestAncestorIn(this.ec, root, true);\n            }\n\n        }\n    }\n\n    RangeIterator.prototype = {\n        _current: null,\n        _next: null,\n        _first: null,\n        _last: null,\n        isSingleCharacterDataNode: false,\n\n        reset: function() {\n            this._current = null;\n            this._next = this._first;\n        },\n\n        hasNext: function() {\n            return !!this._next;\n        },\n\n        next: function() {\n            // Move to next node\n            var current = this._current = this._next;\n            if (current) {\n                this._next = (current !== this._last) ? current.nextSibling : null;\n\n                // Check for partially selected text nodes\n                if (dom.isCharacterDataNode(current) && this.clonePartiallySelectedTextNodes) {\n                    if (current === this.ec) {\n\n                        (current = current.cloneNode(true)).deleteData(this.eo, current.length - this.eo);\n                    }\n                    if (this._current === this.sc) {\n\n                        (current = current.cloneNode(true)).deleteData(0, this.so);\n                    }\n                }\n            }\n\n            return current;\n        },\n\n        remove: function() {\n            var current = this._current, start, end;\n\n            if (dom.isCharacterDataNode(current) && (current === this.sc || current === this.ec)) {\n                start = (current === this.sc) ? this.so : 0;\n                end = (current === this.ec) ? this.eo : current.length;\n                if (start != end) {\n                    current.deleteData(start, end - start);\n                }\n            } else {\n                if (current.parentNode) {\n                    current.parentNode.removeChild(current);\n                } else {\n\n                }\n            }\n        },\n\n        // Checks if the current node is partially selected\n        isPartiallySelectedSubtree: function() {\n            var current = this._current;\n            return isNonTextPartiallySelected(current, this.range);\n        },\n\n        getSubtreeIterator: function() {\n            var subRange;\n            if (this.isSingleCharacterDataNode) {\n                subRange = this.range.cloneRange();\n                subRange.collapse();\n            } else {\n                subRange = new Range(getRangeDocument(this.range));\n                var current = this._current;\n                var startContainer = current, startOffset = 0, endContainer = current, endOffset = dom.getNodeLength(current);\n\n                if (dom.isAncestorOf(current, this.sc, true)) {\n                    startContainer = this.sc;\n                    startOffset = this.so;\n                }\n                if (dom.isAncestorOf(current, this.ec, true)) {\n                    endContainer = this.ec;\n                    endOffset = this.eo;\n                }\n\n                updateBoundaries(subRange, startContainer, startOffset, endContainer, endOffset);\n            }\n            return new RangeIterator(subRange, this.clonePartiallySelectedTextNodes);\n        },\n\n        detach: function(detachRange) {\n            if (detachRange) {\n                this.range.detach();\n            }\n            this.range = this._current = this._next = this._first = this._last = this.sc = this.so = this.ec = this.eo = null;\n        }\n    };\n\n    /*----------------------------------------------------------------------------------------------------------------*/\n\n    // Exceptions\n\n    /**\n     * @constructor\n     */\n    function RangeException(codeName) {\n        this.code = this[codeName];\n        this.codeName = codeName;\n        this.message = \"RangeException: \" + this.codeName;\n    }\n\n    RangeException.prototype = {\n        BAD_BOUNDARYPOINTS_ERR: 1,\n        INVALID_NODE_TYPE_ERR: 2\n    };\n\n    RangeException.prototype.toString = function() {\n        return this.message;\n    };\n\n    /*----------------------------------------------------------------------------------------------------------------*/\n\n    /**\n     * Currently iterates through all nodes in the range on creation until I think of a decent way to do it\n     * TODO: Look into making this a proper iterator, not requiring preloading everything first\n     * @constructor\n     */\n    function RangeNodeIterator(range, nodeTypes, filter) {\n        this.nodes = getNodesInRange(range, nodeTypes, filter);\n        this._next = this.nodes[0];\n        this._position = 0;\n    }\n\n    RangeNodeIterator.prototype = {\n        _current: null,\n\n        hasNext: function() {\n            return !!this._next;\n        },\n\n        next: function() {\n            this._current = this._next;\n            this._next = this.nodes[ ++this._position ];\n            return this._current;\n        },\n\n        detach: function() {\n            this._current = this._next = this.nodes = null;\n        }\n    };\n\n    var beforeAfterNodeTypes = [1, 3, 4, 5, 7, 8, 10];\n    var rootContainerNodeTypes = [2, 9, 11];\n    var readonlyNodeTypes = [5, 6, 10, 12];\n    var insertableNodeTypes = [1, 3, 4, 5, 7, 8, 10, 11];\n    var surroundNodeTypes = [1, 3, 4, 5, 7, 8];\n\n    function createAncestorFinder(nodeTypes) {\n        return function(node, selfIsAncestor) {\n            var t, n = selfIsAncestor ? node : node.parentNode;\n            while (n) {\n                t = n.nodeType;\n                if (dom.arrayContains(nodeTypes, t)) {\n                    return n;\n                }\n                n = n.parentNode;\n            }\n            return null;\n        };\n    }\n\n    var getRootContainer = dom.getRootContainer;\n    var getDocumentOrFragmentContainer = createAncestorFinder( [9, 11] );\n    var getReadonlyAncestor = createAncestorFinder(readonlyNodeTypes);\n    var getDocTypeNotationEntityAncestor = createAncestorFinder( [6, 10, 12] );\n\n    function assertNoDocTypeNotationEntityAncestor(node, allowSelf) {\n        if (getDocTypeNotationEntityAncestor(node, allowSelf)) {\n            throw new RangeException(\"INVALID_NODE_TYPE_ERR\");\n        }\n    }\n\n    function assertNotDetached(range) {\n        if (!range.startContainer) {\n            throw new DOMException(\"INVALID_STATE_ERR\");\n        }\n    }\n\n    function assertValidNodeType(node, invalidTypes) {\n        if (!dom.arrayContains(invalidTypes, node.nodeType)) {\n            throw new RangeException(\"INVALID_NODE_TYPE_ERR\");\n        }\n    }\n\n    function assertValidOffset(node, offset) {\n        if (offset < 0 || offset > (dom.isCharacterDataNode(node) ? node.length : node.childNodes.length)) {\n            throw new DOMException(\"INDEX_SIZE_ERR\");\n        }\n    }\n\n    function assertSameDocumentOrFragment(node1, node2) {\n        if (getDocumentOrFragmentContainer(node1, true) !== getDocumentOrFragmentContainer(node2, true)) {\n            throw new DOMException(\"WRONG_DOCUMENT_ERR\");\n        }\n    }\n\n    function assertNodeNotReadOnly(node) {\n        if (getReadonlyAncestor(node, true)) {\n            throw new DOMException(\"NO_MODIFICATION_ALLOWED_ERR\");\n        }\n    }\n\n    function assertNode(node, codeName) {\n        if (!node) {\n            throw new DOMException(codeName);\n        }\n    }\n\n    function isOrphan(node) {\n        return !dom.arrayContains(rootContainerNodeTypes, node.nodeType) && !getDocumentOrFragmentContainer(node, true);\n    }\n\n    function isValidOffset(node, offset) {\n        return offset <= (dom.isCharacterDataNode(node) ? node.length : node.childNodes.length);\n    }\n\n    function assertRangeValid(range) {\n        assertNotDetached(range);\n        if (isOrphan(range.startContainer) || isOrphan(range.endContainer) ||\n                !isValidOffset(range.startContainer, range.startOffset) ||\n                !isValidOffset(range.endContainer, range.endOffset)) {\n            throw new Error(\"Range error: Range is no longer valid after DOM mutation (\" + range.inspect() + \")\");\n        }\n    }\n\n    /*----------------------------------------------------------------------------------------------------------------*/\n\n    // Test the browser's innerHTML support to decide how to implement createContextualFragment\n    var styleEl = document.createElement(\"style\");\n    var htmlParsingConforms = false;\n    try {\n        styleEl.innerHTML = \"<b>x</b>\";\n        htmlParsingConforms = (styleEl.firstChild.nodeType == 3); // Opera incorrectly creates an element node\n    } catch (e) {\n        // IE 6 and 7 throw\n    }\n\n    api.features.htmlParsingConforms = htmlParsingConforms;\n\n    var createContextualFragment = htmlParsingConforms ?\n\n        // Implementation as per HTML parsing spec, trusting in the browser's implementation of innerHTML. See\n        // discussion and base code for this implementation at issue 67.\n        // Spec: http://html5.org/specs/dom-parsing.html#extensions-to-the-range-interface\n        // Thanks to Aleks Williams.\n        function(fragmentStr) {\n            // \"Let node the context object's start's node.\"\n            var node = this.startContainer;\n            var doc = dom.getDocument(node);\n\n            // \"If the context object's start's node is null, raise an INVALID_STATE_ERR\n            // exception and abort these steps.\"\n            if (!node) {\n                throw new DOMException(\"INVALID_STATE_ERR\");\n            }\n\n            // \"Let element be as follows, depending on node's interface:\"\n            // Document, Document Fragment: null\n            var el = null;\n\n            // \"Element: node\"\n            if (node.nodeType == 1) {\n                el = node;\n\n            // \"Text, Comment: node's parentElement\"\n            } else if (dom.isCharacterDataNode(node)) {\n                el = dom.parentElement(node);\n            }\n\n            // \"If either element is null or element's ownerDocument is an HTML document\n            // and element's local name is \"html\" and element's namespace is the HTML\n            // namespace\"\n            if (el === null || (\n                el.nodeName == \"HTML\"\n                && dom.isHtmlNamespace(dom.getDocument(el).documentElement)\n                && dom.isHtmlNamespace(el)\n            )) {\n\n            // \"let element be a new Element with \"body\" as its local name and the HTML\n            // namespace as its namespace.\"\"\n                el = doc.createElement(\"body\");\n            } else {\n                el = el.cloneNode(false);\n            }\n\n            // \"If the node's document is an HTML document: Invoke the HTML fragment parsing algorithm.\"\n            // \"If the node's document is an XML document: Invoke the XML fragment parsing algorithm.\"\n            // \"In either case, the algorithm must be invoked with fragment as the input\n            // and element as the context element.\"\n            el.innerHTML = fragmentStr;\n\n            // \"If this raises an exception, then abort these steps. Otherwise, let new\n            // children be the nodes returned.\"\n\n            // \"Let fragment be a new DocumentFragment.\"\n            // \"Append all new children to fragment.\"\n            // \"Return fragment.\"\n            return dom.fragmentFromNodeChildren(el);\n        } :\n\n        // In this case, innerHTML cannot be trusted, so fall back to a simpler, non-conformant implementation that\n        // previous versions of Rangy used (with the exception of using a body element rather than a div)\n        function(fragmentStr) {\n            assertNotDetached(this);\n            var doc = getRangeDocument(this);\n            var el = doc.createElement(\"body\");\n            el.innerHTML = fragmentStr;\n\n            return dom.fragmentFromNodeChildren(el);\n        };\n\n    /*----------------------------------------------------------------------------------------------------------------*/\n\n    var rangeProperties = [\"startContainer\", \"startOffset\", \"endContainer\", \"endOffset\", \"collapsed\",\n        \"commonAncestorContainer\"];\n\n    var s2s = 0, s2e = 1, e2e = 2, e2s = 3;\n    var n_b = 0, n_a = 1, n_b_a = 2, n_i = 3;\n\n    function RangePrototype() {}\n\n    RangePrototype.prototype = {\n        attachListener: function(type, listener) {\n            this._listeners[type].push(listener);\n        },\n\n        compareBoundaryPoints: function(how, range) {\n            assertRangeValid(this);\n            assertSameDocumentOrFragment(this.startContainer, range.startContainer);\n\n            var nodeA, offsetA, nodeB, offsetB;\n            var prefixA = (how == e2s || how == s2s) ? \"start\" : \"end\";\n            var prefixB = (how == s2e || how == s2s) ? \"start\" : \"end\";\n            nodeA = this[prefixA + \"Container\"];\n            offsetA = this[prefixA + \"Offset\"];\n            nodeB = range[prefixB + \"Container\"];\n            offsetB = range[prefixB + \"Offset\"];\n            return dom.comparePoints(nodeA, offsetA, nodeB, offsetB);\n        },\n\n        insertNode: function(node) {\n            assertRangeValid(this);\n            assertValidNodeType(node, insertableNodeTypes);\n            assertNodeNotReadOnly(this.startContainer);\n\n            if (dom.isAncestorOf(node, this.startContainer, true)) {\n                throw new DOMException(\"HIERARCHY_REQUEST_ERR\");\n            }\n\n            // No check for whether the container of the start of the Range is of a type that does not allow\n            // children of the type of node: the browser's DOM implementation should do this for us when we attempt\n            // to add the node\n\n            var firstNodeInserted = insertNodeAtPosition(node, this.startContainer, this.startOffset);\n            this.setStartBefore(firstNodeInserted);\n        },\n\n        cloneContents: function() {\n            assertRangeValid(this);\n\n            var clone, frag;\n            if (this.collapsed) {\n                return getRangeDocument(this).createDocumentFragment();\n            } else {\n                if (this.startContainer === this.endContainer && dom.isCharacterDataNode(this.startContainer)) {\n                    clone = this.startContainer.cloneNode(true);\n                    clone.data = clone.data.slice(this.startOffset, this.endOffset);\n                    frag = getRangeDocument(this).createDocumentFragment();\n                    frag.appendChild(clone);\n                    return frag;\n                } else {\n                    var iterator = new RangeIterator(this, true);\n                    clone = cloneSubtree(iterator);\n                    iterator.detach();\n                }\n                return clone;\n            }\n        },\n\n        canSurroundContents: function() {\n            assertRangeValid(this);\n            assertNodeNotReadOnly(this.startContainer);\n            assertNodeNotReadOnly(this.endContainer);\n\n            // Check if the contents can be surrounded. Specifically, this means whether the range partially selects\n            // no non-text nodes.\n            var iterator = new RangeIterator(this, true);\n            var boundariesInvalid = (iterator._first && (isNonTextPartiallySelected(iterator._first, this)) ||\n                    (iterator._last && isNonTextPartiallySelected(iterator._last, this)));\n            iterator.detach();\n            return !boundariesInvalid;\n        },\n\n        surroundContents: function(node) {\n            assertValidNodeType(node, surroundNodeTypes);\n\n            if (!this.canSurroundContents()) {\n                throw new RangeException(\"BAD_BOUNDARYPOINTS_ERR\");\n            }\n\n            // Extract the contents\n            var content = this.extractContents();\n\n            // Clear the children of the node\n            if (node.hasChildNodes()) {\n                while (node.lastChild) {\n                    node.removeChild(node.lastChild);\n                }\n            }\n\n            // Insert the new node and add the extracted contents\n            insertNodeAtPosition(node, this.startContainer, this.startOffset);\n            node.appendChild(content);\n\n            this.selectNode(node);\n        },\n\n        cloneRange: function() {\n            assertRangeValid(this);\n            var range = new Range(getRangeDocument(this));\n            var i = rangeProperties.length, prop;\n            while (i--) {\n                prop = rangeProperties[i];\n                range[prop] = this[prop];\n            }\n            return range;\n        },\n\n        toString: function() {\n            assertRangeValid(this);\n            var sc = this.startContainer;\n            if (sc === this.endContainer && dom.isCharacterDataNode(sc)) {\n                return (sc.nodeType == 3 || sc.nodeType == 4) ? sc.data.slice(this.startOffset, this.endOffset) : \"\";\n            } else {\n                var textBits = [], iterator = new RangeIterator(this, true);\n\n                iterateSubtree(iterator, function(node) {\n                    // Accept only text or CDATA nodes, not comments\n\n                    if (node.nodeType == 3 || node.nodeType == 4) {\n                        textBits.push(node.data);\n                    }\n                });\n                iterator.detach();\n                return textBits.join(\"\");\n            }\n        },\n\n        // The methods below are all non-standard. The following batch were introduced by Mozilla but have since\n        // been removed from Mozilla.\n\n        compareNode: function(node) {\n            assertRangeValid(this);\n\n            var parent = node.parentNode;\n            var nodeIndex = dom.getNodeIndex(node);\n\n            if (!parent) {\n                throw new DOMException(\"NOT_FOUND_ERR\");\n            }\n\n            var startComparison = this.comparePoint(parent, nodeIndex),\n                endComparison = this.comparePoint(parent, nodeIndex + 1);\n\n            if (startComparison < 0) { // Node starts before\n                return (endComparison > 0) ? n_b_a : n_b;\n            } else {\n                return (endComparison > 0) ? n_a : n_i;\n            }\n        },\n\n        comparePoint: function(node, offset) {\n            assertRangeValid(this);\n            assertNode(node, \"HIERARCHY_REQUEST_ERR\");\n            assertSameDocumentOrFragment(node, this.startContainer);\n\n            if (dom.comparePoints(node, offset, this.startContainer, this.startOffset) < 0) {\n                return -1;\n            } else if (dom.comparePoints(node, offset, this.endContainer, this.endOffset) > 0) {\n                return 1;\n            }\n            return 0;\n        },\n\n        createContextualFragment: createContextualFragment,\n\n        toHtml: function() {\n            assertRangeValid(this);\n            var container = getRangeDocument(this).createElement(\"div\");\n            container.appendChild(this.cloneContents());\n            return container.innerHTML;\n        },\n\n        // touchingIsIntersecting determines whether this method considers a node that borders a range intersects\n        // with it (as in WebKit) or not (as in Gecko pre-1.9, and the default)\n        intersectsNode: function(node, touchingIsIntersecting) {\n            assertRangeValid(this);\n            assertNode(node, \"NOT_FOUND_ERR\");\n            if (dom.getDocument(node) !== getRangeDocument(this)) {\n                return false;\n            }\n\n            var parent = node.parentNode, offset = dom.getNodeIndex(node);\n            assertNode(parent, \"NOT_FOUND_ERR\");\n\n            var startComparison = dom.comparePoints(parent, offset, this.endContainer, this.endOffset),\n                endComparison = dom.comparePoints(parent, offset + 1, this.startContainer, this.startOffset);\n\n            return touchingIsIntersecting ? startComparison <= 0 && endComparison >= 0 : startComparison < 0 && endComparison > 0;\n        },\n\n\n        isPointInRange: function(node, offset) {\n            assertRangeValid(this);\n            assertNode(node, \"HIERARCHY_REQUEST_ERR\");\n            assertSameDocumentOrFragment(node, this.startContainer);\n\n            return (dom.comparePoints(node, offset, this.startContainer, this.startOffset) >= 0) &&\n                   (dom.comparePoints(node, offset, this.endContainer, this.endOffset) <= 0);\n        },\n\n        // The methods below are non-standard and invented by me.\n\n        // Sharing a boundary start-to-end or end-to-start does not count as intersection.\n        intersectsRange: function(range, touchingIsIntersecting) {\n            assertRangeValid(this);\n\n            if (getRangeDocument(range) != getRangeDocument(this)) {\n                throw new DOMException(\"WRONG_DOCUMENT_ERR\");\n            }\n\n            var startComparison = dom.comparePoints(this.startContainer, this.startOffset, range.endContainer, range.endOffset),\n                endComparison = dom.comparePoints(this.endContainer, this.endOffset, range.startContainer, range.startOffset);\n\n            return touchingIsIntersecting ? startComparison <= 0 && endComparison >= 0 : startComparison < 0 && endComparison > 0;\n        },\n\n        intersection: function(range) {\n            if (this.intersectsRange(range)) {\n                var startComparison = dom.comparePoints(this.startContainer, this.startOffset, range.startContainer, range.startOffset),\n                    endComparison = dom.comparePoints(this.endContainer, this.endOffset, range.endContainer, range.endOffset);\n\n                var intersectionRange = this.cloneRange();\n\n                if (startComparison == -1) {\n                    intersectionRange.setStart(range.startContainer, range.startOffset);\n                }\n                if (endComparison == 1) {\n                    intersectionRange.setEnd(range.endContainer, range.endOffset);\n                }\n                return intersectionRange;\n            }\n            return null;\n        },\n\n        union: function(range) {\n            if (this.intersectsRange(range, true)) {\n                var unionRange = this.cloneRange();\n                if (dom.comparePoints(range.startContainer, range.startOffset, this.startContainer, this.startOffset) == -1) {\n                    unionRange.setStart(range.startContainer, range.startOffset);\n                }\n                if (dom.comparePoints(range.endContainer, range.endOffset, this.endContainer, this.endOffset) == 1) {\n                    unionRange.setEnd(range.endContainer, range.endOffset);\n                }\n                return unionRange;\n            } else {\n                throw new RangeException(\"Ranges do not intersect\");\n            }\n        },\n\n        containsNode: function(node, allowPartial) {\n            if (allowPartial) {\n                return this.intersectsNode(node, false);\n            } else {\n                return this.compareNode(node) == n_i;\n            }\n        },\n\n        containsNodeContents: function(node) {\n            return this.comparePoint(node, 0) >= 0 && this.comparePoint(node, dom.getNodeLength(node)) <= 0;\n        },\n\n        containsRange: function(range) {\n            return this.intersection(range).equals(range);\n        },\n\n        containsNodeText: function(node) {\n            var nodeRange = this.cloneRange();\n            nodeRange.selectNode(node);\n            var textNodes = nodeRange.getNodes([3]);\n            if (textNodes.length > 0) {\n                nodeRange.setStart(textNodes[0], 0);\n                var lastTextNode = textNodes.pop();\n                nodeRange.setEnd(lastTextNode, lastTextNode.length);\n                var contains = this.containsRange(nodeRange);\n                nodeRange.detach();\n                return contains;\n            } else {\n                return this.containsNodeContents(node);\n            }\n        },\n\n        createNodeIterator: function(nodeTypes, filter) {\n            assertRangeValid(this);\n            return new RangeNodeIterator(this, nodeTypes, filter);\n        },\n\n        getNodes: function(nodeTypes, filter) {\n            assertRangeValid(this);\n            return getNodesInRange(this, nodeTypes, filter);\n        },\n\n        getDocument: function() {\n            return getRangeDocument(this);\n        },\n\n        collapseBefore: function(node) {\n            assertNotDetached(this);\n\n            this.setEndBefore(node);\n            this.collapse(false);\n        },\n\n        collapseAfter: function(node) {\n            assertNotDetached(this);\n\n            this.setStartAfter(node);\n            this.collapse(true);\n        },\n\n        getName: function() {\n            return \"DomRange\";\n        },\n\n        equals: function(range) {\n            return Range.rangesEqual(this, range);\n        },\n\n        inspect: function() {\n            return inspect(this);\n        }\n    };\n\n    function copyComparisonConstantsToObject(obj) {\n        obj.START_TO_START = s2s;\n        obj.START_TO_END = s2e;\n        obj.END_TO_END = e2e;\n        obj.END_TO_START = e2s;\n\n        obj.NODE_BEFORE = n_b;\n        obj.NODE_AFTER = n_a;\n        obj.NODE_BEFORE_AND_AFTER = n_b_a;\n        obj.NODE_INSIDE = n_i;\n    }\n\n    function copyComparisonConstants(constructor) {\n        copyComparisonConstantsToObject(constructor);\n        copyComparisonConstantsToObject(constructor.prototype);\n    }\n\n    function createRangeContentRemover(remover, boundaryUpdater) {\n        return function() {\n            assertRangeValid(this);\n\n            var sc = this.startContainer, so = this.startOffset, root = this.commonAncestorContainer;\n\n            var iterator = new RangeIterator(this, true);\n\n            // Work out where to position the range after content removal\n            var node, boundary;\n            if (sc !== root) {\n                node = dom.getClosestAncestorIn(sc, root, true);\n                boundary = getBoundaryAfterNode(node);\n                sc = boundary.node;\n                so = boundary.offset;\n            }\n\n            // Check none of the range is read-only\n            iterateSubtree(iterator, assertNodeNotReadOnly);\n\n            iterator.reset();\n\n            // Remove the content\n            var returnValue = remover(iterator);\n            iterator.detach();\n\n            // Move to the new position\n            boundaryUpdater(this, sc, so, sc, so);\n\n            return returnValue;\n        };\n    }\n\n    function createPrototypeRange(constructor, boundaryUpdater, detacher) {\n        function createBeforeAfterNodeSetter(isBefore, isStart) {\n            return function(node) {\n                assertNotDetached(this);\n                assertValidNodeType(node, beforeAfterNodeTypes);\n                assertValidNodeType(getRootContainer(node), rootContainerNodeTypes);\n\n                var boundary = (isBefore ? getBoundaryBeforeNode : getBoundaryAfterNode)(node);\n                (isStart ? setRangeStart : setRangeEnd)(this, boundary.node, boundary.offset);\n            };\n        }\n\n        function setRangeStart(range, node, offset) {\n            var ec = range.endContainer, eo = range.endOffset;\n            if (node !== range.startContainer || offset !== range.startOffset) {\n                // Check the root containers of the range and the new boundary, and also check whether the new boundary\n                // is after the current end. In either case, collapse the range to the new position\n                if (getRootContainer(node) != getRootContainer(ec) || dom.comparePoints(node, offset, ec, eo) == 1) {\n                    ec = node;\n                    eo = offset;\n                }\n                boundaryUpdater(range, node, offset, ec, eo);\n            }\n        }\n\n        function setRangeEnd(range, node, offset) {\n            var sc = range.startContainer, so = range.startOffset;\n            if (node !== range.endContainer || offset !== range.endOffset) {\n                // Check the root containers of the range and the new boundary, and also check whether the new boundary\n                // is after the current end. In either case, collapse the range to the new position\n                if (getRootContainer(node) != getRootContainer(sc) || dom.comparePoints(node, offset, sc, so) == -1) {\n                    sc = node;\n                    so = offset;\n                }\n                boundaryUpdater(range, sc, so, node, offset);\n            }\n        }\n\n        function setRangeStartAndEnd(range, node, offset) {\n            if (node !== range.startContainer || offset !== range.startOffset || node !== range.endContainer || offset !== range.endOffset) {\n                boundaryUpdater(range, node, offset, node, offset);\n            }\n        }\n\n        constructor.prototype = new RangePrototype();\n\n        api.util.extend(constructor.prototype, {\n            setStart: function(node, offset) {\n                assertNotDetached(this);\n                assertNoDocTypeNotationEntityAncestor(node, true);\n                assertValidOffset(node, offset);\n\n                setRangeStart(this, node, offset);\n            },\n\n            setEnd: function(node, offset) {\n                assertNotDetached(this);\n                assertNoDocTypeNotationEntityAncestor(node, true);\n                assertValidOffset(node, offset);\n\n                setRangeEnd(this, node, offset);\n            },\n\n            setStartBefore: createBeforeAfterNodeSetter(true, true),\n            setStartAfter: createBeforeAfterNodeSetter(false, true),\n            setEndBefore: createBeforeAfterNodeSetter(true, false),\n            setEndAfter: createBeforeAfterNodeSetter(false, false),\n\n            collapse: function(isStart) {\n                assertRangeValid(this);\n                if (isStart) {\n                    boundaryUpdater(this, this.startContainer, this.startOffset, this.startContainer, this.startOffset);\n                } else {\n                    boundaryUpdater(this, this.endContainer, this.endOffset, this.endContainer, this.endOffset);\n                }\n            },\n\n            selectNodeContents: function(node) {\n                // This doesn't seem well specified: the spec talks only about selecting the node's contents, which\n                // could be taken to mean only its children. However, browsers implement this the same as selectNode for\n                // text nodes, so I shall do likewise\n                assertNotDetached(this);\n                assertNoDocTypeNotationEntityAncestor(node, true);\n\n                boundaryUpdater(this, node, 0, node, dom.getNodeLength(node));\n            },\n\n            selectNode: function(node) {\n                assertNotDetached(this);\n                assertNoDocTypeNotationEntityAncestor(node, false);\n                assertValidNodeType(node, beforeAfterNodeTypes);\n\n                var start = getBoundaryBeforeNode(node), end = getBoundaryAfterNode(node);\n                boundaryUpdater(this, start.node, start.offset, end.node, end.offset);\n            },\n\n            extractContents: createRangeContentRemover(extractSubtree, boundaryUpdater),\n\n            deleteContents: createRangeContentRemover(deleteSubtree, boundaryUpdater),\n\n            canSurroundContents: function() {\n                assertRangeValid(this);\n                assertNodeNotReadOnly(this.startContainer);\n                assertNodeNotReadOnly(this.endContainer);\n\n                // Check if the contents can be surrounded. Specifically, this means whether the range partially selects\n                // no non-text nodes.\n                var iterator = new RangeIterator(this, true);\n                var boundariesInvalid = (iterator._first && (isNonTextPartiallySelected(iterator._first, this)) ||\n                        (iterator._last && isNonTextPartiallySelected(iterator._last, this)));\n                iterator.detach();\n                return !boundariesInvalid;\n            },\n\n            detach: function() {\n                detacher(this);\n            },\n\n            splitBoundaries: function() {\n                assertRangeValid(this);\n\n\n                var sc = this.startContainer, so = this.startOffset, ec = this.endContainer, eo = this.endOffset;\n                var startEndSame = (sc === ec);\n\n                if (dom.isCharacterDataNode(ec) && eo > 0 && eo < ec.length) {\n                    dom.splitDataNode(ec, eo);\n\n                }\n\n                if (dom.isCharacterDataNode(sc) && so > 0 && so < sc.length) {\n\n                    sc = dom.splitDataNode(sc, so);\n                    if (startEndSame) {\n                        eo -= so;\n                        ec = sc;\n                    } else if (ec == sc.parentNode && eo >= dom.getNodeIndex(sc)) {\n                        eo++;\n                    }\n                    so = 0;\n\n                }\n                boundaryUpdater(this, sc, so, ec, eo);\n            },\n\n            normalizeBoundaries: function() {\n                assertRangeValid(this);\n\n                var sc = this.startContainer, so = this.startOffset, ec = this.endContainer, eo = this.endOffset;\n\n                var mergeForward = function(node) {\n                    var sibling = node.nextSibling;\n                    if (sibling && sibling.nodeType == node.nodeType) {\n                        ec = node;\n                        eo = node.length;\n                        node.appendData(sibling.data);\n                        sibling.parentNode.removeChild(sibling);\n                    }\n                };\n\n                var mergeBackward = function(node) {\n                    var sibling = node.previousSibling;\n                    if (sibling && sibling.nodeType == node.nodeType) {\n                        sc = node;\n                        var nodeLength = node.length;\n                        so = sibling.length;\n                        node.insertData(0, sibling.data);\n                        sibling.parentNode.removeChild(sibling);\n                        if (sc == ec) {\n                            eo += so;\n                            ec = sc;\n                        } else if (ec == node.parentNode) {\n                            var nodeIndex = dom.getNodeIndex(node);\n                            if (eo == nodeIndex) {\n                                ec = node;\n                                eo = nodeLength;\n                            } else if (eo > nodeIndex) {\n                                eo--;\n                            }\n                        }\n                    }\n                };\n\n                var normalizeStart = true;\n\n                if (dom.isCharacterDataNode(ec)) {\n                    if (ec.length == eo) {\n                        mergeForward(ec);\n                    }\n                } else {\n                    if (eo > 0) {\n                        var endNode = ec.childNodes[eo - 1];\n                        if (endNode && dom.isCharacterDataNode(endNode)) {\n                            mergeForward(endNode);\n                        }\n                    }\n                    normalizeStart = !this.collapsed;\n                }\n\n                if (normalizeStart) {\n                    if (dom.isCharacterDataNode(sc)) {\n                        if (so == 0) {\n                            mergeBackward(sc);\n                        }\n                    } else {\n                        if (so < sc.childNodes.length) {\n                            var startNode = sc.childNodes[so];\n                            if (startNode && dom.isCharacterDataNode(startNode)) {\n                                mergeBackward(startNode);\n                            }\n                        }\n                    }\n                } else {\n                    sc = ec;\n                    so = eo;\n                }\n\n                boundaryUpdater(this, sc, so, ec, eo);\n            },\n\n            collapseToPoint: function(node, offset) {\n                assertNotDetached(this);\n\n                assertNoDocTypeNotationEntityAncestor(node, true);\n                assertValidOffset(node, offset);\n\n                setRangeStartAndEnd(this, node, offset);\n            }\n        });\n\n        copyComparisonConstants(constructor);\n    }\n\n    /*----------------------------------------------------------------------------------------------------------------*/\n\n    // Updates commonAncestorContainer and collapsed after boundary change\n    function updateCollapsedAndCommonAncestor(range) {\n        range.collapsed = (range.startContainer === range.endContainer && range.startOffset === range.endOffset);\n        range.commonAncestorContainer = range.collapsed ?\n            range.startContainer : dom.getCommonAncestor(range.startContainer, range.endContainer);\n    }\n\n    function updateBoundaries(range, startContainer, startOffset, endContainer, endOffset) {\n        var startMoved = (range.startContainer !== startContainer || range.startOffset !== startOffset);\n        var endMoved = (range.endContainer !== endContainer || range.endOffset !== endOffset);\n\n        range.startContainer = startContainer;\n        range.startOffset = startOffset;\n        range.endContainer = endContainer;\n        range.endOffset = endOffset;\n\n        updateCollapsedAndCommonAncestor(range);\n        dispatchEvent(range, \"boundarychange\", {startMoved: startMoved, endMoved: endMoved});\n    }\n\n    function detach(range) {\n        assertNotDetached(range);\n        range.startContainer = range.startOffset = range.endContainer = range.endOffset = null;\n        range.collapsed = range.commonAncestorContainer = null;\n        dispatchEvent(range, \"detach\", null);\n        range._listeners = null;\n    }\n\n    /**\n     * @constructor\n     */\n    function Range(doc) {\n        this.startContainer = doc;\n        this.startOffset = 0;\n        this.endContainer = doc;\n        this.endOffset = 0;\n        this._listeners = {\n            boundarychange: [],\n            detach: []\n        };\n        updateCollapsedAndCommonAncestor(this);\n    }\n\n    createPrototypeRange(Range, updateBoundaries, detach);\n\n    api.rangePrototype = RangePrototype.prototype;\n\n    Range.rangeProperties = rangeProperties;\n    Range.RangeIterator = RangeIterator;\n    Range.copyComparisonConstants = copyComparisonConstants;\n    Range.createPrototypeRange = createPrototypeRange;\n    Range.inspect = inspect;\n    Range.getRangeDocument = getRangeDocument;\n    Range.rangesEqual = function(r1, r2) {\n        return r1.startContainer === r2.startContainer &&\n               r1.startOffset === r2.startOffset &&\n               r1.endContainer === r2.endContainer &&\n               r1.endOffset === r2.endOffset;\n    };\n\n    api.DomRange = Range;\n    api.RangeException = RangeException;\n});rangy.createModule(\"WrappedRange\", function(api, module) {\n    api.requireModules( [\"DomUtil\", \"DomRange\"] );\n\n    /**\n     * @constructor\n     */\n    var WrappedRange;\n    var dom = api.dom;\n    var DomPosition = dom.DomPosition;\n    var DomRange = api.DomRange;\n\n\n\n    /*----------------------------------------------------------------------------------------------------------------*/\n\n    /*\n    This is a workaround for a bug where IE returns the wrong container element from the TextRange's parentElement()\n    method. For example, in the following (where pipes denote the selection boundaries):\n\n    <ul id=\"ul\"><li id=\"a\">| a </li><li id=\"b\"> b |</li></ul>\n\n    var range = document.selection.createRange();\n    alert(range.parentElement().id); // Should alert \"ul\" but alerts \"b\"\n\n    This method returns the common ancestor node of the following:\n    - the parentElement() of the textRange\n    - the parentElement() of the textRange after calling collapse(true)\n    - the parentElement() of the textRange after calling collapse(false)\n     */\n    function getTextRangeContainerElement(textRange) {\n        var parentEl = textRange.parentElement();\n\n        var range = textRange.duplicate();\n        range.collapse(true);\n        var startEl = range.parentElement();\n        range = textRange.duplicate();\n        range.collapse(false);\n        var endEl = range.parentElement();\n        var startEndContainer = (startEl == endEl) ? startEl : dom.getCommonAncestor(startEl, endEl);\n\n        return startEndContainer == parentEl ? startEndContainer : dom.getCommonAncestor(parentEl, startEndContainer);\n    }\n\n    function textRangeIsCollapsed(textRange) {\n        return textRange.compareEndPoints(\"StartToEnd\", textRange) == 0;\n    }\n\n    // Gets the boundary of a TextRange expressed as a node and an offset within that node. This function started out as\n    // an improved version of code found in Tim Cameron Ryan's IERange (http://code.google.com/p/ierange/) but has\n    // grown, fixing problems with line breaks in preformatted text, adding workaround for IE TextRange bugs, handling\n    // for inputs and images, plus optimizations.\n    function getTextRangeBoundaryPosition(textRange, wholeRangeContainerElement, isStart, isCollapsed) {\n        var workingRange = textRange.duplicate();\n\n        workingRange.collapse(isStart);\n        var containerElement = workingRange.parentElement();\n\n        // Sometimes collapsing a TextRange that's at the start of a text node can move it into the previous node, so\n        // check for that\n        // TODO: Find out when. Workaround for wholeRangeContainerElement may break this\n        if (!dom.isAncestorOf(wholeRangeContainerElement, containerElement, true)) {\n            containerElement = wholeRangeContainerElement;\n\n        }\n\n\n\n        // Deal with nodes that cannot \"contain rich HTML markup\". In practice, this means form inputs, images and\n        // similar. See http://msdn.microsoft.com/en-us/library/aa703950%28VS.85%29.aspx\n        if (!containerElement.canHaveHTML) {\n            return new DomPosition(containerElement.parentNode, dom.getNodeIndex(containerElement));\n        }\n\n        var workingNode = dom.getDocument(containerElement).createElement(\"span\");\n        var comparison, workingComparisonType = isStart ? \"StartToStart\" : \"StartToEnd\";\n        var previousNode, nextNode, boundaryPosition, boundaryNode;\n\n        // Move the working range through the container's children, starting at the end and working backwards, until the\n        // working range reaches or goes past the boundary we're interested in\n        do {\n            containerElement.insertBefore(workingNode, workingNode.previousSibling);\n            workingRange.moveToElementText(workingNode);\n        } while ( (comparison = workingRange.compareEndPoints(workingComparisonType, textRange)) > 0 &&\n                workingNode.previousSibling);\n\n        // We've now reached or gone past the boundary of the text range we're interested in\n        // so have identified the node we want\n        boundaryNode = workingNode.nextSibling;\n\n        if (comparison == -1 && boundaryNode && dom.isCharacterDataNode(boundaryNode)) {\n            // This is a character data node (text, comment, cdata). The working range is collapsed at the start of the\n            // node containing the text range's boundary, so we move the end of the working range to the boundary point\n            // and measure the length of its text to get the boundary's offset within the node.\n            workingRange.setEndPoint(isStart ? \"EndToStart\" : \"EndToEnd\", textRange);\n\n\n            var offset;\n\n            if (/[\\r\\n]/.test(boundaryNode.data)) {\n                /*\n                For the particular case of a boundary within a text node containing line breaks (within a <pre> element,\n                for example), we need a slightly complicated approach to get the boundary's offset in IE. The facts:\n\n                - Each line break is represented as \\r in the text node's data/nodeValue properties\n                - Each line break is represented as \\r\\n in the TextRange's 'text' property\n                - The 'text' property of the TextRange does not contain trailing line breaks\n\n                To get round the problem presented by the final fact above, we can use the fact that TextRange's\n                moveStart() and moveEnd() methods return the actual number of characters moved, which is not necessarily\n                the same as the number of characters it was instructed to move. The simplest approach is to use this to\n                store the characters moved when moving both the start and end of the range to the start of the document\n                body and subtracting the start offset from the end offset (the \"move-negative-gazillion\" method).\n                However, this is extremely slow when the document is large and the range is near the end of it. Clearly\n                doing the mirror image (i.e. moving the range boundaries to the end of the document) has the same\n                problem.\n\n                Another approach that works is to use moveStart() to move the start boundary of the range up to the end\n                boundary one character at a time and incrementing a counter with the value returned by the moveStart()\n                call. However, the check for whether the start boundary has reached the end boundary is expensive, so\n                this method is slow (although unlike \"move-negative-gazillion\" is largely unaffected by the location of\n                the range within the document).\n\n                The method below is a hybrid of the two methods above. It uses the fact that a string containing the\n                TextRange's 'text' property with each \\r\\n converted to a single \\r character cannot be longer than the\n                text of the TextRange, so the start of the range is moved that length initially and then a character at\n                a time to make up for any trailing line breaks not contained in the 'text' property. This has good\n                performance in most situations compared to the previous two methods.\n                */\n                var tempRange = workingRange.duplicate();\n                var rangeLength = tempRange.text.replace(/\\r\\n/g, \"\\r\").length;\n\n                offset = tempRange.moveStart(\"character\", rangeLength);\n                while ( (comparison = tempRange.compareEndPoints(\"StartToEnd\", tempRange)) == -1) {\n                    offset++;\n                    tempRange.moveStart(\"character\", 1);\n                }\n            } else {\n                offset = workingRange.text.length;\n            }\n            boundaryPosition = new DomPosition(boundaryNode, offset);\n        } else {\n\n\n            // If the boundary immediately follows a character data node and this is the end boundary, we should favour\n            // a position within that, and likewise for a start boundary preceding a character data node\n            previousNode = (isCollapsed || !isStart) && workingNode.previousSibling;\n            nextNode = (isCollapsed || isStart) && workingNode.nextSibling;\n\n\n\n            if (nextNode && dom.isCharacterDataNode(nextNode)) {\n                boundaryPosition = new DomPosition(nextNode, 0);\n            } else if (previousNode && dom.isCharacterDataNode(previousNode)) {\n                boundaryPosition = new DomPosition(previousNode, previousNode.length);\n            } else {\n                boundaryPosition = new DomPosition(containerElement, dom.getNodeIndex(workingNode));\n            }\n        }\n\n        // Clean up\n        workingNode.parentNode.removeChild(workingNode);\n\n        return boundaryPosition;\n    }\n\n    // Returns a TextRange representing the boundary of a TextRange expressed as a node and an offset within that node.\n    // This function started out as an optimized version of code found in Tim Cameron Ryan's IERange\n    // (http://code.google.com/p/ierange/)\n    function createBoundaryTextRange(boundaryPosition, isStart) {\n        var boundaryNode, boundaryParent, boundaryOffset = boundaryPosition.offset;\n        var doc = dom.getDocument(boundaryPosition.node);\n        var workingNode, childNodes, workingRange = doc.body.createTextRange();\n        var nodeIsDataNode = dom.isCharacterDataNode(boundaryPosition.node);\n\n        if (nodeIsDataNode) {\n            boundaryNode = boundaryPosition.node;\n            boundaryParent = boundaryNode.parentNode;\n        } else {\n            childNodes = boundaryPosition.node.childNodes;\n            boundaryNode = (boundaryOffset < childNodes.length) ? childNodes[boundaryOffset] : null;\n            boundaryParent = boundaryPosition.node;\n        }\n\n        // Position the range immediately before the node containing the boundary\n        workingNode = doc.createElement(\"span\");\n\n        // Making the working element non-empty element persuades IE to consider the TextRange boundary to be within the\n        // element rather than immediately before or after it, which is what we want\n        workingNode.innerHTML = \"&#feff;\";\n\n        // insertBefore is supposed to work like appendChild if the second parameter is null. However, a bug report\n        // for IERange suggests that it can crash the browser: http://code.google.com/p/ierange/issues/detail?id=12\n        if (boundaryNode) {\n            boundaryParent.insertBefore(workingNode, boundaryNode);\n        } else {\n            boundaryParent.appendChild(workingNode);\n        }\n\n        workingRange.moveToElementText(workingNode);\n        workingRange.collapse(!isStart);\n\n        // Clean up\n        boundaryParent.removeChild(workingNode);\n\n        // Move the working range to the text offset, if required\n        if (nodeIsDataNode) {\n            workingRange[isStart ? \"moveStart\" : \"moveEnd\"](\"character\", boundaryOffset);\n        }\n\n        return workingRange;\n    }\n\n    /*----------------------------------------------------------------------------------------------------------------*/\n\n    if (api.features.implementsDomRange && (!api.features.implementsTextRange || !api.config.preferTextRange)) {\n        // This is a wrapper around the browser's native DOM Range. It has two aims:\n        // - Provide workarounds for specific browser bugs\n        // - provide convenient extensions, which are inherited from Rangy's DomRange\n\n        (function() {\n            var rangeProto;\n            var rangeProperties = DomRange.rangeProperties;\n            var canSetRangeStartAfterEnd;\n\n            function updateRangeProperties(range) {\n                var i = rangeProperties.length, prop;\n                while (i--) {\n                    prop = rangeProperties[i];\n                    range[prop] = range.nativeRange[prop];\n                }\n            }\n\n            function updateNativeRange(range, startContainer, startOffset, endContainer,endOffset) {\n                var startMoved = (range.startContainer !== startContainer || range.startOffset != startOffset);\n                var endMoved = (range.endContainer !== endContainer || range.endOffset != endOffset);\n\n                // Always set both boundaries for the benefit of IE9 (see issue 35)\n                if (startMoved || endMoved) {\n                    range.setEnd(endContainer, endOffset);\n                    range.setStart(startContainer, startOffset);\n                }\n            }\n\n            function detach(range) {\n                range.nativeRange.detach();\n                range.detached = true;\n                var i = rangeProperties.length, prop;\n                while (i--) {\n                    prop = rangeProperties[i];\n                    range[prop] = null;\n                }\n            }\n\n            var createBeforeAfterNodeSetter;\n\n            WrappedRange = function(range) {\n                if (!range) {\n                    throw new Error(\"Range must be specified\");\n                }\n                this.nativeRange = range;\n                updateRangeProperties(this);\n            };\n\n            DomRange.createPrototypeRange(WrappedRange, updateNativeRange, detach);\n\n            rangeProto = WrappedRange.prototype;\n\n            rangeProto.selectNode = function(node) {\n                this.nativeRange.selectNode(node);\n                updateRangeProperties(this);\n            };\n\n            rangeProto.deleteContents = function() {\n                this.nativeRange.deleteContents();\n                updateRangeProperties(this);\n            };\n\n            rangeProto.extractContents = function() {\n                var frag = this.nativeRange.extractContents();\n                updateRangeProperties(this);\n                return frag;\n            };\n\n            rangeProto.cloneContents = function() {\n                return this.nativeRange.cloneContents();\n            };\n\n            // TODO: Until I can find a way to programmatically trigger the Firefox bug (apparently long-standing, still\n            // present in 3.6.8) that throws \"Index or size is negative or greater than the allowed amount\" for\n            // insertNode in some circumstances, all browsers will have to use the Rangy's own implementation of\n            // insertNode, which works but is almost certainly slower than the native implementation.\n/*\n            rangeProto.insertNode = function(node) {\n                this.nativeRange.insertNode(node);\n                updateRangeProperties(this);\n            };\n*/\n\n            rangeProto.surroundContents = function(node) {\n                this.nativeRange.surroundContents(node);\n                updateRangeProperties(this);\n            };\n\n            rangeProto.collapse = function(isStart) {\n                this.nativeRange.collapse(isStart);\n                updateRangeProperties(this);\n            };\n\n            rangeProto.cloneRange = function() {\n                return new WrappedRange(this.nativeRange.cloneRange());\n            };\n\n            rangeProto.refresh = function() {\n                updateRangeProperties(this);\n            };\n\n            rangeProto.toString = function() {\n                return this.nativeRange.toString();\n            };\n\n            // Create test range and node for feature detection\n\n            var testTextNode = document.createTextNode(\"test\");\n            dom.getBody(document).appendChild(testTextNode);\n            var range = document.createRange();\n\n            /*--------------------------------------------------------------------------------------------------------*/\n\n            // Test for Firefox 2 bug that prevents moving the start of a Range to a point after its current end and\n            // correct for it\n\n            range.setStart(testTextNode, 0);\n            range.setEnd(testTextNode, 0);\n\n            try {\n                range.setStart(testTextNode, 1);\n                canSetRangeStartAfterEnd = true;\n\n                rangeProto.setStart = function(node, offset) {\n                    this.nativeRange.setStart(node, offset);\n                    updateRangeProperties(this);\n                };\n\n                rangeProto.setEnd = function(node, offset) {\n                    this.nativeRange.setEnd(node, offset);\n                    updateRangeProperties(this);\n                };\n\n                createBeforeAfterNodeSetter = function(name) {\n                    return function(node) {\n                        this.nativeRange[name](node);\n                        updateRangeProperties(this);\n                    };\n                };\n\n            } catch(ex) {\n\n\n                canSetRangeStartAfterEnd = false;\n\n                rangeProto.setStart = function(node, offset) {\n                    try {\n                        this.nativeRange.setStart(node, offset);\n                    } catch (ex) {\n                        this.nativeRange.setEnd(node, offset);\n                        this.nativeRange.setStart(node, offset);\n                    }\n                    updateRangeProperties(this);\n                };\n\n                rangeProto.setEnd = function(node, offset) {\n                    try {\n                        this.nativeRange.setEnd(node, offset);\n                    } catch (ex) {\n                        this.nativeRange.setStart(node, offset);\n                        this.nativeRange.setEnd(node, offset);\n                    }\n                    updateRangeProperties(this);\n                };\n\n                createBeforeAfterNodeSetter = function(name, oppositeName) {\n                    return function(node) {\n                        try {\n                            this.nativeRange[name](node);\n                        } catch (ex) {\n                            this.nativeRange[oppositeName](node);\n                            this.nativeRange[name](node);\n                        }\n                        updateRangeProperties(this);\n                    };\n                };\n            }\n\n            rangeProto.setStartBefore = createBeforeAfterNodeSetter(\"setStartBefore\", \"setEndBefore\");\n            rangeProto.setStartAfter = createBeforeAfterNodeSetter(\"setStartAfter\", \"setEndAfter\");\n            rangeProto.setEndBefore = createBeforeAfterNodeSetter(\"setEndBefore\", \"setStartBefore\");\n            rangeProto.setEndAfter = createBeforeAfterNodeSetter(\"setEndAfter\", \"setStartAfter\");\n\n            /*--------------------------------------------------------------------------------------------------------*/\n\n            // Test for and correct Firefox 2 behaviour with selectNodeContents on text nodes: it collapses the range to\n            // the 0th character of the text node\n            range.selectNodeContents(testTextNode);\n            if (range.startContainer == testTextNode && range.endContainer == testTextNode &&\n                    range.startOffset == 0 && range.endOffset == testTextNode.length) {\n                rangeProto.selectNodeContents = function(node) {\n                    this.nativeRange.selectNodeContents(node);\n                    updateRangeProperties(this);\n                };\n            } else {\n                rangeProto.selectNodeContents = function(node) {\n                    this.setStart(node, 0);\n                    this.setEnd(node, DomRange.getEndOffset(node));\n                };\n            }\n\n            /*--------------------------------------------------------------------------------------------------------*/\n\n            // Test for WebKit bug that has the beahviour of compareBoundaryPoints round the wrong way for constants\n            // START_TO_END and END_TO_START: https://bugs.webkit.org/show_bug.cgi?id=20738\n\n            range.selectNodeContents(testTextNode);\n            range.setEnd(testTextNode, 3);\n\n            var range2 = document.createRange();\n            range2.selectNodeContents(testTextNode);\n            range2.setEnd(testTextNode, 4);\n            range2.setStart(testTextNode, 2);\n\n            if (range.compareBoundaryPoints(range.START_TO_END, range2) == -1 &\n                    range.compareBoundaryPoints(range.END_TO_START, range2) == 1) {\n                // This is the wrong way round, so correct for it\n\n\n                rangeProto.compareBoundaryPoints = function(type, range) {\n                    range = range.nativeRange || range;\n                    if (type == range.START_TO_END) {\n                        type = range.END_TO_START;\n                    } else if (type == range.END_TO_START) {\n                        type = range.START_TO_END;\n                    }\n                    return this.nativeRange.compareBoundaryPoints(type, range);\n                };\n            } else {\n                rangeProto.compareBoundaryPoints = function(type, range) {\n                    return this.nativeRange.compareBoundaryPoints(type, range.nativeRange || range);\n                };\n            }\n\n            /*--------------------------------------------------------------------------------------------------------*/\n\n            // Test for existence of createContextualFragment and delegate to it if it exists\n            if (api.util.isHostMethod(range, \"createContextualFragment\")) {\n                rangeProto.createContextualFragment = function(fragmentStr) {\n                    return this.nativeRange.createContextualFragment(fragmentStr);\n                };\n            }\n\n            /*--------------------------------------------------------------------------------------------------------*/\n\n            // Clean up\n            dom.getBody(document).removeChild(testTextNode);\n            range.detach();\n            range2.detach();\n        })();\n\n        api.createNativeRange = function(doc) {\n            doc = doc || document;\n            return doc.createRange();\n        };\n    } else if (api.features.implementsTextRange) {\n        // This is a wrapper around a TextRange, providing full DOM Range functionality using rangy's DomRange as a\n        // prototype\n\n        WrappedRange = function(textRange) {\n            this.textRange = textRange;\n            this.refresh();\n        };\n\n        WrappedRange.prototype = new DomRange(document);\n\n        WrappedRange.prototype.refresh = function() {\n            var start, end;\n\n            // TextRange's parentElement() method cannot be trusted. getTextRangeContainerElement() works around that.\n            var rangeContainerElement = getTextRangeContainerElement(this.textRange);\n\n            if (textRangeIsCollapsed(this.textRange)) {\n                end = start = getTextRangeBoundaryPosition(this.textRange, rangeContainerElement, true, true);\n            } else {\n\n                start = getTextRangeBoundaryPosition(this.textRange, rangeContainerElement, true, false);\n                end = getTextRangeBoundaryPosition(this.textRange, rangeContainerElement, false, false);\n            }\n\n            this.setStart(start.node, start.offset);\n            this.setEnd(end.node, end.offset);\n        };\n\n        DomRange.copyComparisonConstants(WrappedRange);\n\n        // Add WrappedRange as the Range property of the global object to allow expression like Range.END_TO_END to work\n        var globalObj = (function() { return this; })();\n        if (typeof globalObj.Range == \"undefined\") {\n            globalObj.Range = WrappedRange;\n        }\n\n        api.createNativeRange = function(doc) {\n            doc = doc || document;\n            return doc.body.createTextRange();\n        };\n    }\n\n    if (api.features.implementsTextRange) {\n        WrappedRange.rangeToTextRange = function(range) {\n            if (range.collapsed) {\n                var tr = createBoundaryTextRange(new DomPosition(range.startContainer, range.startOffset), true);\n\n\n\n                return tr;\n\n                //return createBoundaryTextRange(new DomPosition(range.startContainer, range.startOffset), true);\n            } else {\n                var startRange = createBoundaryTextRange(new DomPosition(range.startContainer, range.startOffset), true);\n                var endRange = createBoundaryTextRange(new DomPosition(range.endContainer, range.endOffset), false);\n                var textRange = dom.getDocument(range.startContainer).body.createTextRange();\n                textRange.setEndPoint(\"StartToStart\", startRange);\n                textRange.setEndPoint(\"EndToEnd\", endRange);\n                return textRange;\n            }\n        };\n    }\n\n    WrappedRange.prototype.getName = function() {\n        return \"WrappedRange\";\n    };\n\n    api.WrappedRange = WrappedRange;\n\n    api.createRange = function(doc) {\n        doc = doc || document;\n        return new WrappedRange(api.createNativeRange(doc));\n    };\n\n    api.createRangyRange = function(doc) {\n        doc = doc || document;\n        return new DomRange(doc);\n    };\n\n    api.createIframeRange = function(iframeEl) {\n        return api.createRange(dom.getIframeDocument(iframeEl));\n    };\n\n    api.createIframeRangyRange = function(iframeEl) {\n        return api.createRangyRange(dom.getIframeDocument(iframeEl));\n    };\n\n    api.addCreateMissingNativeApiListener(function(win) {\n        var doc = win.document;\n        if (typeof doc.createRange == \"undefined\") {\n            doc.createRange = function() {\n                return api.createRange(this);\n            };\n        }\n        doc = win = null;\n    });\n});rangy.createModule(\"WrappedSelection\", function(api, module) {\n    // This will create a selection object wrapper that follows the Selection object found in the WHATWG draft DOM Range\n    // spec (http://html5.org/specs/dom-range.html)\n\n    api.requireModules( [\"DomUtil\", \"DomRange\", \"WrappedRange\"] );\n\n    api.config.checkSelectionRanges = true;\n\n    var BOOLEAN = \"boolean\",\n        windowPropertyName = \"_rangySelection\",\n        dom = api.dom,\n        util = api.util,\n        DomRange = api.DomRange,\n        WrappedRange = api.WrappedRange,\n        DOMException = api.DOMException,\n        DomPosition = dom.DomPosition,\n        getSelection,\n        selectionIsCollapsed,\n        CONTROL = \"Control\";\n\n\n\n    function getWinSelection(winParam) {\n        return (winParam || window).getSelection();\n    }\n\n    function getDocSelection(winParam) {\n        return (winParam || window).document.selection;\n    }\n\n    // Test for the Range/TextRange and Selection features required\n    // Test for ability to retrieve selection\n    var implementsWinGetSelection = api.util.isHostMethod(window, \"getSelection\"),\n        implementsDocSelection = api.util.isHostObject(document, \"selection\");\n\n    var useDocumentSelection = implementsDocSelection && (!implementsWinGetSelection || api.config.preferTextRange);\n\n    if (useDocumentSelection) {\n        getSelection = getDocSelection;\n        api.isSelectionValid = function(winParam) {\n            var doc = (winParam || window).document, nativeSel = doc.selection;\n\n            // Check whether the selection TextRange is actually contained within the correct document\n            return (nativeSel.type != \"None\" || dom.getDocument(nativeSel.createRange().parentElement()) == doc);\n        };\n    } else if (implementsWinGetSelection) {\n        getSelection = getWinSelection;\n        api.isSelectionValid = function() {\n            return true;\n        };\n    } else {\n        module.fail(\"Neither document.selection or window.getSelection() detected.\");\n    }\n\n    api.getNativeSelection = getSelection;\n\n    var testSelection = getSelection();\n    var testRange = api.createNativeRange(document);\n    var body = dom.getBody(document);\n\n    // Obtaining a range from a selection\n    var selectionHasAnchorAndFocus = util.areHostObjects(testSelection, [\"anchorNode\", \"focusNode\"] &&\n                                     util.areHostProperties(testSelection, [\"anchorOffset\", \"focusOffset\"]));\n    api.features.selectionHasAnchorAndFocus = selectionHasAnchorAndFocus;\n\n    // Test for existence of native selection extend() method\n    var selectionHasExtend = util.isHostMethod(testSelection, \"extend\");\n    api.features.selectionHasExtend = selectionHasExtend;\n\n    // Test if rangeCount exists\n    var selectionHasRangeCount = (typeof testSelection.rangeCount == \"number\");\n    api.features.selectionHasRangeCount = selectionHasRangeCount;\n\n    var selectionSupportsMultipleRanges = false;\n    var collapsedNonEditableSelectionsSupported = true;\n\n    if (util.areHostMethods(testSelection, [\"addRange\", \"getRangeAt\", \"removeAllRanges\"]) &&\n            typeof testSelection.rangeCount == \"number\" && api.features.implementsDomRange) {\n\n        (function() {\n            var iframe = document.createElement(\"iframe\");\n            body.appendChild(iframe);\n\n            var iframeDoc = dom.getIframeDocument(iframe);\n            iframeDoc.open();\n            iframeDoc.write(\"<html><head></head><body>12</body></html>\");\n            iframeDoc.close();\n\n            var sel = dom.getIframeWindow(iframe).getSelection();\n            var docEl = iframeDoc.documentElement;\n            var iframeBody = docEl.lastChild, textNode = iframeBody.firstChild;\n\n            // Test whether the native selection will allow a collapsed selection within a non-editable element\n            var r1 = iframeDoc.createRange();\n            r1.setStart(textNode, 1);\n            r1.collapse(true);\n            sel.addRange(r1);\n            collapsedNonEditableSelectionsSupported = (sel.rangeCount == 1);\n            sel.removeAllRanges();\n\n            // Test whether the native selection is capable of supporting multiple ranges\n            var r2 = r1.cloneRange();\n            r1.setStart(textNode, 0);\n            r2.setEnd(textNode, 2);\n            sel.addRange(r1);\n            sel.addRange(r2);\n\n            selectionSupportsMultipleRanges = (sel.rangeCount == 2);\n\n            // Clean up\n            r1.detach();\n            r2.detach();\n\n            body.removeChild(iframe);\n        })();\n    }\n\n    api.features.selectionSupportsMultipleRanges = selectionSupportsMultipleRanges;\n    api.features.collapsedNonEditableSelectionsSupported = collapsedNonEditableSelectionsSupported;\n\n    // ControlRanges\n    var implementsControlRange = false, testControlRange;\n\n    if (body && util.isHostMethod(body, \"createControlRange\")) {\n        testControlRange = body.createControlRange();\n        if (util.areHostProperties(testControlRange, [\"item\", \"add\"])) {\n            implementsControlRange = true;\n        }\n    }\n    api.features.implementsControlRange = implementsControlRange;\n\n    // Selection collapsedness\n    if (selectionHasAnchorAndFocus) {\n        selectionIsCollapsed = function(sel) {\n            return sel.anchorNode === sel.focusNode && sel.anchorOffset === sel.focusOffset;\n        };\n    } else {\n        selectionIsCollapsed = function(sel) {\n            return sel.rangeCount ? sel.getRangeAt(sel.rangeCount - 1).collapsed : false;\n        };\n    }\n\n    function updateAnchorAndFocusFromRange(sel, range, backwards) {\n        var anchorPrefix = backwards ? \"end\" : \"start\", focusPrefix = backwards ? \"start\" : \"end\";\n        sel.anchorNode = range[anchorPrefix + \"Container\"];\n        sel.anchorOffset = range[anchorPrefix + \"Offset\"];\n        sel.focusNode = range[focusPrefix + \"Container\"];\n        sel.focusOffset = range[focusPrefix + \"Offset\"];\n    }\n\n    function updateAnchorAndFocusFromNativeSelection(sel) {\n        var nativeSel = sel.nativeSelection;\n        sel.anchorNode = nativeSel.anchorNode;\n        sel.anchorOffset = nativeSel.anchorOffset;\n        sel.focusNode = nativeSel.focusNode;\n        sel.focusOffset = nativeSel.focusOffset;\n    }\n\n    function updateEmptySelection(sel) {\n        sel.anchorNode = sel.focusNode = null;\n        sel.anchorOffset = sel.focusOffset = 0;\n        sel.rangeCount = 0;\n        sel.isCollapsed = true;\n        sel._ranges.length = 0;\n    }\n\n    function getNativeRange(range) {\n        var nativeRange;\n        if (range instanceof DomRange) {\n            nativeRange = range._selectionNativeRange;\n            if (!nativeRange) {\n                nativeRange = api.createNativeRange(dom.getDocument(range.startContainer));\n                nativeRange.setEnd(range.endContainer, range.endOffset);\n                nativeRange.setStart(range.startContainer, range.startOffset);\n                range._selectionNativeRange = nativeRange;\n                range.attachListener(\"detach\", function() {\n\n                    this._selectionNativeRange = null;\n                });\n            }\n        } else if (range instanceof WrappedRange) {\n            nativeRange = range.nativeRange;\n        } else if (api.features.implementsDomRange && (range instanceof dom.getWindow(range.startContainer).Range)) {\n            nativeRange = range;\n        }\n        return nativeRange;\n    }\n\n    function rangeContainsSingleElement(rangeNodes) {\n        if (!rangeNodes.length || rangeNodes[0].nodeType != 1) {\n            return false;\n        }\n        for (var i = 1, len = rangeNodes.length; i < len; ++i) {\n            if (!dom.isAncestorOf(rangeNodes[0], rangeNodes[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function getSingleElementFromRange(range) {\n        var nodes = range.getNodes();\n        if (!rangeContainsSingleElement(nodes)) {\n            throw new Error(\"getSingleElementFromRange: range \" + range.inspect() + \" did not consist of a single element\");\n        }\n        return nodes[0];\n    }\n\n    function isTextRange(range) {\n        return !!range && typeof range.text != \"undefined\";\n    }\n\n    function updateFromTextRange(sel, range) {\n        // Create a Range from the selected TextRange\n        var wrappedRange = new WrappedRange(range);\n        sel._ranges = [wrappedRange];\n\n        updateAnchorAndFocusFromRange(sel, wrappedRange, false);\n        sel.rangeCount = 1;\n        sel.isCollapsed = wrappedRange.collapsed;\n    }\n\n    function updateControlSelection(sel) {\n        // Update the wrapped selection based on what's now in the native selection\n        sel._ranges.length = 0;\n        if (sel.docSelection.type == \"None\") {\n            updateEmptySelection(sel);\n        } else {\n            var controlRange = sel.docSelection.createRange();\n            if (isTextRange(controlRange)) {\n                // This case (where the selection type is \"Control\" and calling createRange() on the selection returns\n                // a TextRange) can happen in IE 9. It happens, for example, when all elements in the selected\n                // ControlRange have been removed from the ControlRange and removed from the document.\n                updateFromTextRange(sel, controlRange);\n            } else {\n                sel.rangeCount = controlRange.length;\n                var range, doc = dom.getDocument(controlRange.item(0));\n                for (var i = 0; i < sel.rangeCount; ++i) {\n                    range = api.createRange(doc);\n                    range.selectNode(controlRange.item(i));\n                    sel._ranges.push(range);\n                }\n                sel.isCollapsed = sel.rangeCount == 1 && sel._ranges[0].collapsed;\n                updateAnchorAndFocusFromRange(sel, sel._ranges[sel.rangeCount - 1], false);\n            }\n        }\n    }\n\n    function addRangeToControlSelection(sel, range) {\n        var controlRange = sel.docSelection.createRange();\n        var rangeElement = getSingleElementFromRange(range);\n\n        // Create a new ControlRange containing all the elements in the selected ControlRange plus the element\n        // contained by the supplied range\n        var doc = dom.getDocument(controlRange.item(0));\n        var newControlRange = dom.getBody(doc).createControlRange();\n        for (var i = 0, len = controlRange.length; i < len; ++i) {\n            newControlRange.add(controlRange.item(i));\n        }\n        try {\n            newControlRange.add(rangeElement);\n        } catch (ex) {\n            throw new Error(\"addRange(): Element within the specified Range could not be added to control selection (does it have layout?)\");\n        }\n        newControlRange.select();\n\n        // Update the wrapped selection based on what's now in the native selection\n        updateControlSelection(sel);\n    }\n\n    var getSelectionRangeAt;\n\n    if (util.isHostMethod(testSelection,  \"getRangeAt\")) {\n        getSelectionRangeAt = function(sel, index) {\n            try {\n                return sel.getRangeAt(index);\n            } catch(ex) {\n                return null;\n            }\n        };\n    } else if (selectionHasAnchorAndFocus) {\n        getSelectionRangeAt = function(sel) {\n            var doc = dom.getDocument(sel.anchorNode);\n            var range = api.createRange(doc);\n            range.setStart(sel.anchorNode, sel.anchorOffset);\n            range.setEnd(sel.focusNode, sel.focusOffset);\n\n            // Handle the case when the selection was selected backwards (from the end to the start in the\n            // document)\n            if (range.collapsed !== this.isCollapsed) {\n                range.setStart(sel.focusNode, sel.focusOffset);\n                range.setEnd(sel.anchorNode, sel.anchorOffset);\n            }\n\n            return range;\n        };\n    }\n\n    /**\n     * @constructor\n     */\n    function WrappedSelection(selection, docSelection, win) {\n        this.nativeSelection = selection;\n        this.docSelection = docSelection;\n        this._ranges = [];\n        this.win = win;\n        this.refresh();\n    }\n\n    api.getSelection = function(win) {\n        win = win || window;\n        var sel = win[windowPropertyName];\n        var nativeSel = getSelection(win), docSel = implementsDocSelection ? getDocSelection(win) : null;\n        if (sel) {\n            sel.nativeSelection = nativeSel;\n            sel.docSelection = docSel;\n            sel.refresh(win);\n        } else {\n            sel = new WrappedSelection(nativeSel, docSel, win);\n            win[windowPropertyName] = sel;\n        }\n        return sel;\n    };\n\n    api.getIframeSelection = function(iframeEl) {\n        return api.getSelection(dom.getIframeWindow(iframeEl));\n    };\n\n    var selProto = WrappedSelection.prototype;\n\n    function createControlSelection(sel, ranges) {\n        // Ensure that the selection becomes of type \"Control\"\n        var doc = dom.getDocument(ranges[0].startContainer);\n        var controlRange = dom.getBody(doc).createControlRange();\n        for (var i = 0, el; i < rangeCount; ++i) {\n            el = getSingleElementFromRange(ranges[i]);\n            try {\n                controlRange.add(el);\n            } catch (ex) {\n                throw new Error(\"setRanges(): Element within the one of the specified Ranges could not be added to control selection (does it have layout?)\");\n            }\n        }\n        controlRange.select();\n\n        // Update the wrapped selection based on what's now in the native selection\n        updateControlSelection(sel);\n    }\n\n    // Selecting a range\n    if (!useDocumentSelection && selectionHasAnchorAndFocus && util.areHostMethods(testSelection, [\"removeAllRanges\", \"addRange\"])) {\n        selProto.removeAllRanges = function() {\n            this.nativeSelection.removeAllRanges();\n            updateEmptySelection(this);\n        };\n\n        var addRangeBackwards = function(sel, range) {\n            var doc = DomRange.getRangeDocument(range);\n            var endRange = api.createRange(doc);\n            endRange.collapseToPoint(range.endContainer, range.endOffset);\n            sel.nativeSelection.addRange(getNativeRange(endRange));\n            sel.nativeSelection.extend(range.startContainer, range.startOffset);\n            sel.refresh();\n        };\n\n        if (selectionHasRangeCount) {\n            selProto.addRange = function(range, backwards) {\n                if (implementsControlRange && implementsDocSelection && this.docSelection.type == CONTROL) {\n                    addRangeToControlSelection(this, range);\n                } else {\n                    if (backwards && selectionHasExtend) {\n                        addRangeBackwards(this, range);\n                    } else {\n                        var previousRangeCount;\n                        if (selectionSupportsMultipleRanges) {\n                            previousRangeCount = this.rangeCount;\n                        } else {\n                            this.removeAllRanges();\n                            previousRangeCount = 0;\n                        }\n                        this.nativeSelection.addRange(getNativeRange(range));\n\n                        // Check whether adding the range was successful\n                        this.rangeCount = this.nativeSelection.rangeCount;\n\n                        if (this.rangeCount == previousRangeCount + 1) {\n                            // The range was added successfully\n\n                            // Check whether the range that we added to the selection is reflected in the last range extracted from\n                            // the selection\n                            if (api.config.checkSelectionRanges) {\n                                var nativeRange = getSelectionRangeAt(this.nativeSelection, this.rangeCount - 1);\n                                if (nativeRange && !DomRange.rangesEqual(nativeRange, range)) {\n                                    // Happens in WebKit with, for example, a selection placed at the start of a text node\n                                    range = new WrappedRange(nativeRange);\n                                }\n                            }\n                            this._ranges[this.rangeCount - 1] = range;\n                            updateAnchorAndFocusFromRange(this, range, selectionIsBackwards(this.nativeSelection));\n                            this.isCollapsed = selectionIsCollapsed(this);\n                        } else {\n                            // The range was not added successfully. The simplest thing is to refresh\n                            this.refresh();\n                        }\n                    }\n                }\n            };\n        } else {\n            selProto.addRange = function(range, backwards) {\n                if (backwards && selectionHasExtend) {\n                    addRangeBackwards(this, range);\n                } else {\n                    this.nativeSelection.addRange(getNativeRange(range));\n                    this.refresh();\n                }\n            };\n        }\n\n        selProto.setRanges = function(ranges) {\n            if (implementsControlRange && ranges.length > 1) {\n                createControlSelection(this, ranges);\n            } else {\n                this.removeAllRanges();\n                for (var i = 0, len = ranges.length; i < len; ++i) {\n                    this.addRange(ranges[i]);\n                }\n            }\n        };\n    } else if (util.isHostMethod(testSelection, \"empty\") && util.isHostMethod(testRange, \"select\") &&\n               implementsControlRange && useDocumentSelection) {\n\n        selProto.removeAllRanges = function() {\n            // Added try/catch as fix for issue #21\n            try {\n                this.docSelection.empty();\n\n                // Check for empty() not working (issue #24)\n                if (this.docSelection.type != \"None\") {\n                    // Work around failure to empty a control selection by instead selecting a TextRange and then\n                    // calling empty()\n                    var doc;\n                    if (this.anchorNode) {\n                        doc = dom.getDocument(this.anchorNode);\n                    } else if (this.docSelection.type == CONTROL) {\n                        var controlRange = this.docSelection.createRange();\n                        if (controlRange.length) {\n                            doc = dom.getDocument(controlRange.item(0)).body.createTextRange();\n                        }\n                    }\n                    if (doc) {\n                        var textRange = doc.body.createTextRange();\n                        textRange.select();\n                        this.docSelection.empty();\n                    }\n                }\n            } catch(ex) {}\n            updateEmptySelection(this);\n        };\n\n        selProto.addRange = function(range) {\n            if (this.docSelection.type == CONTROL) {\n                addRangeToControlSelection(this, range);\n            } else {\n                WrappedRange.rangeToTextRange(range).select();\n                this._ranges[0] = range;\n                this.rangeCount = 1;\n                this.isCollapsed = this._ranges[0].collapsed;\n                updateAnchorAndFocusFromRange(this, range, false);\n            }\n        };\n\n        selProto.setRanges = function(ranges) {\n            this.removeAllRanges();\n            var rangeCount = ranges.length;\n            if (rangeCount > 1) {\n                createControlSelection(this, ranges);\n            } else if (rangeCount) {\n                this.addRange(ranges[0]);\n            }\n        };\n    } else {\n        module.fail(\"No means of selecting a Range or TextRange was found\");\n        return false;\n    }\n\n    selProto.getRangeAt = function(index) {\n        if (index < 0 || index >= this.rangeCount) {\n            throw new DOMException(\"INDEX_SIZE_ERR\");\n        } else {\n            return this._ranges[index];\n        }\n    };\n\n    var refreshSelection;\n\n    if (useDocumentSelection) {\n        refreshSelection = function(sel) {\n            var range;\n            if (api.isSelectionValid(sel.win)) {\n                range = sel.docSelection.createRange();\n            } else {\n                range = dom.getBody(sel.win.document).createTextRange();\n                range.collapse(true);\n            }\n\n\n            if (sel.docSelection.type == CONTROL) {\n                updateControlSelection(sel);\n            } else if (isTextRange(range)) {\n                updateFromTextRange(sel, range);\n            } else {\n                updateEmptySelection(sel);\n            }\n        };\n    } else if (util.isHostMethod(testSelection, \"getRangeAt\") && typeof testSelection.rangeCount == \"number\") {\n        refreshSelection = function(sel) {\n            if (implementsControlRange && implementsDocSelection && sel.docSelection.type == CONTROL) {\n                updateControlSelection(sel);\n            } else {\n                sel._ranges.length = sel.rangeCount = sel.nativeSelection.rangeCount;\n                if (sel.rangeCount) {\n                    for (var i = 0, len = sel.rangeCount; i < len; ++i) {\n                        sel._ranges[i] = new api.WrappedRange(sel.nativeSelection.getRangeAt(i));\n                    }\n                    updateAnchorAndFocusFromRange(sel, sel._ranges[sel.rangeCount - 1], selectionIsBackwards(sel.nativeSelection));\n                    sel.isCollapsed = selectionIsCollapsed(sel);\n                } else {\n                    updateEmptySelection(sel);\n                }\n            }\n        };\n    } else if (selectionHasAnchorAndFocus && typeof testSelection.isCollapsed == BOOLEAN && typeof testRange.collapsed == BOOLEAN && api.features.implementsDomRange) {\n        refreshSelection = function(sel) {\n            var range, nativeSel = sel.nativeSelection;\n            if (nativeSel.anchorNode) {\n                range = getSelectionRangeAt(nativeSel, 0);\n                sel._ranges = [range];\n                sel.rangeCount = 1;\n                updateAnchorAndFocusFromNativeSelection(sel);\n                sel.isCollapsed = selectionIsCollapsed(sel);\n            } else {\n                updateEmptySelection(sel);\n            }\n        };\n    } else {\n        module.fail(\"No means of obtaining a Range or TextRange from the user's selection was found\");\n        return false;\n    }\n\n    selProto.refresh = function(checkForChanges) {\n        var oldRanges = checkForChanges ? this._ranges.slice(0) : null;\n        refreshSelection(this);\n        if (checkForChanges) {\n            var i = oldRanges.length;\n            if (i != this._ranges.length) {\n                return false;\n            }\n            while (i--) {\n                if (!DomRange.rangesEqual(oldRanges[i], this._ranges[i])) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    };\n\n    // Removal of a single range\n    var removeRangeManually = function(sel, range) {\n        var ranges = sel.getAllRanges(), removed = false;\n        sel.removeAllRanges();\n        for (var i = 0, len = ranges.length; i < len; ++i) {\n            if (removed || range !== ranges[i]) {\n                sel.addRange(ranges[i]);\n            } else {\n                // According to the draft WHATWG Range spec, the same range may be added to the selection multiple\n                // times. removeRange should only remove the first instance, so the following ensures only the first\n                // instance is removed\n                removed = true;\n            }\n        }\n        if (!sel.rangeCount) {\n            updateEmptySelection(sel);\n        }\n    };\n\n    if (implementsControlRange) {\n        selProto.removeRange = function(range) {\n            if (this.docSelection.type == CONTROL) {\n                var controlRange = this.docSelection.createRange();\n                var rangeElement = getSingleElementFromRange(range);\n\n                // Create a new ControlRange containing all the elements in the selected ControlRange minus the\n                // element contained by the supplied range\n                var doc = dom.getDocument(controlRange.item(0));\n                var newControlRange = dom.getBody(doc).createControlRange();\n                var el, removed = false;\n                for (var i = 0, len = controlRange.length; i < len; ++i) {\n                    el = controlRange.item(i);\n                    if (el !== rangeElement || removed) {\n                        newControlRange.add(controlRange.item(i));\n                    } else {\n                        removed = true;\n                    }\n                }\n                newControlRange.select();\n\n                // Update the wrapped selection based on what's now in the native selection\n                updateControlSelection(this);\n            } else {\n                removeRangeManually(this, range);\n            }\n        };\n    } else {\n        selProto.removeRange = function(range) {\n            removeRangeManually(this, range);\n        };\n    }\n\n    // Detecting if a selection is backwards\n    var selectionIsBackwards;\n    if (!useDocumentSelection && selectionHasAnchorAndFocus && api.features.implementsDomRange) {\n        selectionIsBackwards = function(sel) {\n            var backwards = false;\n            if (sel.anchorNode) {\n                backwards = (dom.comparePoints(sel.anchorNode, sel.anchorOffset, sel.focusNode, sel.focusOffset) == 1);\n            }\n            return backwards;\n        };\n\n        selProto.isBackwards = function() {\n            return selectionIsBackwards(this);\n        };\n    } else {\n        selectionIsBackwards = selProto.isBackwards = function() {\n            return false;\n        };\n    }\n\n    // Selection text\n    // This is conformant to the new WHATWG DOM Range draft spec but differs from WebKit and Mozilla's implementation\n    selProto.toString = function() {\n\n        var rangeTexts = [];\n        for (var i = 0, len = this.rangeCount; i < len; ++i) {\n            rangeTexts[i] = \"\" + this._ranges[i];\n        }\n        return rangeTexts.join(\"\");\n    };\n\n    function assertNodeInSameDocument(sel, node) {\n        if (sel.anchorNode && (dom.getDocument(sel.anchorNode) !== dom.getDocument(node))) {\n            throw new DOMException(\"WRONG_DOCUMENT_ERR\");\n        }\n    }\n\n    // No current browsers conform fully to the HTML 5 draft spec for this method, so Rangy's own method is always used\n    selProto.collapse = function(node, offset) {\n        assertNodeInSameDocument(this, node);\n        var range = api.createRange(dom.getDocument(node));\n        range.collapseToPoint(node, offset);\n        this.removeAllRanges();\n        this.addRange(range);\n        this.isCollapsed = true;\n    };\n\n    selProto.collapseToStart = function() {\n        if (this.rangeCount) {\n            var range = this._ranges[0];\n            this.collapse(range.startContainer, range.startOffset);\n        } else {\n            throw new DOMException(\"INVALID_STATE_ERR\");\n        }\n    };\n\n    selProto.collapseToEnd = function() {\n        if (this.rangeCount) {\n            var range = this._ranges[this.rangeCount - 1];\n            this.collapse(range.endContainer, range.endOffset);\n        } else {\n            throw new DOMException(\"INVALID_STATE_ERR\");\n        }\n    };\n\n    // The HTML 5 spec is very specific on how selectAllChildren should be implemented so the native implementation is\n    // never used by Rangy.\n    selProto.selectAllChildren = function(node) {\n        assertNodeInSameDocument(this, node);\n        var range = api.createRange(dom.getDocument(node));\n        range.selectNodeContents(node);\n        this.removeAllRanges();\n        this.addRange(range);\n    };\n\n    selProto.deleteFromDocument = function() {\n        // Sepcial behaviour required for Control selections\n        if (implementsControlRange && implementsDocSelection && this.docSelection.type == CONTROL) {\n            var controlRange = this.docSelection.createRange();\n            var element;\n            while (controlRange.length) {\n                element = controlRange.item(0);\n                controlRange.remove(element);\n                element.parentNode.removeChild(element);\n            }\n            this.refresh();\n        } else if (this.rangeCount) {\n            var ranges = this.getAllRanges();\n            this.removeAllRanges();\n            for (var i = 0, len = ranges.length; i < len; ++i) {\n                ranges[i].deleteContents();\n            }\n            // The HTML5 spec says nothing about what the selection should contain after calling deleteContents on each\n            // range. Firefox moves the selection to where the final selected range was, so we emulate that\n            this.addRange(ranges[len - 1]);\n        }\n    };\n\n    // The following are non-standard extensions\n    selProto.getAllRanges = function() {\n        return this._ranges.slice(0);\n    };\n\n    selProto.setSingleRange = function(range) {\n        this.setRanges( [range] );\n    };\n\n    selProto.containsNode = function(node, allowPartial) {\n        for (var i = 0, len = this._ranges.length; i < len; ++i) {\n            if (this._ranges[i].containsNode(node, allowPartial)) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    selProto.toHtml = function() {\n        var html = \"\";\n        if (this.rangeCount) {\n            var container = DomRange.getRangeDocument(this._ranges[0]).createElement(\"div\");\n            for (var i = 0, len = this._ranges.length; i < len; ++i) {\n                container.appendChild(this._ranges[i].cloneContents());\n            }\n            html = container.innerHTML;\n        }\n        return html;\n    };\n\n    function inspect(sel) {\n        var rangeInspects = [];\n        var anchor = new DomPosition(sel.anchorNode, sel.anchorOffset);\n        var focus = new DomPosition(sel.focusNode, sel.focusOffset);\n        var name = (typeof sel.getName == \"function\") ? sel.getName() : \"Selection\";\n\n        if (typeof sel.rangeCount != \"undefined\") {\n            for (var i = 0, len = sel.rangeCount; i < len; ++i) {\n                rangeInspects[i] = DomRange.inspect(sel.getRangeAt(i));\n            }\n        }\n        return \"[\" + name + \"(Ranges: \" + rangeInspects.join(\", \") +\n                \")(anchor: \" + anchor.inspect() + \", focus: \" + focus.inspect() + \"]\";\n\n    }\n\n    selProto.getName = function() {\n        return \"WrappedSelection\";\n    };\n\n    selProto.inspect = function() {\n        return inspect(this);\n    };\n\n    selProto.detach = function() {\n        this.win[windowPropertyName] = null;\n        this.win = this.anchorNode = this.focusNode = null;\n    };\n\n    WrappedSelection.inspect = inspect;\n\n    api.Selection = WrappedSelection;\n\n    api.selectionPrototype = selProto;\n\n    api.addCreateMissingNativeApiListener(function(win) {\n        if (typeof win.getSelection == \"undefined\") {\n            win.getSelection = function() {\n                return api.getSelection(this);\n            };\n        }\n        win = null;\n    });\n});\n/*\n\tBase.js, version 1.1a\n\tCopyright 2006-2010, Dean Edwards\n\tLicense: http://www.opensource.org/licenses/mit-license.php\n*/\n\nvar Base = function() {\n\t// dummy\n};\n\nBase.extend = function(_instance, _static) { // subclass\n\tvar extend = Base.prototype.extend;\n\t\n\t// build the prototype\n\tBase._prototyping = true;\n\tvar proto = new this;\n\textend.call(proto, _instance);\n  proto.base = function() {\n    // call this method from any other method to invoke that method's ancestor\n  };\n\tdelete Base._prototyping;\n\t\n\t// create the wrapper for the constructor function\n\t//var constructor = proto.constructor.valueOf(); //-dean\n\tvar constructor = proto.constructor;\n\tvar klass = proto.constructor = function() {\n\t\tif (!Base._prototyping) {\n\t\t\tif (this._constructing || this.constructor == klass) { // instantiation\n\t\t\t\tthis._constructing = true;\n\t\t\t\tconstructor.apply(this, arguments);\n\t\t\t\tdelete this._constructing;\n\t\t\t} else if (arguments[0] != null) { // casting\n\t\t\t\treturn (arguments[0].extend || extend).call(arguments[0], proto);\n\t\t\t}\n\t\t}\n\t};\n\t\n\t// build the class interface\n\tklass.ancestor = this;\n\tklass.extend = this.extend;\n\tklass.forEach = this.forEach;\n\tklass.implement = this.implement;\n\tklass.prototype = proto;\n\tklass.toString = this.toString;\n\tklass.valueOf = function(type) {\n\t\t//return (type == \"object\") ? klass : constructor; //-dean\n\t\treturn (type == \"object\") ? klass : constructor.valueOf();\n\t};\n\textend.call(klass, _static);\n\t// class initialisation\n\tif (typeof klass.init == \"function\") klass.init();\n\treturn klass;\n};\n\nBase.prototype = {\t\n\textend: function(source, value) {\n\t\tif (arguments.length > 1) { // extending with a name/value pair\n\t\t\tvar ancestor = this[source];\n\t\t\tif (ancestor && (typeof value == \"function\") && // overriding a method?\n\t\t\t\t// the valueOf() comparison is to avoid circular references\n\t\t\t\t(!ancestor.valueOf || ancestor.valueOf() != value.valueOf()) &&\n\t\t\t\t/\\bbase\\b/.test(value)) {\n\t\t\t\t// get the underlying method\n\t\t\t\tvar method = value.valueOf();\n\t\t\t\t// override\n\t\t\t\tvalue = function() {\n\t\t\t\t\tvar previous = this.base || Base.prototype.base;\n\t\t\t\t\tthis.base = ancestor;\n\t\t\t\t\tvar returnValue = method.apply(this, arguments);\n\t\t\t\t\tthis.base = previous;\n\t\t\t\t\treturn returnValue;\n\t\t\t\t};\n\t\t\t\t// point to the underlying method\n\t\t\t\tvalue.valueOf = function(type) {\n\t\t\t\t\treturn (type == \"object\") ? value : method;\n\t\t\t\t};\n\t\t\t\tvalue.toString = Base.toString;\n\t\t\t}\n\t\t\tthis[source] = value;\n\t\t} else if (source) { // extending with an object literal\n\t\t\tvar extend = Base.prototype.extend;\n\t\t\t// if this object has a customised extend method then use it\n\t\t\tif (!Base._prototyping && typeof this != \"function\") {\n\t\t\t\textend = this.extend || extend;\n\t\t\t}\n\t\t\tvar proto = {toSource: null};\n\t\t\t// do the \"toString\" and other methods manually\n\t\t\tvar hidden = [\"constructor\", \"toString\", \"valueOf\"];\n\t\t\t// if we are prototyping then include the constructor\n\t\t\tvar i = Base._prototyping ? 0 : 1;\n\t\t\twhile (key = hidden[i++]) {\n\t\t\t\tif (source[key] != proto[key]) {\n\t\t\t\t\textend.call(this, key, source[key]);\n\n\t\t\t\t}\n\t\t\t}\n\t\t\t// copy each of the source object's properties to this object\n\t\t\tfor (var key in source) {\n\t\t\t\tif (!proto[key]) extend.call(this, key, source[key]);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n};\n\n// initialise\nBase = Base.extend({\n\tconstructor: function() {\n\t\tthis.extend(arguments[0]);\n\t}\n}, {\n\tancestor: Object,\n\tversion: \"1.1\",\n\t\n\tforEach: function(object, block, context) {\n\t\tfor (var key in object) {\n\t\t\tif (this.prototype[key] === undefined) {\n\t\t\t\tblock.call(context, object[key], key, object);\n\t\t\t}\n\t\t}\n\t},\n\t\t\n\timplement: function() {\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tif (typeof arguments[i] == \"function\") {\n\t\t\t\t// if it's a function, call it\n\t\t\t\targuments[i](this.prototype);\n\t\t\t} else {\n\t\t\t\t// add the interface using the extend method\n\t\t\t\tthis.prototype.extend(arguments[i]);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t},\n\t\n\ttoString: function() {\n\t\treturn String(this.valueOf());\n\t}\n});/**\n * Detect browser support for specific features\n */\nwysihtml5.browser = (function() {\n  var userAgent   = navigator.userAgent,\n      testElement = document.createElement(\"div\"),\n      // Browser sniffing is unfortunately needed since some behaviors are impossible to feature detect\n      isIE        = userAgent.indexOf(\"MSIE\")         !== -1 && userAgent.indexOf(\"Opera\") === -1,\n      isGecko     = userAgent.indexOf(\"Gecko\")        !== -1 && userAgent.indexOf(\"KHTML\") === -1,\n      isWebKit    = userAgent.indexOf(\"AppleWebKit/\") !== -1,\n      isChrome    = userAgent.indexOf(\"Chrome/\")      !== -1,\n      isOpera     = userAgent.indexOf(\"Opera/\")       !== -1;\n  \n  function iosVersion(userAgent) {\n    return ((/ipad|iphone|ipod/.test(userAgent) && userAgent.match(/ os (\\d+).+? like mac os x/)) || [, 0])[1];\n  }\n  \n  return {\n    // Static variable needed, publicly accessible, to be able override it in unit tests\n    USER_AGENT: userAgent,\n    \n    /**\n     * Exclude browsers that are not capable of displaying and handling\n     * contentEditable as desired:\n     *    - iPhone, iPad (tested iOS 4.2.2) and Android (tested 2.2) refuse to make contentEditables focusable\n     *    - IE < 8 create invalid markup and crash randomly from time to time\n     *\n     * @return {Boolean}\n     */\n    supported: function() {\n      var userAgent                   = this.USER_AGENT.toLowerCase(),\n          // Essential for making html elements editable\n          hasContentEditableSupport   = \"contentEditable\" in testElement,\n          // Following methods are needed in order to interact with the contentEditable area\n          hasEditingApiSupport        = document.execCommand && document.queryCommandSupported && document.queryCommandState,\n          // document selector apis are only supported by IE 8+, Safari 4+, Chrome and Firefox 3.5+\n          hasQuerySelectorSupport     = document.querySelector && document.querySelectorAll,\n          // contentEditable is unusable in mobile browsers (tested iOS 4.2.2, Android 2.2, Opera Mobile, WebOS 3.05)\n          isIncompatibleMobileBrowser = (this.isIos() && iosVersion(userAgent) < 5) || userAgent.indexOf(\"opera mobi\") !== -1 || userAgent.indexOf(\"hpwos/\") !== -1;\n      \n      return hasContentEditableSupport\n        && hasEditingApiSupport\n        && hasQuerySelectorSupport\n        && !isIncompatibleMobileBrowser;\n    },\n    \n    isTouchDevice: function() {\n      return this.supportsEvent(\"touchmove\");\n    },\n    \n    isIos: function() {\n      var userAgent = this.USER_AGENT.toLowerCase();\n      return userAgent.indexOf(\"webkit\") !== -1 && userAgent.indexOf(\"mobile\") !== -1;\n    },\n    \n    /**\n     * Whether the browser supports sandboxed iframes\n     * Currently only IE 6+ offers such feature <iframe security=\"restricted\">\n     *\n     * http://msdn.microsoft.com/en-us/library/ms534622(v=vs.85).aspx\n     * http://blogs.msdn.com/b/ie/archive/2008/01/18/using-frames-more-securely.aspx\n     *\n     * HTML5 sandboxed iframes are still buggy and their DOM is not reachable from the outside (except when using postMessage)\n     */\n    supportsSandboxedIframes: function() {\n      return isIE;\n    },\n\n    /**\n     * IE6+7 throw a mixed content warning when the src of an iframe\n     * is empty/unset or about:blank\n     * window.querySelector is implemented as of IE8\n     */\n    throwsMixedContentWarningWhenIframeSrcIsEmpty: function() {\n      return !(\"querySelector\" in document);\n    },\n\n    /**\n     * Whether the caret is correctly displayed in contentEditable elements\n     * Firefox sometimes shows a huge caret in the beginning after focusing\n     */\n    displaysCaretInEmptyContentEditableCorrectly: function() {\n      return !isGecko;\n    },\n\n    /**\n     * Opera and IE are the only browsers who offer the css value\n     * in the original unit, thx to the currentStyle object\n     * All other browsers provide the computed style in px via window.getComputedStyle\n     */\n    hasCurrentStyleProperty: function() {\n      return \"currentStyle\" in testElement;\n    },\n\n    /**\n     * Whether the browser inserts a <br> when pressing enter in a contentEditable element\n     */\n    insertsLineBreaksOnReturn: function() {\n      return isGecko;\n    },\n\n    supportsPlaceholderAttributeOn: function(element) {\n      return \"placeholder\" in element;\n    },\n\n    supportsEvent: function(eventName) {\n      return \"on\" + eventName in testElement || (function() {\n        testElement.setAttribute(\"on\" + eventName, \"return;\");\n        return typeof(testElement[\"on\" + eventName]) === \"function\";\n      })();\n    },\n\n    /**\n     * Opera doesn't correctly fire focus/blur events when clicking in- and outside of iframe\n     */\n    supportsEventsInIframeCorrectly: function() {\n      return !isOpera;\n    },\n\n    /**\n     * Chrome & Safari only fire the ondrop/ondragend/... events when the ondragover event is cancelled\n     * with event.preventDefault\n     * Firefox 3.6 fires those events anyway, but the mozilla doc says that the dragover/dragenter event needs\n     * to be cancelled\n     */\n    firesOnDropOnlyWhenOnDragOverIsCancelled: function() {\n      return isWebKit || isGecko;\n    },\n    \n    /**\n     * Whether the browser supports the event.dataTransfer property in a proper way\n     */\n    supportsDataTransfer: function() {\n      try {\n        // Firefox doesn't support dataTransfer in a safe way, it doesn't strip script code in the html payload (like Chrome does)\n        return isWebKit && (window.Clipboard || window.DataTransfer).prototype.getData;\n      } catch(e) {\n        return false;\n      }\n    },\n\n    /**\n     * Everything below IE9 doesn't know how to treat HTML5 tags\n     *\n     * @param {Object} context The document object on which to check HTML5 support\n     *\n     * @example\n     *    wysihtml5.browser.supportsHTML5Tags(document);\n     */\n    supportsHTML5Tags: function(context) {\n      var element = context.createElement(\"div\"),\n          html5   = \"<article>foo</article>\";\n      element.innerHTML = html5;\n      return element.innerHTML.toLowerCase() === html5;\n    },\n\n    /**\n     * Checks whether a document supports a certain queryCommand\n     * In particular, Opera needs a reference to a document that has a contentEditable in it's dom tree\n     * in oder to report correct results\n     *\n     * @param {Object} doc Document object on which to check for a query command\n     * @param {String} command The query command to check for\n     * @return {Boolean}\n     *\n     * @example\n     *    wysihtml5.browser.supportsCommand(document, \"bold\");\n     */\n    supportsCommand: (function() {\n      // Following commands are supported but contain bugs in some browsers\n      var buggyCommands = {\n        // formatBlock fails with some tags (eg. <blockquote>)\n        \"formatBlock\":          isIE,\n         // When inserting unordered or ordered lists in Firefox, Chrome or Safari, the current selection or line gets\n         // converted into a list (<ul><li>...</li></ul>, <ol><li>...</li></ol>)\n         // IE and Opera act a bit different here as they convert the entire content of the current block element into a list\n        \"insertUnorderedList\":  isIE || isOpera || isWebKit,\n        \"insertOrderedList\":    isIE || isOpera || isWebKit\n      };\n      \n      // Firefox throws errors for queryCommandSupported, so we have to build up our own object of supported commands\n      var supported = {\n        \"insertHTML\": isGecko\n      };\n\n      return function(doc, command) {\n        var isBuggy = buggyCommands[command];\n        if (!isBuggy) {\n          // Firefox throws errors when invoking queryCommandSupported or queryCommandEnabled\n          try {\n            return doc.queryCommandSupported(command);\n          } catch(e1) {}\n\n          try {\n            return doc.queryCommandEnabled(command);\n          } catch(e2) {\n            return !!supported[command];\n          }\n        }\n        return false;\n      };\n    })(),\n\n    /**\n     * IE: URLs starting with:\n     *    www., http://, https://, ftp://, gopher://, mailto:, new:, snews:, telnet:, wasis:, file://,\n     *    nntp://, newsrc:, ldap://, ldaps://, outlook:, mic:// and url:\n     * will automatically be auto-linked when either the user inserts them via copy&paste or presses the\n     * space bar when the caret is directly after such an url.\n     * This behavior cannot easily be avoided in IE < 9 since the logic is hardcoded in the mshtml.dll\n     * (related blog post on msdn\n     * http://blogs.msdn.com/b/ieinternals/archive/2009/09/17/prevent-automatic-hyperlinking-in-contenteditable-html.aspx).\n     */\n    doesAutoLinkingInContentEditable: function() {\n      return isIE;\n    },\n\n    /**\n     * As stated above, IE auto links urls typed into contentEditable elements\n     * Since IE9 it's possible to prevent this behavior\n     */\n    canDisableAutoLinking: function() {\n      return this.supportsCommand(document, \"AutoUrlDetect\");\n    },\n\n    /**\n     * IE leaves an empty paragraph in the contentEditable element after clearing it\n     * Chrome/Safari sometimes an empty <div>\n     */\n    clearsContentEditableCorrectly: function() {\n      return isGecko || isOpera || isWebKit;\n    },\n\n    /**\n     * IE gives wrong results for getAttribute\n     */\n    supportsGetAttributeCorrectly: function() {\n      var td = document.createElement(\"td\");\n      return td.getAttribute(\"rowspan\") != \"1\";\n    },\n\n    /**\n     * When clicking on images in IE, Opera and Firefox, they are selected, which makes it easy to interact with them.\n     * Chrome and Safari both don't support this\n     */\n    canSelectImagesInContentEditable: function() {\n      return isGecko || isIE || isOpera;\n    },\n\n    /**\n     * When the caret is in an empty list (<ul><li>|</li></ul>) which is the first child in an contentEditable container\n     * pressing backspace doesn't remove the entire list as done in other browsers\n     */\n    clearsListsInContentEditableCorrectly: function() {\n      return isGecko || isIE || isWebKit;\n    },\n\n    /**\n     * All browsers except Safari and Chrome automatically scroll the range/caret position into view\n     */\n    autoScrollsToCaret: function() {\n      return !isWebKit;\n    },\n\n    /**\n     * Check whether the browser automatically closes tags that don't need to be opened\n     */\n    autoClosesUnclosedTags: function() {\n      var clonedTestElement = testElement.cloneNode(false),\n          returnValue,\n          innerHTML;\n\n      clonedTestElement.innerHTML = \"<p><div></div>\";\n      innerHTML                   = clonedTestElement.innerHTML.toLowerCase();\n      returnValue                 = innerHTML === \"<p></p><div></div>\" || innerHTML === \"<p><div></div></p>\";\n\n      // Cache result by overwriting current function\n      this.autoClosesUnclosedTags = function() { return returnValue; };\n\n      return returnValue;\n    },\n\n    /**\n     * Whether the browser supports the native document.getElementsByClassName which returns live NodeLists\n     */\n    supportsNativeGetElementsByClassName: function() {\n      return String(document.getElementsByClassName).indexOf(\"[native code]\") !== -1;\n    },\n\n    /**\n     * As of now (19.04.2011) only supported by Firefox 4 and Chrome\n     * See https://developer.mozilla.org/en/DOM/Selection/modify\n     */\n    supportsSelectionModify: function() {\n      return \"getSelection\" in window && \"modify\" in window.getSelection();\n    },\n    \n    /**\n     * Whether the browser supports the classList object for fast className manipulation\n     * See https://developer.mozilla.org/en/DOM/element.classList\n     */\n    supportsClassList: function() {\n      return \"classList\" in testElement;\n    },\n    \n    /**\n     * Opera needs a white space after a <br> in order to position the caret correctly\n     */\n    needsSpaceAfterLineBreak: function() {\n      return isOpera;\n    },\n    \n    /**\n     * Whether the browser supports the speech api on the given element\n     * See http://mikepultz.com/2011/03/accessing-google-speech-api-chrome-11/\n     *\n     * @example\n     *    var input = document.createElement(\"input\");\n     *    if (wysihtml5.browser.supportsSpeechApiOn(input)) {\n     *      // ...\n     *    }\n     */\n    supportsSpeechApiOn: function(input) {\n      var chromeVersion = userAgent.match(/Chrome\\/(\\d+)/) || [, 0];\n      return chromeVersion[1] >= 11 && (\"onwebkitspeechchange\" in input || \"speech\" in input);\n    },\n    \n    /**\n     * IE9 crashes when setting a getter via Object.defineProperty on XMLHttpRequest or XDomainRequest\n     * See https://connect.microsoft.com/ie/feedback/details/650112\n     * or try the POC http://tifftiff.de/ie9_crash/\n     */\n    crashesWhenDefineProperty: function(property) {\n      return isIE && (property === \"XMLHttpRequest\" || property === \"XDomainRequest\");\n    },\n    \n    /**\n     * IE is the only browser who fires the \"focus\" event not immediately when .focus() is called on an element\n     */\n    doesAsyncFocus: function() {\n      return isIE;\n    },\n    \n    /**\n     * In IE it's impssible for the user and for the selection library to set the caret after an <img> when it's the lastChild in the document\n     */\n    hasProblemsSettingCaretAfterImg: function() {\n      return isIE;\n    },\n    \n    hasUndoInContextMenu: function() {\n      return isGecko || isChrome || isOpera;\n    }\n  };\n})();wysihtml5.lang.array = function(arr) {\n  return {\n    /**\n     * Check whether a given object exists in an array\n     *\n     * @example\n     *    wysihtml5.lang.array([1, 2]).contains(1);\n     *    // => true\n     */\n    contains: function(needle) {\n      if (arr.indexOf) {\n        return arr.indexOf(needle) !== -1;\n      } else {\n        for (var i=0, length=arr.length; i<length; i++) {\n          if (arr[i] === needle) { return true; }\n        }\n        return false;\n      }\n    },\n    \n    /**\n     * Substract one array from another\n     *\n     * @example\n     *    wysihtml5.lang.array([1, 2, 3, 4]).without([3, 4]);\n     *    // => [1, 2]\n     */\n    without: function(arrayToSubstract) {\n      arrayToSubstract = wysihtml5.lang.array(arrayToSubstract);\n      var newArr  = [],\n          i       = 0,\n          length  = arr.length;\n      for (; i<length; i++) {\n        if (!arrayToSubstract.contains(arr[i])) {\n          newArr.push(arr[i]);\n        }\n      }\n      return newArr;\n    },\n    \n    /**\n     * Return a clean native array\n     * \n     * Following will convert a Live NodeList to a proper Array\n     * @example\n     *    var childNodes = wysihtml5.lang.array(document.body.childNodes).get();\n     */\n    get: function() {\n      var i        = 0,\n          length   = arr.length,\n          newArray = [];\n      for (; i<length; i++) {\n        newArray.push(arr[i]);\n      }\n      return newArray;\n    }\n  };\n};wysihtml5.lang.Dispatcher = Base.extend(\n  /** @scope wysihtml5.lang.Dialog.prototype */ {\n  observe: function(eventName, handler) {\n    this.events = this.events || {};\n    this.events[eventName] = this.events[eventName] || [];\n    this.events[eventName].push(handler);\n    return this;\n  },\n\n  on: function() {\n    return this.observe.apply(this, wysihtml5.lang.array(arguments).get());\n  },\n\n  fire: function(eventName, payload) {\n    this.events = this.events || {};\n    var handlers = this.events[eventName] || [],\n        i        = 0;\n    for (; i<handlers.length; i++) {\n      handlers[i].call(this, payload);\n    }\n    return this;\n  },\n\n  stopObserving: function(eventName, handler) {\n    this.events = this.events || {};\n    var i = 0,\n        handlers,\n        newHandlers;\n    if (eventName) {\n      handlers    = this.events[eventName] || [],\n      newHandlers = [];\n      for (; i<handlers.length; i++) {\n        if (handlers[i] !== handler && handler) {\n          newHandlers.push(handlers[i]);\n        }\n      }\n      this.events[eventName] = newHandlers;\n    } else {\n      // Clean up all events\n      this.events = {};\n    }\n    return this;\n  }\n});wysihtml5.lang.object = function(obj) {\n  return {\n    /**\n     * @example\n     *    wysihtml5.lang.object({ foo: 1, bar: 1 }).merge({ bar: 2, baz: 3 }).get();\n     *    // => { foo: 1, bar: 2, baz: 3 }\n     */\n    merge: function(otherObj) {\n      for (var i in otherObj) {\n        obj[i] = otherObj[i];\n      }\n      return this;\n    },\n    \n    get: function() {\n      return obj;\n    },\n    \n    /**\n     * @example\n     *    wysihtml5.lang.object({ foo: 1 }).clone();\n     *    // => { foo: 1 }\n     */\n    clone: function() {\n      var newObj = {},\n          i;\n      for (i in obj) {\n        newObj[i] = obj[i];\n      }\n      return newObj;\n    },\n    \n    /**\n     * @example\n     *    wysihtml5.lang.object([]).isArray();\n     *    // => true\n     */\n    isArray: function() {\n      return Object.prototype.toString.call(obj) === \"[object Array]\";\n    }\n  };\n};(function() {\n  var WHITE_SPACE_START = /^\\s+/,\n      WHITE_SPACE_END   = /\\s+$/;\n  wysihtml5.lang.string = function(str) {\n    str = String(str);\n    return {\n      /**\n       * @example\n       *    wysihtml5.lang.string(\"   foo   \").trim();\n       *    // => \"foo\"\n       */\n      trim: function() {\n        return str.replace(WHITE_SPACE_START, \"\").replace(WHITE_SPACE_END, \"\");\n      },\n      \n      /**\n       * @example\n       *    wysihtml5.lang.string(\"Hello #{name}\").interpolate({ name: \"Christopher\" });\n       *    // => \"Hello Christopher\"\n       */\n      interpolate: function(vars) {\n        for (var i in vars) {\n          str = this.replace(\"#{\" + i + \"}\").by(vars[i]);\n        }\n        return str;\n      },\n      \n      /**\n       * @example\n       *    wysihtml5.lang.string(\"Hello Tom\").replace(\"Tom\").with(\"Hans\");\n       *    // => \"Hello Hans\"\n       */\n      replace: function(search) {\n        return {\n          by: function(replace) {\n            return str.split(search).join(replace);\n          }\n        }\n      }\n    };\n  };\n})();/**\n * Find urls in descendant text nodes of an element and auto-links them\n * Inspired by http://james.padolsey.com/javascript/find-and-replace-text-with-javascript/\n *\n * @param {Element} element Container element in which to search for urls\n *\n * @example\n *    <div id=\"text-container\">Please click here: www.google.com</div>\n *    <script>wysihtml5.dom.autoLink(document.getElementById(\"text-container\"));</script>\n */\n(function(wysihtml5) {\n  var /**\n       * Don't auto-link urls that are contained in the following elements:\n       */\n      IGNORE_URLS_IN        = wysihtml5.lang.array([\"CODE\", \"PRE\", \"A\", \"SCRIPT\", \"HEAD\", \"TITLE\", \"STYLE\"]),\n      /**\n       * revision 1:\n       *    /(\\S+\\.{1}[^\\s\\,\\.\\!]+)/g\n       *\n       * revision 2:\n       *    /(\\b(((https?|ftp):\\/\\/)|(www\\.))[-A-Z0-9+&@#\\/%?=~_|!:,.;\\[\\]]*[-A-Z0-9+&@#\\/%=~_|])/gim\n       *\n       * put this in the beginning if you don't wan't to match within a word\n       *    (^|[\\>\\(\\{\\[\\s\\>])\n       */\n      URL_REG_EXP           = /((https?:\\/\\/|www\\.)[^\\s<]{3,})/gi,\n      TRAILING_CHAR_REG_EXP = /([^\\w\\/\\-](,?))$/i,\n      MAX_DISPLAY_LENGTH    = 100,\n      BRACKETS              = { \")\": \"(\", \"]\": \"[\", \"}\": \"{\" };\n  \n  function autoLink(element) {\n    if (_hasParentThatShouldBeIgnored(element)) {\n      return element;\n    }\n\n    if (element === element.ownerDocument.documentElement) {\n      element = element.ownerDocument.body;\n    }\n\n    return _parseNode(element);\n  }\n  \n  /**\n   * This is basically a rebuild of\n   * the rails auto_link_urls text helper\n   */\n  function _convertUrlsToLinks(str) {\n    return str.replace(URL_REG_EXP, function(match, url) {\n      var punctuation = (url.match(TRAILING_CHAR_REG_EXP) || [])[1] || \"\",\n          opening     = BRACKETS[punctuation];\n      url = url.replace(TRAILING_CHAR_REG_EXP, \"\");\n\n      if (url.split(opening).length > url.split(punctuation).length) {\n        url = url + punctuation;\n        punctuation = \"\";\n      }\n      var realUrl    = url,\n          displayUrl = url;\n      if (url.length > MAX_DISPLAY_LENGTH) {\n        displayUrl = displayUrl.substr(0, MAX_DISPLAY_LENGTH) + \"...\";\n      }\n      // Add http prefix if necessary\n      if (realUrl.substr(0, 4) === \"www.\") {\n        realUrl = \"http://\" + realUrl;\n      }\n      \n      return '<a href=\"' + realUrl + '\">' + displayUrl + '</a>' + punctuation;\n    });\n  }\n  \n  /**\n   * Creates or (if already cached) returns a temp element\n   * for the given document object\n   */\n  function _getTempElement(context) {\n    var tempElement = context._wysihtml5_tempElement;\n    if (!tempElement) {\n      tempElement = context._wysihtml5_tempElement = context.createElement(\"div\");\n    }\n    return tempElement;\n  }\n  \n  /**\n   * Replaces the original text nodes with the newly auto-linked dom tree\n   */\n  function _wrapMatchesInNode(textNode) {\n    var parentNode  = textNode.parentNode,\n        tempElement = _getTempElement(parentNode.ownerDocument);\n    \n    // We need to insert an empty/temporary <span /> to fix IE quirks\n    // Elsewise IE would strip white space in the beginning\n    tempElement.innerHTML = \"<span></span>\" + _convertUrlsToLinks(textNode.data);\n    tempElement.removeChild(tempElement.firstChild);\n    \n    while (tempElement.firstChild) {\n      // inserts tempElement.firstChild before textNode\n      parentNode.insertBefore(tempElement.firstChild, textNode);\n    }\n    parentNode.removeChild(textNode);\n  }\n  \n  function _hasParentThatShouldBeIgnored(node) {\n    var nodeName;\n    while (node.parentNode) {\n      node = node.parentNode;\n      nodeName = node.nodeName;\n      if (IGNORE_URLS_IN.contains(nodeName)) {\n        return true;\n      } else if (nodeName === \"body\") {\n        return false;\n      }\n    }\n    return false;\n  }\n  \n  function _parseNode(element) {\n    if (IGNORE_URLS_IN.contains(element.nodeName)) {\n      return;\n    }\n    \n    if (element.nodeType === wysihtml5.TEXT_NODE && element.data.match(URL_REG_EXP)) {\n      _wrapMatchesInNode(element);\n      return;\n    }\n    \n    var childNodes        = wysihtml5.lang.array(element.childNodes).get(),\n        childNodesLength  = childNodes.length,\n        i                 = 0;\n    \n    for (; i<childNodesLength; i++) {\n      _parseNode(childNodes[i]);\n    }\n    \n    return element;\n  }\n  \n  wysihtml5.dom.autoLink = autoLink;\n  \n  // Reveal url reg exp to the outside\n  wysihtml5.dom.autoLink.URL_REG_EXP = URL_REG_EXP;\n})(wysihtml5);(function(wysihtml5) {\n  var supportsClassList = wysihtml5.browser.supportsClassList(),\n      api               = wysihtml5.dom;\n  \n  api.addClass = function(element, className) {\n    if (supportsClassList) {\n      return element.classList.add(className);\n    }\n    if (api.hasClass(element, className)) {\n      return;\n    }\n    element.className += \" \" + className;\n  };\n  \n  api.removeClass = function(element, className) {\n    if (supportsClassList) {\n      return element.classList.remove(className);\n    }\n    \n    element.className = element.className.replace(new RegExp(\"(^|\\\\s+)\" + className + \"(\\\\s+|$)\"), \" \");\n  };\n  \n  api.hasClass = function(element, className) {\n    if (supportsClassList) {\n      return element.classList.contains(className);\n    }\n    \n    var elementClassName = element.className;\n    return (elementClassName.length > 0 && (elementClassName == className || new RegExp(\"(^|\\\\s)\" + className + \"(\\\\s|$)\").test(elementClassName)));\n  };\n})(wysihtml5);\nwysihtml5.dom.contains = (function() {\n  var documentElement = document.documentElement;\n  if (documentElement.contains) {\n    return function(container, element) {\n      if (element.nodeType !== wysihtml5.ELEMENT_NODE) {\n        element = element.parentNode;\n      }\n      return container !== element && container.contains(element);\n    };\n  } else if (documentElement.compareDocumentPosition) {\n    return function(container, element) {\n      // https://developer.mozilla.org/en/DOM/Node.compareDocumentPosition\n      return !!(container.compareDocumentPosition(element) & 16);\n    };\n  }\n})();/**\n * Converts an HTML fragment/element into a unordered/ordered list\n *\n * @param {Element} element The element which should be turned into a list\n * @param {String} listType The list type in which to convert the tree (either \"ul\" or \"ol\")\n * @return {Element} The created list\n *\n * @example\n *    <!-- Assume the following dom: -->\n *    <span id=\"pseudo-list\">\n *      eminem<br>\n *      dr. dre\n *      <div>50 Cent</div>\n *    </span>\n *\n *    <script>\n *      wysihtml5.dom.convertToList(document.getElementById(\"pseudo-list\"), \"ul\");\n *    </script>\n *\n *    <!-- Will result in: -->\n *    <ul>\n *      <li>eminem</li>\n *      <li>dr. dre</li>\n *      <li>50 Cent</li>\n *    </ul>\n */\nwysihtml5.dom.convertToList = (function() {\n  function _createListItem(doc, list) {\n    var listItem = doc.createElement(\"li\");\n    list.appendChild(listItem);\n    return listItem;\n  }\n  \n  function _createList(doc, type) {\n    return doc.createElement(type);\n  }\n  \n  function convertToList(element, listType) {\n    if (element.nodeName === \"UL\" || element.nodeName === \"OL\" || element.nodeName === \"MENU\") {\n      // Already a list\n      return element;\n    }\n    \n    var doc               = element.ownerDocument,\n        list              = _createList(doc, listType),\n        lineBreaks        = element.querySelectorAll(\"br\"),\n        lineBreaksLength  = lineBreaks.length,\n        childNodes,\n        childNodesLength,\n        childNode,\n        lineBreak,\n        parentNode,\n        isBlockElement,\n        isLineBreak,\n        currentListItem,\n        i;\n    \n    // First find <br> at the end of inline elements and move them behind them\n    for (i=0; i<lineBreaksLength; i++) {\n      lineBreak = lineBreaks[i];\n      while ((parentNode = lineBreak.parentNode) && parentNode !== element && parentNode.lastChild === lineBreak) {\n        if (wysihtml5.dom.getStyle(\"display\").from(parentNode) === \"block\") {\n          parentNode.removeChild(lineBreak);\n          break;\n        }\n        wysihtml5.dom.insert(lineBreak).after(lineBreak.parentNode);\n      }\n    }\n    \n    childNodes        = wysihtml5.lang.array(element.childNodes).get();\n    childNodesLength  = childNodes.length;\n    \n    for (i=0; i<childNodesLength; i++) {\n      currentListItem   = currentListItem || _createListItem(doc, list);\n      childNode         = childNodes[i];\n      isBlockElement    = wysihtml5.dom.getStyle(\"display\").from(childNode) === \"block\";\n      isLineBreak       = childNode.nodeName === \"BR\";\n      \n      if (isBlockElement) {\n        // Append blockElement to current <li> if empty, otherwise create a new one\n        currentListItem = currentListItem.firstChild ? _createListItem(doc, list) : currentListItem;\n        currentListItem.appendChild(childNode);\n        currentListItem = null;\n        continue;\n      }\n      \n      if (isLineBreak) {\n        // Only create a new list item in the next iteration when the current one has already content\n        currentListItem = currentListItem.firstChild ? null : currentListItem;\n        continue;\n      }\n      \n      currentListItem.appendChild(childNode);\n    }\n    \n    element.parentNode.replaceChild(list, element);\n    return list;\n  }\n  \n  return convertToList;\n})();/**\n * Copy a set of attributes from one element to another\n *\n * @param {Array} attributesToCopy List of attributes which should be copied\n * @return {Object} Returns an object which offers the \"from\" method which can be invoked with the element where to\n *    copy the attributes from., this again returns an object which provides a method named \"to\" which can be invoked \n *    with the element where to copy the attributes to (see example)\n *\n * @example\n *    var textarea    = document.querySelector(\"textarea\"),\n *        div         = document.querySelector(\"div[contenteditable=true]\"),\n *        anotherDiv  = document.querySelector(\"div.preview\");\n *    wysihtml5.dom.copyAttributes([\"spellcheck\", \"value\", \"placeholder\"]).from(textarea).to(div).andTo(anotherDiv);\n *\n */\nwysihtml5.dom.copyAttributes = function(attributesToCopy) {\n  return {\n    from: function(elementToCopyFrom) {\n      return {\n        to: function(elementToCopyTo) {\n          var attribute,\n              i         = 0,\n              length    = attributesToCopy.length;\n          for (; i<length; i++) {\n            attribute = attributesToCopy[i];\n            if (typeof(elementToCopyFrom[attribute]) !== \"undefined\" && elementToCopyFrom[attribute] !== \"\") {\n              elementToCopyTo[attribute] = elementToCopyFrom[attribute];\n            }\n          }\n          return { andTo: arguments.callee };\n        }\n      };\n    }\n  };\n};/**\n * Copy a set of styles from one element to another\n * Please note that this only works properly across browsers when the element from which to copy the styles\n * is in the dom\n *\n * Interesting article on how to copy styles\n *\n * @param {Array} stylesToCopy List of styles which should be copied\n * @return {Object} Returns an object which offers the \"from\" method which can be invoked with the element where to\n *    copy the styles from., this again returns an object which provides a method named \"to\" which can be invoked \n *    with the element where to copy the styles to (see example)\n *\n * @example\n *    var textarea    = document.querySelector(\"textarea\"),\n *        div         = document.querySelector(\"div[contenteditable=true]\"),\n *        anotherDiv  = document.querySelector(\"div.preview\");\n *    wysihtml5.dom.copyStyles([\"overflow-y\", \"width\", \"height\"]).from(textarea).to(div).andTo(anotherDiv);\n *\n */\n(function(dom) {\n  \n  /**\n   * Mozilla, WebKit and Opera recalculate the computed width when box-sizing: boder-box; is set\n   * So if an element has \"width: 200px; -moz-box-sizing: border-box; border: 1px;\" then \n   * its computed css width will be 198px\n   */\n  var BOX_SIZING_PROPERTIES = [\"-webkit-box-sizing\", \"-moz-box-sizing\", \"-ms-box-sizing\", \"box-sizing\"];\n  \n  var shouldIgnoreBoxSizingBorderBox = function(element) {\n    if (hasBoxSizingBorderBox(element)) {\n       return parseInt(dom.getStyle(\"width\").from(element), 10) < element.offsetWidth;\n    }\n    return false;\n  };\n  \n  var hasBoxSizingBorderBox = function(element) {\n    var i       = 0,\n        length  = BOX_SIZING_PROPERTIES.length;\n    for (; i<length; i++) {\n      if (dom.getStyle(BOX_SIZING_PROPERTIES[i]).from(element) === \"border-box\") {\n        return BOX_SIZING_PROPERTIES[i];\n      }\n    }\n  };\n  \n  dom.copyStyles = function(stylesToCopy) {\n    return {\n      from: function(element) {\n        if (shouldIgnoreBoxSizingBorderBox(element)) {\n          stylesToCopy = wysihtml5.lang.array(stylesToCopy).without(BOX_SIZING_PROPERTIES);\n        }\n        \n        var cssText = \"\",\n            length  = stylesToCopy.length,\n            i       = 0,\n            property;\n        for (; i<length; i++) {\n          property = stylesToCopy[i];\n          cssText += property + \":\" + dom.getStyle(property).from(element) + \";\";\n        }\n        \n        return {\n          to: function(element) {\n            dom.setStyles(cssText).on(element);\n            return { andTo: arguments.callee };\n          }\n        };\n      }\n    };\n  };\n})(wysihtml5.dom);/**\n * Event Delegation\n *\n * @example\n *    wysihtml5.dom.delegate(document.body, \"a\", \"click\", function() {\n *      // foo\n *    });\n */\n(function(wysihtml5) {\n  \n  wysihtml5.dom.delegate = function(container, selector, eventName, handler) {\n    return wysihtml5.dom.observe(container, eventName, function(event) {\n      var target    = event.target,\n          match     = wysihtml5.lang.array(container.querySelectorAll(selector));\n      \n      while (target && target !== container) {\n        if (match.contains(target)) {\n          handler.call(target, event);\n          break;\n        }\n        target = target.parentNode;\n      }\n    });\n  };\n  \n})(wysihtml5);/**\n * Returns the given html wrapped in a div element\n *\n * Fixing IE's inability to treat unknown elements (HTML5 section, article, ...) correctly\n * when inserted via innerHTML\n * \n * @param {String} html The html which should be wrapped in a dom element\n * @param {Obejct} [context] Document object of the context the html belongs to\n *\n * @example\n *    wysihtml5.dom.getAsDom(\"<article>foo</article>\");\n */\nwysihtml5.dom.getAsDom = (function() {\n  \n  var _innerHTMLShiv = function(html, context) {\n    var tempElement = context.createElement(\"div\");\n    tempElement.style.display = \"none\";\n    context.body.appendChild(tempElement);\n    // IE throws an exception when trying to insert <frameset></frameset> via innerHTML\n    try { tempElement.innerHTML = html; } catch(e) {}\n    context.body.removeChild(tempElement);\n    return tempElement;\n  };\n  \n  /**\n   * Make sure IE supports HTML5 tags, which is accomplished by simply creating one instance of each element\n   */\n  var _ensureHTML5Compatibility = function(context) {\n    if (context._wysihtml5_supportsHTML5Tags) {\n      return;\n    }\n    for (var i=0, length=HTML5_ELEMENTS.length; i<length; i++) {\n      context.createElement(HTML5_ELEMENTS[i]);\n    }\n    context._wysihtml5_supportsHTML5Tags = true;\n  };\n  \n  \n  /**\n   * List of html5 tags\n   * taken from http://simon.html5.org/html5-elements\n   */\n  var HTML5_ELEMENTS = [\n    \"abbr\", \"article\", \"aside\", \"audio\", \"bdi\", \"canvas\", \"command\", \"datalist\", \"details\", \"figcaption\",\n    \"figure\", \"footer\", \"header\", \"hgroup\", \"keygen\", \"mark\", \"meter\", \"nav\", \"output\", \"progress\",\n    \"rp\", \"rt\", \"ruby\", \"svg\", \"section\", \"source\", \"summary\", \"time\", \"track\", \"video\", \"wbr\"\n  ];\n  \n  return function(html, context) {\n    context = context || document;\n    var tempElement;\n    if (typeof(html) === \"object\" && html.nodeType) {\n      tempElement = context.createElement(\"div\");\n      tempElement.appendChild(html);\n    } else if (wysihtml5.browser.supportsHTML5Tags(context)) {\n      tempElement = context.createElement(\"div\");\n      tempElement.innerHTML = html;\n    } else {\n      _ensureHTML5Compatibility(context);\n      tempElement = _innerHTMLShiv(html, context);\n    }\n    return tempElement;\n  };\n})();/**\n * Walks the dom tree from the given node up until it finds a match\n * Designed for optimal performance.\n *\n * @param {Element} node The from which to check the parent nodes\n * @param {Object} matchingSet Object to match against (possible properties: nodeName, className, classRegExp)\n * @param {Number} [levels] How many parents should the function check up from the current node (defaults to 50)\n * @return {null|Element} Returns the first element that matched the desiredNodeName(s)\n * @example\n *    var listElement = wysihtml5.dom.getParentElement(document.querySelector(\"li\"), { nodeName: [\"MENU\", \"UL\", \"OL\"] });\n *    // ... or ...\n *    var unorderedListElement = wysihtml5.dom.getParentElement(document.querySelector(\"li\"), { nodeName: \"UL\" });\n *    // ... or ...\n *    var coloredElement = wysihtml5.dom.getParentElement(myTextNode, { nodeName: \"SPAN\", className: \"wysiwyg-color-red\", classRegExp: /wysiwyg-color-[a-z]/g });\n */\nwysihtml5.dom.getParentElement = (function() {\n  \n  function _isSameNodeName(nodeName, desiredNodeNames) {\n    if (!desiredNodeNames || !desiredNodeNames.length) {\n      return true;\n    }\n    \n    if (typeof(desiredNodeNames) === \"string\") {\n      return nodeName === desiredNodeNames;\n    } else {\n      return wysihtml5.lang.array(desiredNodeNames).contains(nodeName);\n    }\n  }\n  \n  function _isElement(node) {\n    return node.nodeType === wysihtml5.ELEMENT_NODE;\n  }\n  \n  function _hasClassName(element, className, classRegExp) {\n    var classNames = (element.className || \"\").match(classRegExp) || [];\n    if (!className) {\n      return !!classNames.length;\n    }\n    return classNames[classNames.length - 1] === className;\n  }\n  \n  function _getParentElementWithNodeName(node, nodeName, levels) {\n    while (levels-- && node && node.nodeName !== \"BODY\") {\n      if (_isSameNodeName(node.nodeName, nodeName)) {\n        return node;\n      }\n      node = node.parentNode;\n    }\n    return null;\n  }\n  \n  function _getParentElementWithNodeNameAndClassName(node, nodeName, className, classRegExp, levels) {\n    while (levels-- && node && node.nodeName !== \"BODY\") {\n      if (_isElement(node) &&\n          _isSameNodeName(node.nodeName, nodeName) &&\n          _hasClassName(node, className, classRegExp)) {\n        return node;\n      }\n      node = node.parentNode;\n    }\n    return null;\n  }\n  \n  return function(node, matchingSet, levels) {\n    levels = levels || 50; // Go max 50 nodes upwards from current node\n    if (matchingSet.className || matchingSet.classRegExp) {\n      return _getParentElementWithNodeNameAndClassName(\n        node, matchingSet.nodeName, matchingSet.className, matchingSet.classRegExp, levels\n      );\n    } else {\n      return _getParentElementWithNodeName(\n        node, matchingSet.nodeName, levels\n      );\n    }\n  };\n})();\n/**\n * Get element's style for a specific css property\n *\n * @param {Element} element The element on which to retrieve the style\n * @param {String} property The CSS property to retrieve (\"float\", \"display\", \"text-align\", ...)\n *\n * @example\n *    wysihtml5.dom.getStyle(\"display\").from(document.body);\n *    // => \"block\"\n */\nwysihtml5.dom.getStyle = (function() {\n  var stylePropertyMapping = {\n        \"float\": (\"styleFloat\" in document.createElement(\"div\").style) ? \"styleFloat\" : \"cssFloat\"\n      },\n      REG_EXP_CAMELIZE = /\\-[a-z]/g;\n  \n  function camelize(str) {\n    return str.replace(REG_EXP_CAMELIZE, function(match) {\n      return match.charAt(1).toUpperCase();\n    });\n  }\n  \n  return function(property) {\n    return {\n      from: function(element) {\n        if (element.nodeType !== wysihtml5.ELEMENT_NODE) {\n          return;\n        }\n        \n        var doc               = element.ownerDocument,\n            camelizedProperty = stylePropertyMapping[property] || camelize(property),\n            style             = element.style,\n            currentStyle      = element.currentStyle,\n            styleValue        = style[camelizedProperty];\n        if (styleValue) {\n          return styleValue;\n        }\n        \n        // currentStyle is no standard and only supported by Opera and IE but it has one important advantage over the standard-compliant\n        // window.getComputedStyle, since it returns css property values in their original unit:\n        // If you set an elements width to \"50%\", window.getComputedStyle will give you it's current width in px while currentStyle\n        // gives you the original \"50%\".\n        // Opera supports both, currentStyle and window.getComputedStyle, that's why checking for currentStyle should have higher prio\n        if (currentStyle) {\n          try {\n                return currentStyle[camelizedProperty];\n          } catch(e) {\n            //ie will occasionally fail for unknown reasons. swallowing exception\n          }\n        }\n\n        var win                 = doc.defaultView || doc.parentWindow,\n            needsOverflowReset  = (property === \"height\" || property === \"width\") && element.nodeName === \"TEXTAREA\",\n            originalOverflow,\n            returnValue;\n\n        if (win.getComputedStyle) {\n          // Chrome and Safari both calculate a wrong width and height for textareas when they have scroll bars\n          // therfore we remove and restore the scrollbar and calculate the value in between\n          if (needsOverflowReset) {\n            originalOverflow = style.overflow;\n            style.overflow = \"hidden\";\n          }\n          returnValue = win.getComputedStyle(element, null).getPropertyValue(property);\n          if (needsOverflowReset) {\n            style.overflow = originalOverflow || \"\";\n          }\n          return returnValue;\n        }\n      }\n    };\n  };\n})();/**\n * High performant way to check whether an element with a specific tag name is in the given document\n * Optimized for being heavily executed\n * Unleashes the power of live node lists\n *\n * @param {Object} doc The document object of the context where to check\n * @param {String} tagName Upper cased tag name\n * @example\n *    wysihtml5.dom.hasElementWithTagName(document, \"IMG\");\n */\nwysihtml5.dom.hasElementWithTagName = (function() {\n  var LIVE_CACHE          = {},\n      DOCUMENT_IDENTIFIER = 1;\n  \n  function _getDocumentIdentifier(doc) {\n    return doc._wysihtml5_identifier || (doc._wysihtml5_identifier = DOCUMENT_IDENTIFIER++);\n  }\n  \n  return function(doc, tagName) {\n    var key         = _getDocumentIdentifier(doc) + \":\" + tagName,\n        cacheEntry  = LIVE_CACHE[key];\n    if (!cacheEntry) {\n      cacheEntry = LIVE_CACHE[key] = doc.getElementsByTagName(tagName);\n    }\n    \n    return cacheEntry.length > 0;\n  };\n})();/**\n * High performant way to check whether an element with a specific class name is in the given document\n * Optimized for being heavily executed\n * Unleashes the power of live node lists\n *\n * @param {Object} doc The document object of the context where to check\n * @param {String} tagName Upper cased tag name\n * @example\n *    wysihtml5.dom.hasElementWithClassName(document, \"foobar\");\n */\n(function(wysihtml5) {\n  var LIVE_CACHE          = {},\n      DOCUMENT_IDENTIFIER = 1;\n\n  function _getDocumentIdentifier(doc) {\n    return doc._wysihtml5_identifier || (doc._wysihtml5_identifier = DOCUMENT_IDENTIFIER++);\n  }\n  \n  wysihtml5.dom.hasElementWithClassName = function(doc, className) {\n    // getElementsByClassName is not supported by IE<9\n    // but is sometimes mocked via library code (which then doesn't return live node lists)\n    if (!wysihtml5.browser.supportsNativeGetElementsByClassName()) {\n      return !!doc.querySelector(\".\" + className);\n    }\n\n    var key         = _getDocumentIdentifier(doc) + \":\" + className,\n        cacheEntry  = LIVE_CACHE[key];\n    if (!cacheEntry) {\n      cacheEntry = LIVE_CACHE[key] = doc.getElementsByClassName(className);\n    }\n\n    return cacheEntry.length > 0;\n  };\n})(wysihtml5);\nwysihtml5.dom.insert = function(elementToInsert) {\n  return {\n    after: function(element) {\n      element.parentNode.insertBefore(elementToInsert, element.nextSibling);\n    },\n    \n    before: function(element) {\n      element.parentNode.insertBefore(elementToInsert, element);\n    },\n    \n    into: function(element) {\n      element.appendChild(elementToInsert);\n    }\n  };\n};wysihtml5.dom.insertCSS = function(rules) {\n  rules = rules.join(\"\\n\");\n  \n  return {\n    into: function(doc) {\n      var head         = doc.head || doc.getElementsByTagName(\"head\")[0],\n          styleElement = doc.createElement(\"style\");\n\n      styleElement.type = \"text/css\";\n\n      if (styleElement.styleSheet) {\n        styleElement.styleSheet.cssText = rules;\n      } else {\n        styleElement.appendChild(doc.createTextNode(rules));\n      }\n\n      if (head) {\n        head.appendChild(styleElement);\n      }\n    }\n  };\n};/**\n * Method to set dom events\n *\n * @example\n *    wysihtml5.dom.observe(iframe.contentWindow.document.body, [\"focus\", \"blur\"], function() { ... });\n */\nwysihtml5.dom.observe = function(element, eventNames, handler) {\n  eventNames = typeof(eventNames) === \"string\" ? [eventNames] : eventNames;\n  \n  var handlerWrapper,\n      eventName,\n      i       = 0,\n      length  = eventNames.length;\n  \n  for (; i<length; i++) {\n    eventName = eventNames[i];\n    if (element.addEventListener) {\n      element.addEventListener(eventName, handler, false);\n    } else {\n      handlerWrapper = function(event) {\n        if (!(\"target\" in event)) {\n          event.target = event.srcElement;\n        }\n        event.preventDefault = event.preventDefault || function() {\n          this.returnValue = false;\n        };\n        event.stopPropagation = event.stopPropagation || function() {\n          this.cancelBubble = true;\n        };\n        handler.call(element, event);\n      };\n      element.attachEvent(\"on\" + eventName, handlerWrapper);\n    }\n  }\n  \n  return {\n    stop: function() {\n      var eventName,\n          i       = 0,\n          length  = eventNames.length;\n      for (; i<length; i++) {\n        eventName = eventNames[i];\n        if (element.removeEventListener) {\n          element.removeEventListener(eventName, handler, false);\n        } else {\n          element.detachEvent(\"on\" + eventName, handlerWrapper);\n        }\n      }\n    }\n  };\n};\n/**\n * HTML Sanitizer\n * Rewrites the HTML based on given rules\n *\n * @param {Element|String} elementOrHtml HTML String to be sanitized OR element whose content should be sanitized\n * @param {Object} [rules] List of rules for rewriting the HTML, if there's no rule for an element it will\n *    be converted to a \"span\". Each rule is a key/value pair where key is the tag to convert, and value the\n *    desired substitution.\n * @param {Object} context Document object in which to parse the html, needed to sandbox the parsing\n *\n * @return {Element|String} Depends on the elementOrHtml parameter. When html then the sanitized html as string elsewise the element.\n *\n * @example\n *    var userHTML = '<div id=\"foo\" onclick=\"alert(1);\"><p><font color=\"red\">foo</font><script>alert(1);</script></p></div>';\n *    wysihtml5.dom.parse(userHTML, {\n *      tags {\n *        p:      \"div\",      // Rename p tags to div tags\n *        font:   \"span\"      // Rename font tags to span tags\n *        div:    true,       // Keep them, also possible (same result when passing: \"div\" or true)\n *        script: undefined   // Remove script elements\n *      }\n *    });\n *    // => <div><div><span>foo bar</span></div></div>\n *\n *    var userHTML = '<table><tbody><tr><td>I'm a table!</td></tr></tbody></table>';\n *    wysihtml5.dom.parse(userHTML);\n *    // => '<span><span><span><span>I'm a table!</span></span></span></span>'\n *\n *    var userHTML = '<div>foobar<br>foobar</div>';\n *    wysihtml5.dom.parse(userHTML, {\n *      tags: {\n *        div: undefined,\n *        br:  true\n *      }\n *    });\n *    // => ''\n *\n *    var userHTML = '<div class=\"red\">foo</div><div class=\"pink\">bar</div>';\n *    wysihtml5.dom.parse(userHTML, {\n *      classes: {\n *        red:    1,\n *        green:  1\n *      },\n *      tags: {\n *        div: {\n *          rename_tag:     \"p\"\n *        }\n *      }\n *    });\n *    // => '<p class=\"red\">foo</p><p>bar</p>'\n */\nwysihtml5.dom.parse = (function() {\n  \n  /**\n   * It's not possible to use a XMLParser/DOMParser as HTML5 is not always well-formed XML\n   * new DOMParser().parseFromString('<img src=\"foo.gif\">') will cause a parseError since the\n   * node isn't closed\n   *\n   * Therefore we've to use the browser's ordinary HTML parser invoked by setting innerHTML.\n   */\n  var NODE_TYPE_MAPPING = {\n        \"1\": _handleElement,\n        \"3\": _handleText\n      },\n      // Rename unknown tags to this\n      DEFAULT_NODE_NAME   = \"span\",\n      WHITE_SPACE_REG_EXP = /\\s+/,\n      defaultRules        = { tags: {}, classes: {} },\n      currentRules        = {};\n  \n  /**\n   * Iterates over all childs of the element, recreates them, appends them into a document fragment\n   * which later replaces the entire body content\n   */\n  function parse(elementOrHtml, rules, context, cleanUp) {\n    wysihtml5.lang.object(currentRules).merge(defaultRules).merge(rules).get();\n    \n    context           = context || elementOrHtml.ownerDocument || document;\n    var fragment      = context.createDocumentFragment(),\n        isString      = typeof(elementOrHtml) === \"string\",\n        element,\n        newNode,\n        firstChild;\n    \n    if (isString) {\n      element = wysihtml5.dom.getAsDom(elementOrHtml, context);\n    } else {\n      element = elementOrHtml;\n    }\n    \n    while (element.firstChild) {\n      firstChild  = element.firstChild;\n      element.removeChild(firstChild);\n      newNode = _convert(firstChild, cleanUp);\n      if (newNode) {\n        fragment.appendChild(newNode);\n      }\n    }\n    \n    // Clear element contents\n    element.innerHTML = \"\";\n    \n    // Insert new DOM tree\n    element.appendChild(fragment);\n    \n    return isString ? wysihtml5.quirks.getCorrectInnerHTML(element) : element;\n  }\n  \n  function _convert(oldNode, cleanUp) {\n    var oldNodeType     = oldNode.nodeType,\n        oldChilds       = oldNode.childNodes,\n        oldChildsLength = oldChilds.length,\n        newNode,\n        method          = NODE_TYPE_MAPPING[oldNodeType],\n        i               = 0;\n    \n    newNode = method && method(oldNode);\n    \n    if (!newNode) {\n      return null;\n    }\n    \n    for (i=0; i<oldChildsLength; i++) {\n      newChild = _convert(oldChilds[i], cleanUp);\n      if (newChild) {\n        newNode.appendChild(newChild);\n      }\n    }\n    \n    // Cleanup senseless <span> elements\n    if (cleanUp &&\n        newNode.childNodes.length <= 1 &&\n        newNode.nodeName.toLowerCase() === DEFAULT_NODE_NAME &&\n        !newNode.attributes.length) {\n      return newNode.firstChild;\n    }\n    \n    return newNode;\n  }\n  \n  function _handleElement(oldNode) {\n    var rule,\n        newNode,\n        endTag,\n        tagRules    = currentRules.tags,\n        nodeName    = oldNode.nodeName.toLowerCase(),\n        scopeName   = oldNode.scopeName;\n    \n    /**\n     * We already parsed that element\n     * ignore it! (yes, this sometimes happens in IE8 when the html is invalid)\n     */\n    if (oldNode._wysihtml5) {\n      return null;\n    }\n    oldNode._wysihtml5 = 1;\n    \n    if (oldNode.className === \"wysihtml5-temp\") {\n      return null;\n    }\n    \n    /**\n     * IE is the only browser who doesn't include the namespace in the\n     * nodeName, that's why we have to prepend it by ourselves\n     * scopeName is a proprietary IE feature\n     * read more here http://msdn.microsoft.com/en-us/library/ms534388(v=vs.85).aspx\n     */\n    if (scopeName && scopeName != \"HTML\") {\n      nodeName = scopeName + \":\" + nodeName;\n    }\n    \n    /**\n     * Repair node\n     * IE is a bit bitchy when it comes to invalid nested markup which includes unclosed tags\n     * A <p> doesn't need to be closed according HTML4-5 spec, we simply replace it with a <div> to preserve its content and layout\n     */\n    if (\"outerHTML\" in oldNode) {\n      if (!wysihtml5.browser.autoClosesUnclosedTags() &&\n          oldNode.nodeName === \"P\" &&\n          oldNode.outerHTML.slice(-4).toLowerCase() !== \"</p>\") {\n        nodeName = \"div\";\n      }\n    }\n    \n    if (nodeName in tagRules) {\n      rule = tagRules[nodeName];\n      if (!rule || rule.remove) {\n        return null;\n      }\n      \n      rule = typeof(rule) === \"string\" ? { rename_tag: rule } : rule;\n    } else if (oldNode.firstChild) {\n      rule = { rename_tag: DEFAULT_NODE_NAME };\n    } else {\n      // Remove empty unknown elements\n      return null;\n    }\n    \n    newNode = oldNode.ownerDocument.createElement(rule.rename_tag || nodeName);\n    _handleAttributes(oldNode, newNode, rule);\n    \n    oldNode = null;\n    return newNode;\n  }\n  \n  function _handleAttributes(oldNode, newNode, rule) {\n    var attributes          = {},                         // fresh new set of attributes to set on newNode\n        setClass            = rule.set_class,             // classes to set\n        addClass            = rule.add_class,             // add classes based on existing attributes\n        setAttributes       = rule.set_attributes,        // attributes to set on the current node\n        checkAttributes     = rule.check_attributes,      // check/convert values of attributes\n        allowedClasses      = currentRules.classes,\n        i                   = 0,\n        classes             = [],\n        newClasses          = [],\n        newUniqueClasses    = [],\n        oldClasses          = [],\n        classesLength,\n        newClassesLength,\n        currentClass,\n        newClass,\n        attributeName,\n        newAttributeValue,\n        method;\n    \n    if (setAttributes) {\n      attributes = wysihtml5.lang.object(setAttributes).clone();\n    }\n    \n    if (checkAttributes) {\n      for (attributeName in checkAttributes) {\n        method = attributeCheckMethods[checkAttributes[attributeName]];\n        if (!method) {\n          continue;\n        }\n        newAttributeValue = method(_getAttribute(oldNode, attributeName));\n        if (typeof(newAttributeValue) === \"string\") {\n          attributes[attributeName] = newAttributeValue;\n        }\n      }\n    }\n    \n    if (setClass) {\n      classes.push(setClass);\n    }\n    \n    if (addClass) {\n      for (attributeName in addClass) {\n        method = addClassMethods[addClass[attributeName]];\n        if (!method) {\n          continue;\n        }\n        newClass = method(_getAttribute(oldNode, attributeName));\n        if (typeof(newClass) === \"string\") {\n          classes.push(newClass);\n        }\n      }\n    }\n    \n    // make sure that wysihtml5 temp class doesn't get stripped out\n    allowedClasses[\"_wysihtml5-temp-placeholder\"] = 1;\n    \n    // add old classes last\n    oldClasses = oldNode.getAttribute(\"class\");\n    if (oldClasses) {\n      classes = classes.concat(oldClasses.split(WHITE_SPACE_REG_EXP));\n    }\n    classesLength = classes.length;\n    for (; i<classesLength; i++) {\n      currentClass = classes[i];\n      if (allowedClasses[currentClass]) {\n        newClasses.push(currentClass);\n      }\n    }\n    \n    // remove duplicate entries and preserve class specificity\n    newClassesLength = newClasses.length;\n    while (newClassesLength--) {\n      currentClass = newClasses[newClassesLength];\n      if (!wysihtml5.lang.array(newUniqueClasses).contains(currentClass)) {\n        newUniqueClasses.unshift(currentClass);\n      }\n    }\n    \n    if (newUniqueClasses.length) {\n      attributes[\"class\"] = newUniqueClasses.join(\" \");\n    }\n    \n    // set attributes on newNode\n    for (attributeName in attributes) {\n      // Setting attributes can cause a js error in IE under certain circumstances\n      // eg. on a <img> under https when it's new attribute value is non-https\n      // TODO: Investigate this further and check for smarter handling\n      try {\n        newNode.setAttribute(attributeName, attributes[attributeName]);\n      } catch(e) {}\n    }\n    \n    // IE8 sometimes loses the width/height attributes when those are set before the \"src\"\n    // so we make sure to set them again\n    if (attributes.src) {\n      if (typeof(attributes.width) !== \"undefined\") {\n        newNode.setAttribute(\"width\", attributes.width);\n      }\n      if (typeof(attributes.height) !== \"undefined\") {\n        newNode.setAttribute(\"height\", attributes.height);\n      }\n    }\n  }\n  \n  /**\n   * IE gives wrong results for hasAttribute/getAttribute, for example:\n   *    var td = document.createElement(\"td\");\n   *    td.getAttribute(\"rowspan\"); // => \"1\" in IE\n   *\n   * Therefore we have to check the element's outerHTML for the attribute\n   */\n  var HAS_GET_ATTRIBUTE_BUG = !wysihtml5.browser.supportsGetAttributeCorrectly();\n  function _getAttribute(node, attributeName) {\n    attributeName = attributeName.toLowerCase();\n    var nodeName = node.nodeName;\n    if (nodeName == \"IMG\" && attributeName == \"src\" && _isLoadedImage(node) === true) {\n      // Get 'src' attribute value via object property since this will always contain the\n      // full absolute url (http://...)\n      // this fixes a very annoying bug in firefox (ver 3.6 & 4) and IE 8 where images copied from the same host\n      // will have relative paths, which the sanitizer strips out (see attributeCheckMethods.url)\n      return node.src;\n    } else if (HAS_GET_ATTRIBUTE_BUG && \"outerHTML\" in node) {\n      // Don't trust getAttribute/hasAttribute in IE 6-8, instead check the element's outerHTML\n      var outerHTML      = node.outerHTML.toLowerCase(),\n          // TODO: This might not work for attributes without value: <input disabled>\n          hasAttribute   = outerHTML.indexOf(\" \" + attributeName +  \"=\") != -1;\n      \n      return hasAttribute ? node.getAttribute(attributeName) : null;\n    } else{\n      return node.getAttribute(attributeName);\n    }\n  }\n  \n  /**\n   * Check whether the given node is a proper loaded image\n   * FIXME: Returns undefined when unknown (Chrome, Safari)\n   */\n  function _isLoadedImage(node) {\n    try {\n      return node.complete && !node.mozMatchesSelector(\":-moz-broken\");\n    } catch(e) {\n      if (node.complete && node.readyState === \"complete\") {\n        return true;\n      }\n    }\n  }\n  \n  function _handleText(oldNode) {\n    return oldNode.ownerDocument.createTextNode(oldNode.data);\n  }\n  \n  \n  // ------------ attribute checks ------------ \\\\\n  var attributeCheckMethods = {\n    url: (function() {\n      var REG_EXP = /^https?:\\/\\//i;\n      return function(attributeValue) {\n        if (!attributeValue || !attributeValue.match(REG_EXP)) {\n          return null;\n        }\n        return attributeValue.replace(REG_EXP, function(match) {\n          return match.toLowerCase();\n        });\n      };\n    })(),\n    \n    alt: (function() {\n      var REG_EXP = /[^ a-z0-9_\\-]/gi;\n      return function(attributeValue) {\n        if (!attributeValue) {\n          return \"\";\n        }\n        return attributeValue.replace(REG_EXP, \"\");\n      };\n    })(),\n    \n    numbers: (function() {\n      var REG_EXP = /\\D/g;\n      return function(attributeValue) {\n        attributeValue = (attributeValue || \"\").replace(REG_EXP, \"\");\n        return attributeValue || null;\n      };\n    })()\n  };\n  \n  // ------------ class converter (converts an html attribute to a class name) ------------ \\\\\n  var addClassMethods = {\n    align_img: (function() {\n      var mapping = {\n        left:   \"wysiwyg-float-left\",\n        right:  \"wysiwyg-float-right\"\n      };\n      return function(attributeValue) {\n        return mapping[String(attributeValue).toLowerCase()];\n      };\n    })(),\n    \n    align_text: (function() {\n      var mapping = {\n        left:     \"wysiwyg-text-align-left\",\n        right:    \"wysiwyg-text-align-right\",\n        center:   \"wysiwyg-text-align-center\",\n        justify:  \"wysiwyg-text-align-justify\"\n      };\n      return function(attributeValue) {\n        return mapping[String(attributeValue).toLowerCase()];\n      };\n    })(),\n    \n    clear_br: (function() {\n      var mapping = {\n        left:   \"wysiwyg-clear-left\",\n        right:  \"wysiwyg-clear-right\",\n        both:   \"wysiwyg-clear-both\",\n        all:    \"wysiwyg-clear-both\"\n      };\n      return function(attributeValue) {\n        return mapping[String(attributeValue).toLowerCase()];\n      };\n    })(),\n    \n    size_font: (function() {\n      var mapping = {\n        \"1\": \"wysiwyg-font-size-xx-small\",\n        \"2\": \"wysiwyg-font-size-small\",\n        \"3\": \"wysiwyg-font-size-medium\",\n        \"4\": \"wysiwyg-font-size-large\",\n        \"5\": \"wysiwyg-font-size-x-large\",\n        \"6\": \"wysiwyg-font-size-xx-large\",\n        \"7\": \"wysiwyg-font-size-xx-large\",\n        \"-\": \"wysiwyg-font-size-smaller\",\n        \"+\": \"wysiwyg-font-size-larger\"\n      };\n      return function(attributeValue) {\n        return mapping[String(attributeValue).charAt(0)];\n      };\n    })()\n  };\n  \n  return parse;\n})();/**\n * Checks for empty text node childs and removes them\n *\n * @param {Element} node The element in which to cleanup\n * @example\n *    wysihtml5.dom.removeEmptyTextNodes(element);\n */\nwysihtml5.dom.removeEmptyTextNodes = function(node) {\n  var childNode,\n      childNodes        = wysihtml5.lang.array(node.childNodes).get(),\n      childNodesLength  = childNodes.length,\n      i                 = 0;\n  for (; i<childNodesLength; i++) {\n    childNode = childNodes[i];\n    if (childNode.nodeType === wysihtml5.TEXT_NODE && childNode.data === \"\") {\n      childNode.parentNode.removeChild(childNode);\n    }\n  }\n};\n/**\n * Renames an element (eg. a <div> to a <p>) and keeps its childs\n *\n * @param {Element} element The list element which should be renamed\n * @param {Element} newNodeName The desired tag name\n *\n * @example\n *    <!-- Assume the following dom: -->\n *    <ul id=\"list\">\n *      <li>eminem</li>\n *      <li>dr. dre</li>\n *      <li>50 Cent</li>\n *    </ul>\n *\n *    <script>\n *      wysihtml5.dom.renameElement(document.getElementById(\"list\"), \"ol\");\n *    </script>\n *\n *    <!-- Will result in: -->\n *    <ol>\n *      <li>eminem</li>\n *      <li>dr. dre</li>\n *      <li>50 Cent</li>\n *    </ol>\n */\nwysihtml5.dom.renameElement = function(element, newNodeName) {\n  var newElement = element.ownerDocument.createElement(newNodeName),\n      firstChild;\n  while (firstChild = element.firstChild) {\n    newElement.appendChild(firstChild);\n  }\n  wysihtml5.dom.copyAttributes([\"align\", \"className\"]).from(element).to(newElement);\n  element.parentNode.replaceChild(newElement, element);\n  return newElement;\n};/**\n * Takes an element, removes it and replaces it with it's childs\n * \n * @param {Object} node The node which to replace with it's child nodes\n * @example\n *    <div id=\"foo\">\n *      <span>hello</span>\n *    </div>\n *    <script>\n *      // Remove #foo and replace with it's children\n *      wysihtml5.dom.replaceWithChildNodes(document.getElementById(\"foo\"));\n *    </script>\n */\nwysihtml5.dom.replaceWithChildNodes = function(node) {\n  if (!node.parentNode) {\n    return;\n  }\n  \n  if (!node.firstChild) {\n    node.parentNode.removeChild(node);\n    return;\n  }\n  \n  var fragment = node.ownerDocument.createDocumentFragment();\n  while (node.firstChild) {\n    fragment.appendChild(node.firstChild);\n  }\n  node.parentNode.replaceChild(fragment, node);\n  node = fragment = null;\n};\n/**\n * Unwraps an unordered/ordered list\n *\n * @param {Element} element The list element which should be unwrapped\n *\n * @example\n *    <!-- Assume the following dom: -->\n *    <ul id=\"list\">\n *      <li>eminem</li>\n *      <li>dr. dre</li>\n *      <li>50 Cent</li>\n *    </ul>\n *\n *    <script>\n *      wysihtml5.dom.resolveList(document.getElementById(\"list\"));\n *    </script>\n *\n *    <!-- Will result in: -->\n *    eminem<br>\n *    dr. dre<br>\n *    50 Cent<br>\n */\n(function(dom) {\n  function _isBlockElement(node) {\n    return dom.getStyle(\"display\").from(node) === \"block\";\n  }\n  \n  function _isLineBreak(node) {\n    return node.nodeName === \"BR\";\n  }\n  \n  function _appendLineBreak(element) {\n    var lineBreak = element.ownerDocument.createElement(\"br\");\n    element.appendChild(lineBreak);\n  }\n  \n  function resolveList(list) {\n    if (list.nodeName !== \"MENU\" && list.nodeName !== \"UL\" && list.nodeName !== \"OL\") {\n      return;\n    }\n    \n    var doc             = list.ownerDocument,\n        fragment        = doc.createDocumentFragment(),\n        previousSibling = list.previousElementSibling || list.previousSibling,\n        firstChild,\n        lastChild,\n        isLastChild,\n        shouldAppendLineBreak,\n        listItem;\n    \n    if (previousSibling && !_isBlockElement(previousSibling)) {\n      _appendLineBreak(fragment);\n    }\n    \n    while (listItem = list.firstChild) {\n      lastChild = listItem.lastChild;\n      while (firstChild = listItem.firstChild) {\n        isLastChild           = firstChild === lastChild;\n        // This needs to be done before appending it to the fragment, as it otherwise will loose style information\n        shouldAppendLineBreak = isLastChild && !_isBlockElement(firstChild) && !_isLineBreak(firstChild);\n        fragment.appendChild(firstChild);\n        if (shouldAppendLineBreak) {\n          _appendLineBreak(fragment);\n        }\n      }\n      \n      listItem.parentNode.removeChild(listItem);\n    }\n    list.parentNode.replaceChild(fragment, list);\n  }\n  \n  dom.resolveList = resolveList;\n})(wysihtml5.dom);/**\n * Sandbox for executing javascript, parsing css styles and doing dom operations in a secure way\n *\n * Browser Compatibility:\n *  - Secure in MSIE 6+, but only when the user hasn't made changes to his security level \"restricted\"\n *  - Partially secure in other browsers (Firefox, Opera, Safari, Chrome, ...)\n *\n * Please note that this class can't benefit from the HTML5 sandbox attribute for the following reasons:\n *    - sandboxing doesn't work correctly with inlined content (src=\"javascript:'<html>...</html>'\")\n *    - sandboxing of physical documents causes that the dom isn't accessible anymore from the outside (iframe.contentWindow, ...)\n *    - setting the \"allow-same-origin\" flag would fix that, but then still javascript and dom events refuse to fire\n *    - therefore the \"allow-scripts\" flag is needed, which then would deactivate any security, as the js executed inside the iframe\n *      can do anything as if the sandbox attribute wasn't set\n *\n * @param {Function} [readyCallback] Method that gets invoked when the sandbox is ready\n * @param {Object} [config] Optional parameters\n *\n * @example\n *    new wysihtml5.dom.Sandbox(function(sandbox) {\n *      sandbox.getWindow().document.body.innerHTML = '<img src=foo.gif onerror=\"alert(document.cookie)\">';\n *    });\n */\n(function(wysihtml5) {\n  var /**\n       * Default configuration\n       */\n      doc                 = document,\n      /**\n       * Properties to unset/protect on the window object\n       */\n      windowProperties    = [\n        \"parent\", \"top\", \"opener\", \"frameElement\", \"frames\",\n        \"localStorage\", \"globalStorage\", \"sessionStorage\", \"indexedDB\"\n      ],\n      /**\n       * Properties on the window object which are set to an empty function\n       */\n      windowProperties2   = [\n        \"open\", \"close\", \"openDialog\", \"showModalDialog\",\n        \"alert\", \"confirm\", \"prompt\",\n        \"openDatabase\", \"postMessage\",\n        \"XMLHttpRequest\", \"XDomainRequest\"\n      ],\n      /**\n       * Properties to unset/protect on the document object\n       */\n      documentProperties  = [\n        \"referrer\",\n        \"write\", \"open\", \"close\"\n      ];\n  \n  wysihtml5.dom.Sandbox = Base.extend(\n    /** @scope wysihtml5.dom.Sandbox.prototype */ {\n\n    constructor: function(readyCallback, config) {\n      this.callback = readyCallback || wysihtml5.EMPTY_FUNCTION;\n      this.config   = wysihtml5.lang.object({}).merge(config).get();\n      this.iframe   = this._createIframe();\n    },\n    \n    insertInto: function(element) {\n      if (typeof(element) === \"string\") {\n        element = doc.getElementById(element);\n      }\n      \n      element.appendChild(this.iframe);\n    },\n\n    getIframe: function() {\n      return this.iframe;\n    },\n\n    getWindow: function() {\n      this._readyError();\n    },\n\n    getDocument: function() {\n      this._readyError();\n    },\n\n    destroy: function() {\n      var iframe = this.getIframe();\n      iframe.parentNode.removeChild(iframe);\n    },\n\n    _readyError: function() {\n      throw new Error(\"wysihtml5.Sandbox: Sandbox iframe isn't loaded yet\");\n    },\n\n    /**\n     * Creates the sandbox iframe\n     *\n     * Some important notes:\n     *  - We can't use HTML5 sandbox for now:\n     *    setting it causes that the iframe's dom can't be accessed from the outside\n     *    Therefore we need to set the \"allow-same-origin\" flag which enables accessing the iframe's dom\n     *    But then there's another problem, DOM events (focus, blur, change, keypress, ...) aren't fired.\n     *    In order to make this happen we need to set the \"allow-scripts\" flag.\n     *    A combination of allow-scripts and allow-same-origin is almost the same as setting no sandbox attribute at all.\n     *  - Chrome & Safari, doesn't seem to support sandboxing correctly when the iframe's html is inlined (no physical document)\n     *  - IE needs to have the security=\"restricted\" attribute set before the iframe is \n     *    inserted into the dom tree\n     *  - Believe it or not but in IE \"security\" in document.createElement(\"iframe\") is false, even\n     *    though it supports it\n     *  - When an iframe has security=\"restricted\", in IE eval() & execScript() don't work anymore\n     *  - IE doesn't fire the onload event when the content is inlined in the src attribute, therefore we rely\n     *    on the onreadystatechange event\n     */\n    _createIframe: function() {\n      var that   = this,\n          iframe = doc.createElement(\"iframe\");\n      iframe.className = \"wysihtml5-sandbox\";\n      wysihtml5.dom.setAttributes({\n        \"security\":           \"restricted\",\n        \"allowtransparency\":  \"true\",\n        \"frameborder\":        0,\n        \"width\":              0,\n        \"height\":             0,\n        \"marginwidth\":        0,\n        \"marginheight\":       0\n      }).on(iframe);\n\n      // Setting the src like this prevents ssl warnings in IE6\n      if (wysihtml5.browser.throwsMixedContentWarningWhenIframeSrcIsEmpty()) {\n        iframe.src = \"javascript:'<html></html>'\";\n      }\n\n      iframe.onload = function() {\n        iframe.onreadystatechange = iframe.onload = null;\n        that._onLoadIframe(iframe);\n      };\n\n      iframe.onreadystatechange = function() {\n        if (/loaded|complete/.test(iframe.readyState)) {\n          iframe.onreadystatechange = iframe.onload = null;\n          that._onLoadIframe(iframe);\n        }\n      };\n\n      return iframe;\n    },\n\n    /**\n     * Callback for when the iframe has finished loading\n     */\n    _onLoadIframe: function(iframe) {\n      // don't resume when the iframe got unloaded (eg. by removing it from the dom)\n      if (!wysihtml5.dom.contains(doc.documentElement, iframe)) {\n        return;\n      }\n\n      var that           = this,\n          iframeWindow   = iframe.contentWindow,\n          iframeDocument = iframe.contentWindow.document,\n          charset        = doc.characterSet || doc.charset || \"utf-8\",\n          sandboxHtml    = this._getHtml({\n            charset:      charset,\n            stylesheets:  this.config.stylesheets\n          });\n\n      // Create the basic dom tree including proper DOCTYPE and charset\n      iframeDocument.open(\"text/html\", \"replace\");\n      iframeDocument.write(sandboxHtml);\n      iframeDocument.close();\n\n      this.getWindow = function() { return iframe.contentWindow; };\n      this.getDocument = function() { return iframe.contentWindow.document; };\n\n      // Catch js errors and pass them to the parent's onerror event\n      // addEventListener(\"error\") doesn't work properly in some browsers\n      // TODO: apparently this doesn't work in IE9!\n      iframeWindow.onerror = function(errorMessage, fileName, lineNumber) {\n        throw new Error(\"wysihtml5.Sandbox: \" + errorMessage, fileName, lineNumber);\n      };\n\n      if (!wysihtml5.browser.supportsSandboxedIframes()) {\n        // Unset a bunch of sensitive variables\n        // Please note: This isn't hack safe!  \n        // It more or less just takes care of basic attacks and prevents accidental theft of sensitive information\n        // IE is secure though, which is the most important thing, since IE is the only browser, who\n        // takes over scripts & styles into contentEditable elements when copied from external websites\n        // or applications (Microsoft Word, ...)\n        var i, length;\n        for (i=0, length=windowProperties.length; i<length; i++) {\n          this._unset(iframeWindow, windowProperties[i]);\n        }\n        for (i=0, length=windowProperties2.length; i<length; i++) {\n          this._unset(iframeWindow, windowProperties2[i], wysihtml5.EMPTY_FUNCTION);\n        }\n        for (i=0, length=documentProperties.length; i<length; i++) {\n          this._unset(iframeDocument, documentProperties[i]);\n        }\n        // This doesn't work in Safari 5 \n        // See http://stackoverflow.com/questions/992461/is-it-possible-to-override-document-cookie-in-webkit\n        this._unset(iframeDocument, \"cookie\", \"\", true);\n      }\n\n      this.loaded = true;\n\n      // Trigger the callback\n      setTimeout(function() { that.callback(that); }, 0);\n    },\n\n    _getHtml: function(templateVars) {\n      var stylesheets = templateVars.stylesheets,\n          html        = \"\",\n          i           = 0,\n          length;\n      stylesheets = typeof(stylesheets) === \"string\" ? [stylesheets] : stylesheets;\n      if (stylesheets) {\n        length = stylesheets.length;\n        for (; i<length; i++) {\n          html += '<link rel=\"stylesheet\" href=\"' + stylesheets[i] + '\">';\n        }\n      }\n      templateVars.stylesheets = html;\n\n      return wysihtml5.lang.string(\n        '<!DOCTYPE html><html><head>'\n        + '<meta charset=\"#{charset}\">#{stylesheets}</head>'\n        + '<body></body></html>'\n      ).interpolate(templateVars);\n    },\n\n    /**\n     * Method to unset/override existing variables\n     * @example\n     *    // Make cookie unreadable and unwritable\n     *    this._unset(document, \"cookie\", \"\", true);\n     */\n    _unset: function(object, property, value, setter) {\n      try { object[property] = value; } catch(e) {}\n\n      try { object.__defineGetter__(property, function() { return value; }); } catch(e) {}\n      if (setter) {\n        try { object.__defineSetter__(property, function() {}); } catch(e) {}\n      }\n\n      if (!wysihtml5.browser.crashesWhenDefineProperty(property)) {\n        try {\n          var config = {\n            get: function() { return value; }\n          };\n          if (setter) {\n            config.set = function() {};\n          }\n          Object.defineProperty(object, property, config);\n        } catch(e) {}\n      }\n    }\n  });\n})(wysihtml5);\n(function() {\n  var mapping = {\n    \"className\": \"class\"\n  };\n  wysihtml5.dom.setAttributes = function(attributes) {\n    return {\n      on: function(element) {\n        for (var i in attributes) {\n          element.setAttribute(mapping[i] || i, attributes[i]);\n        }\n      }\n    }\n  };\n})();wysihtml5.dom.setStyles = function(styles) {\n  return {\n    on: function(element) {\n      var style = element.style;\n      if (typeof(styles) === \"string\") {\n        style.cssText += \";\" + styles;\n        return;\n      }\n      for (var i in styles) {\n        if (i === \"float\") {\n          style.cssFloat = styles[i];\n          style.styleFloat = styles[i];\n        } else {\n          style[i] = styles[i];\n        }\n      }\n    }\n  };\n};/**\n * Simulate HTML5 placeholder attribute\n *\n * Needed since\n *    - div[contentEditable] elements don't support it\n *    - older browsers (such as IE8 and Firefox 3.6) don't support it at all\n *\n * @param {Object} parent Instance of main wysihtml5.Editor class\n * @param {Element} view Instance of wysihtml5.views.* class\n * @param {String} placeholderText\n *\n * @example\n *    wysihtml.dom.simulatePlaceholder(this, composer, \"Foobar\");\n */\n(function(dom) {\n  dom.simulatePlaceholder = function(editor, view, placeholderText) {\n    var CLASS_NAME = \"placeholder\",\n        unset = function() {\n          if (view.hasPlaceholderSet()) {\n            view.clear();\n          }\n          dom.removeClass(view.element, CLASS_NAME);\n        },\n        set = function() {\n          if (view.isEmpty()) {\n            view.setValue(placeholderText);\n            dom.addClass(view.element, CLASS_NAME);\n          }\n        };\n\n    editor\n      .observe(\"set_placeholder\", set)\n      .observe(\"unset_placeholder\", unset)\n      .observe(\"focus:composer\", unset)\n      .observe(\"paste:composer\", unset)\n      .observe(\"blur:composer\", set);\n\n    set();\n  };\n})(wysihtml5.dom);\n(function(dom) {\n  var documentElement = document.documentElement;\n  if (\"textContent\" in documentElement) {\n    dom.setTextContent = function(element, text) {\n      element.textContent = text;\n    };\n\n    dom.getTextContent = function(element) {\n      return element.textContent;\n    };\n  } else if (\"innerText\" in documentElement) {\n    dom.setTextContent = function(element, text) {\n      element.innerText = text;\n    };\n\n    dom.getTextContent = function(element) {\n      return element.innerText;\n    };\n  } else {\n    dom.setTextContent = function(element, text) {\n      element.nodeValue = text;\n    };\n\n    dom.getTextContent = function(element) {\n      return element.nodeValue;\n    };\n  }\n})(wysihtml5.dom);\n\n/**\n * Fix most common html formatting misbehaviors of browsers implementation when inserting\n * content via copy & paste contentEditable\n *\n * @author Christopher Blum\n */\nwysihtml5.quirks.cleanPastedHTML = (function() {\n  // TODO: We probably need more rules here\n  var defaultRules = {\n    // When pasting underlined links <a> into a contentEditable, IE thinks, it has to insert <u> to keep the styling\n    \"a u\": wysihtml5.dom.replaceWithChildNodes\n  };\n  \n  function cleanPastedHTML(elementOrHtml, rules, context) {\n    rules   = rules || defaultRules;\n    context = context || elementOrHtml.ownerDocument || document;\n    \n    var element,\n        isString = typeof(elementOrHtml) === \"string\",\n        method,\n        matches,\n        matchesLength,\n        i,\n        j = 0;\n    if (isString) {\n      element = wysihtml5.dom.getAsDom(elementOrHtml, context);\n    } else {\n      element = elementOrHtml;\n    }\n    \n    for (i in rules) {\n      matches       = element.querySelectorAll(i);\n      method        = rules[i];\n      matchesLength = matches.length;\n      for (; j<matchesLength; j++) {\n        method(matches[j]);\n      }\n    }\n    \n    matches = elementOrHtml = rules = null;\n    \n    return isString ? element.innerHTML : element;\n  }\n  \n  return cleanPastedHTML;\n})();/**\n * IE and Opera leave an empty paragraph in the contentEditable element after clearing it\n *\n * @param {Object} contentEditableElement The contentEditable element to observe for clearing events\n * @exaple\n *    wysihtml5.quirks.ensureProperClearing(myContentEditableElement);\n */\n(function(wysihtml5) {\n  var dom = wysihtml5.dom;\n  \n  wysihtml5.quirks.ensureProperClearing = (function() {\n    var clearIfNecessary = function(event) {\n      var element = this;\n      setTimeout(function() {\n        var innerHTML = element.innerHTML.toLowerCase();\n        if (innerHTML == \"<p>&nbsp;</p>\" ||\n            innerHTML == \"<p>&nbsp;</p><p>&nbsp;</p>\") {\n          element.innerHTML = \"\";\n        }\n      }, 0);\n    };\n\n    return function(composer) {\n      dom.observe(composer.element, [\"cut\", \"keydown\"], clearIfNecessary);\n    };\n  })();\n\n\n\n  /**\n   * In Opera when the caret is in the first and only item of a list (<ul><li>|</li></ul>) and the list is the first child of the contentEditable element, it's impossible to delete the list by hitting backspace\n   *\n   * @param {Object} contentEditableElement The contentEditable element to observe for clearing events\n   * @exaple\n   *    wysihtml5.quirks.ensureProperClearing(myContentEditableElement);\n   */\n  wysihtml5.quirks.ensureProperClearingOfLists = (function() {\n    var ELEMENTS_THAT_CONTAIN_LI = [\"OL\", \"UL\", \"MENU\"];\n\n    var clearIfNecessary = function(element, contentEditableElement) {\n      if (!contentEditableElement.firstChild || !wysihtml5.lang.array(ELEMENTS_THAT_CONTAIN_LI).contains(contentEditableElement.firstChild.nodeName)) {\n        return;\n      }\n\n      var list = dom.getParentElement(element, { nodeName: ELEMENTS_THAT_CONTAIN_LI });\n      if (!list) {\n        return;\n      }\n\n      var listIsFirstChildOfContentEditable = list == contentEditableElement.firstChild;\n      if (!listIsFirstChildOfContentEditable) {\n        return;\n      }\n\n      var hasOnlyOneListItem = list.childNodes.length <= 1;\n      if (!hasOnlyOneListItem) {\n        return;\n      }\n\n      var onlyListItemIsEmpty = list.firstChild ? list.firstChild.innerHTML === \"\" : true;\n      if (!onlyListItemIsEmpty) {\n        return;\n      }\n\n      list.parentNode.removeChild(list);\n    };\n\n    return function(composer) {\n      dom.observe(composer.element, \"keydown\", function(event) {\n        if (event.keyCode !== wysihtml5.BACKSPACE_KEY) {\n          return;\n        }\n\n        var element = composer.selection.getSelectedNode();\n        clearIfNecessary(element, composer.element);\n      });\n    };\n  })();\n\n})(wysihtml5);\n// See https://bugzilla.mozilla.org/show_bug.cgi?id=664398\n//\n// In Firefox this:\n//      var d = document.createElement(\"div\");\n//      d.innerHTML ='<a href=\"~\"></a>';\n//      d.innerHTML;\n// will result in:\n//      <a href=\"%7E\"></a>\n// which is wrong\n(function(wysihtml5) {\n  var TILDE_ESCAPED = \"%7E\";\n  wysihtml5.quirks.getCorrectInnerHTML = function(element) {\n    var innerHTML = element.innerHTML;\n    if (innerHTML.indexOf(TILDE_ESCAPED) === -1) {\n      return innerHTML;\n    }\n    \n    var elementsWithTilde = element.querySelectorAll(\"[href*='~'], [src*='~']\"),\n        url,\n        urlToSearch,\n        length,\n        i;\n    for (i=0, length=elementsWithTilde.length; i<length; i++) {\n      url         = elementsWithTilde[i].href || elementsWithTilde[i].src;\n      urlToSearch = wysihtml5.lang.string(url).replace(\"~\").by(TILDE_ESCAPED);\n      innerHTML   = wysihtml5.lang.string(innerHTML).replace(urlToSearch).by(url);\n    }\n    return innerHTML;\n  };\n})(wysihtml5);/**\n * Some browsers don't insert line breaks when hitting return in a contentEditable element\n *    - Opera & IE insert new <p> on return\n *    - Chrome & Safari insert new <div> on return\n *    - Firefox inserts <br> on return (yippie!)\n *\n * @param {Element} element\n *\n * @example\n *    wysihtml5.quirks.insertLineBreakOnReturn(element);\n */\n(function(wysihtml5) {\n  var dom                                           = wysihtml5.dom,\n      USE_NATIVE_LINE_BREAK_WHEN_CARET_INSIDE_TAGS  = [\"LI\", \"P\", \"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\"],\n      LIST_TAGS                                     = [\"UL\", \"OL\", \"MENU\"];\n  \n  wysihtml5.quirks.insertLineBreakOnReturn = function(composer) {\n    function unwrap(selectedNode) {\n      var parentElement = dom.getParentElement(selectedNode, { nodeName: [\"P\", \"DIV\"] }, 2);\n      if (!parentElement) {\n        return;\n      }\n\n      var invisibleSpace = document.createTextNode(wysihtml5.INVISIBLE_SPACE);\n      dom.insert(invisibleSpace).before(parentElement);\n      dom.replaceWithChildNodes(parentElement);\n      composer.selection.selectNode(invisibleSpace);\n    }\n\n    function keyDown(event) {\n      var keyCode = event.keyCode;\n      if (event.shiftKey || (keyCode !== wysihtml5.ENTER_KEY && keyCode !== wysihtml5.BACKSPACE_KEY)) {\n        return;\n      }\n\n      var element         = event.target,\n          selectedNode    = composer.selection.getSelectedNode(),\n          blockElement    = dom.getParentElement(selectedNode, { nodeName: USE_NATIVE_LINE_BREAK_WHEN_CARET_INSIDE_TAGS }, 4);\n      if (blockElement) {\n        // Some browsers create <p> elements after leaving a list\n        // check after keydown of backspace and return whether a <p> got inserted and unwrap it\n        if (blockElement.nodeName === \"LI\" && (keyCode === wysihtml5.ENTER_KEY || keyCode === wysihtml5.BACKSPACE_KEY)) {\n          setTimeout(function() {\n            var selectedNode = composer.selection.getSelectedNode(),\n                list,\n                div;\n            if (!selectedNode) {\n              return;\n            }\n\n            list = dom.getParentElement(selectedNode, {\n              nodeName: LIST_TAGS\n            }, 2);\n\n            if (list) {\n              return;\n            }\n\n            unwrap(selectedNode);\n          }, 0);\n        } else if (blockElement.nodeName.match(/H[1-6]/) && keyCode === wysihtml5.ENTER_KEY) {\n          setTimeout(function() {\n            unwrap(composer.selection.getSelectedNode());\n          }, 0);\n        } \n        return;\n      }\n\n      if (keyCode === wysihtml5.ENTER_KEY && !wysihtml5.browser.insertsLineBreaksOnReturn()) {\n        composer.commands.exec(\"insertLineBreak\");\n        event.preventDefault();\n      }\n    }\n    \n    // keypress doesn't fire when you hit backspace\n    dom.observe(composer.element.ownerDocument, \"keydown\", keyDown);\n  };\n})(wysihtml5);/**\n * Force rerendering of a given element\n * Needed to fix display misbehaviors of IE\n *\n * @param {Element} element The element object which needs to be rerendered\n * @example\n *    wysihtml5.quirks.redraw(document.body);\n */\n(function(wysihtml5) {\n  var CLASS_NAME = \"wysihtml5-quirks-redraw\";\n  \n  wysihtml5.quirks.redraw = function(element) {\n    wysihtml5.dom.addClass(element, CLASS_NAME);\n    wysihtml5.dom.removeClass(element, CLASS_NAME);\n    \n    // Following hack is needed for firefox to make sure that image resize handles are properly removed\n    try {\n      var doc = element.ownerDocument;\n      doc.execCommand(\"italic\", false, null);\n      doc.execCommand(\"italic\", false, null);\n    } catch(e) {}\n  };\n})(wysihtml5);/**\n * Selection API\n *\n * @example\n *    var selection = new wysihtml5.Selection(editor);\n */\n(function(wysihtml5) {\n  var dom = wysihtml5.dom;\n  \n  function _getCumulativeOffsetTop(element) {\n    var top = 0;\n    if (element.parentNode) {\n      do {\n        top += element.offsetTop || 0;\n        element = element.offsetParent;\n      } while (element);\n    }\n    return top;\n  }\n  \n  wysihtml5.Selection = Base.extend(\n    /** @scope wysihtml5.Selection.prototype */ {\n    constructor: function(editor) {\n      // Make sure that our external range library is initialized\n      window.rangy.init();\n      \n      this.editor   = editor;\n      this.composer = editor.composer;\n      this.doc      = this.composer.doc;\n    },\n    \n    /**\n     * Get the current selection as a bookmark to be able to later restore it\n     *\n     * @return {Object} An object that represents the current selection\n     */\n    getBookmark: function() {\n      var range = this.getRange();\n      return range && range.cloneRange();\n    },\n\n    /**\n     * Restore a selection retrieved via wysihtml5.Selection.prototype.getBookmark\n     *\n     * @param {Object} bookmark An object that represents the current selection\n     */\n    setBookmark: function(bookmark) {\n      if (!bookmark) {\n        return;\n      }\n\n      this.setSelection(bookmark);\n    },\n\n    /**\n     * Set the caret in front of the given node\n     *\n     * @param {Object} node The element or text node where to position the caret in front of\n     * @example\n     *    selection.setBefore(myElement);\n     */\n    setBefore: function(node) {\n      var range = rangy.createRange(this.doc);\n      range.setStartBefore(node);\n      range.setEndBefore(node);\n      return this.setSelection(range);\n    },\n\n    /**\n     * Set the caret after the given node\n     *\n     * @param {Object} node The element or text node where to position the caret in front of\n     * @example\n     *    selection.setBefore(myElement);\n     */\n    setAfter: function(node) {\n      var range = rangy.createRange(this.doc);\n      range.setStartAfter(node);\n      range.setEndAfter(node);\n      return this.setSelection(range);\n    },\n\n    /**\n     * Ability to select/mark nodes\n     *\n     * @param {Element} node The node/element to select\n     * @example\n     *    selection.selectNode(document.getElementById(\"my-image\"));\n     */\n    selectNode: function(node) {\n      var range           = rangy.createRange(this.doc),\n          isElement       = node.nodeType === wysihtml5.ELEMENT_NODE,\n          canHaveHTML     = \"canHaveHTML\" in node ? node.canHaveHTML : (node.nodeName !== \"IMG\"),\n          content         = isElement ? node.innerHTML : node.data,\n          isEmpty         = (content === \"\" || content === wysihtml5.INVISIBLE_SPACE),\n          displayStyle    = dom.getStyle(\"display\").from(node),\n          isBlockElement  = (displayStyle === \"block\" || displayStyle === \"list-item\");\n\n      if (isEmpty && isElement && canHaveHTML) {\n        // Make sure that caret is visible in node by inserting a zero width no breaking space\n        try { node.innerHTML = wysihtml5.INVISIBLE_SPACE; } catch(e) {}\n      }\n\n      if (canHaveHTML) {\n        range.selectNodeContents(node);\n      } else {\n        range.selectNode(node);\n      }\n\n      if (canHaveHTML && isEmpty && isElement) {\n        range.collapse(isBlockElement);\n      } else if (canHaveHTML && isEmpty) {\n        range.setStartAfter(node);\n        range.setEndAfter(node);\n      }\n\n      this.setSelection(range);\n    },\n\n    /**\n     * Get the node which contains the selection\n     *\n     * @param {Boolean} [controlRange] (only IE) Whether it should return the selected ControlRange element when the selection type is a \"ControlRange\"\n     * @return {Object} The node that contains the caret\n     * @example\n     *    var nodeThatContainsCaret = selection.getSelectedNode();\n     */\n    getSelectedNode: function(controlRange) {\n      var selection,\n          range;\n\n      if (controlRange && this.doc.selection && this.doc.selection.type === \"Control\") {\n        range = this.doc.selection.createRange();\n        if (range && range.length) {\n          return range.item(0);\n        }\n      }\n\n      selection = this.getSelection(this.doc);\n      if (selection.focusNode === selection.anchorNode) {\n        return selection.focusNode;\n      } else {\n        range = this.getRange(this.doc);\n        return range ? range.commonAncestorContainer : this.doc.body;\n      }\n    },\n\n    executeAndRestore: function(method, restoreScrollPosition) {\n      var body                  = this.doc.body,\n          oldScrollTop          = restoreScrollPosition && body.scrollTop,\n          oldScrollLeft         = restoreScrollPosition && body.scrollLeft,\n          className             = \"_wysihtml5-temp-placeholder\",\n          placeholderHTML       = '<span class=\"' + className + '\">' + wysihtml5.INVISIBLE_SPACE + '</span>',\n          range                 = this.getRange(this.doc),\n          newRange;\n      \n      // Nothing selected, execute and say goodbye\n      if (!range) {\n        method(body, body);\n        return;\n      }\n      \n      var node = range.createContextualFragment(placeholderHTML);\n      range.insertNode(node);\n      \n      // Make sure that a potential error doesn't cause our placeholder element to be left as a placeholder\n      try {\n        method(range.startContainer, range.endContainer);\n      } catch(e3) {\n        setTimeout(function() { throw e3; }, 0);\n      }\n      \n      caretPlaceholder = this.doc.querySelector(\".\" + className);\n      if (caretPlaceholder) {\n        newRange = rangy.createRange(this.doc);\n        newRange.selectNode(caretPlaceholder);\n        newRange.deleteContents();\n        this.setSelection(newRange);\n      } else {\n        // fallback for when all hell breaks loose\n        body.focus();\n      }\n\n      if (restoreScrollPosition) {\n        body.scrollTop  = oldScrollTop;\n        body.scrollLeft = oldScrollLeft;\n      }\n\n      // Remove it again, just to make sure that the placeholder is definitely out of the dom tree\n      try {\n        caretPlaceholder.parentNode.removeChild(caretPlaceholder);\n      } catch(e4) {}\n    },\n\n    /**\n     * Different approach of preserving the selection (doesn't modify the dom)\n     * Takes all text nodes in the selection and saves the selection position in the first and last one\n     */\n    executeAndRestoreSimple: function(method) {\n      var range = this.getRange(),\n          body  = this.doc.body,\n          newRange,\n          firstNode,\n          lastNode,\n          textNodes,\n          rangeBackup;\n\n      // Nothing selected, execute and say goodbye\n      if (!range) {\n        method(body, body);\n        return;\n      }\n\n      textNodes = range.getNodes([3]);\n      firstNode = textNodes[0] || range.startContainer;\n      lastNode  = textNodes[textNodes.length - 1] || range.endContainer;\n\n      rangeBackup = {\n        collapsed:      range.collapsed,\n        startContainer: firstNode,\n        startOffset:    firstNode === range.startContainer ? range.startOffset : 0,\n        endContainer:   lastNode,\n        endOffset:      lastNode === range.endContainer ? range.endOffset : lastNode.length\n      };\n\n      try {\n        method(range.startContainer, range.endContainer);\n      } catch(e) {\n        setTimeout(function() { throw e; }, 0);\n      }\n\n      newRange = rangy.createRange(this.doc);\n      try { newRange.setStart(rangeBackup.startContainer, rangeBackup.startOffset); } catch(e1) {}\n      try { newRange.setEnd(rangeBackup.endContainer, rangeBackup.endOffset); } catch(e2) {}\n      try { this.setSelection(newRange); } catch(e3) {}\n    },\n\n    /**\n     * Insert html at the caret position and move the cursor after the inserted html\n     *\n     * @param {String} html HTML string to insert\n     * @example\n     *    selection.insertHTML(\"<p>foobar</p>\");\n     */\n    insertHTML: function(html) {\n      var range     = rangy.createRange(this.doc),\n          node      = range.createContextualFragment(html),\n          lastChild = node.lastChild;\n      this.insertNode(node);\n      if (lastChild) {\n        this.setAfter(lastChild);\n      }\n    },\n\n    /**\n     * Insert a node at the caret position and move the cursor behind it\n     *\n     * @param {Object} node HTML string to insert\n     * @example\n     *    selection.insertNode(document.createTextNode(\"foobar\"));\n     */\n    insertNode: function(node) {\n      var range = this.getRange();\n      if (range) {\n        range.insertNode(node);\n      }\n    },\n\n    /**\n     * Wraps current selection with the given node\n     *\n     * @param {Object} node The node to surround the selected elements with\n     */\n    surround: function(node) {\n      var range = this.getRange();\n      if (!range) {\n        return;\n      }\n\n      try {\n        // This only works when the range boundaries are not overlapping other elements\n        range.surroundContents(node);\n        this.selectNode(node);\n      } catch(e) {\n        // fallback\n        node.appendChild(range.extractContents());\n        range.insertNode(node);\n      }\n    },\n\n    /**\n     * Scroll the current caret position into the view\n     * FIXME: This is a bit hacky, there might be a smarter way of doing this\n     *\n     * @example\n     *    selection.scrollIntoView();\n     */\n    scrollIntoView: function() {\n      var doc           = this.doc,\n          hasScrollBars = doc.documentElement.scrollHeight > doc.documentElement.offsetHeight,\n          tempElement   = doc._wysihtml5ScrollIntoViewElement = doc._wysihtml5ScrollIntoViewElement || (function() {\n            var element = doc.createElement(\"span\");\n            // The element needs content in order to be able to calculate it's position properly\n            element.innerHTML = wysihtml5.INVISIBLE_SPACE;\n            return element;\n          })(),\n          offsetTop;\n\n      if (hasScrollBars) {\n        this.insertNode(tempElement);\n        offsetTop = _getCumulativeOffsetTop(tempElement);\n        tempElement.parentNode.removeChild(tempElement);\n        if (offsetTop > doc.body.scrollTop) {\n          doc.body.scrollTop = offsetTop;\n        }\n      }\n    },\n\n    /**\n     * Select line where the caret is in\n     */\n    selectLine: function() {\n      if (wysihtml5.browser.supportsSelectionModify()) {\n        this._selectLine_W3C();\n      } else if (this.doc.selection) {\n        this._selectLine_MSIE();\n      }\n    },\n\n    /**\n     * See https://developer.mozilla.org/en/DOM/Selection/modify\n     */\n    _selectLine_W3C: function() {\n      var win       = this.doc.defaultView,\n          selection = win.getSelection();\n      selection.modify(\"extend\", \"left\", \"lineboundary\");\n      selection.modify(\"extend\", \"right\", \"lineboundary\");\n    },\n\n    _selectLine_MSIE: function() {\n      var range       = this.doc.selection.createRange(),\n          rangeTop    = range.boundingTop,\n          rangeHeight = range.boundingHeight,\n          scrollWidth = this.doc.body.scrollWidth,\n          rangeBottom,\n          rangeEnd,\n          measureNode,\n          i,\n          j;\n\n      if (!range.moveToPoint) {\n        return;\n      }\n\n      if (rangeTop === 0) {\n        // Don't know why, but when the selection ends at the end of a line\n        // range.boundingTop is 0\n        measureNode = this.doc.createElement(\"span\");\n        this.insertNode(measureNode);\n        rangeTop = measureNode.offsetTop;\n        measureNode.parentNode.removeChild(measureNode);\n      }\n\n      rangeTop += 1;\n\n      for (i=-10; i<scrollWidth; i+=2) {\n        try {\n          range.moveToPoint(i, rangeTop);\n          break;\n        } catch(e1) {}\n      }\n\n      // Investigate the following in order to handle multi line selections\n      // rangeBottom = rangeTop + (rangeHeight ? (rangeHeight - 1) : 0);\n      rangeBottom = rangeTop;\n      rangeEnd = this.doc.selection.createRange();\n      for (j=scrollWidth; j>=0; j--) {\n        try {\n          rangeEnd.moveToPoint(j, rangeBottom);\n          break;\n        } catch(e2) {}\n      }\n\n      range.setEndPoint(\"EndToEnd\", rangeEnd);\n      range.select();\n    },\n\n    getText: function() {\n      var selection = this.getSelection();\n      return selection ? selection.toString() : \"\";\n    },\n\n    getNodes: function(nodeType, filter) {\n      var range = this.getRange();\n      if (range) {\n        return range.getNodes([nodeType], filter);\n      } else {\n        return [];\n      }\n    },\n    \n    getRange: function() {\n      var selection = this.getSelection();\n      return selection && selection.rangeCount && selection.getRangeAt(0);\n    },\n\n    getSelection: function() {\n      return rangy.getSelection(this.doc.defaultView || this.doc.parentWindow);\n    },\n\n    setSelection: function(range) {\n      var win       = this.doc.defaultView || this.doc.parentWindow,\n          selection = rangy.getSelection(win);\n      return selection.setSingleRange(range);\n    }\n  });\n  \n})(wysihtml5);\n/**\n * Inspired by the rangy CSS Applier module written by Tim Down and licensed under the MIT license.\n * http://code.google.com/p/rangy/\n *\n * changed in order to be able ...\n *    - to use custom tags\n *    - to detect and replace similar css classes via reg exp\n */\n(function(wysihtml5, rangy) {\n  var defaultTagName = \"span\";\n  \n  var REG_EXP_WHITE_SPACE = /\\s+/g;\n  \n  function hasClass(el, cssClass, regExp) {\n    if (!el.className) {\n      return false;\n    }\n    \n    var matchingClassNames = el.className.match(regExp) || [];\n    return matchingClassNames[matchingClassNames.length - 1] === cssClass;\n  }\n\n  function addClass(el, cssClass, regExp) {\n    if (el.className) {\n      removeClass(el, regExp);\n      el.className += \" \" + cssClass;\n    } else {\n      el.className = cssClass;\n    }\n  }\n\n  function removeClass(el, regExp) {\n    if (el.className) {\n      el.className = el.className.replace(regExp, \"\");\n    }\n  }\n  \n  function hasSameClasses(el1, el2) {\n    return el1.className.replace(REG_EXP_WHITE_SPACE, \" \") == el2.className.replace(REG_EXP_WHITE_SPACE, \" \");\n  }\n\n  function replaceWithOwnChildren(el) {\n    var parent = el.parentNode;\n    while (el.firstChild) {\n      parent.insertBefore(el.firstChild, el);\n    }\n    parent.removeChild(el);\n  }\n\n  function elementsHaveSameNonClassAttributes(el1, el2) {\n    if (el1.attributes.length != el2.attributes.length) {\n      return false;\n    }\n    for (var i = 0, len = el1.attributes.length, attr1, attr2, name; i < len; ++i) {\n      attr1 = el1.attributes[i];\n      name = attr1.name;\n      if (name != \"class\") {\n        attr2 = el2.attributes.getNamedItem(name);\n        if (attr1.specified != attr2.specified) {\n          return false;\n        }\n        if (attr1.specified && attr1.nodeValue !== attr2.nodeValue) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  function isSplitPoint(node, offset) {\n    if (rangy.dom.isCharacterDataNode(node)) {\n      if (offset == 0) {\n        return !!node.previousSibling;\n      } else if (offset == node.length) {\n        return !!node.nextSibling;\n      } else {\n        return true;\n      }\n    }\n\n    return offset > 0 && offset < node.childNodes.length;\n  }\n\n  function splitNodeAt(node, descendantNode, descendantOffset) {\n    var newNode;\n    if (rangy.dom.isCharacterDataNode(descendantNode)) {\n      if (descendantOffset == 0) {\n        descendantOffset = rangy.dom.getNodeIndex(descendantNode);\n        descendantNode = descendantNode.parentNode;\n      } else if (descendantOffset == descendantNode.length) {\n        descendantOffset = rangy.dom.getNodeIndex(descendantNode) + 1;\n        descendantNode = descendantNode.parentNode;\n      } else {\n        newNode = rangy.dom.splitDataNode(descendantNode, descendantOffset);\n      }\n    }\n    if (!newNode) {\n      newNode = descendantNode.cloneNode(false);\n      if (newNode.id) {\n        newNode.removeAttribute(\"id\");\n      }\n      var child;\n      while ((child = descendantNode.childNodes[descendantOffset])) {\n        newNode.appendChild(child);\n      }\n      rangy.dom.insertAfter(newNode, descendantNode);\n    }\n    return (descendantNode == node) ? newNode : splitNodeAt(node, newNode.parentNode, rangy.dom.getNodeIndex(newNode));\n  }\n  \n  function Merge(firstNode) {\n    this.isElementMerge = (firstNode.nodeType == wysihtml5.ELEMENT_NODE);\n    this.firstTextNode = this.isElementMerge ? firstNode.lastChild : firstNode;\n    this.textNodes = [this.firstTextNode];\n  }\n\n  Merge.prototype = {\n    doMerge: function() {\n      var textBits = [], textNode, parent, text;\n      for (var i = 0, len = this.textNodes.length; i < len; ++i) {\n        textNode = this.textNodes[i];\n        parent = textNode.parentNode;\n        textBits[i] = textNode.data;\n        if (i) {\n          parent.removeChild(textNode);\n          if (!parent.hasChildNodes()) {\n            parent.parentNode.removeChild(parent);\n          }\n        }\n      }\n      this.firstTextNode.data = text = textBits.join(\"\");\n      return text;\n    },\n\n    getLength: function() {\n      var i = this.textNodes.length, len = 0;\n      while (i--) {\n        len += this.textNodes[i].length;\n      }\n      return len;\n    },\n\n    toString: function() {\n      var textBits = [];\n      for (var i = 0, len = this.textNodes.length; i < len; ++i) {\n        textBits[i] = \"'\" + this.textNodes[i].data + \"'\";\n      }\n      return \"[Merge(\" + textBits.join(\",\") + \")]\";\n    }\n  };\n\n  function HTMLApplier(tagNames, cssClass, similarClassRegExp, normalize) {\n    this.tagNames = tagNames || [defaultTagName];\n    this.cssClass = cssClass || \"\";\n    this.similarClassRegExp = similarClassRegExp;\n    this.normalize = normalize;\n    this.applyToAnyTagName = false;\n  }\n\n  HTMLApplier.prototype = {\n    getAncestorWithClass: function(node) {\n      var cssClassMatch;\n      while (node) {\n        cssClassMatch = this.cssClass ? hasClass(node, this.cssClass, this.similarClassRegExp) : true;\n        if (node.nodeType == wysihtml5.ELEMENT_NODE && rangy.dom.arrayContains(this.tagNames, node.tagName.toLowerCase()) && cssClassMatch) {\n          return node;\n        }\n        node = node.parentNode;\n      }\n      return false;\n    },\n\n    // Normalizes nodes after applying a CSS class to a Range.\n    postApply: function(textNodes, range) {\n      var firstNode = textNodes[0], lastNode = textNodes[textNodes.length - 1];\n\n      var merges = [], currentMerge;\n\n      var rangeStartNode = firstNode, rangeEndNode = lastNode;\n      var rangeStartOffset = 0, rangeEndOffset = lastNode.length;\n\n      var textNode, precedingTextNode;\n\n      for (var i = 0, len = textNodes.length; i < len; ++i) {\n        textNode = textNodes[i];\n        precedingTextNode = this.getAdjacentMergeableTextNode(textNode.parentNode, false);\n        if (precedingTextNode) {\n          if (!currentMerge) {\n            currentMerge = new Merge(precedingTextNode);\n            merges.push(currentMerge);\n          }\n          currentMerge.textNodes.push(textNode);\n          if (textNode === firstNode) {\n            rangeStartNode = currentMerge.firstTextNode;\n            rangeStartOffset = rangeStartNode.length;\n          }\n          if (textNode === lastNode) {\n            rangeEndNode = currentMerge.firstTextNode;\n            rangeEndOffset = currentMerge.getLength();\n          }\n        } else {\n          currentMerge = null;\n        }\n      }\n\n      // Test whether the first node after the range needs merging\n      var nextTextNode = this.getAdjacentMergeableTextNode(lastNode.parentNode, true);\n      if (nextTextNode) {\n        if (!currentMerge) {\n          currentMerge = new Merge(lastNode);\n          merges.push(currentMerge);\n        }\n        currentMerge.textNodes.push(nextTextNode);\n      }\n\n      // Do the merges\n      if (merges.length) {\n        for (i = 0, len = merges.length; i < len; ++i) {\n          merges[i].doMerge();\n        }\n        // Set the range boundaries\n        range.setStart(rangeStartNode, rangeStartOffset);\n        range.setEnd(rangeEndNode, rangeEndOffset);\n      }\n    },\n    \n    getAdjacentMergeableTextNode: function(node, forward) {\n        var isTextNode = (node.nodeType == wysihtml5.TEXT_NODE);\n        var el = isTextNode ? node.parentNode : node;\n        var adjacentNode;\n        var propName = forward ? \"nextSibling\" : \"previousSibling\";\n        if (isTextNode) {\n          // Can merge if the node's previous/next sibling is a text node\n          adjacentNode = node[propName];\n          if (adjacentNode && adjacentNode.nodeType == wysihtml5.TEXT_NODE) {\n            return adjacentNode;\n          }\n        } else {\n          // Compare element with its sibling\n          adjacentNode = el[propName];\n          if (adjacentNode && this.areElementsMergeable(node, adjacentNode)) {\n            return adjacentNode[forward ? \"firstChild\" : \"lastChild\"];\n          }\n        }\n        return null;\n    },\n    \n    areElementsMergeable: function(el1, el2) {\n      return rangy.dom.arrayContains(this.tagNames, (el1.tagName || \"\").toLowerCase())\n        && rangy.dom.arrayContains(this.tagNames, (el2.tagName || \"\").toLowerCase())\n        && hasSameClasses(el1, el2)\n        && elementsHaveSameNonClassAttributes(el1, el2);\n    },\n\n    createContainer: function(doc) {\n      var el = doc.createElement(this.tagNames[0]);\n      if (this.cssClass) {\n        el.className = this.cssClass;\n      }\n      return el;\n    },\n\n    applyToTextNode: function(textNode) {\n      var parent = textNode.parentNode;\n      if (parent.childNodes.length == 1 && rangy.dom.arrayContains(this.tagNames, parent.tagName.toLowerCase())) {\n        if (this.cssClass) {\n          addClass(parent, this.cssClass, this.similarClassRegExp);\n        }\n      } else {\n        var el = this.createContainer(rangy.dom.getDocument(textNode));\n        textNode.parentNode.insertBefore(el, textNode);\n        el.appendChild(textNode);\n      }\n    },\n\n    isRemovable: function(el) {\n      return rangy.dom.arrayContains(this.tagNames, el.tagName.toLowerCase()) && wysihtml5.lang.string(el.className).trim() == this.cssClass;\n    },\n\n    undoToTextNode: function(textNode, range, ancestorWithClass) {\n      if (!range.containsNode(ancestorWithClass)) {\n        // Split out the portion of the ancestor from which we can remove the CSS class\n        var ancestorRange = range.cloneRange();\n        ancestorRange.selectNode(ancestorWithClass);\n\n        if (ancestorRange.isPointInRange(range.endContainer, range.endOffset) && isSplitPoint(range.endContainer, range.endOffset)) {\n          splitNodeAt(ancestorWithClass, range.endContainer, range.endOffset);\n          range.setEndAfter(ancestorWithClass);\n        }\n        if (ancestorRange.isPointInRange(range.startContainer, range.startOffset) && isSplitPoint(range.startContainer, range.startOffset)) {\n          ancestorWithClass = splitNodeAt(ancestorWithClass, range.startContainer, range.startOffset);\n        }\n      }\n      \n      if (this.similarClassRegExp) {\n        removeClass(ancestorWithClass, this.similarClassRegExp);\n      }\n      if (this.isRemovable(ancestorWithClass)) {\n        replaceWithOwnChildren(ancestorWithClass);\n      }\n    },\n\n    applyToRange: function(range) {\n        var textNodes = range.getNodes([wysihtml5.TEXT_NODE]);\n        if (!textNodes.length) {\n          try {\n            var node = this.createContainer(range.endContainer.ownerDocument);\n            range.surroundContents(node);\n            this.selectNode(range, node);\n            return;\n          } catch(e) {}\n        }\n        \n        range.splitBoundaries();\n        textNodes = range.getNodes([wysihtml5.TEXT_NODE]);\n        \n        if (textNodes.length) {\n          var textNode;\n\n          for (var i = 0, len = textNodes.length; i < len; ++i) {\n            textNode = textNodes[i];\n            if (!this.getAncestorWithClass(textNode)) {\n              this.applyToTextNode(textNode);\n            }\n          }\n          \n          range.setStart(textNodes[0], 0);\n          textNode = textNodes[textNodes.length - 1];\n          range.setEnd(textNode, textNode.length);\n          \n          if (this.normalize) {\n            this.postApply(textNodes, range);\n          }\n        }\n    },\n\n    undoToRange: function(range) {\n      var textNodes = range.getNodes([wysihtml5.TEXT_NODE]), textNode, ancestorWithClass;\n      if (textNodes.length) {\n        range.splitBoundaries();\n        textNodes = range.getNodes([wysihtml5.TEXT_NODE]);\n      } else {\n        var doc = range.endContainer.ownerDocument,\n            node = doc.createTextNode(wysihtml5.INVISIBLE_SPACE);\n        range.insertNode(node);\n        range.selectNode(node);\n        textNodes = [node];\n      }\n      \n      for (var i = 0, len = textNodes.length; i < len; ++i) {\n        textNode = textNodes[i];\n        ancestorWithClass = this.getAncestorWithClass(textNode);\n        if (ancestorWithClass) {\n          this.undoToTextNode(textNode, range, ancestorWithClass);\n        }\n      }\n      \n      if (len == 1) {\n        this.selectNode(range, textNodes[0]);\n      } else {\n        range.setStart(textNodes[0], 0);\n        textNode = textNodes[textNodes.length - 1];\n        range.setEnd(textNode, textNode.length);\n\n        if (this.normalize) {\n          this.postApply(textNodes, range);\n        }\n      }\n    },\n    \n    selectNode: function(range, node) {\n      var isElement       = node.nodeType === wysihtml5.ELEMENT_NODE,\n          canHaveHTML     = \"canHaveHTML\" in node ? node.canHaveHTML : true,\n          content         = isElement ? node.innerHTML : node.data,\n          isEmpty         = (content === \"\" || content === wysihtml5.INVISIBLE_SPACE);\n\n      if (isEmpty && isElement && canHaveHTML) {\n        // Make sure that caret is visible in node by inserting a zero width no breaking space\n        try { node.innerHTML = wysihtml5.INVISIBLE_SPACE; } catch(e) {}\n      }\n      range.selectNodeContents(node);\n      if (isEmpty && isElement) {\n        range.collapse(false);\n      } else if (isEmpty) {\n        range.setStartAfter(node);\n        range.setEndAfter(node);\n      }\n    },\n    \n    getTextSelectedByRange: function(textNode, range) {\n      var textRange = range.cloneRange();\n      textRange.selectNodeContents(textNode);\n\n      var intersectionRange = textRange.intersection(range);\n      var text = intersectionRange ? intersectionRange.toString() : \"\";\n      textRange.detach();\n\n      return text;\n    },\n\n    isAppliedToRange: function(range) {\n      var ancestors = [],\n          ancestor,\n          textNodes = range.getNodes([wysihtml5.TEXT_NODE]);\n      if (!textNodes.length) {\n        ancestor = this.getAncestorWithClass(range.startContainer);\n        return ancestor ? [ancestor] : false;\n      }\n      \n      for (var i = 0, len = textNodes.length, selectedText; i < len; ++i) {\n        selectedText = this.getTextSelectedByRange(textNodes[i], range);\n        ancestor = this.getAncestorWithClass(textNodes[i]);\n        if (selectedText != \"\" && !ancestor) {\n          return false;\n        } else {\n          ancestors.push(ancestor);\n        }\n      }\n      return ancestors;\n    },\n\n    toggleRange: function(range) {\n      if (this.isAppliedToRange(range)) {\n        this.undoToRange(range);\n      } else {\n        this.applyToRange(range);\n      }\n    }\n  };\n\n  wysihtml5.selection.HTMLApplier = HTMLApplier;\n  \n})(wysihtml5, rangy);/**\n * Rich Text Query/Formatting Commands\n * \n * @example\n *    var commands = new wysihtml5.Commands(editor);\n */\nwysihtml5.Commands = Base.extend(\n  /** @scope wysihtml5.Commands.prototype */ {\n  constructor: function(editor) {\n    this.editor   = editor;\n    this.composer = editor.composer;\n    this.doc      = this.composer.doc;\n  },\n  \n  /**\n   * Check whether the browser supports the given command\n   *\n   * @param {String} command The command string which to check (eg. \"bold\", \"italic\", \"insertUnorderedList\")\n   * @example\n   *    commands.supports(\"createLink\");\n   */\n  support: function(command) {\n    return wysihtml5.browser.supportsCommand(this.doc, command);\n  },\n  \n  /**\n   * Check whether the browser supports the given command\n   *\n   * @param {String} command The command string which to execute (eg. \"bold\", \"italic\", \"insertUnorderedList\")\n   * @param {String} [value] The command value parameter, needed for some commands (\"createLink\", \"insertImage\", ...), optional for commands that don't require one (\"bold\", \"underline\", ...)\n   * @example\n   *    commands.exec(\"insertImage\", \"http://a1.twimg.com/profile_images/113868655/schrei_twitter_reasonably_small.jpg\");\n   */\n  exec: function(command, value) {\n    var obj     = wysihtml5.commands[command],\n        args    = wysihtml5.lang.array(arguments).get(),\n        method  = obj && obj.exec,\n        result  = null;\n    \n    this.editor.fire(\"beforecommand:composer\");\n    \n    if (method) {\n      args.unshift(this.composer);\n      result = method.apply(obj, args);\n    } else {\n      try {\n        // try/catch for buggy firefox\n        result = this.doc.execCommand(command, false, value);\n      } catch(e) {}\n    }\n    \n    this.editor.fire(\"aftercommand:composer\");\n    return result;\n  },\n  \n  /**\n   * Check whether the current command is active\n   * If the caret is within a bold text, then calling this with command \"bold\" should return true\n   *\n   * @param {String} command The command string which to check (eg. \"bold\", \"italic\", \"insertUnorderedList\")\n   * @param {String} [commandValue] The command value parameter (eg. for \"insertImage\" the image src)\n   * @return {Boolean} Whether the command is active\n   * @example\n   *    var isCurrentSelectionBold = commands.state(\"bold\");\n   */\n  state: function(command, commandValue) {\n    var obj     = wysihtml5.commands[command],\n        args    = wysihtml5.lang.array(arguments).get(),\n        method  = obj && obj.state;\n    if (method) {\n      args.unshift(this.composer);\n      return method.apply(obj, args);\n    } else {\n      try {\n        // try/catch for buggy firefox\n        return this.doc.queryCommandState(command);\n      } catch(e) {\n        return false;\n      }\n    }\n  },\n  \n  /**\n   * Get the current command's value\n   *\n   * @param {String} command The command string which to check (eg. \"formatBlock\")\n   * @return {String} The command value\n   * @example\n   *    var currentBlockElement = commands.value(\"formatBlock\");\n   */\n  value: function(command) {\n    var obj     = wysihtml5.commands[command],\n        method  = obj && obj.value;\n    if (method) {\n      return method.call(obj, this.composer, command);\n    } else {\n      try {\n        // try/catch for buggy firefox\n        return this.doc.queryCommandValue(command);\n      } catch(e) {\n        return null;\n      }\n    }\n  }\n});\n(function(wysihtml5) {\n  var undef;\n  \n  wysihtml5.commands.bold = {\n    exec: function(composer, command) {\n      return wysihtml5.commands.formatInline.exec(composer, command, \"b\");\n    },\n\n    state: function(composer, command, color) {\n      // element.ownerDocument.queryCommandState(\"bold\") results:\n      // firefox: only <b>\n      // chrome:  <b>, <strong>, <h1>, <h2>, ...\n      // ie:      <b>, <strong>\n      // opera:   <b>, <strong>\n      return wysihtml5.commands.formatInline.state(composer, command, \"b\");\n    },\n\n    value: function() {\n      return undef;\n    }\n  };\n})(wysihtml5);\n\n(function(wysihtml5) {\n  var undef,\n      NODE_NAME = \"A\",\n      dom       = wysihtml5.dom;\n  \n  function _removeFormat(composer, anchors) {\n    var length  = anchors.length,\n        i       = 0,\n        anchor,\n        codeElement,\n        textContent;\n    for (; i<length; i++) {\n      anchor      = anchors[i];\n      codeElement = dom.getParentElement(anchor, { nodeName: \"code\" });\n      textContent = dom.getTextContent(anchor);\n\n      // if <a> contains url-like text content, rename it to <code> to prevent re-autolinking\n      // else replace <a> with its childNodes\n      if (textContent.match(dom.autoLink.URL_REG_EXP) && !codeElement) {\n        // <code> element is used to prevent later auto-linking of the content\n        codeElement = dom.renameElement(anchor, \"code\");\n      } else {\n        dom.replaceWithChildNodes(anchor);\n      }\n    }\n  }\n\n  function _format(composer, attributes) {\n    var doc             = composer.doc,\n        tempClass       = \"_wysihtml5-temp-\" + (+new Date()),\n        tempClassRegExp = /non-matching-class/g,\n        i               = 0,\n        length,\n        anchors,\n        anchor,\n        hasElementChild,\n        isEmpty,\n        elementToSetCaretAfter,\n        textContent,\n        whiteSpace,\n        j;\n    wysihtml5.commands.formatInline.exec(composer, undef, NODE_NAME, tempClass, tempClassRegExp);\n    anchors = doc.querySelectorAll(NODE_NAME + \".\" + tempClass);\n    length  = anchors.length;\n    for (; i<length; i++) {\n      anchor = anchors[i];\n      anchor.removeAttribute(\"class\");\n      for (j in attributes) {\n        anchor.setAttribute(j, attributes[j]);\n      }\n    }\n\n    elementToSetCaretAfter = anchor;\n    if (length === 1) {\n      textContent = dom.getTextContent(anchor);\n      hasElementChild = !!anchor.querySelector(\"*\");\n      isEmpty = textContent === \"\" || textContent === wysihtml5.INVISIBLE_SPACE;\n      if (!hasElementChild && isEmpty) {\n        dom.setTextContent(anchor, attributes.text || anchor.href);\n        whiteSpace = doc.createTextNode(\" \");\n        composer.selection.setAfter(anchor);\n        composer.selection.insertNode(whiteSpace);\n        elementToSetCaretAfter = whiteSpace;\n      }\n    }\n    composer.selection.setAfter(elementToSetCaretAfter);\n  }\n  \n  wysihtml5.commands.createLink = {\n    /**\n     * TODO: Use HTMLApplier or formatInline here\n     *\n     * Turns selection into a link\n     * If selection is already a link, it removes the link and wraps it with a <code> element\n     * The <code> element is needed to avoid auto linking\n     * \n     * @example\n     *    // either ...\n     *    wysihtml5.commands.createLink.exec(composer, \"createLink\", \"http://www.google.de\");\n     *    // ... or ...\n     *    wysihtml5.commands.createLink.exec(composer, \"createLink\", { href: \"http://www.google.de\", target: \"_blank\" });\n     */\n    exec: function(composer, command, value) {\n      var anchors = this.state(composer, command);\n      if (anchors) {\n        // Selection contains links\n        composer.selection.executeAndRestore(function() {\n          _removeFormat(composer, anchors);\n        });\n      } else {\n        // Create links\n        value = typeof(value) === \"object\" ? value : { href: value };\n        _format(composer, value);\n      }\n    },\n\n    state: function(composer, command) {\n      return wysihtml5.commands.formatInline.state(composer, command, \"A\");\n    },\n\n    value: function() {\n      return undef;\n    }\n  };\n})(wysihtml5);/**\n * document.execCommand(\"fontSize\") will create either inline styles (firefox, chrome) or use font tags\n * which we don't want\n * Instead we set a css class\n */\n(function(wysihtml5) {\n  var undef,\n      REG_EXP = /wysiwyg-font-size-[a-z\\-]+/g;\n  \n  wysihtml5.commands.fontSize = {\n    exec: function(composer, command, size) {\n      return wysihtml5.commands.formatInline.exec(composer, command, \"span\", \"wysiwyg-font-size-\" + size, REG_EXP);\n    },\n\n    state: function(composer, command, size) {\n      return wysihtml5.commands.formatInline.state(composer, command, \"span\", \"wysiwyg-font-size-\" + size, REG_EXP);\n    },\n\n    value: function() {\n      return undef;\n    }\n  };\n})(wysihtml5);\n/**\n * document.execCommand(\"foreColor\") will create either inline styles (firefox, chrome) or use font tags\n * which we don't want\n * Instead we set a css class\n */\n(function(wysihtml5) {\n  var undef,\n      REG_EXP = /wysiwyg-color-[a-z]+/g;\n  \n  wysihtml5.commands.foreColor = {\n    exec: function(composer, command, color) {\n      return wysihtml5.commands.formatInline.exec(composer, command, \"span\", \"wysiwyg-color-\" + color, REG_EXP);\n    },\n\n    state: function(composer, command, color) {\n      return wysihtml5.commands.formatInline.state(composer, command, \"span\", \"wysiwyg-color-\" + color, REG_EXP);\n    },\n\n    value: function() {\n      return undef;\n    }\n  };\n})(wysihtml5);(function(wysihtml5) {\n  var undef,\n      dom                     = wysihtml5.dom,\n      DEFAULT_NODE_NAME       = \"DIV\",\n      // Following elements are grouped\n      // when the caret is within a H1 and the H4 is invoked, the H1 should turn into H4\n      // instead of creating a H4 within a H1 which would result in semantically invalid html\n      BLOCK_ELEMENTS_GROUP    = [\"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\", \"P\", \"BLOCKQUOTE\", DEFAULT_NODE_NAME];\n  \n  /**\n   * Remove similiar classes (based on classRegExp)\n   * and add the desired class name\n   */\n  function _addClass(element, className, classRegExp) {\n    if (element.className) {\n      _removeClass(element, classRegExp);\n      element.className += \" \" + className;\n    } else {\n      element.className = className;\n    }\n  }\n\n  function _removeClass(element, classRegExp) {\n    element.className = element.className.replace(classRegExp, \"\");\n  }\n\n  /**\n   * Check whether given node is a text node and whether it's empty\n   */\n  function _isBlankTextNode(node) {\n    return node.nodeType === wysihtml5.TEXT_NODE && !wysihtml5.lang.string(node.data).trim();\n  }\n\n  /**\n   * Returns previous sibling node that is not a blank text node\n   */\n  function _getPreviousSiblingThatIsNotBlank(node) {\n    var previousSibling = node.previousSibling;\n    while (previousSibling && _isBlankTextNode(previousSibling)) {\n      previousSibling = previousSibling.previousSibling;\n    }\n    return previousSibling;\n  }\n\n  /**\n   * Returns next sibling node that is not a blank text node\n   */\n  function _getNextSiblingThatIsNotBlank(node) {\n    var nextSibling = node.nextSibling;\n    while (nextSibling && _isBlankTextNode(nextSibling)) {\n      nextSibling = nextSibling.nextSibling;\n    }\n    return nextSibling;\n  }\n\n  /**\n   * Adds line breaks before and after the given node if the previous and next siblings\n   * aren't already causing a visual line break (block element or <br>)\n   */\n  function _addLineBreakBeforeAndAfter(node) {\n    var doc             = node.ownerDocument,\n        nextSibling     = _getNextSiblingThatIsNotBlank(node),\n        previousSibling = _getPreviousSiblingThatIsNotBlank(node);\n\n    if (nextSibling && !_isLineBreakOrBlockElement(nextSibling)) {\n      node.parentNode.insertBefore(doc.createElement(\"br\"), nextSibling);\n    }\n    if (previousSibling && !_isLineBreakOrBlockElement(previousSibling)) {\n      node.parentNode.insertBefore(doc.createElement(\"br\"), node);\n    }\n  }\n\n  /**\n   * Removes line breaks before and after the given node\n   */\n  function _removeLineBreakBeforeAndAfter(node) {\n    var nextSibling     = _getNextSiblingThatIsNotBlank(node),\n        previousSibling = _getPreviousSiblingThatIsNotBlank(node);\n\n    if (nextSibling && _isLineBreak(nextSibling)) {\n      nextSibling.parentNode.removeChild(nextSibling);\n    }\n    if (previousSibling && _isLineBreak(previousSibling)) {\n      previousSibling.parentNode.removeChild(previousSibling);\n    }\n  }\n\n  function _removeLastChildIfLineBreak(node) {\n    var lastChild = node.lastChild;\n    if (lastChild && _isLineBreak(lastChild)) {\n      lastChild.parentNode.removeChild(lastChild);\n    }\n  }\n\n  function _isLineBreak(node) {\n    return node.nodeName === \"BR\";\n  }\n\n  /**\n   * Checks whether the elment causes a visual line break\n   * (<br> or block elements)\n   */\n  function _isLineBreakOrBlockElement(element) {\n    if (_isLineBreak(element)) {\n      return true;\n    }\n\n    if (dom.getStyle(\"display\").from(element) === \"block\") {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Execute native query command\n   * and if necessary modify the inserted node's className\n   */\n  function _execCommand(doc, command, nodeName, className) {\n    if (className) {\n      var eventListener = dom.observe(doc, \"DOMNodeInserted\", function(event) {\n        var target = event.target,\n            displayStyle;\n        if (target.nodeType !== wysihtml5.ELEMENT_NODE) {\n          return;\n        }\n        displayStyle = dom.getStyle(\"display\").from(target);\n        if (displayStyle.substr(0, 6) !== \"inline\") {\n          // Make sure that only block elements receive the given class\n          target.className += \" \" + className;\n        }\n      });\n    }\n    doc.execCommand(command, false, nodeName);\n    if (eventListener) {\n      eventListener.stop();\n    }\n  }\n\n  function _selectLineAndWrap(composer, element) {\n    composer.selection.selectLine();\n    composer.selection.surround(element);\n    _removeLineBreakBeforeAndAfter(element);\n    _removeLastChildIfLineBreak(element);\n    composer.selection.selectNode(element);\n  }\n\n  function _hasClasses(element) {\n    return !!wysihtml5.lang.string(element.className).trim();\n  }\n  \n  wysihtml5.commands.formatBlock = {\n    exec: function(composer, command, nodeName, className, classRegExp) {\n      var doc          = composer.doc,\n          blockElement = this.state(composer, command, nodeName, className, classRegExp),\n          selectedNode;\n\n      nodeName = typeof(nodeName) === \"string\" ? nodeName.toUpperCase() : nodeName;\n\n      if (blockElement) {\n        composer.selection.executeAndRestoreSimple(function() {\n          if (classRegExp) {\n            _removeClass(blockElement, classRegExp);\n          }\n          var hasClasses = _hasClasses(blockElement);\n          if (!hasClasses && blockElement.nodeName === (nodeName || DEFAULT_NODE_NAME)) {\n            // Insert a line break afterwards and beforewards when there are siblings\n            // that are not of type line break or block element\n            _addLineBreakBeforeAndAfter(blockElement);\n            dom.replaceWithChildNodes(blockElement);\n          } else if (hasClasses) {\n            // Make sure that styling is kept by renaming the element to <div> and copying over the class name\n            dom.renameElement(blockElement, DEFAULT_NODE_NAME);\n          }\n        });\n        return;\n      }\n\n      // Find similiar block element and rename it (<h2 class=\"foo\"></h2>  =>  <h1 class=\"foo\"></h1>)\n      if (nodeName === null || wysihtml5.lang.array(BLOCK_ELEMENTS_GROUP).contains(nodeName)) {\n        selectedNode = composer.selection.getSelectedNode();\n        blockElement = dom.getParentElement(selectedNode, {\n          nodeName: BLOCK_ELEMENTS_GROUP\n        });\n\n        if (blockElement) {\n          composer.selection.executeAndRestoreSimple(function() {\n            // Rename current block element to new block element and add class\n            if (nodeName) {\n              blockElement = dom.renameElement(blockElement, nodeName);\n            }\n            if (className) {\n              _addClass(blockElement, className, classRegExp);\n            }\n          });\n          return;\n        }\n      }\n\n      if (composer.commands.support(command)) {\n        _execCommand(doc, command, nodeName || DEFAULT_NODE_NAME, className);\n        return;\n      }\n\n      blockElement = doc.createElement(nodeName || DEFAULT_NODE_NAME);\n      if (className) {\n        blockElement.className = className;\n      }\n      _selectLineAndWrap(composer, blockElement);\n    },\n\n    state: function(composer, command, nodeName, className, classRegExp) {\n      nodeName = typeof(nodeName) === \"string\" ? nodeName.toUpperCase() : nodeName;\n      var selectedNode = composer.selection.getSelectedNode();\n      return dom.getParentElement(selectedNode, {\n        nodeName:     nodeName,\n        className:    className,\n        classRegExp:  classRegExp\n      });\n    },\n\n    value: function() {\n      return undef;\n    }\n  };\n})(wysihtml5);/**\n * formatInline scenarios for tag \"B\" (| = caret, |foo| = selected text)\n *\n *   #1 caret in unformatted text:\n *      abcdefg|\n *   output:\n *      abcdefg<b>|</b>\n *   \n *   #2 unformatted text selected:\n *      abc|deg|h\n *   output:\n *      abc<b>|deg|</b>h\n *   \n *   #3 unformatted text selected across boundaries:\n *      ab|c <span>defg|h</span>\n *   output:\n *      ab<b>|c </b><span><b>defg</b>|h</span>\n *\n *   #4 formatted text entirely selected\n *      <b>|abc|</b>\n *   output:\n *      |abc|\n *\n *   #5 formatted text partially selected\n *      <b>ab|c|</b>\n *   output:\n *      <b>ab</b>|c|\n *\n *   #6 formatted text selected across boundaries\n *      <span>ab|c</span> <b>de|fgh</b>\n *   output:\n *      <span>ab|c</span> de|<b>fgh</b>\n */\n(function(wysihtml5) {\n  var undef,\n      // Treat <b> as <strong> and vice versa\n      ALIAS_MAPPING = {\n        \"strong\": \"b\",\n        \"em\":     \"i\",\n        \"b\":      \"strong\",\n        \"i\":      \"em\"\n      },\n      htmlApplier = {};\n  \n  function _getTagNames(tagName) {\n    var alias = ALIAS_MAPPING[tagName];\n    return alias ? [tagName.toLowerCase(), alias.toLowerCase()] : [tagName.toLowerCase()];\n  }\n  \n  function _getApplier(tagName, className, classRegExp) {\n    var identifier = tagName + \":\" + className;\n    if (!htmlApplier[identifier]) {\n      htmlApplier[identifier] = new wysihtml5.selection.HTMLApplier(_getTagNames(tagName), className, classRegExp, true);\n    }\n    return htmlApplier[identifier];\n  }\n  \n  wysihtml5.commands.formatInline = {\n    exec: function(composer, command, tagName, className, classRegExp) {\n      var range = composer.selection.getRange();\n      if (!range) {\n        return false;\n      }\n      _getApplier(tagName, className, classRegExp).toggleRange(range);\n      composer.selection.setSelection(range);\n    },\n\n    state: function(composer, command, tagName, className, classRegExp) {\n      var doc           = composer.doc,\n          aliasTagName  = ALIAS_MAPPING[tagName] || tagName,\n          range;\n\n      // Check whether the document contains a node with the desired tagName\n      if (!wysihtml5.dom.hasElementWithTagName(doc, tagName) &&\n          !wysihtml5.dom.hasElementWithTagName(doc, aliasTagName)) {\n        return false;\n      }\n\n       // Check whether the document contains a node with the desired className\n      if (className && !wysihtml5.dom.hasElementWithClassName(doc, className)) {\n         return false;\n      }\n\n      range = composer.selection.getRange();\n      if (!range) {\n        return false;\n      }\n\n      return _getApplier(tagName, className, classRegExp).isAppliedToRange(range);\n    },\n\n    value: function() {\n      return undef;\n    }\n  };\n})(wysihtml5);(function(wysihtml5) {\n  var undef;\n  \n  wysihtml5.commands.insertHTML = {\n    exec: function(composer, command, html) {\n      if (composer.commands.support(command)) {\n        composer.doc.execCommand(command, false, html);\n      } else {\n        composer.selection.insertHTML(html);\n      }\n    },\n\n    state: function() {\n      return false;\n    },\n\n    value: function() {\n      return undef;\n    }\n  };\n})(wysihtml5);(function(wysihtml5) {\n  var NODE_NAME = \"IMG\";\n  \n  wysihtml5.commands.insertImage = {\n    /**\n     * Inserts an <img>\n     * If selection is already an image link, it removes it\n     * \n     * @example\n     *    // either ...\n     *    wysihtml5.commands.insertImage.exec(composer, \"insertImage\", \"http://www.google.de/logo.jpg\");\n     *    // ... or ...\n     *    wysihtml5.commands.insertImage.exec(composer, \"insertImage\", { src: \"http://www.google.de/logo.jpg\", title: \"foo\" });\n     */\n    exec: function(composer, command, value) {\n      value = typeof(value) === \"object\" ? value : { src: value };\n\n      var doc     = composer.doc,\n          image   = this.state(composer),\n          textNode,\n          i,\n          parent;\n\n      if (image) {\n        // Image already selected, set the caret before it and delete it\n        composer.selection.setBefore(image);\n        parent = image.parentNode;\n        parent.removeChild(image);\n\n        // and it's parent <a> too if it hasn't got any other relevant child nodes\n        wysihtml5.dom.removeEmptyTextNodes(parent);\n        if (parent.nodeName === \"A\" && !parent.firstChild) {\n          composer.selection.setAfter(parent);\n          parent.parentNode.removeChild(parent);\n        }\n\n        // firefox and ie sometimes don't remove the image handles, even though the image got removed\n        wysihtml5.quirks.redraw(composer.element);\n        return;\n      }\n\n      image = doc.createElement(NODE_NAME);\n\n      for (i in value) {\n        image[i] = value[i];\n      }\n\n      composer.selection.insertNode(image);\n      if (wysihtml5.browser.hasProblemsSettingCaretAfterImg()) {\n        textNode = doc.createTextNode(wysihtml5.INVISIBLE_SPACE);\n        composer.selection.insertNode(textNode);\n        composer.selection.setAfter(textNode);\n      } else {\n        composer.selection.setAfter(image);\n      }\n    },\n\n    state: function(composer) {\n      var doc = composer.doc,\n          selectedNode,\n          text,\n          imagesInSelection;\n\n      if (!wysihtml5.dom.hasElementWithTagName(doc, NODE_NAME)) {\n        return false;\n      }\n\n      selectedNode = composer.selection.getSelectedNode();\n      if (!selectedNode) {\n        return false;\n      }\n\n      if (selectedNode.nodeName === NODE_NAME) {\n        // This works perfectly in IE\n        return selectedNode;\n      }\n\n      if (selectedNode.nodeType !== wysihtml5.ELEMENT_NODE) {\n        return false;\n      }\n\n      text = composer.selection.getText();\n      text = wysihtml5.lang.string(text).trim();\n      if (text) {\n        return false;\n      }\n\n      imagesInSelection = composer.selection.getNodes(wysihtml5.ELEMENT_NODE, function(node) {\n        return node.nodeName === \"IMG\";\n      });\n\n      if (imagesInSelection.length !== 1) {\n        return false;\n      }\n\n      return imagesInSelection[0];\n    },\n\n    value: function(composer) {\n      var image = this.state(composer);\n      return image && image.src;\n    }\n  };\n})(wysihtml5);(function(wysihtml5) {\n  var undef,\n      LINE_BREAK = \"<br>\" + (wysihtml5.browser.needsSpaceAfterLineBreak() ? \" \" : \"\");\n  \n  wysihtml5.commands.insertLineBreak = {\n    exec: function(composer, command) {\n      if (composer.commands.support(command)) {\n        composer.doc.execCommand(command, false, null);\n        if (!wysihtml5.browser.autoScrollsToCaret()) {\n          composer.selection.scrollIntoView();\n        }\n      } else {\n        composer.commands.exec(\"insertHTML\", LINE_BREAK);\n      }\n    },\n\n    state: function() {\n      return false;\n    },\n\n    value: function() {\n      return undef;\n    }\n  };\n})(wysihtml5);(function(wysihtml5) {\n  var undef;\n  \n  wysihtml5.commands.insertOrderedList = {\n    exec: function(composer, command) {\n      var doc           = composer.doc,\n          selectedNode  = composer.selection.getSelectedNode(),\n          list          = wysihtml5.dom.getParentElement(selectedNode, { nodeName: \"OL\" }),\n          otherList     = wysihtml5.dom.getParentElement(selectedNode, { nodeName: \"UL\" }),\n          tempClassName =  \"_wysihtml5-temp-\" + new Date().getTime(),\n          isEmpty,\n          tempElement;\n      \n      if (composer.commands.support(command)) {\n        doc.execCommand(command, false, null);\n        return;\n      }\n      \n      if (list) {\n        // Unwrap list\n        // <ol><li>foo</li><li>bar</li></ol>\n        // becomes:\n        // foo<br>bar<br>\n        composer.selection.executeAndRestoreSimple(function() {\n          wysihtml5.dom.resolveList(list);\n        });\n      } else if (otherList) {\n        // Turn an unordered list into an ordered list\n        // <ul><li>foo</li><li>bar</li></ul>\n        // becomes:\n        // <ol><li>foo</li><li>bar</li></ol>\n        composer.selection.executeAndRestoreSimple(function() {\n          wysihtml5.dom.renameElement(otherList, \"ol\");\n        });\n      } else {\n        // Create list\n        composer.commands.exec(\"formatBlock\", \"div\", tempClassName);\n        tempElement = doc.querySelector(\".\" + tempClassName);\n        isEmpty = tempElement.innerHTML === \"\" || tempElement.innerHTML === wysihtml5.INVISIBLE_SPACE;\n        composer.selection.executeAndRestoreSimple(function() {\n          list = wysihtml5.dom.convertToList(tempElement, \"ol\");\n        });\n        if (isEmpty) {\n          composer.selection.selectNode(list.querySelector(\"li\"));\n        }\n      }\n    },\n    \n    state: function(composer) {\n      var selectedNode = composer.selection.getSelectedNode();\n      return wysihtml5.dom.getParentElement(selectedNode, { nodeName: \"OL\" });\n    },\n\n    value: function() {\n      return undef;\n    }\n  };\n})(wysihtml5);(function(wysihtml5) {\n  var undef;\n  \n  wysihtml5.commands.insertUnorderedList = {\n    exec: function(composer, command) {\n      var doc           = composer.doc,\n          selectedNode  = composer.selection.getSelectedNode(),\n          list          = wysihtml5.dom.getParentElement(selectedNode, { nodeName: \"UL\" }),\n          otherList     = wysihtml5.dom.getParentElement(selectedNode, { nodeName: \"OL\" }),\n          tempClassName =  \"_wysihtml5-temp-\" + new Date().getTime(),\n          isEmpty,\n          tempElement;\n      \n      if (composer.commands.support(command)) {\n        doc.execCommand(command, false, null);\n        return;\n      }\n      \n      if (list) {\n        // Unwrap list\n        // <ul><li>foo</li><li>bar</li></ul>\n        // becomes:\n        // foo<br>bar<br>\n        composer.selection.executeAndRestoreSimple(function() {\n          wysihtml5.dom.resolveList(list);\n        });\n      } else if (otherList) {\n        // Turn an ordered list into an unordered list\n        // <ol><li>foo</li><li>bar</li></ol>\n        // becomes:\n        // <ul><li>foo</li><li>bar</li></ul>\n        composer.selection.executeAndRestoreSimple(function() {\n          wysihtml5.dom.renameElement(otherList, \"ul\");\n        });\n      } else {\n        // Create list\n        composer.commands.exec(\"formatBlock\", \"div\", tempClassName);\n        tempElement = doc.querySelector(\".\" + tempClassName);\n        isEmpty = tempElement.innerHTML === \"\" || tempElement.innerHTML === wysihtml5.INVISIBLE_SPACE;\n        composer.selection.executeAndRestoreSimple(function() {\n          list = wysihtml5.dom.convertToList(tempElement, \"ul\");\n        });\n        if (isEmpty) {\n          composer.selection.selectNode(list.querySelector(\"li\"));\n        }\n      }\n    },\n    \n    state: function(composer) {\n      var selectedNode = composer.selection.getSelectedNode();\n      return wysihtml5.dom.getParentElement(selectedNode, { nodeName: \"UL\" });\n    },\n\n    value: function() {\n      return undef;\n    }\n  };\n})(wysihtml5);(function(wysihtml5) {\n  var undef;\n  \n  wysihtml5.commands.italic = {\n    exec: function(composer, command) {\n      return wysihtml5.commands.formatInline.exec(composer, command, \"i\");\n    },\n\n    state: function(composer, command, color) {\n      // element.ownerDocument.queryCommandState(\"italic\") results:\n      // firefox: only <i>\n      // chrome:  <i>, <em>, <blockquote>, ...\n      // ie:      <i>, <em>\n      // opera:   only <i>\n      return wysihtml5.commands.formatInline.state(composer, command, \"i\");\n    },\n\n    value: function() {\n      return undef;\n    }\n  };\n})(wysihtml5);(function(wysihtml5) {\n  var undef,\n      CLASS_NAME  = \"wysiwyg-text-align-center\",\n      REG_EXP     = /wysiwyg-text-align-[a-z]+/g;\n  \n  wysihtml5.commands.justifyCenter = {\n    exec: function(composer, command) {\n      return wysihtml5.commands.formatBlock.exec(composer, \"formatBlock\", null, CLASS_NAME, REG_EXP);\n    },\n\n    state: function(composer, command) {\n      return wysihtml5.commands.formatBlock.state(composer, \"formatBlock\", null, CLASS_NAME, REG_EXP);\n    },\n\n    value: function() {\n      return undef;\n    }\n  };\n})(wysihtml5);(function(wysihtml5) {\n  var undef,\n      CLASS_NAME  = \"wysiwyg-text-align-left\",\n      REG_EXP     = /wysiwyg-text-align-[a-z]+/g;\n  \n  wysihtml5.commands.justifyLeft = {\n    exec: function(composer, command) {\n      return wysihtml5.commands.formatBlock.exec(composer, \"formatBlock\", null, CLASS_NAME, REG_EXP);\n    },\n\n    state: function(composer, command) {\n      return wysihtml5.commands.formatBlock.state(composer, \"formatBlock\", null, CLASS_NAME, REG_EXP);\n    },\n\n    value: function() {\n      return undef;\n    }\n  };\n})(wysihtml5);(function(wysihtml5) {\n  var undef,\n      CLASS_NAME  = \"wysiwyg-text-align-right\",\n      REG_EXP     = /wysiwyg-text-align-[a-z]+/g;\n  \n  wysihtml5.commands.justifyRight = {\n    exec: function(composer, command) {\n      return wysihtml5.commands.formatBlock.exec(composer, \"formatBlock\", null, CLASS_NAME, REG_EXP);\n    },\n\n    state: function(composer, command) {\n      return wysihtml5.commands.formatBlock.state(composer, \"formatBlock\", null, CLASS_NAME, REG_EXP);\n    },\n\n    value: function() {\n      return undef;\n    }\n  };\n})(wysihtml5);(function(wysihtml5) {\n  var undef;\n  wysihtml5.commands.underline = {\n    exec: function(composer, command) {\n      return wysihtml5.commands.formatInline.exec(composer, command, \"u\");\n    },\n\n    state: function(composer, command) {\n      return wysihtml5.commands.formatInline.state(composer, command, \"u\");\n    },\n\n    value: function() {\n      return undef;\n    }\n  };\n})(wysihtml5);/**\n * Undo Manager for wysihtml5\n * slightly inspired by http://rniwa.com/editing/undomanager.html#the-undomanager-interface\n */\n(function(wysihtml5) {\n  var Z_KEY               = 90,\n      Y_KEY               = 89,\n      BACKSPACE_KEY       = 8,\n      DELETE_KEY          = 46,\n      MAX_HISTORY_ENTRIES = 40,\n      UNDO_HTML           = '<span id=\"_wysihtml5-undo\" class=\"_wysihtml5-temp\">' + wysihtml5.INVISIBLE_SPACE + '</span>',\n      REDO_HTML           = '<span id=\"_wysihtml5-redo\" class=\"_wysihtml5-temp\">' + wysihtml5.INVISIBLE_SPACE + '</span>',\n      dom                 = wysihtml5.dom;\n  \n  function cleanTempElements(doc) {\n    var tempElement;\n    while (tempElement = doc.querySelector(\"._wysihtml5-temp\")) {\n      tempElement.parentNode.removeChild(tempElement);\n    }\n  }\n  \n  wysihtml5.UndoManager = wysihtml5.lang.Dispatcher.extend(\n    /** @scope wysihtml5.UndoManager.prototype */ {\n    constructor: function(editor) {\n      this.editor = editor;\n      this.composer = editor.composer;\n      this.element = this.composer.element;\n      this.history = [this.composer.getValue()];\n      this.position = 1;\n      \n      // Undo manager currently only supported in browsers who have the insertHTML command (not IE)\n      if (this.composer.commands.support(\"insertHTML\")) {\n        this._observe();\n      }\n    },\n    \n    _observe: function() {\n      var that      = this,\n          doc       = this.composer.sandbox.getDocument(),\n          lastKey;\n          \n      // Catch CTRL+Z and CTRL+Y\n      dom.observe(this.element, \"keydown\", function(event) {\n        if (event.altKey || (!event.ctrlKey && !event.metaKey)) {\n          return;\n        }\n        \n        var keyCode = event.keyCode,\n            isUndo = keyCode === Z_KEY && !event.shiftKey,\n            isRedo = (keyCode === Z_KEY && event.shiftKey) || (keyCode === Y_KEY);\n        \n        if (isUndo) {\n          that.undo();\n          event.preventDefault();\n        } else if (isRedo) {\n          that.redo();\n          event.preventDefault();\n        }\n      });\n      \n      // Catch delete and backspace\n      dom.observe(this.element, \"keydown\", function(event) {\n        var keyCode = event.keyCode;\n        if (keyCode === lastKey) {\n          return;\n        }\n        \n        lastKey = keyCode;\n        \n        if (keyCode === BACKSPACE_KEY || keyCode === DELETE_KEY) {\n          that.transact();\n        }\n      });\n      \n      // Now this is very hacky:\n      // These days browsers don't offer a undo/redo event which we could hook into\n      // to be notified when the user hits undo/redo in the contextmenu.\n      // Therefore we simply insert two elements as soon as the contextmenu gets opened.\n      // The last element being inserted will be immediately be removed again by a exexCommand(\"undo\")\n      //  => When the second element appears in the dom tree then we know the user clicked \"redo\" in the context menu\n      //  => When the first element disappears from the dom tree then we know the user clicked \"undo\" in the context menu\n      if (wysihtml5.browser.hasUndoInContextMenu()) {\n        var interval, observed, cleanUp = function() {\n          cleanTempElements(doc);\n          clearInterval(interval);\n        };\n        \n        dom.observe(this.element, \"contextmenu\", function() {\n          cleanUp();\n          that.composer.selection.executeAndRestoreSimple(function() {\n            if (that.element.lastChild) {\n              that.composer.selection.setAfter(that.element.lastChild);\n            }\n\n            // enable undo button in context menu\n            doc.execCommand(\"insertHTML\", false, UNDO_HTML);\n            // enable redo button in context menu\n            doc.execCommand(\"insertHTML\", false, REDO_HTML);\n            doc.execCommand(\"undo\", false, null);\n          });\n\n          interval = setInterval(function() {\n            if (doc.getElementById(\"_wysihtml5-redo\")) {\n              cleanUp();\n              that.redo();\n            } else if (!doc.getElementById(\"_wysihtml5-undo\")) {\n              cleanUp();\n              that.undo();\n            }\n          }, 400);\n\n          if (!observed) {\n            observed = true;\n            dom.observe(document, \"mousedown\", cleanUp);\n            dom.observe(doc, [\"mousedown\", \"paste\", \"cut\", \"copy\"], cleanUp);\n          }\n        });\n      }\n      \n      this.editor\n        .observe(\"newword:composer\", function() {\n          that.transact();\n        })\n        \n        .observe(\"beforecommand:composer\", function() {\n          that.transact();\n        });\n    },\n    \n    transact: function() {\n      var previousHtml  = this.history[this.position - 1],\n          currentHtml   = this.composer.getValue();\n      \n      if (currentHtml == previousHtml) {\n        return;\n      }\n      \n      var length = this.history.length = this.position;\n      if (length > MAX_HISTORY_ENTRIES) {\n        this.history.shift();\n        this.position--;\n      }\n      \n      this.position++;\n      this.history.push(currentHtml);\n    },\n    \n    undo: function() {\n      this.transact();\n      \n      if (this.position <= 1) {\n        return;\n      }\n      \n      this.set(this.history[--this.position - 1]);\n      this.editor.fire(\"undo:composer\");\n    },\n    \n    redo: function() {\n      if (this.position >= this.history.length) {\n        return;\n      }\n      \n      this.set(this.history[++this.position - 1]);\n      this.editor.fire(\"redo:composer\");\n    },\n    \n    set: function(html) {\n      this.composer.setValue(html);\n      this.editor.focus(true);\n    }\n  });\n})(wysihtml5);\n/**\n * TODO: the following methods still need unit test coverage\n */\nwysihtml5.views.View = Base.extend(\n  /** @scope wysihtml5.views.View.prototype */ {\n  constructor: function(parent, textareaElement, config) {\n    this.parent   = parent;\n    this.element  = textareaElement;\n    this.config   = config;\n    \n    this._observeViewChange();\n  },\n  \n  _observeViewChange: function() {\n    var that = this;\n    this.parent.observe(\"beforeload\", function() {\n      that.parent.observe(\"change_view\", function(view) {\n        if (view === that.name) {\n          that.parent.currentView = that;\n          that.show();\n          // Using tiny delay here to make sure that the placeholder is set before focusing\n          setTimeout(function() { that.focus(); }, 0);\n        } else {\n          that.hide();\n        }\n      });\n    });\n  },\n  \n  focus: function() {\n    if (this.element.ownerDocument.querySelector(\":focus\") === this.element) {\n      return;\n    }\n    \n    try { this.element.focus(); } catch(e) {}\n  },\n  \n  hide: function() {\n    this.element.style.display = \"none\";\n  },\n  \n  show: function() {\n    this.element.style.display = \"\";\n  },\n  \n  disable: function() {\n    this.element.setAttribute(\"disabled\", \"disabled\");\n  },\n  \n  enable: function() {\n    this.element.removeAttribute(\"disabled\");\n  }\n});(function(wysihtml5) {\n  var dom       = wysihtml5.dom,\n      browser   = wysihtml5.browser;\n  \n  wysihtml5.views.Composer = wysihtml5.views.View.extend(\n    /** @scope wysihtml5.views.Composer.prototype */ {\n    name: \"composer\",\n\n    // Needed for firefox in order to display a proper caret in an empty contentEditable\n    CARET_HACK: \"<br>\",\n\n    constructor: function(parent, textareaElement, config) {\n      this.base(parent, textareaElement, config);\n      this.textarea = this.parent.textarea;\n      this._initSandbox();\n    },\n\n    clear: function() {\n      this.element.innerHTML = browser.displaysCaretInEmptyContentEditableCorrectly() ? \"\" : this.CARET_HACK;\n    },\n\n    getValue: function(parse) {\n      var value = this.isEmpty() ? \"\" : wysihtml5.quirks.getCorrectInnerHTML(this.element);\n      \n      if (parse) {\n        value = this.parent.parse(value);\n      }\n\n      // Replace all \"zero width no breaking space\" chars\n      // which are used as hacks to enable some functionalities\n      // Also remove all CARET hacks that somehow got left\n      value = wysihtml5.lang.string(value).replace(wysihtml5.INVISIBLE_SPACE).by(\"\");\n\n      return value;\n    },\n\n    setValue: function(html, parse) {\n      if (parse) {\n        html = this.parent.parse(html);\n      }\n      this.element.innerHTML = html;\n    },\n\n    show: function() {\n      this.iframe.style.display = this._displayStyle || \"\";\n\n      // Firefox needs this, otherwise contentEditable becomes uneditable\n      this.disable();\n      this.enable();\n    },\n\n    hide: function() {\n      this._displayStyle = dom.getStyle(\"display\").from(this.iframe);\n      if (this._displayStyle === \"none\") {\n        this._displayStyle = null;\n      }\n      this.iframe.style.display = \"none\";\n    },\n\n    disable: function() {\n      this.element.removeAttribute(\"contentEditable\");\n      this.base();\n    },\n\n    enable: function() {\n      this.element.setAttribute(\"contentEditable\", \"true\");\n      this.base();\n    },\n\n    focus: function(setToEnd) {\n      // IE 8 fires the focus event after .focus()\n      // This is needed by our simulate_placeholder.js to work\n      // therefore we clear it ourselves this time\n      if (wysihtml5.browser.doesAsyncFocus() && this.hasPlaceholderSet()) {\n        this.clear();\n      }\n      \n      this.base();\n      \n      var lastChild = this.element.lastChild;\n      if (setToEnd && lastChild) {\n        if (lastChild.nodeName === \"BR\") {\n          this.selection.setBefore(this.element.lastChild);\n        } else {\n          this.selection.setAfter(this.element.lastChild);\n        }\n      }\n    },\n\n    getTextContent: function() {\n      return dom.getTextContent(this.element);\n    },\n\n    hasPlaceholderSet: function() {\n      return this.getTextContent() == this.textarea.element.getAttribute(\"placeholder\");\n    },\n\n    isEmpty: function() {\n      var innerHTML               = this.element.innerHTML,\n          elementsWithVisualValue = \"blockquote, ul, ol, img, embed, object, table, iframe, svg, video, audio, button, input, select, textarea\";\n      return innerHTML === \"\"              || \n             innerHTML === this.CARET_HACK ||\n             this.hasPlaceholderSet()      ||\n             (this.getTextContent() === \"\" && !this.element.querySelector(elementsWithVisualValue));\n    },\n\n    _initSandbox: function() {\n      var that = this;\n      \n      this.sandbox = new dom.Sandbox(function() {\n        that._create();\n      }, {\n        stylesheets:  this.config.stylesheets\n      });\n      this.iframe  = this.sandbox.getIframe();\n\n      // Create hidden field which tells the server after submit, that the user used an wysiwyg editor\n      var hiddenField = document.createElement(\"input\");\n      hiddenField.type   = \"hidden\";\n      hiddenField.name   = \"_wysihtml5_mode\";\n      hiddenField.value  = 1;\n\n      // Store reference to current wysihtml5 instance on the textarea element\n      var textareaElement = this.textarea.element;\n      dom.insert(this.iframe).after(textareaElement);\n      dom.insert(hiddenField).after(textareaElement);\n    },\n\n    _create: function() {\n      var that = this;\n      \n      this.doc                = this.sandbox.getDocument();\n      this.element            = this.doc.body;\n      this.textarea           = this.parent.textarea;\n      this.element.innerHTML  = this.textarea.getValue(true);\n      this.enable();\n      \n      // Make sure our selection handler is ready\n      this.selection = new wysihtml5.Selection(this.parent);\n      \n      // Make sure commands dispatcher is ready\n      this.commands  = new wysihtml5.Commands(this.parent);\n\n      dom.copyAttributes([\n        \"className\", \"spellcheck\", \"title\", \"lang\", \"dir\", \"accessKey\"\n      ]).from(this.textarea.element).to(this.element);\n      \n      dom.addClass(this.element, this.config.composerClassName);\n\n      // Make the editor look like the original textarea, by syncing styles\n      if (this.config.style) {\n        this.style();\n      }\n\n      this.observe();\n\n      var name = this.config.name;\n      if (name) {\n        dom.addClass(this.element, name);\n        dom.addClass(this.iframe, name);\n      }\n\n      // Simulate html5 placeholder attribute on contentEditable element\n      var placeholderText = typeof(this.config.placeholder) === \"string\"\n        ? this.config.placeholder\n        : this.textarea.element.getAttribute(\"placeholder\");\n      if (placeholderText) {\n        dom.simulatePlaceholder(this.parent, this, placeholderText);\n      }\n      \n      // Make sure that the browser avoids using inline styles whenever possible\n      this.commands.exec(\"styleWithCSS\", false);\n\n      this._initAutoLinking();\n      this._initObjectResizing();\n      this._initUndoManager();\n\n      // Simulate html5 autofocus on contentEditable element\n      if (this.textarea.element.hasAttribute(\"autofocus\") || document.querySelector(\":focus\") == this.textarea.element) {\n        setTimeout(function() { that.focus(); }, 100);\n      }\n\n      wysihtml5.quirks.insertLineBreakOnReturn(this);\n\n      // IE sometimes leaves a single paragraph, which can't be removed by the user\n      if (!browser.clearsContentEditableCorrectly()) {\n        wysihtml5.quirks.ensureProperClearing(this);\n      }\n\n      if (!browser.clearsListsInContentEditableCorrectly()) {\n        wysihtml5.quirks.ensureProperClearingOfLists(this);\n      }\n\n      // Set up a sync that makes sure that textarea and editor have the same content\n      if (this.initSync && this.config.sync) {\n        this.initSync();\n      }\n\n      // Okay hide the textarea, we are ready to go\n      this.textarea.hide();\n\n      // Fire global (before-)load event\n      this.parent.fire(\"beforeload\").fire(\"load\");\n    },\n\n    _initAutoLinking: function() {\n      var that                           = this,\n          supportsDisablingOfAutoLinking = browser.canDisableAutoLinking(),\n          supportsAutoLinking            = browser.doesAutoLinkingInContentEditable();\n      if (supportsDisablingOfAutoLinking) {\n        this.commands.exec(\"autoUrlDetect\", false);\n      }\n\n      if (!this.config.autoLink) {\n        return;\n      }\n\n      // Only do the auto linking by ourselves when the browser doesn't support auto linking\n      // OR when he supports auto linking but we were able to turn it off (IE9+)\n      if (!supportsAutoLinking || (supportsAutoLinking && supportsDisablingOfAutoLinking)) {\n        this.parent.observe(\"newword:composer\", function() {\n          that.selection.executeAndRestore(function(startContainer, endContainer) {\n            dom.autoLink(endContainer.parentNode);\n          });\n        });\n      }\n\n      // Assuming we have the following:\n      //  <a href=\"http://www.google.de\">http://www.google.de</a>\n      // If a user now changes the url in the innerHTML we want to make sure that\n      // it's synchronized with the href attribute (as long as the innerHTML is still a url)\n      var // Use a live NodeList to check whether there are any links in the document\n          links           = this.sandbox.getDocument().getElementsByTagName(\"a\"),\n          // The autoLink helper method reveals a reg exp to detect correct urls\n          urlRegExp       = dom.autoLink.URL_REG_EXP,\n          getTextContent  = function(element) {\n            var textContent = wysihtml5.lang.string(dom.getTextContent(element)).trim();\n            if (textContent.substr(0, 4) === \"www.\") {\n              textContent = \"http://\" + textContent;\n            }\n            return textContent;\n          };\n\n      dom.observe(this.element, \"keydown\", function(event) {\n        if (!links.length) {\n          return;\n        }\n\n        var selectedNode = that.selection.getSelectedNode(event.target.ownerDocument),\n            link         = dom.getParentElement(selectedNode, { nodeName: \"A\" }, 4),\n            textContent;\n\n        if (!link) {\n          return;\n        }\n\n        textContent = getTextContent(link);\n        // keydown is fired before the actual content is changed\n        // therefore we set a timeout to change the href\n        setTimeout(function() {\n          var newTextContent = getTextContent(link);\n          if (newTextContent === textContent) {\n            return;\n          }\n\n          // Only set href when new href looks like a valid url\n          if (newTextContent.match(urlRegExp)) {\n            link.setAttribute(\"href\", newTextContent);\n          }\n        }, 0);\n      });\n    },\n\n    _initObjectResizing: function() {\n      var properties        = [\"width\", \"height\"],\n          propertiesLength  = properties.length,\n          element           = this.element;\n      \n      this.commands.exec(\"enableObjectResizing\", this.config.allowObjectResizing);\n      \n      if (this.config.allowObjectResizing) {\n         // IE sets inline styles after resizing objects\n         // The following lines make sure that the width/height css properties\n         // are copied over to the width/height attributes\n        if (browser.supportsEvent(\"resizeend\")) {\n          dom.observe(element, \"resizeend\", function(event) {\n            var target = event.target || event.srcElement,\n                style  = target.style,\n                i      = 0,\n                property;\n            for(; i<propertiesLength; i++) {\n              property = properties[i];\n              if (style[property]) {\n                target.setAttribute(property, parseInt(style[property], 10));\n                style[property] = \"\";\n              }\n            }\n            // After resizing IE sometimes forgets to remove the old resize handles\n            wysihtml5.quirks.redraw(element);\n          });\n        }\n      } else {\n        if (browser.supportsEvent(\"resizestart\")) {\n          dom.observe(element, \"resizestart\", function(event) { event.preventDefault(); });\n        }\n      }\n    },\n    \n    _initUndoManager: function() {\n      new wysihtml5.UndoManager(this.parent);\n    }\n  });\n})(wysihtml5);(function(wysihtml5) {\n  var dom             = wysihtml5.dom,\n      doc             = document,\n      win             = window,\n      HOST_TEMPLATE   = doc.createElement(\"div\"),\n      /**\n       * Styles to copy from textarea to the composer element\n       */\n      TEXT_FORMATTING = [\n        \"background-color\",\n        \"color\", \"cursor\",\n        \"font-family\", \"font-size\", \"font-style\", \"font-variant\", \"font-weight\",\n        \"line-height\", \"letter-spacing\",\n        \"text-align\", \"text-decoration\", \"text-indent\", \"text-rendering\",\n        \"word-break\", \"word-wrap\", \"word-spacing\"\n      ],\n      /**\n       * Styles to copy from textarea to the iframe\n       */\n      BOX_FORMATTING = [\n        \"background-color\",\n        \"border-collapse\",\n        \"border-bottom-color\", \"border-bottom-style\", \"border-bottom-width\",\n        \"border-left-color\", \"border-left-style\", \"border-left-width\",\n        \"border-right-color\", \"border-right-style\", \"border-right-width\",\n        \"border-top-color\", \"border-top-style\", \"border-top-width\",\n        \"clear\", \"display\", \"float\",\n        \"margin-bottom\", \"margin-left\", \"margin-right\", \"margin-top\",\n        \"outline-color\", \"outline-offset\", \"outline-width\", \"outline-style\",\n        \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\",\n        \"position\", \"top\", \"left\", \"right\", \"bottom\", \"z-index\",\n        \"vertical-align\", \"text-align\",\n        \"-webkit-box-sizing\", \"-moz-box-sizing\", \"-ms-box-sizing\", \"box-sizing\",\n        \"-webkit-box-shadow\", \"-moz-box-shadow\", \"-ms-box-shadow\",\"box-shadow\",\n        \"-webkit-border-top-right-radius\", \"-moz-border-radius-topright\", \"border-top-right-radius\",\n        \"-webkit-border-bottom-right-radius\", \"-moz-border-radius-bottomright\", \"border-bottom-right-radius\",\n        \"-webkit-border-bottom-left-radius\", \"-moz-border-radius-bottomleft\", \"border-bottom-left-radius\",\n        \"-webkit-border-top-left-radius\", \"-moz-border-radius-topleft\", \"border-top-left-radius\",\n        \"width\", \"height\"\n      ],\n      /**\n       * Styles to sync while the window gets resized\n       */\n      RESIZE_STYLE = [\n        \"width\", \"height\",\n        \"top\", \"left\", \"right\", \"bottom\"\n      ],\n      ADDITIONAL_CSS_RULES = [\n        \"html             { height: 100%; }\",\n        \"body             { min-height: 100%; padding: 0; margin: 0; margin-top: -1px; padding-top: 1px; }\",\n        \"._wysihtml5-temp { display: none; }\",\n        wysihtml5.browser.isGecko ?\n          \"body.placeholder { color: graytext !important; }\" : \n          \"body.placeholder { color: #a9a9a9 !important; }\",\n        \"body[disabled]   { background-color: #eee !important; color: #999 !important; cursor: default !important; }\",\n        // Ensure that user see's broken images and can delete them\n        \"img:-moz-broken  { -moz-force-broken-image-icon: 1; height: 24px; width: 24px; }\"\n      ];\n  \n  /**\n   * With \"setActive\" IE offers a smart way of focusing elements without scrolling them into view:\n   * http://msdn.microsoft.com/en-us/library/ms536738(v=vs.85).aspx\n   *\n   * Other browsers need a more hacky way: (pssst don't tell my mama)\n   * In order to prevent the element being scrolled into view when focusing it, we simply\n   * move it out of the scrollable area, focus it, and reset it's position\n   */\n  var focusWithoutScrolling = function(element) {\n    if (element.setActive) {\n      // Following line could cause a js error when the textarea is invisible\n      // See https://github.com/xing/wysihtml5/issues/9\n      try { element.setActive(); } catch(e) {}\n    } else {\n      var elementStyle = element.style,\n          originalScrollTop = doc.documentElement.scrollTop || doc.body.scrollTop,\n          originalScrollLeft = doc.documentElement.scrollLeft || doc.body.scrollLeft,\n          originalStyles = {\n            position:         elementStyle.position,\n            top:              elementStyle.top,\n            left:             elementStyle.left,\n            WebkitUserSelect: elementStyle.WebkitUserSelect\n          };\n      \n      dom.setStyles({\n        position:         \"absolute\",\n        top:              \"-99999px\",\n        left:             \"-99999px\",\n        // Don't ask why but temporarily setting -webkit-user-select to none makes the whole thing performing smoother\n        WebkitUserSelect: \"none\"\n      }).on(element);\n      \n      element.focus();\n      \n      dom.setStyles(originalStyles).on(element);\n      \n      if (win.scrollTo) {\n        // Some browser extensions unset this method to prevent annoyances\n        // \"Better PopUp Blocker\" for Chrome http://code.google.com/p/betterpopupblocker/source/browse/trunk/blockStart.js#100\n        // Issue: http://code.google.com/p/betterpopupblocker/issues/detail?id=1\n        win.scrollTo(originalScrollLeft, originalScrollTop);\n      }\n    }\n  };\n  \n  \n  wysihtml5.views.Composer.prototype.style = function() {\n    var that                  = this,\n        originalActiveElement = doc.querySelector(\":focus\"),\n        textareaElement       = this.textarea.element,\n        hasPlaceholder        = textareaElement.hasAttribute(\"placeholder\"),\n        originalPlaceholder   = hasPlaceholder && textareaElement.getAttribute(\"placeholder\");\n    this.focusStylesHost      = this.focusStylesHost  || HOST_TEMPLATE.cloneNode(false);\n    this.blurStylesHost       = this.blurStylesHost   || HOST_TEMPLATE.cloneNode(false);\n  \n    // Remove placeholder before copying (as the placeholder has an affect on the computed style)\n    if (hasPlaceholder) {\n      textareaElement.removeAttribute(\"placeholder\");\n    }\n  \n    if (textareaElement === originalActiveElement) {\n      textareaElement.blur();\n    }\n  \n    // --------- iframe styles (has to be set before editor styles, otherwise IE9 sets wrong fontFamily on blurStylesHost) ---------\n    dom.copyStyles(BOX_FORMATTING).from(textareaElement).to(this.iframe).andTo(this.blurStylesHost);\n  \n    // --------- editor styles ---------\n    dom.copyStyles(TEXT_FORMATTING).from(textareaElement).to(this.element).andTo(this.blurStylesHost);\n  \n    // --------- apply standard rules ---------\n    dom.insertCSS(ADDITIONAL_CSS_RULES).into(this.element.ownerDocument);\n  \n    // --------- :focus styles ---------\n    focusWithoutScrolling(textareaElement);\n    dom.copyStyles(BOX_FORMATTING).from(textareaElement).to(this.focusStylesHost);\n    dom.copyStyles(TEXT_FORMATTING).from(textareaElement).to(this.focusStylesHost);\n  \n    // Make sure that we don't change the display style of the iframe when copying styles oblur/onfocus\n    // this is needed for when the change_view event is fired where the iframe is hidden and then\n    // the blur event fires and re-displays it\n    var boxFormattingStyles = wysihtml5.lang.array(BOX_FORMATTING).without([\"display\"]);\n  \n    // --------- restore focus ---------\n    if (originalActiveElement) {\n      originalActiveElement.focus();\n    } else {\n      textareaElement.blur();\n    }\n  \n    // --------- restore placeholder ---------\n    if (hasPlaceholder) {\n      textareaElement.setAttribute(\"placeholder\", originalPlaceholder);\n    }\n  \n    // When copying styles, we only get the computed style which is never returned in percent unit\n    // Therefore we've to recalculate style onresize\n    if (!wysihtml5.browser.hasCurrentStyleProperty()) {\n      var winObserver = dom.observe(win, \"resize\", function() {\n        // Remove event listener if composer doesn't exist anymore\n        if (!dom.contains(document.documentElement, that.iframe)) {\n          winObserver.stop();\n          return;\n        }\n        var originalTextareaDisplayStyle = dom.getStyle(\"display\").from(textareaElement),\n            originalComposerDisplayStyle = dom.getStyle(\"display\").from(that.iframe);\n        textareaElement.style.display = \"\";\n        that.iframe.style.display = \"none\";\n        dom.copyStyles(RESIZE_STYLE)\n          .from(textareaElement)\n          .to(that.iframe)\n          .andTo(that.focusStylesHost)\n          .andTo(that.blurStylesHost);\n        that.iframe.style.display = originalComposerDisplayStyle;\n        textareaElement.style.display = originalTextareaDisplayStyle;\n      });\n    }\n  \n    // --------- Sync focus/blur styles ---------\n    this.parent.observe(\"focus:composer\", function() {\n      dom.copyStyles(boxFormattingStyles) .from(that.focusStylesHost).to(that.iframe);\n      dom.copyStyles(TEXT_FORMATTING)     .from(that.focusStylesHost).to(that.element);\n    });\n\n    this.parent.observe(\"blur:composer\", function() {\n      dom.copyStyles(boxFormattingStyles) .from(that.blurStylesHost).to(that.iframe);\n      dom.copyStyles(TEXT_FORMATTING)     .from(that.blurStylesHost).to(that.element);\n    });\n  \n    return this;\n  };\n})(wysihtml5);/**\n * Taking care of events\n *  - Simulating 'change' event on contentEditable element\n *  - Handling drag & drop logic\n *  - Catch paste events\n *  - Dispatch proprietary newword:composer event\n *  - Keyboard shortcuts\n */\n(function(wysihtml5) {\n  var dom       = wysihtml5.dom,\n      browser   = wysihtml5.browser,\n      /**\n       * Map keyCodes to query commands\n       */\n      shortcuts = {\n        \"66\": \"bold\",     // B\n        \"73\": \"italic\",   // I\n        \"85\": \"underline\" // U\n      };\n  \n  wysihtml5.views.Composer.prototype.observe = function() {\n    var that                = this,\n        state               = this.getValue(),\n        iframe              = this.sandbox.getIframe(),\n        element             = this.element,\n        focusBlurElement    = browser.supportsEventsInIframeCorrectly() ? element : this.sandbox.getWindow(),\n        // Firefox < 3.5 doesn't support the drop event, instead it supports a so called \"dragdrop\" event which behaves almost the same\n        pasteEvents         = browser.supportsEvent(\"drop\") ? [\"drop\", \"paste\"] : [\"dragdrop\", \"paste\"];\n\n    // --------- destroy:composer event ---------\n    dom.observe(iframe, \"DOMNodeRemoved\", function() {\n      clearInterval(domNodeRemovedInterval);\n      that.parent.fire(\"destroy:composer\");\n    });\n\n    // DOMNodeRemoved event is not supported in IE 8\n    var domNodeRemovedInterval = setInterval(function() {\n      if (!dom.contains(document.documentElement, iframe)) {\n        clearInterval(domNodeRemovedInterval);\n        that.parent.fire(\"destroy:composer\");\n      }\n    }, 250);\n\n\n    // --------- Focus & blur logic ---------\n    dom.observe(focusBlurElement, \"focus\", function() {\n      that.parent.fire(\"focus\").fire(\"focus:composer\");\n\n      // Delay storing of state until all focus handler are fired\n      // especially the one which resets the placeholder\n      setTimeout(function() { state = that.getValue(); }, 0);\n    });\n\n    dom.observe(focusBlurElement, \"blur\", function() {\n      if (state !== that.getValue()) {\n        that.parent.fire(\"change\").fire(\"change:composer\");\n      }\n      that.parent.fire(\"blur\").fire(\"blur:composer\");\n    });\n    \n    if (wysihtml5.browser.isIos()) {\n      // When on iPad/iPhone/IPod after clicking outside of editor, the editor loses focus\n      // but the UI still acts as if the editor has focus (blinking caret and onscreen keyboard visible)\n      // We prevent that by focusing a temporary input element which immediately loses focus\n      dom.observe(element, \"blur\", function() {\n        var input = element.ownerDocument.createElement(\"input\"),\n            originalScrollTop = document.documentElement.scrollTop || document.body.scrollTop,\n            originalScrollLeft = document.documentElement.scrollLeft || document.body.scrollLeft;\n        try {\n          that.selection.insertNode(input);\n        } catch(e) {\n          element.appendChild(input);\n        }\n        input.focus();\n        input.parentNode.removeChild(input);\n        \n        window.scrollTo(originalScrollLeft, originalScrollTop);\n      });\n    }\n\n    // --------- Drag & Drop logic ---------\n    dom.observe(element, \"dragenter\", function() {\n      that.parent.fire(\"unset_placeholder\");\n    });\n\n    if (browser.firesOnDropOnlyWhenOnDragOverIsCancelled()) {\n      dom.observe(element, [\"dragover\", \"dragenter\"], function(event) {\n        event.preventDefault();\n      });\n    }\n\n    dom.observe(element, pasteEvents, function(event) {\n      var dataTransfer = event.dataTransfer,\n          data;\n\n      if (dataTransfer && browser.supportsDataTransfer()) {\n        data = dataTransfer.getData(\"text/html\") || dataTransfer.getData(\"text/plain\");\n      }\n      if (data) {\n        element.focus();\n        that.commands.exec(\"insertHTML\", data);\n        that.parent.fire(\"paste\").fire(\"paste:composer\");\n        event.stopPropagation();\n        event.preventDefault();\n      } else {\n        setTimeout(function() {\n          that.parent.fire(\"paste\").fire(\"paste:composer\");\n        }, 0);\n      }\n    });\n\n    // --------- neword event ---------\n    dom.observe(element, \"keyup\", function(event) {\n      var keyCode = event.keyCode;\n      if (keyCode === wysihtml5.SPACE_KEY || keyCode === wysihtml5.ENTER_KEY) {\n        that.parent.fire(\"newword:composer\");\n      }\n    });\n\n    this.parent.observe(\"paste:composer\", function() {\n      setTimeout(function() { that.parent.fire(\"newword:composer\"); }, 0);\n    });\n\n    // --------- Make sure that images are selected when clicking on them ---------\n    if (!browser.canSelectImagesInContentEditable()) {\n      dom.observe(element, \"mousedown\", function(event) {\n        var target = event.target;\n        if (target.nodeName === \"IMG\") {\n          that.selection.selectNode(target);\n          event.preventDefault();\n        }\n      });\n    }\n    \n    // --------- Shortcut logic ---------\n    dom.observe(element, \"keydown\", function(event) {\n      var keyCode  = event.keyCode,\n          command  = shortcuts[keyCode];\n      if ((event.ctrlKey || event.metaKey) && !event.altKey && command) {\n        that.commands.exec(command);\n        event.preventDefault();\n      }\n    });\n\n    // --------- Make sure that when pressing backspace/delete on selected images deletes the image and it's anchor ---------\n    dom.observe(element, \"keydown\", function(event) {\n      var target  = that.selection.getSelectedNode(true),\n          keyCode = event.keyCode,\n          parent;\n      if (target && target.nodeName === \"IMG\" && (keyCode === wysihtml5.BACKSPACE_KEY || keyCode === wysihtml5.DELETE_KEY)) { // 8 => backspace, 46 => delete\n        parent = target.parentNode;\n        // delete the <img>\n        parent.removeChild(target);\n        // and it's parent <a> too if it hasn't got any other child nodes\n        if (parent.nodeName === \"A\" && !parent.firstChild) {\n          parent.parentNode.removeChild(parent);\n        }\n\n        setTimeout(function() { wysihtml5.quirks.redraw(element); }, 0);\n        event.preventDefault();\n      }\n    });\n\n    // --------- Show url in tooltip when hovering links or images ---------\n    var titlePrefixes = {\n      IMG: \"Image: \",\n      A:   \"Link: \"\n    };\n    \n    dom.observe(element, \"mouseover\", function(event) {\n      var target   = event.target,\n          nodeName = target.nodeName,\n          title;\n      if (nodeName !== \"A\" && nodeName !== \"IMG\") {\n        return;\n      }\n      var hasTitle = target.hasAttribute(\"title\");\n      if(!hasTitle){\n        title = titlePrefixes[nodeName] + (target.getAttribute(\"href\") || target.getAttribute(\"src\"));\n        target.setAttribute(\"title\", title);\n      }\n    });\n  };\n})(wysihtml5);/**\n * Class that takes care that the value of the composer and the textarea is always in sync\n */\n(function(wysihtml5) {\n  var INTERVAL = 400;\n  \n  wysihtml5.views.Synchronizer = Base.extend(\n    /** @scope wysihtml5.views.Synchronizer.prototype */ {\n\n    constructor: function(editor, textarea, composer) {\n      this.editor   = editor;\n      this.textarea = textarea;\n      this.composer = composer;\n\n      this._observe();\n    },\n\n    /**\n     * Sync html from composer to textarea\n     * Takes care of placeholders\n     * @param {Boolean} shouldParseHtml Whether the html should be sanitized before inserting it into the textarea\n     */\n    fromComposerToTextarea: function(shouldParseHtml) {\n      this.textarea.setValue(wysihtml5.lang.string(this.composer.getValue()).trim(), shouldParseHtml);\n    },\n\n    /**\n     * Sync value of textarea to composer\n     * Takes care of placeholders\n     * @param {Boolean} shouldParseHtml Whether the html should be sanitized before inserting it into the composer\n     */\n    fromTextareaToComposer: function(shouldParseHtml) {\n      var textareaValue = this.textarea.getValue();\n      if (textareaValue) {\n        this.composer.setValue(textareaValue, shouldParseHtml);\n      } else {\n        this.composer.clear();\n        this.editor.fire(\"set_placeholder\");\n      }\n    },\n\n    /**\n     * Invoke syncing based on view state\n     * @param {Boolean} shouldParseHtml Whether the html should be sanitized before inserting it into the composer/textarea\n     */\n    sync: function(shouldParseHtml) {\n      if (this.editor.currentView.name === \"textarea\") {\n        this.fromTextareaToComposer(shouldParseHtml);\n      } else {\n        this.fromComposerToTextarea(shouldParseHtml);\n      }\n    },\n\n    /**\n     * Initializes interval-based syncing\n     * also makes sure that on-submit the composer's content is synced with the textarea\n     * immediately when the form gets submitted\n     */\n    _observe: function() {\n      var interval,\n          that          = this,\n          form          = this.textarea.element.form,\n          startInterval = function() {\n            interval = setInterval(function() { that.fromComposerToTextarea(); }, INTERVAL);\n          },\n          stopInterval  = function() {\n            clearInterval(interval);\n            interval = null;\n          };\n\n      startInterval();\n\n      if (form) {\n        // If the textarea is in a form make sure that after onreset and onsubmit the composer\n        // has the correct state\n        wysihtml5.dom.observe(form, \"submit\", function() {\n          that.sync(true);\n        });\n        wysihtml5.dom.observe(form, \"reset\", function() {\n          setTimeout(function() { that.fromTextareaToComposer(); }, 0);\n        });\n      }\n\n      this.editor.observe(\"change_view\", function(view) {\n        if (view === \"composer\" && !interval) {\n          that.fromTextareaToComposer(true);\n          startInterval();\n        } else if (view === \"textarea\") {\n          that.fromComposerToTextarea(true);\n          stopInterval();\n        }\n      });\n\n      this.editor.observe(\"destroy:composer\", stopInterval);\n    }\n  });\n})(wysihtml5);\nwysihtml5.views.Textarea = wysihtml5.views.View.extend(\n  /** @scope wysihtml5.views.Textarea.prototype */ {\n  name: \"textarea\",\n  \n  constructor: function(parent, textareaElement, config) {\n    this.base(parent, textareaElement, config);\n    \n    this._observe();\n  },\n  \n  clear: function() {\n    this.element.value = \"\";\n  },\n  \n  getValue: function(parse) {\n    var value = this.isEmpty() ? \"\" : this.element.value;\n    if (parse) {\n      value = this.parent.parse(value);\n    }\n    return value;\n  },\n  \n  setValue: function(html, parse) {\n    if (parse) {\n      html = this.parent.parse(html);\n    }\n    this.element.value = html;\n  },\n  \n  hasPlaceholderSet: function() {\n    var supportsPlaceholder = wysihtml5.browser.supportsPlaceholderAttributeOn(this.element),\n        placeholderText     = this.element.getAttribute(\"placeholder\") || null,\n        value               = this.element.value,\n        isEmpty             = !value;\n    return (supportsPlaceholder && isEmpty) || (value === placeholderText);\n  },\n  \n  isEmpty: function() {\n    return !wysihtml5.lang.string(this.element.value).trim() || this.hasPlaceholderSet();\n  },\n  \n  _observe: function() {\n    var element = this.element,\n        parent  = this.parent,\n        eventMapping = {\n          focusin:  \"focus\",\n          focusout: \"blur\"\n        },\n        /**\n         * Calling focus() or blur() on an element doesn't synchronously trigger the attached focus/blur events\n         * This is the case for focusin and focusout, so let's use them whenever possible, kkthxbai\n         */\n        events = wysihtml5.browser.supportsEvent(\"focusin\") ? [\"focusin\", \"focusout\", \"change\"] : [\"focus\", \"blur\", \"change\"];\n    \n    parent.observe(\"beforeload\", function() {\n      wysihtml5.dom.observe(element, events, function(event) {\n        var eventName = eventMapping[event.type] || event.type;\n        parent.fire(eventName).fire(eventName + \":textarea\");\n      });\n      \n      wysihtml5.dom.observe(element, [\"paste\", \"drop\"], function() {\n        setTimeout(function() { parent.fire(\"paste\").fire(\"paste:textarea\"); }, 0);\n      });\n    });\n  }\n});/**\n * Toolbar Dialog\n *\n * @param {Element} link The toolbar link which causes the dialog to show up\n * @param {Element} container The dialog container\n *\n * @example\n *    <!-- Toolbar link -->\n *    <a data-wysihtml5-command=\"insertImage\">insert an image</a>\n *\n *    <!-- Dialog -->\n *    <div data-wysihtml5-dialog=\"insertImage\" style=\"display: none;\">\n *      <label>\n *        URL: <input data-wysihtml5-dialog-field=\"src\" value=\"http://\">\n *      </label>\n *      <label>\n *        Alternative text: <input data-wysihtml5-dialog-field=\"alt\" value=\"\">\n *      </label>\n *    </div>\n *\n *    <script>\n *      var dialog = new wysihtml5.toolbar.Dialog(\n *        document.querySelector(\"[data-wysihtml5-command='insertImage']\"),\n *        document.querySelector(\"[data-wysihtml5-dialog='insertImage']\")\n *      );\n *      dialog.observe(\"save\", function(attributes) {\n *        // do something\n *      });\n *    </script>\n */\n(function(wysihtml5) {\n  var dom                     = wysihtml5.dom,\n      CLASS_NAME_OPENED       = \"wysihtml5-command-dialog-opened\",\n      SELECTOR_FORM_ELEMENTS  = \"input, select, textarea\",\n      SELECTOR_FIELDS         = \"[data-wysihtml5-dialog-field]\",\n      ATTRIBUTE_FIELDS        = \"data-wysihtml5-dialog-field\";\n      \n  \n  wysihtml5.toolbar.Dialog = wysihtml5.lang.Dispatcher.extend(\n    /** @scope wysihtml5.toolbar.Dialog.prototype */ {\n    constructor: function(link, container) {\n      this.link       = link;\n      this.container  = container;\n    },\n\n    _observe: function() {\n      if (this._observed) {\n        return;\n      }\n      \n      var that = this,\n          callbackWrapper = function(event) {\n            var attributes = that._serialize();\n            if (attributes == that.elementToChange) {\n              that.fire(\"edit\", attributes);\n            } else {\n              that.fire(\"save\", attributes);\n            }\n            that.hide();\n            event.preventDefault();\n            event.stopPropagation();\n          };\n\n      dom.observe(that.link, \"click\", function(event) {\n        if (dom.hasClass(that.link, CLASS_NAME_OPENED)) {\n          setTimeout(function() { that.hide(); }, 0);\n        }\n      });\n\n      dom.observe(this.container, \"keydown\", function(event) {\n        var keyCode = event.keyCode;\n        if (keyCode === wysihtml5.ENTER_KEY) {\n          callbackWrapper(event);\n        }\n        if (keyCode === wysihtml5.ESCAPE_KEY) {\n          that.hide();\n        }\n      });\n\n      dom.delegate(this.container, \"[data-wysihtml5-dialog-action=save]\", \"click\", callbackWrapper);\n\n      dom.delegate(this.container, \"[data-wysihtml5-dialog-action=cancel]\", \"click\", function(event) {\n        that.fire(\"cancel\");\n        that.hide();\n        event.preventDefault();\n        event.stopPropagation();\n      });\n\n      var formElements  = this.container.querySelectorAll(SELECTOR_FORM_ELEMENTS),\n          i             = 0,\n          length        = formElements.length,\n          _clearInterval = function() { clearInterval(that.interval); };\n      for (; i<length; i++) {\n        dom.observe(formElements[i], \"change\", _clearInterval);\n      }\n\n      this._observed = true;\n    },\n\n    /**\n     * Grabs all fields in the dialog and puts them in key=>value style in an object which\n     * then gets returned\n     */\n    _serialize: function() {\n      var data    = this.elementToChange || {},\n          fields  = this.container.querySelectorAll(SELECTOR_FIELDS),\n          length  = fields.length,\n          i       = 0;\n      for (; i<length; i++) {\n        data[fields[i].getAttribute(ATTRIBUTE_FIELDS)] = fields[i].value;\n      }\n      return data;\n    },\n\n    /**\n     * Takes the attributes of the \"elementToChange\"\n     * and inserts them in their corresponding dialog input fields\n     * \n     * Assume the \"elementToChange\" looks like this:\n     *    <a href=\"http://www.google.com\" target=\"_blank\">foo</a>\n     *\n     * and we have the following dialog:\n     *    <input type=\"text\" data-wysihtml5-dialog-field=\"href\" value=\"\">\n     *    <input type=\"text\" data-wysihtml5-dialog-field=\"target\" value=\"\">\n     * \n     * after calling _interpolate() the dialog will look like this\n     *    <input type=\"text\" data-wysihtml5-dialog-field=\"href\" value=\"http://www.google.com\">\n     *    <input type=\"text\" data-wysihtml5-dialog-field=\"target\" value=\"_blank\">\n     *\n     * Basically it adopted the attribute values into the corresponding input fields\n     *\n     */\n    _interpolate: function(avoidHiddenFields) {\n      var field,\n          fieldName,\n          newValue,\n          focusedElement = document.querySelector(\":focus\"),\n          fields         = this.container.querySelectorAll(SELECTOR_FIELDS),\n          length         = fields.length,\n          i              = 0;\n      for (; i<length; i++) {\n        field = fields[i];\n        \n        // Never change elements where the user is currently typing in\n        if (field === focusedElement) {\n          continue;\n        }\n        \n        // Don't update hidden fields\n        // See https://github.com/xing/wysihtml5/pull/14\n        if (avoidHiddenFields && field.type === \"hidden\") {\n          continue;\n        }\n        \n        fieldName = field.getAttribute(ATTRIBUTE_FIELDS);\n        newValue  = this.elementToChange ? (this.elementToChange[fieldName] || \"\") : field.defaultValue;\n        field.value = newValue;\n      }\n    },\n\n    /**\n     * Show the dialog element\n     */\n    show: function(elementToChange) {\n      var that        = this,\n          firstField  = this.container.querySelector(SELECTOR_FORM_ELEMENTS);\n      this.elementToChange = elementToChange;\n      this._observe();\n      this._interpolate();\n      if (elementToChange) {\n        this.interval = setInterval(function() { that._interpolate(true); }, 500);\n      }\n      dom.addClass(this.link, CLASS_NAME_OPENED);\n      this.container.style.display = \"\";\n      this.fire(\"show\");\n      if (firstField && !elementToChange) {\n        try {\n          firstField.focus();\n        } catch(e) {}\n      }\n    },\n\n    /**\n     * Hide the dialog element\n     */\n    hide: function() {\n      clearInterval(this.interval);\n      this.elementToChange = null;\n      dom.removeClass(this.link, CLASS_NAME_OPENED);\n      this.container.style.display = \"none\";\n      this.fire(\"hide\");\n    }\n  });\n})(wysihtml5);\n/**\n * Converts speech-to-text and inserts this into the editor\n * As of now (2011/03/25) this only is supported in Chrome >= 11\n *\n * Note that it sends the recorded audio to the google speech recognition api:\n * http://stackoverflow.com/questions/4361826/does-chrome-have-buil-in-speech-recognition-for-input-type-text-x-webkit-speec\n *\n * Current HTML5 draft can be found here\n * http://lists.w3.org/Archives/Public/public-xg-htmlspeech/2011Feb/att-0020/api-draft.html\n * \n * \"Accessing Google Speech API Chrome 11\"\n * http://mikepultz.com/2011/03/accessing-google-speech-api-chrome-11/\n */\n(function(wysihtml5) {\n  var dom = wysihtml5.dom;\n  \n  var linkStyles = {\n    position: \"relative\"\n  };\n  \n  var wrapperStyles = {\n    left:     0,\n    margin:   0,\n    opacity:  0,\n    overflow: \"hidden\",\n    padding:  0,\n    position: \"absolute\",\n    top:      0,\n    zIndex:   1\n  };\n  \n  var inputStyles = {\n    cursor:     \"inherit\",\n    fontSize:   \"50px\",\n    height:     \"50px\",\n    marginTop:  \"-25px\",\n    outline:    0,\n    padding:    0,\n    position:   \"absolute\",\n    right:      \"-4px\",\n    top:        \"50%\"\n  };\n  \n  var inputAttributes = {\n    \"x-webkit-speech\": \"\",\n    \"speech\":          \"\"\n  };\n  \n  wysihtml5.toolbar.Speech = function(parent, link) {\n    var input = document.createElement(\"input\");\n    if (!wysihtml5.browser.supportsSpeechApiOn(input)) {\n      link.style.display = \"none\";\n      return;\n    }\n    \n    var wrapper = document.createElement(\"div\");\n    \n    wysihtml5.lang.object(wrapperStyles).merge({\n      width:  link.offsetWidth  + \"px\",\n      height: link.offsetHeight + \"px\"\n    });\n    \n    dom.insert(input).into(wrapper);\n    dom.insert(wrapper).into(link);\n    \n    dom.setStyles(inputStyles).on(input);\n    dom.setAttributes(inputAttributes).on(input)\n    \n    dom.setStyles(wrapperStyles).on(wrapper);\n    dom.setStyles(linkStyles).on(link);\n    \n    var eventName = \"onwebkitspeechchange\" in input ? \"webkitspeechchange\" : \"speechchange\";\n    dom.observe(input, eventName, function() {\n      parent.execCommand(\"insertText\", input.value);\n      input.value = \"\";\n    });\n    \n    dom.observe(input, \"click\", function(event) {\n      if (dom.hasClass(link, \"wysihtml5-command-disabled\")) {\n        event.preventDefault();\n      }\n      \n      event.stopPropagation();\n    });\n  };\n})(wysihtml5);/**\n * Toolbar\n *\n * @param {Object} parent Reference to instance of Editor instance\n * @param {Element} container Reference to the toolbar container element\n *\n * @example\n *    <div id=\"toolbar\">\n *      <a data-wysihtml5-command=\"createLink\">insert link</a>\n *      <a data-wysihtml5-command=\"formatBlock\" data-wysihtml5-command-value=\"h1\">insert h1</a>\n *    </div>\n *\n *    <script>\n *      var toolbar = new wysihtml5.toolbar.Toolbar(editor, document.getElementById(\"toolbar\"));\n *    </script>\n */\n(function(wysihtml5) {\n  var CLASS_NAME_COMMAND_DISABLED   = \"wysihtml5-command-disabled\",\n      CLASS_NAME_COMMANDS_DISABLED  = \"wysihtml5-commands-disabled\",\n      CLASS_NAME_COMMAND_ACTIVE     = \"wysihtml5-command-active\",\n      CLASS_NAME_ACTION_ACTIVE      = \"wysihtml5-action-active\",\n      dom                           = wysihtml5.dom;\n  \n  wysihtml5.toolbar.Toolbar = Base.extend(\n    /** @scope wysihtml5.toolbar.Toolbar.prototype */ {\n    constructor: function(editor, container) {\n      this.editor     = editor;\n      this.container  = typeof(container) === \"string\" ? document.getElementById(container) : container;\n      this.composer   = editor.composer;\n\n      this._getLinks(\"command\");\n      this._getLinks(\"action\");\n\n      this._observe();\n      this.show();\n      \n      var speechInputLinks  = this.container.querySelectorAll(\"[data-wysihtml5-command=insertSpeech]\"),\n          length            = speechInputLinks.length,\n          i                 = 0;\n      for (; i<length; i++) {\n        new wysihtml5.toolbar.Speech(this, speechInputLinks[i]);\n      }\n    },\n\n    _getLinks: function(type) {\n      var links   = this[type + \"Links\"] = wysihtml5.lang.array(this.container.querySelectorAll(\"[data-wysihtml5-\" + type + \"]\")).get(),\n          length  = links.length,\n          i       = 0,\n          mapping = this[type + \"Mapping\"] = {},\n          link,\n          group,\n          name,\n          value,\n          dialog;\n      for (; i<length; i++) {\n        link    = links[i];\n        name    = link.getAttribute(\"data-wysihtml5-\" + type);\n        value   = link.getAttribute(\"data-wysihtml5-\" + type + \"-value\");\n        group   = this.container.querySelector(\"[data-wysihtml5-\" + type + \"-group='\" + name + \"']\");\n        dialog  = this._getDialog(link, name);\n        \n        mapping[name + \":\" + value] = {\n          link:   link,\n          group:  group,\n          name:   name,\n          value:  value,\n          dialog: dialog,\n          state:  false\n        };\n      }\n    },\n\n    _getDialog: function(link, command) {\n      var that          = this,\n          dialogElement = this.container.querySelector(\"[data-wysihtml5-dialog='\" + command + \"']\"),\n          dialog,\n          caretBookmark;\n      \n      if (dialogElement) {\n        dialog = new wysihtml5.toolbar.Dialog(link, dialogElement);\n\n        dialog.observe(\"show\", function() {\n          caretBookmark = that.composer.selection.getBookmark();\n\n          that.editor.fire(\"show:dialog\", { command: command, dialogContainer: dialogElement, commandLink: link });\n        });\n\n        dialog.observe(\"save\", function(attributes) {\n          if (caretBookmark) {\n            that.composer.selection.setBookmark(caretBookmark);\n          }\n          that._execCommand(command, attributes);\n          \n          that.editor.fire(\"save:dialog\", { command: command, dialogContainer: dialogElement, commandLink: link });\n        });\n\n        dialog.observe(\"cancel\", function() {\n          that.editor.focus(false);\n          that.editor.fire(\"cancel:dialog\", { command: command, dialogContainer: dialogElement, commandLink: link });\n        });\n      }\n      return dialog;\n    },\n\n    /**\n     * @example\n     *    var toolbar = new wysihtml5.Toolbar();\n     *    // Insert a <blockquote> element or wrap current selection in <blockquote>\n     *    toolbar.execCommand(\"formatBlock\", \"blockquote\");\n     */\n    execCommand: function(command, commandValue) {\n      if (this.commandsDisabled) {\n        return;\n      }\n\n      var commandObj = this.commandMapping[command + \":\" + commandValue];\n\n      // Show dialog when available\n      if (commandObj && commandObj.dialog && !commandObj.state) {\n        commandObj.dialog.show();\n      } else {\n        this._execCommand(command, commandValue);\n      }\n    },\n\n    _execCommand: function(command, commandValue) {\n      // Make sure that composer is focussed (false => don't move caret to the end)\n      this.editor.focus(false);\n\n      this.composer.commands.exec(command, commandValue);\n      this._updateLinkStates();\n    },\n\n    execAction: function(action) {\n      var editor = this.editor;\n      switch(action) {\n        case \"change_view\":\n          if (editor.currentView === editor.textarea) {\n            editor.fire(\"change_view\", \"composer\");\n          } else {\n            editor.fire(\"change_view\", \"textarea\");\n          }\n          break;\n      }\n    },\n\n    _observe: function() {\n      var that      = this,\n          editor    = this.editor,\n          container = this.container,\n          links     = this.commandLinks.concat(this.actionLinks),\n          length    = links.length,\n          i         = 0;\n      \n      for (; i<length; i++) {\n        // 'javascript:;' and unselectable=on Needed for IE, but done in all browsers to make sure that all get the same css applied\n        // (you know, a:link { ... } doesn't match anchors with missing href attribute)\n        dom.setAttributes({\n          href:         \"javascript:;\",\n          unselectable: \"on\"\n        }).on(links[i]);\n      }\n\n      // Needed for opera\n      dom.delegate(container, \"[data-wysihtml5-command]\", \"mousedown\", function(event) { event.preventDefault(); });\n      \n      dom.delegate(container, \"[data-wysihtml5-command]\", \"click\", function(event) {\n        var link          = this,\n            command       = link.getAttribute(\"data-wysihtml5-command\"),\n            commandValue  = link.getAttribute(\"data-wysihtml5-command-value\");\n        that.execCommand(command, commandValue);\n        event.preventDefault();\n      });\n\n      dom.delegate(container, \"[data-wysihtml5-action]\", \"click\", function(event) {\n        var action = this.getAttribute(\"data-wysihtml5-action\");\n        that.execAction(action);\n        event.preventDefault();\n      });\n\n      editor.observe(\"focus:composer\", function() {\n        that.bookmark = null;\n        clearInterval(that.interval);\n        that.interval = setInterval(function() { that._updateLinkStates(); }, 500);\n      });\n\n      editor.observe(\"blur:composer\", function() {\n        clearInterval(that.interval);\n      });\n\n      editor.observe(\"destroy:composer\", function() {\n        clearInterval(that.interval);\n      });\n\n      editor.observe(\"change_view\", function(currentView) {\n        // Set timeout needed in order to let the blur event fire first\n        setTimeout(function() {\n          that.commandsDisabled = (currentView !== \"composer\");\n          that._updateLinkStates();\n          if (that.commandsDisabled) {\n            dom.addClass(container, CLASS_NAME_COMMANDS_DISABLED);\n          } else {\n            dom.removeClass(container, CLASS_NAME_COMMANDS_DISABLED);\n          }\n        }, 0);\n      });\n    },\n\n    _updateLinkStates: function() {\n      var element           = this.composer.element,\n          commandMapping    = this.commandMapping,\n          actionMapping     = this.actionMapping,\n          i,\n          state,\n          action,\n          command;\n      // every millisecond counts... this is executed quite often\n      for (i in commandMapping) {\n        command = commandMapping[i];\n        if (this.commandsDisabled) {\n          state = false;\n          dom.removeClass(command.link, CLASS_NAME_COMMAND_ACTIVE);\n          if (command.group) {\n            dom.removeClass(command.group, CLASS_NAME_COMMAND_ACTIVE);\n          }\n          if (command.dialog) {\n            command.dialog.hide();\n          }\n        } else {\n          state = this.composer.commands.state(command.name, command.value);\n          if (wysihtml5.lang.object(state).isArray()) {\n            // Grab first and only object/element in state array, otherwise convert state into boolean\n            // to avoid showing a dialog for multiple selected elements which may have different attributes\n            // eg. when two links with different href are selected, the state will be an array consisting of both link elements\n            // but the dialog interface can only update one\n            state = state.length === 1 ? state[0] : true;\n          }\n          dom.removeClass(command.link, CLASS_NAME_COMMAND_DISABLED);\n          if (command.group) {\n            dom.removeClass(command.group, CLASS_NAME_COMMAND_DISABLED);\n          }\n        }\n\n        if (command.state === state) {\n          continue;\n        }\n\n        command.state = state;\n        if (state) {\n          dom.addClass(command.link, CLASS_NAME_COMMAND_ACTIVE);\n          if (command.group) {\n            dom.addClass(command.group, CLASS_NAME_COMMAND_ACTIVE);\n          }\n          if (command.dialog) {\n            if (typeof(state) === \"object\") {\n              command.dialog.show(state);\n            } else {\n              command.dialog.hide();\n            }\n          }\n        } else {\n          dom.removeClass(command.link, CLASS_NAME_COMMAND_ACTIVE);\n          if (command.group) {\n            dom.removeClass(command.group, CLASS_NAME_COMMAND_ACTIVE);\n          }\n          if (command.dialog) {\n            command.dialog.hide();\n          }\n        }\n      }\n      \n      for (i in actionMapping) {\n        action = actionMapping[i];\n        \n        if (action.name === \"change_view\") {\n          action.state = this.editor.currentView === this.editor.textarea;\n          if (action.state) {\n            dom.addClass(action.link, CLASS_NAME_ACTION_ACTIVE);\n          } else {\n            dom.removeClass(action.link, CLASS_NAME_ACTION_ACTIVE);\n          }\n        }\n      }\n    },\n\n    show: function() {\n      this.container.style.display = \"\";\n    },\n\n    hide: function() {\n      this.container.style.display = \"none\";\n    }\n  });\n  \n})(wysihtml5);\n/**\n * WYSIHTML5 Editor\n *\n * @param {Element} textareaElement Reference to the textarea which should be turned into a rich text interface\n * @param {Object} [config] See defaultConfig object below for explanation of each individual config option\n *\n * @events\n *    load\n *    beforeload (for internal use only)\n *    focus\n *    focus:composer\n *    focus:textarea\n *    blur\n *    blur:composer\n *    blur:textarea\n *    change\n *    change:composer\n *    change:textarea\n *    paste\n *    paste:composer\n *    paste:textarea\n *    newword:composer\n *    destroy:composer\n *    undo:composer\n *    redo:composer\n *    beforecommand:composer\n *    aftercommand:composer\n *    change_view\n */\n(function(wysihtml5) {\n  var undef;\n  \n  var defaultConfig = {\n    // Give the editor a name, the name will also be set as class name on the iframe and on the iframe's body \n    name:                 undef,\n    // Whether the editor should look like the textarea (by adopting styles)\n    style:                true,\n    // Id of the toolbar element, pass falsey value if you don't want any toolbar logic\n    toolbar:              undef,\n    // Whether urls, entered by the user should automatically become clickable-links\n    autoLink:             true,\n    // Object which includes parser rules to apply when html gets inserted via copy & paste\n    // See parser_rules/*.js for examples\n    parserRules:          { tags: { br: {}, span: {}, div: {}, p: {} }, classes: {} },\n    // Parser method to use when the user inserts content via copy & paste\n    parser:               wysihtml5.dom.parse,\n    // Class name which should be set on the contentEditable element in the created sandbox iframe, can be styled via the 'stylesheets' option\n    composerClassName:    \"wysihtml5-editor\",\n    // Class name to add to the body when the wysihtml5 editor is supported\n    bodyClassName:        \"wysihtml5-supported\",\n    // Array (or single string) of stylesheet urls to be loaded in the editor's iframe\n    stylesheets:          [],\n    // Placeholder text to use, defaults to the placeholder attribute on the textarea element\n    placeholderText:      undef,\n    // Whether the composer should allow the user to manually resize images, tables etc.\n    allowObjectResizing:  true,\n    // Whether the rich text editor should be rendered on touch devices (wysihtml5 >= 0.3.0 comes with basic support for iOS 5)\n    supportTouchDevices:  true\n  };\n  \n  wysihtml5.Editor = wysihtml5.lang.Dispatcher.extend(\n    /** @scope wysihtml5.Editor.prototype */ {\n    constructor: function(textareaElement, config) {\n      this.textareaElement  = typeof(textareaElement) === \"string\" ? document.getElementById(textareaElement) : textareaElement;\n      this.config           = wysihtml5.lang.object({}).merge(defaultConfig).merge(config).get();\n      this.textarea         = new wysihtml5.views.Textarea(this, this.textareaElement, this.config);\n      this.currentView      = this.textarea;\n      this._isCompatible    = wysihtml5.browser.supported();\n      \n      // Sort out unsupported/unwanted browsers here\n      if (!this._isCompatible || (!this.config.supportTouchDevices && wysihtml5.browser.isTouchDevice())) {\n        var that = this;\n        setTimeout(function() { that.fire(\"beforeload\").fire(\"load\"); }, 0);\n        return;\n      }\n      \n      // Add class name to body, to indicate that the editor is supported\n      wysihtml5.dom.addClass(document.body, this.config.bodyClassName);\n      \n      this.composer = new wysihtml5.views.Composer(this, this.textareaElement, this.config);\n      this.currentView = this.composer;\n      \n      if (typeof(this.config.parser) === \"function\") {\n        this._initParser();\n      }\n      \n      this.observe(\"beforeload\", function() {\n        this.synchronizer = new wysihtml5.views.Synchronizer(this, this.textarea, this.composer);\n        if (this.config.toolbar) {\n          this.toolbar = new wysihtml5.toolbar.Toolbar(this, this.config.toolbar);\n        }\n      });\n      \n      try {\n        console.log(\"Heya! This page is using wysihtml5 for rich text editing. Check out https://github.com/xing/wysihtml5\");\n      } catch(e) {}\n    },\n    \n    isCompatible: function() {\n      return this._isCompatible;\n    },\n\n    clear: function() {\n      this.currentView.clear();\n      return this;\n    },\n\n    getValue: function(parse) {\n      return this.currentView.getValue(parse);\n    },\n\n    setValue: function(html, parse) {\n      if (!html) {\n        return this.clear();\n      }\n      this.currentView.setValue(html, parse);\n      return this;\n    },\n\n    focus: function(setToEnd) {\n      this.currentView.focus(setToEnd);\n      return this;\n    },\n\n    /**\n     * Deactivate editor (make it readonly)\n     */\n    disable: function() {\n      this.currentView.disable();\n      return this;\n    },\n    \n    /**\n     * Activate editor\n     */\n    enable: function() {\n      this.currentView.enable();\n      return this;\n    },\n    \n    isEmpty: function() {\n      return this.currentView.isEmpty();\n    },\n    \n    hasPlaceholderSet: function() {\n      return this.currentView.hasPlaceholderSet();\n    },\n    \n    parse: function(htmlOrElement) {\n      var returnValue = this.config.parser(htmlOrElement, this.config.parserRules, this.composer.sandbox.getDocument(), true);\n      if (typeof(htmlOrElement) === \"object\") {\n        wysihtml5.quirks.redraw(htmlOrElement);\n      }\n      return returnValue;\n    },\n    \n    /**\n     * Prepare html parser logic\n     *  - Observes for paste and drop\n     */\n    _initParser: function() {\n      this.observe(\"paste:composer\", function() {\n        var keepScrollPosition  = true,\n            that                = this;\n        that.composer.selection.executeAndRestore(function() {\n          wysihtml5.quirks.cleanPastedHTML(that.composer.element);\n          that.parse(that.composer.element);\n        }, keepScrollPosition);\n      });\n      \n      this.observe(\"paste:textarea\", function() {\n        var value   = this.textarea.getValue(),\n            newValue;\n        newValue = this.parse(value);\n        this.textarea.setValue(newValue);\n      });\n    }\n  });\n})(wysihtml5);\n","!function($, wysi) {\n    \"use strict\";\n\n    var tpl = {\n        \"font-styles\": function(locale, options) {\n            var size = (options && options.size) ? ' btn-'+options.size : '';\n            return \"<li class='dropdown'>\" +\n              \"<a class='btn dropdown-toggle\" + size + \"' data-toggle='dropdown' href='#'>\" +\n              \"<i class='icon-font'></i>&nbsp;<span class='current-font'>\" + locale.font_styles.normal + \"</span>&nbsp;<b class='caret'></b>\" +\n              \"</a>\" +\n              \"<ul class='dropdown-menu'>\" +\n                \"<li><a data-wysihtml5-command='formatBlock' data-wysihtml5-command-value='div' tabindex='-1'>\" + locale.font_styles.normal + \"</a></li>\" +\n                \"<li><a data-wysihtml5-command='formatBlock' data-wysihtml5-command-value='h1' tabindex='-1'>\" + locale.font_styles.h1 + \"</a></li>\" +\n                \"<li><a data-wysihtml5-command='formatBlock' data-wysihtml5-command-value='h2' tabindex='-1'>\" + locale.font_styles.h2 + \"</a></li>\" +\n                \"<li><a data-wysihtml5-command='formatBlock' data-wysihtml5-command-value='h3' tabindex='-1'>\" + locale.font_styles.h3 + \"</a></li>\" +\n              \"</ul>\" +\n            \"</li>\";\n        },\n\n        \"emphasis\": function(locale, options) {\n            var size = (options && options.size) ? ' btn-'+options.size : '';\n            return \"<li>\" +\n              \"<div class='btn-group'>\" +\n                \"<a class='btn\" + size + \"' data-wysihtml5-command='bold' title='CTRL+B' tabindex='-1'>\" + locale.emphasis.bold + \"</a>\" +\n                \"<a class='btn\" + size + \"' data-wysihtml5-command='italic' title='CTRL+I' tabindex='-1'>\" + locale.emphasis.italic + \"</a>\" +\n                \"<a class='btn\" + size + \"' data-wysihtml5-command='underline' title='CTRL+U' tabindex='-1'>\" + locale.emphasis.underline + \"</a>\" +\n              \"</div>\" +\n            \"</li>\";\n        },\n\n        \"lists\": function(locale, options) {\n            var size = (options && options.size) ? ' btn-'+options.size : '';\n            return \"<li>\" +\n              \"<div class='btn-group'>\" +\n                \"<a class='btn\" + size + \"' data-wysihtml5-command='insertUnorderedList' title='\" + locale.lists.unordered + \"' tabindex='-1'><i class='icon-list'></i></a>\" +\n                \"<a class='btn\" + size + \"' data-wysihtml5-command='insertOrderedList' title='\" + locale.lists.ordered + \"' tabindex='-1'><i class='icon-th-list'></i></a>\" +\n                \"<a class='btn\" + size + \"' data-wysihtml5-command='Outdent' title='\" + locale.lists.outdent + \"' tabindex='-1'><i class='icon-indent-right'></i></a>\" +\n                \"<a class='btn\" + size + \"' data-wysihtml5-command='Indent' title='\" + locale.lists.indent + \"' tabindex='-1'><i class='icon-indent-left'></i></a>\" +\n              \"</div>\" +\n            \"</li>\";\n        },\n\n        \"link\": function(locale, options) {\n            var size = (options && options.size) ? ' btn-'+options.size : '';\n            return \"<li>\" +\n              \"<div class='bootstrap-wysihtml5-insert-link-modal modal hide fade'>\" +\n                \"<div class='modal-header'>\" +\n                  \"<a class='close' data-dismiss='modal'>&times;</a>\" +\n                  \"<h3>\" + locale.link.insert + \"</h3>\" +\n                \"</div>\" +\n                \"<div class='modal-body'>\" +\n                  \"<input value='http://' class='bootstrap-wysihtml5-insert-link-url input-xlarge'>\" +\n                \"</div>\" +\n                \"<div class='modal-footer'>\" +\n                  \"<a href='#' class='btn' data-dismiss='modal'>\" + locale.link.cancel + \"</a>\" +\n                  \"<a href='#' class='btn btn-primary' data-dismiss='modal'>\" + locale.link.insert + \"</a>\" +\n                \"</div>\" +\n              \"</div>\" +\n              \"<a class='btn\" + size + \"' data-wysihtml5-command='createLink' title='\" + locale.link.insert + \"' tabindex='-1'><i class='icon-share'></i></a>\" +\n            \"</li>\";\n        },\n\n        \"image\": function(locale, options) {\n            var size = (options && options.size) ? ' btn-'+options.size : '';\n            return \"<li>\" +\n              \"<div class='bootstrap-wysihtml5-insert-image-modal modal hide fade'>\" +\n                \"<div class='modal-header'>\" +\n                  \"<a class='close' data-dismiss='modal'>&times;</a>\" +\n                  \"<h3>\" + locale.image.insert + \"</h3>\" +\n                \"</div>\" +\n                \"<div class='modal-body'>\" +\n                  \"<input value='http://' class='bootstrap-wysihtml5-insert-image-url input-xlarge'>\" +\n                \"</div>\" +\n                \"<div class='modal-footer'>\" +\n                  \"<a href='#' class='btn' data-dismiss='modal'>\" + locale.image.cancel + \"</a>\" +\n                  \"<a href='#' class='btn btn-primary' data-dismiss='modal'>\" + locale.image.insert + \"</a>\" +\n                \"</div>\" +\n              \"</div>\" +\n              \"<a class='btn\" + size + \"' data-wysihtml5-command='insertImage' title='\" + locale.image.insert + \"' tabindex='-1'><i class='icon-picture'></i></a>\" +\n            \"</li>\";\n        },\n\n        \"html\": function(locale, options) {\n            var size = (options && options.size) ? ' btn-'+options.size : '';\n            return \"<li>\" +\n              \"<div class='btn-group'>\" +\n                \"<a class='btn\" + size + \"' data-wysihtml5-action='change_view' title='\" + locale.html.edit + \"' tabindex='-1'><i class='icon-pencil'></i></a>\" +\n              \"</div>\" +\n            \"</li>\";\n        },\n\n        \"color\": function(locale, options) {\n            var size = (options && options.size) ? ' btn-'+options.size : '';\n            return \"<li class='dropdown'>\" +\n              \"<a class='btn dropdown-toggle\" + size + \"' data-toggle='dropdown' href='#' tabindex='-1'>\" +\n                \"<span class='current-color'>\" + locale.colours.black + \"</span>&nbsp;<b class='caret'></b>\" +\n              \"</a>\" +\n              \"<ul class='dropdown-menu'>\" +\n                \"<li><div class='wysihtml5-colors' data-wysihtml5-command-value='black'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='black'>\" + locale.colours.black + \"</a></li>\" +\n                \"<li><div class='wysihtml5-colors' data-wysihtml5-command-value='silver'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='silver'>\" + locale.colours.silver + \"</a></li>\" +\n                \"<li><div class='wysihtml5-colors' data-wysihtml5-command-value='gray'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='gray'>\" + locale.colours.gray + \"</a></li>\" +\n                \"<li><div class='wysihtml5-colors' data-wysihtml5-command-value='maroon'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='maroon'>\" + locale.colours.maroon + \"</a></li>\" +\n                \"<li><div class='wysihtml5-colors' data-wysihtml5-command-value='red'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='red'>\" + locale.colours.red + \"</a></li>\" +\n                \"<li><div class='wysihtml5-colors' data-wysihtml5-command-value='purple'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='purple'>\" + locale.colours.purple + \"</a></li>\" +\n                \"<li><div class='wysihtml5-colors' data-wysihtml5-command-value='green'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='green'>\" + locale.colours.green + \"</a></li>\" +\n                \"<li><div class='wysihtml5-colors' data-wysihtml5-command-value='olive'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='olive'>\" + locale.colours.olive + \"</a></li>\" +\n                \"<li><div class='wysihtml5-colors' data-wysihtml5-command-value='navy'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='navy'>\" + locale.colours.navy + \"</a></li>\" +\n                \"<li><div class='wysihtml5-colors' data-wysihtml5-command-value='blue'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='blue'>\" + locale.colours.blue + \"</a></li>\" +\n                \"<li><div class='wysihtml5-colors' data-wysihtml5-command-value='orange'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='orange'>\" + locale.colours.orange + \"</a></li>\" +\n              \"</ul>\" +\n            \"</li>\";\n        }\n    };\n\n    var templates = function(key, locale, options) {\n        return tpl[key](locale, options);\n    };\n\n\n    var Wysihtml5 = function(el, options) {\n        this.el = el;\n        var toolbarOpts = options || defaultOptions;\n        for(var t in toolbarOpts.customTemplates) {\n          tpl[t] = toolbarOpts.customTemplates[t];\n        }\n        this.toolbar = this.createToolbar(el, toolbarOpts);\n        this.editor =  this.createEditor(options);\n\n        window.editor = this.editor;\n\n        $('iframe.wysihtml5-sandbox').each(function(i, el){\n            $(el.contentWindow).off('focus.wysihtml5').on({\n                'focus.wysihtml5' : function(){\n                    $('li.dropdown').removeClass('open');\n                }\n            });\n        });\n    };\n\n    Wysihtml5.prototype = {\n\n        constructor: Wysihtml5,\n\n        createEditor: function(options) {\n            options = options || {};\n            \n            // Add the toolbar to a clone of the options object so multiple instances\n            // of the WYISYWG don't break because \"toolbar\" is already defined\n            options = $.extend(true, {}, options);\n            options.toolbar = this.toolbar[0];\n\n            var editor = new wysi.Editor(this.el[0], options);\n\n            if(options && options.events) {\n                for(var eventName in options.events) {\n                    editor.on(eventName, options.events[eventName]);\n                }\n            }\n            return editor;\n        },\n\n        createToolbar: function(el, options) {\n            var self = this;\n            var toolbar = $(\"<ul/>\", {\n                'class' : \"wysihtml5-toolbar\",\n                'style': \"display:none\"\n            });\n            var culture = options.locale || defaultOptions.locale || \"en\";\n            for(var key in defaultOptions) {\n                var value = false;\n\n                if(options[key] !== undefined) {\n                    if(options[key] === true) {\n                        value = true;\n                    }\n                } else {\n                    value = defaultOptions[key];\n                }\n\n                if(value === true) {\n                    toolbar.append(templates(key, locale[culture], options));\n\n                    if(key === \"html\") {\n                        this.initHtml(toolbar);\n                    }\n\n                    if(key === \"link\") {\n                        this.initInsertLink(toolbar);\n                    }\n\n                    if(key === \"image\") {\n                        this.initInsertImage(toolbar);\n                    }\n                }\n            }\n\n            if(options.toolbar) {\n                for(key in options.toolbar) {\n                    toolbar.append(options.toolbar[key]);\n                }\n            }\n\n            toolbar.find(\"a[data-wysihtml5-command='formatBlock']\").click(function(e) {\n                var target = e.target || e.srcElement;\n                var el = $(target);\n                self.toolbar.find('.current-font').text(el.html());\n            });\n\n            toolbar.find(\"a[data-wysihtml5-command='foreColor']\").click(function(e) {\n                var target = e.target || e.srcElement;\n                var el = $(target);\n                self.toolbar.find('.current-color').text(el.html());\n            });\n\n            this.el.before(toolbar);\n\n            return toolbar;\n        },\n\n        initHtml: function(toolbar) {\n            var changeViewSelector = \"a[data-wysihtml5-action='change_view']\";\n            toolbar.find(changeViewSelector).click(function(e) {\n                toolbar.find('a.btn').not(changeViewSelector).toggleClass('disabled');\n            });\n        },\n\n        initInsertImage: function(toolbar) {\n            var self = this;\n            var insertImageModal = toolbar.find('.bootstrap-wysihtml5-insert-image-modal');\n            var urlInput = insertImageModal.find('.bootstrap-wysihtml5-insert-image-url');\n            var insertButton = insertImageModal.find('a.btn-primary');\n            var initialValue = urlInput.val();\n            var caretBookmark;\n\n            var insertImage = function() {\n                var url = urlInput.val();\n                urlInput.val(initialValue);\n                self.editor.currentView.element.focus();\n                if (caretBookmark) {\n                  self.editor.composer.selection.setBookmark(caretBookmark);\n                  caretBookmark = null;\n                }\n                self.editor.composer.commands.exec(\"insertImage\", url);\n            };\n\n            urlInput.keypress(function(e) {\n                if(e.which == 13) {\n                    insertImage();\n                    insertImageModal.modal('hide');\n                }\n            });\n\n            insertButton.click(insertImage);\n\n            insertImageModal.on('shown', function() {\n                urlInput.focus();\n            });\n\n            insertImageModal.on('hide', function() {\n                self.editor.currentView.element.focus();\n            });\n\n            toolbar.find('a[data-wysihtml5-command=insertImage]').click(function() {\n                var activeButton = $(this).hasClass(\"wysihtml5-command-active\");\n\n                if (!activeButton) {\n                    self.editor.currentView.element.focus(false);\n                    caretBookmark = self.editor.composer.selection.getBookmark();\n                    insertImageModal.appendTo('body').modal('show');\n                    insertImageModal.on('click.dismiss.modal', '[data-dismiss=\"modal\"]', function(e) {\n                        e.stopPropagation();\n                    });\n                    return false;\n                }\n                else {\n                    return true;\n                }\n            });\n        },\n\n        initInsertLink: function(toolbar) {\n            var self = this;\n            var insertLinkModal = toolbar.find('.bootstrap-wysihtml5-insert-link-modal');\n            var urlInput = insertLinkModal.find('.bootstrap-wysihtml5-insert-link-url');\n            var insertButton = insertLinkModal.find('a.btn-primary');\n            var initialValue = urlInput.val();\n            var caretBookmark;\n\n            var insertLink = function() {\n                var url = urlInput.val();\n                urlInput.val(initialValue);\n                self.editor.currentView.element.focus();\n                if (caretBookmark) {\n                  self.editor.composer.selection.setBookmark(caretBookmark);\n                  caretBookmark = null;\n                }\n                self.editor.composer.commands.exec(\"createLink\", {\n                    href: url,\n                    target: \"_blank\",\n                    rel: \"nofollow\"\n                });\n            };\n            var pressedEnter = false;\n\n            urlInput.keypress(function(e) {\n                if(e.which == 13) {\n                    insertLink();\n                    insertLinkModal.modal('hide');\n                }\n            });\n\n            insertButton.click(insertLink);\n\n            insertLinkModal.on('shown', function() {\n                urlInput.focus();\n            });\n\n            insertLinkModal.on('hide', function() {\n                self.editor.currentView.element.focus();\n            });\n\n            toolbar.find('a[data-wysihtml5-command=createLink]').click(function() {\n                var activeButton = $(this).hasClass(\"wysihtml5-command-active\");\n\n                if (!activeButton) {\n                    self.editor.currentView.element.focus(false);\n                    caretBookmark = self.editor.composer.selection.getBookmark();\n                    insertLinkModal.appendTo('body').modal('show');\n                    insertLinkModal.on('click.dismiss.modal', '[data-dismiss=\"modal\"]', function(e) {\n                        e.stopPropagation();\n                    });\n                    return false;\n                }\n                else {\n                    return true;\n                }\n            });\n        }\n    };\n\n    // these define our public api\n    var methods = {\n        resetDefaults: function() {\n            $.fn.wysihtml5.defaultOptions = $.extend(true, {}, $.fn.wysihtml5.defaultOptionsCache);\n        },\n        bypassDefaults: function(options) {\n            return this.each(function () {\n                var $this = $(this);\n                $this.data('wysihtml5', new Wysihtml5($this, options));\n            });\n        },\n        shallowExtend: function (options) {\n            var settings = $.extend({}, $.fn.wysihtml5.defaultOptions, options || {});\n            var that = this;\n            return methods.bypassDefaults.apply(that, [settings]);\n        },\n        deepExtend: function(options) {\n            var settings = $.extend(true, {}, $.fn.wysihtml5.defaultOptions, options || {});\n            var that = this;\n            return methods.bypassDefaults.apply(that, [settings]);\n        },\n        init: function(options) {\n            var that = this;\n            return methods.shallowExtend.apply(that, [options]);\n        }\n    };\n\n    $.fn.wysihtml5 = function ( method ) {\n        if ( methods[method] ) {\n            return methods[method].apply( this, Array.prototype.slice.call( arguments, 1 ));\n        } else if ( typeof method === 'object' || ! method ) {\n            return methods.init.apply( this, arguments );\n        } else {\n            $.error( 'Method ' +  method + ' does not exist on jQuery.wysihtml5' );\n        }    \n    };\n\n    $.fn.wysihtml5.Constructor = Wysihtml5;\n\n    var defaultOptions = $.fn.wysihtml5.defaultOptions = {\n        \"font-styles\": true,\n        \"color\": false,\n        \"emphasis\": true,\n        \"lists\": true,\n        \"html\": false,\n        \"link\": true,\n        \"image\": true,\n        events: {},\n        parserRules: {\n            classes: {\n                // (path_to_project/lib/css/wysiwyg-color.css)\n                \"wysiwyg-color-silver\" : 1,\n                \"wysiwyg-color-gray\" : 1,\n                \"wysiwyg-color-white\" : 1,\n                \"wysiwyg-color-maroon\" : 1,\n                \"wysiwyg-color-red\" : 1,\n                \"wysiwyg-color-purple\" : 1,\n                \"wysiwyg-color-fuchsia\" : 1,\n                \"wysiwyg-color-green\" : 1,\n                \"wysiwyg-color-lime\" : 1,\n                \"wysiwyg-color-olive\" : 1,\n                \"wysiwyg-color-yellow\" : 1,\n                \"wysiwyg-color-navy\" : 1,\n                \"wysiwyg-color-blue\" : 1,\n                \"wysiwyg-color-teal\" : 1,\n                \"wysiwyg-color-aqua\" : 1,\n                \"wysiwyg-color-orange\" : 1\n            },\n            tags: {\n                \"b\":  {},\n                \"i\":  {},\n                \"br\": {},\n                \"ol\": {},\n                \"ul\": {},\n                \"li\": {},\n                \"h1\": {},\n                \"h2\": {},\n                \"h3\": {},\n                \"blockquote\": {},\n                \"u\": 1,\n                \"img\": {\n                    \"check_attributes\": {\n                        \"width\": \"numbers\",\n                        \"alt\": \"alt\",\n                        \"src\": \"url\",\n                        \"height\": \"numbers\"\n                    }\n                },\n                \"a\":  {\n                    set_attributes: {\n                        target: \"_blank\",\n                        rel:    \"nofollow\"\n                    },\n                    check_attributes: {\n                        href:   \"url\" // important to avoid XSS\n                    }\n                },\n                \"span\": 1,\n                \"div\": 1,\n                // to allow save and edit files with code tag hacks\n                \"code\": 1,\n                \"pre\": 1\n            }\n        },\n        stylesheets: [\"./lib/css/wysiwyg-color.css\"], // (path_to_project/lib/css/wysiwyg-color.css)\n        locale: \"en\"\n    };\n\n    if (typeof $.fn.wysihtml5.defaultOptionsCache === 'undefined') {\n        $.fn.wysihtml5.defaultOptionsCache = $.extend(true, {}, $.fn.wysihtml5.defaultOptions);\n    }\n\n    var locale = $.fn.wysihtml5.locale = {\n        en: {\n            font_styles: {\n                normal: \"Normal text\",\n                h1: \"Heading 1\",\n                h2: \"Heading 2\",\n                h3: \"Heading 3\"\n            },\n            emphasis: {\n                bold: \"Bold\",\n                italic: \"Italic\",\n                underline: \"Underline\"\n            },\n            lists: {\n                unordered: \"Unordered list\",\n                ordered: \"Ordered list\",\n                outdent: \"Outdent\",\n                indent: \"Indent\"\n            },\n            link: {\n                insert: \"Insert link\",\n                cancel: \"Cancel\"\n            },\n            image: {\n                insert: \"Insert image\",\n                cancel: \"Cancel\"\n            },\n            html: {\n                edit: \"Edit HTML\"\n            },\n            colours: {\n                black: \"Black\",\n                silver: \"Silver\",\n                gray: \"Grey\",\n                maroon: \"Maroon\",\n                red: \"Red\",\n                purple: \"Purple\",\n                green: \"Green\",\n                olive: \"Olive\",\n                navy: \"Navy\",\n                blue: \"Blue\",\n                orange: \"Orange\"\n            }\n        }\n    };\n\n}(jQuery, wysihtml5);\n"]}}]