{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]},{"source":"../api/brimChar.js","imported":["Characters"],"specifiers":[{"kind":"named","imported":"Characters","local":"Characters"}]},{"source":"../api/brimChar.js","imported":["inventorydb"],"specifiers":[{"kind":"named","imported":"inventorydb","local":"inventorydb"}]},{"source":"./char-list.html","imported":[],"specifiers":[]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/ui/char-list.js","filenameRelative":"/imports/ui/char-list.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/ui/char-list.js.map","sourceFileName":"/imports/ui/char-list.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"char-list"},"ignored":false,"code":"var _templating = require('meteor/templating');\n\nvar _brimChar = require('../api/brimChar.js');\n\nrequire('./char-list.html');\n\n// # Destroy old editable if it exists\n\n_templating.Template.main.helpers({ //try clist\n\n  Characters: function () {\n    function Characters() {\n      return _brimChar.Characters.find({}, { sort: { createdAt: +1 } });\n    }\n\n    return Characters;\n  }()\n});\n\n_templating.Template.main.events({\n  'click .clear': function () {\n    function clickClear() {}\n\n    return clickClear;\n  }(),\n  'click .save': function () {\n    function clickSave(event) {\n      //prevent defaulting submit\n      event.preventDefault();\n\n      var name = document.getElementById('name').value;\n      var type = document.getElementById('type').value;\n      //const type = target.type.value;\n      var tempCharacter = new person(name, type);\n      // var tempInv = new invBuild();\n\n      // inventorydb.insert({\n      //   owner: name,\n      //   createdAt: new Date(),\n      //   name: \"item\",\n\n      // });\n      //Insert new char data to collection characters (in brimChar.js)\n      _brimChar.Characters.insert(tempCharacter, {\n        // name: tex\n        // createdAt: new Date(),\n      });\n\n      alert(\"Your Character: \" + name + \" has been saved!\");\n\n      //clear name from input\n      // target.name.value = '';\n      //target.class.value = '';\n\n      //alert(tempCharacter.getInfo());\n      document.getElementById('name').value = \"\";\n    }\n\n    return clickSave;\n  }()\n});\n\n_templating.Template.charlist.helpers({\n  // tempchar() {\n  //  \treturn Characters.findOne({name});\n  //  },\n});\n\n_templating.Template.charlist.events({\n  // 'click .toggle-checked'() {\n  //   // Set the checked property to the opposite of its current value\n  //   Tasks.update(this._id, {\n  //     $set: { checked: ! this.checked },\n  //   });\n  // },\n\n  'click .delete': function () {\n    function clickDelete() {\n\n      _brimChar.Characters.remove(this._id);\n    }\n\n    return clickDelete;\n  }(),\n  'click .edit': function () {\n    function clickEdit() {\n\n      _brimChar.Characters.update(this._id, {\n        $set: { activeChar: true }\n      });\n\n      FlowRouter.go('/Details');\n    }\n\n    return clickEdit;\n  }()\n});\n\n_templating.Template.charinfo.onCreated(function () {\n  var self = this;\n  self.autorun(function () {\n    self.subscribe('Characters');\n  });\n});\n\n_templating.Template.charinfo.helpers({\n  activeCharacter: function () {\n    function activeCharacter() {\n      var output;\n      var cursor = _brimChar.Characters.find();\n      cursor.forEach(function (doc) {\n        if (doc.activeChar == true) {\n          output = doc;\n        }\n      });\n      return output;\n    }\n\n    return activeCharacter;\n  }()\n});\n\n// inventory() {\n//  var char = activeCharacter();\n//  var inv = inventorydb.find({owner: this._id});\n//  return inv;\n// },\n\n// returns all keys and props of object\n// activeAtt() {\n//  var atts = [];\n//  var char = activeCharacter();\n//  for (var key in char) {\n//    var obj = char[key];\n//    for (var prop in obj) {\n//      atts.push({key : key, prop: prop});\n//    };\n//  };\n//  return atts;\n// },\n\n_templating.Template.charinfo.events({\n  'click .back': function () {\n    function clickBack() {\n      _brimChar.Characters.update(this._id, {\n        $set: { activeChar: false }\n      });\n      FlowRouter.go('home');\n    }\n\n    return clickBack;\n  }()\n});\n\n// 'click td'(event) {\n//   var target = event.target;\n//   var self = target.innerHTML;\n//   var res = prompt('new val');\n\n//    Characters.update(this._id,{\n\n//    });\n// },\n\n_templating.Template.inventoryitem.helpers({});\n\n_templating.Template.inventoryitem.events({\n  'click .delete': function () {\n    function clickDelete() {\n\n      _brimChar.inventorydb.remove(this._id);\n\n      // Characters.update(this._id, {\n      //       $set: {activeChar: false},\n      // });\n    }\n\n    return clickDelete;\n  }()\n});\n\n_templating.Template.Equipment.helpers({\n  inventory: function () {\n    function inventory() {\n\n      var char = activeCharacter();\n      var inv = _brimChar.inventorydb.find({ owner: this._id });\n      return inv;\n    }\n\n    return inventory;\n  }(),\n  itemWeight: function () {\n    function itemWeight() {\n\n      var char = activeCharacter();\n      var count = 0;\n      var max = count + \" / \" + char.maxWeight;\n      var inv = _brimChar.inventorydb.find({ owner: this._id });\n\n      for (var items in meteorBabelHelpers.sanitizeForInObject(inv)) {\n        count += inv[items].weight;\n        alert(inv[0].weight);\n      }\n      return max;\n    }\n\n    return itemWeight;\n  }()\n});\n\n_templating.Template.Equipment.events({\n  'click .newitem': function () {\n    function clickNewitem() {\n\n      var itemName = prompt(\"item name?\");\n      var slots = prompt(\"how many upgrade slots?\");\n      var weight = prompt(\"weight of \" + itemName + \"?\");\n      var val = prompt(\"worth of \" + itemName + \"?\");\n      var desc = prompt(\"Describe \" + itemName + \":\");\n      var itemres = basicInv(this._id, itemName, slots, weight, val, desc);\n      _brimChar.inventorydb.insert(itemres, {});\n    }\n\n    return clickNewitem;\n  }()\n});\n\n// Classes and functions\n\nfunction person(name, type) {\n  // var invBuild = invBuild();\n  var doc = {\n    name: name,\n    'class': type,\n    lvl: 1,\n    inventory: name,\n    agility: 1,\n    strength: 1,\n    health: 10,\n    defense: 5,\n    armor: 0,\n    cunning: 0,\n    lore: 0,\n    sanity: 0,\n    willpower: 0,\n    Sarmor: 0,\n    spirit: 0,\n    luck: 0,\n    melee: 0,\n    combat: 0,\n    range: 0,\n    maxGrit: 0,\n    initiative: 0,\n    corruption: 1,\n    darkStone: 0,\n    maxWeight: 10,\n    gold: 100,\n    exp: 1000,\n    move: 1\n  };\n  return doc;\n}\n\nfunction basicInv(owner, name, slots, weight, val, desc) {\n  var item = {\n    \"owner\": owner,\n    \"name\": name,\n    \"type\": \"equipment\",\n    \"keys\": \"item\",\n    \"upgradeSlots\": slots,\n    \"weight\": weight,\n    \"value\": val,\n    \"desc\": desc\n  };\n  return item;\n};\n\n// function invBuild() {\n//   var item1 = new basicInv(this._id,\"Mr. Sword\");\n//   var item2 = new basicInv(this._id,\"Shield\");\n//   var item3 = new basicInv(this._id,\"Dagger\");\n//   var arr = [item1,item2,item3];\n//   return arr;\n// };\n\nfunction activeCharacter() {\n  var output;\n  var cursor = _brimChar.Characters.find();\n  cursor.forEach(function (doc) {\n    if (doc.activeChar == true) {\n      output = doc;\n    }\n  });\n  return output;\n};","ast":null,"map":{"version":3,"sources":["/imports/ui/char-list.js"],"names":[],"mappings":"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","file":"/imports/ui/char-list.js.map","sourcesContent":["import { Template } from 'meteor/templating';\nimport { Characters } from '../api/brimChar.js';\nimport { inventorydb } from '../api/brimChar.js';\n \nimport './char-list.html';\n\n\n  \n\n    // # Destroy old editable if it exists\n    \n\n\nTemplate.main.helpers({ //try clist\n  Characters() {\n    return Characters.find({}, { sort: { createdAt: +1 } });\n  },\n});\n\nTemplate.main.events({\n\n  'click .clear' (){\n\n  },\n\n  'click .save'(event) {\n    //prevent defaulting submit\n    event.preventDefault();\n\n    const name = document.getElementById('name').value;\n    const type = document.getElementById('type').value;\n    //const type = target.type.value;\n    var tempCharacter = new person(name,type);\n    // var tempInv = new invBuild();\n\n    // inventorydb.insert({\n    //   owner: name,\n    //   createdAt: new Date(),\n    //   name: \"item\",\n      \n    // });\n    //Insert new char data to collection characters (in brimChar.js)\n    Characters.insert(tempCharacter,{ \n      // name: tex\n      // createdAt: new Date(),\n    });\n\n    alert(\"Your Character: \" + name + \" has been saved!\");\n\n    //clear name from input\n   // target.name.value = '';\n    //target.class.value = '';\n\n    //alert(tempCharacter.getInfo());\n    document.getElementById('name').value = \"\";\n\n\n  },\n});\n\nTemplate.charlist.helpers({\n\t// tempchar() {\n //  \treturn Characters.findOne({name});\n //  },\n});\n\nTemplate.charlist.events({\n  // 'click .toggle-checked'() {\n  //   // Set the checked property to the opposite of its current value\n  //   Tasks.update(this._id, {\n  //     $set: { checked: ! this.checked },\n  //   });\n  // },\n  'click .delete'() {\n\n    Characters.remove(this._id);\n  },\n\n  'click .edit'() {\n\n    Characters.update(this._id, {\n      $set: {activeChar: true},\n    });\n\n  \tFlowRouter.go('/Details');\n  },\n});\n\nTemplate.charinfo.onCreated(function() {\n  var self = this;\n  self.autorun(function () {\n    self.subscribe('Characters');\n  });\n});\n\nTemplate.charinfo.helpers({\n\n activeCharacter(){\n  var output;\n  var cursor = Characters.find();\n  cursor.forEach(function(doc){\n    if (doc.activeChar == true) {\n      output = doc;\n    }\n  });\n  return output;\n   },\n\n   // inventory() {\n   //  var char = activeCharacter();\n   //  var inv = inventorydb.find({owner: this._id});\n   //  return inv;\n   // },\n\n// returns all keys and props of object\n   // activeAtt() {\n   //  var atts = [];\n   //  var char = activeCharacter();\n   //  for (var key in char) {\n   //    var obj = char[key];\n   //    for (var prop in obj) {\n   //      atts.push({key : key, prop: prop});\n   //    };\n   //  };\n   //  return atts;\n   // },\n\n\n});\n\nTemplate.charinfo.events({\n\n  'click .back'(){\n  Characters.update(this._id, {\n        $set: {activeChar: false},\n      });\n  FlowRouter.go('home');\n  },\n  \n\n  // 'click td'(event) {\n  //   var target = event.target;\n  //   var self = target.innerHTML;\n  //   var res = prompt('new val');\n\n  //    Characters.update(this._id,{\n\n  //    });\n  // },\n  \n});\n\n\nTemplate.inventoryitem.helpers({\n\n});\n\nTemplate.inventoryitem.events({\n\n  'click .delete'(){\n\n    inventorydb.remove(this._id);\n\n  // Characters.update(this._id, {\n  //       $set: {activeChar: false},\n      // });\n    },\n});\n\n\nTemplate.Equipment.helpers({\n  inventory() {\n    \n    var char = activeCharacter();\n    var inv = inventorydb.find({owner: this._id});\n    return inv;\n\n   },\n   itemWeight() {\n\n    var char = activeCharacter();\n    var count = 0;\n    var max = count + \" / \" + char.maxWeight;\n    var inv = inventorydb.find({owner: this._id});\n\n    for (var items in inv) {\n      count += inv[items].weight;\n      alert(inv[0].weight);\n    }\n     return max;\n   },\n\n});\n\nTemplate.Equipment.events({\n  'click .newitem'(){\n\n    var itemName = prompt(\"item name?\");\n    var slots = prompt(\"how many upgrade slots?\");\n    const weight = prompt(\"weight of \" + itemName + \"?\");\n    var val = prompt(\"worth of \" + itemName + \"?\");\n    var desc = prompt(\"Describe \" + itemName + \":\");\n    var itemres = basicInv(this._id,itemName,slots,weight,val,desc);\n    inventorydb.insert(itemres,{\n\n    });\n  },\n});\n\n// Classes and functions\n\nfunction person(name, type) {\n  // var invBuild = invBuild();\n  var doc = {\n    name: name,\n    class: type,\n    lvl: 1,\n    inventory: name,\n    agility: 1,\n    strength: 1,\n    health: 10,\n    defense: 5,\n    armor: 0,\n    cunning: 0,\n    lore: 0,\n    sanity: 0,\n    willpower: 0,\n    Sarmor: 0,\n    spirit: 0,\n    luck: 0,\n    melee: 0,\n    combat: 0,\n    range: 0,\n    maxGrit: 0,\n    initiative: 0,\n    corruption: 1,\n    darkStone: 0,\n    maxWeight: 10,\n    gold: 100,\n    exp: 1000,\n    move: 1,\n  }\n  return doc;\n}\n\nfunction basicInv(owner,name,slots,weight,val,desc)  {\n   var item = {\n    \"owner\": owner,\n    \"name\": name,\n    \"type\": \"equipment\",\n    \"keys\": \"item\",\n    \"upgradeSlots\":  slots,\n    \"weight\": weight,\n    \"value\": val,\n    \"desc\": desc,\n  }\n  return item;\n};\n\n// function invBuild() {\n//   var item1 = new basicInv(this._id,\"Mr. Sword\");\n//   var item2 = new basicInv(this._id,\"Shield\");\n//   var item3 = new basicInv(this._id,\"Dagger\");\n//   var arr = [item1,item2,item3];\n//   return arr;\n// };\n\nfunction activeCharacter(){\n  var output;\n  var cursor = Characters.find();\n  cursor.forEach(function(doc){\n    if (doc.activeChar == true) {\n      output = doc;\n    }\n  });\n  return output;\n   };\n"]},"hash":"434cdae1ef1399b01b6dfa721c00eb8b013abca4"}
